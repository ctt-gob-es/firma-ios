//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/Color.java
//

#include "Color.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Messages.h"
#include "Transparency.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "Color must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtColor () {
 @public
  /*!
   @brief Float sRGB value.
   */
  IOSFloatArray *frgbvalue_;
  /*!
   @brief Color in an arbitrary color space with <code>float</code> components.If
  null, other value should be used.
   */
  IOSFloatArray *fvalue_;
  /*!
   @brief Float alpha value.If frgbvalue is null, this is not valid data.
   */
  jfloat falpha_;
}

@end

J2OBJC_FIELD_SETTER(HarmonyJavaAwtColor, frgbvalue_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(HarmonyJavaAwtColor, fvalue_, IOSFloatArray *)

inline jlong HarmonyJavaAwtColor_get_serialVersionUID(void);
#define HarmonyJavaAwtColor_serialVersionUID 118526816881161077LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColor, serialVersionUID, jlong)

/*!
 @brief The color's color space if applicable.
 */
inline jdouble HarmonyJavaAwtColor_get_SCALE_FACTOR(void);
#define HarmonyJavaAwtColor_SCALE_FACTOR 0.7
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColor, SCALE_FACTOR, jdouble)

inline jint HarmonyJavaAwtColor_get_MIN_SCALABLE(void);
#define HarmonyJavaAwtColor_MIN_SCALABLE 3
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtColor, MIN_SCALABLE, jint)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/Color.java"

J2OBJC_INITIALIZED_DEFN(HarmonyJavaAwtColor)

HarmonyJavaAwtColor *HarmonyJavaAwtColor_white;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_WHITE;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_lightGray;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_LIGHT_GRAY;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_gray;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_GRAY;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_darkGray;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_DARK_GRAY;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_black;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_BLACK;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_red;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_RED;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_pink;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_PINK;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_orange;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_ORANGE;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_yellow;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_YELLOW;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_green;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_GREEN;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_magenta;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_MAGENTA;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_cyan;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_CYAN;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_blue;
HarmonyJavaAwtColor *HarmonyJavaAwtColor_BLUE;


#line 30
@implementation HarmonyJavaAwtColor


#line 164
- (instancetype)initWithInt:(jint)rgba
                withBoolean:(jboolean)hasAlpha {
  HarmonyJavaAwtColor_initWithInt_withBoolean_(self, rgba, hasAlpha);
  return self;
}


#line 172
- (instancetype)initWithInt:(jint)r
                    withInt:(jint)g
                    withInt:(jint)b
                    withInt:(jint)a {
  HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(self, r, g, b, a);
  return self;
}

- (instancetype)initWithInt:(jint)r
                    withInt:(jint)g
                    withInt:(jint)b {
  HarmonyJavaAwtColor_initWithInt_withInt_withInt_(self, r, g, b);
  return self;
}


#line 189
- (instancetype)initWithInt:(jint)rgb {
  HarmonyJavaAwtColor_initWithInt_(self, rgb);
  return self;
}


#line 193
- (instancetype)initWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b
                    withFloat:(jfloat)a {
  HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(self, r, g, b, a);
  return self;
}


#line 203
- (instancetype)initWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b {
  HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(self, r, g, b);
  return self;
}


#line 221
- (NSString *)description {
  
#line 230
  return JreStrcat("$$I$I$IC", [[self java_getClass] getName], @"[r=", [self getRed], @",g=",
#line 231
  [self getGreen], @",b=",
#line 232
  [self getBlue], ']');
}


#line 236
- (jboolean)isEqual:(id)obj {
  
#line 238
  if ([obj isKindOfClass:[HarmonyJavaAwtColor class]]) {
    return ((HarmonyJavaAwtColor *) nil_chk(((HarmonyJavaAwtColor *) obj)))->value_ == self->value_;
  }
  return false;
}


#line 286
- (HarmonyJavaAwtColor *)darker {
  return new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(JreFpToInt(([self getRed] * HarmonyJavaAwtColor_SCALE_FACTOR)), JreFpToInt(([self getGreen] * HarmonyJavaAwtColor_SCALE_FACTOR)), JreFpToInt(
#line 288
  ([self getBlue] * HarmonyJavaAwtColor_SCALE_FACTOR)));
}


#line 291
- (HarmonyJavaAwtColor *)brighter {
  
#line 293
  jint r = [self getRed];
  jint b = [self getBlue];
  jint g = [self getGreen];
  
#line 297
  if (r == 0 && b == 0 && g == 0) {
    return new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(HarmonyJavaAwtColor_MIN_SCALABLE, HarmonyJavaAwtColor_MIN_SCALABLE, HarmonyJavaAwtColor_MIN_SCALABLE);
  }
  
#line 301
  if (r < HarmonyJavaAwtColor_MIN_SCALABLE && r != 0) {
    r = HarmonyJavaAwtColor_MIN_SCALABLE;
  }
  else {
    
#line 304
    r = JreFpToInt((r / HarmonyJavaAwtColor_SCALE_FACTOR));
    r = (r > 255) ? 255 : r;
  }
  
#line 308
  if (b < HarmonyJavaAwtColor_MIN_SCALABLE && b != 0) {
    b = HarmonyJavaAwtColor_MIN_SCALABLE;
  }
  else {
    
#line 311
    b = JreFpToInt((b / HarmonyJavaAwtColor_SCALE_FACTOR));
    b = (b > 255) ? 255 : b;
  }
  
#line 315
  if (g < HarmonyJavaAwtColor_MIN_SCALABLE && g != 0) {
    g = HarmonyJavaAwtColor_MIN_SCALABLE;
  }
  else {
    
#line 318
    g = JreFpToInt((g / HarmonyJavaAwtColor_SCALE_FACTOR));
    g = (g > 255) ? 255 : g;
  }
  
#line 322
  return new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(r, g, b);
}


#line 325
- (IOSFloatArray *)getRGBComponentsWithFloatArray:(IOSFloatArray *)components {
  if (components == nil) {
    components = [IOSFloatArray newArrayWithLength:4];
  }
  
#line 330
  if (frgbvalue_ != nil) {
    *IOSFloatArray_GetRef(components, 3) = falpha_;
  }
  else {
    
#line 333
    *IOSFloatArray_GetRef(components, 3) = [self getAlpha] / 255.0f;
  }
  
#line 336
  (void) [self getRGBColorComponentsWithFloatArray:components];
  
#line 338
  return components;
}


#line 341
- (IOSFloatArray *)getRGBColorComponentsWithFloatArray:(IOSFloatArray *)components {
  if (components == nil) {
    components = [IOSFloatArray newArrayWithLength:3];
  }
  
#line 346
  if (frgbvalue_ != nil) {
    *IOSFloatArray_GetRef(components, 2) = IOSFloatArray_Get(frgbvalue_, 2);
    *IOSFloatArray_GetRef(components, 1) = IOSFloatArray_Get(frgbvalue_, 1);
    *IOSFloatArray_GetRef(components, 0) = IOSFloatArray_Get(frgbvalue_, 0);
  }
  else {
    
#line 351
    *IOSFloatArray_GetRef(components, 2) = [self getBlue] / 255.0f;
    *IOSFloatArray_GetRef(components, 1) = [self getGreen] / 255.0f;
    *IOSFloatArray_GetRef(components, 0) = [self getRed] / 255.0f;
  }
  
#line 356
  return components;
}


#line 359
- (IOSFloatArray *)getComponentsWithFloatArray:(IOSFloatArray *)components {
  if (fvalue_ == nil) {
    return [self getRGBComponentsWithFloatArray:components];
  }
  
#line 364
  jint nColorComps = fvalue_->size_;
  
#line 366
  if (components == nil) {
    components = [IOSFloatArray newArrayWithLength:nColorComps + 1];
  }
  
#line 370
  (void) [self getColorComponentsWithFloatArray:components];
  
#line 372
  *IOSFloatArray_GetRef(components, nColorComps) = falpha_;
  
#line 374
  return components;
}


#line 377
- (IOSFloatArray *)getColorComponentsWithFloatArray:(IOSFloatArray *)components {
  if (fvalue_ == nil) {
    return [self getRGBColorComponentsWithFloatArray:components];
  }
  
#line 382
  if (components == nil) {
    components = [IOSFloatArray newArrayWithLength:fvalue_->size_];
  }
  
#line 386
  for (jint i = 0; i < fvalue_->size_; i++) {
    *IOSFloatArray_GetRef(components, i) = IOSFloatArray_Get(fvalue_, i);
  }
  
#line 390
  return components;
}


#line 393
- (NSUInteger)hash {
  
#line 395
  return value_;
}


#line 398
- (jint)getTransparency {
  switch ([self getAlpha]) {
    case (jint) 0xff:
    return HarmonyJavaAwtTransparency_OPAQUE;
    case 0:
    return HarmonyJavaAwtTransparency_BITMASK;
    default:
    return HarmonyJavaAwtTransparency_TRANSLUCENT;
  }
}

- (jint)getRed {
  return (JreRShift32(value_, 16)) & (jint) 0xFF;
}

- (jint)getRGB {
  return value_;
}

- (jint)getGreen {
  return (JreRShift32(value_, 8)) & (jint) 0xFF;
}

- (jint)getBlue {
  return value_ & (jint) 0xFF;
}

- (jint)getAlpha {
  return (JreRShift32(value_, 24)) & (jint) 0xFF;
}

+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm
                      withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)def {
  return HarmonyJavaAwtColor_getColorWithNSString_withHarmonyJavaAwtColor_(nm, def);
}


#line 439
+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm
                                      withInt:(jint)def {
  return HarmonyJavaAwtColor_getColorWithNSString_withInt_(nm, def);
}


#line 449
+ (HarmonyJavaAwtColor *)getColorWithNSString:(NSString *)nm {
  return HarmonyJavaAwtColor_getColorWithNSString_(nm);
}


#line 459
+ (HarmonyJavaAwtColor *)decodeWithNSString:(NSString *)nm {
  return HarmonyJavaAwtColor_decodeWithNSString_(nm);
}


#line 464
+ (HarmonyJavaAwtColor *)getHSBColorWithFloat:(jfloat)h
                                    withFloat:(jfloat)s
                                    withFloat:(jfloat)b {
  return HarmonyJavaAwtColor_getHSBColorWithFloat_withFloat_withFloat_(h, s, b);
}


#line 468
+ (IOSFloatArray *)RGBtoHSBWithInt:(jint)r
                           withInt:(jint)g
                           withInt:(jint)b
                    withFloatArray:(IOSFloatArray *)hsbvals {
  return HarmonyJavaAwtColor_RGBtoHSBWithInt_withInt_withInt_withFloatArray_(r, g, b, hsbvals);
}


#line 510
+ (jint)HSBtoRGBWithFloat:(jfloat)hue
                withFloat:(jfloat)saturation
                withFloat:(jfloat)brightness {
  return HarmonyJavaAwtColor_HSBtoRGBWithFloat_withFloat_withFloat_(hue, saturation, brightness);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 15, 16, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 15, 17, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 15, 18, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 19, 18, 20, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtColor;", 0x9, 21, 5, -1, -1, -1, -1 },
    { NULL, "[F", 0x9, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 24, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withBoolean:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(initWithInt:withInt:withInt:);
  methods[3].selector = @selector(initWithInt:);
  methods[4].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:);
  methods[5].selector = @selector(initWithFloat:withFloat:withFloat:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(darker);
  methods[9].selector = @selector(brighter);
  methods[10].selector = @selector(getRGBComponentsWithFloatArray:);
  methods[11].selector = @selector(getRGBColorComponentsWithFloatArray:);
  methods[12].selector = @selector(getComponentsWithFloatArray:);
  methods[13].selector = @selector(getColorComponentsWithFloatArray:);
  methods[14].selector = @selector(hash);
  methods[15].selector = @selector(getTransparency);
  methods[16].selector = @selector(getRed);
  methods[17].selector = @selector(getRGB);
  methods[18].selector = @selector(getGreen);
  methods[19].selector = @selector(getBlue);
  methods[20].selector = @selector(getAlpha);
  methods[21].selector = @selector(getColorWithNSString:withHarmonyJavaAwtColor:);
  methods[22].selector = @selector(getColorWithNSString:withInt:);
  methods[23].selector = @selector(getColorWithNSString:);
  methods[24].selector = @selector(decodeWithNSString:);
  methods[25].selector = @selector(getHSBColorWithFloat:withFloat:withFloat:);
  methods[26].selector = @selector(RGBtoHSBWithInt:withInt:withInt:withFloatArray:);
  methods[27].selector = @selector(HSBtoRGBWithFloat:withFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtColor_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "white", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "WHITE", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "lightGray", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "LIGHT_GRAY", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "gray", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "GRAY", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "darkGray", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "DARK_GRAY", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "black", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "BLACK", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "red", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "RED", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "pink", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "PINK", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "orange", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "ORANGE", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "yellow", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "YELLOW", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "green", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "GREEN", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "magenta", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "MAGENTA", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "cyan", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "CYAN", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "blue", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "BLUE", "LHarmonyJavaAwtColor;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "value_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "frgbvalue_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fvalue_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "falpha_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SCALE_FACTOR", "D", .constantValue.asDouble = HarmonyJavaAwtColor_SCALE_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "MIN_SCALABLE", "I", .constantValue.asInt = HarmonyJavaAwtColor_MIN_SCALABLE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IZ", "IIII", "III", "I", "FFFF", "FFF", "toString", "equals", "LNSObject;", "getRGBComponents", "[F", "getRGBColorComponents", "getComponents", "getColorComponents", "hashCode", "getColor", "LNSString;LHarmonyJavaAwtColor;", "LNSString;I", "LNSString;", "decode", "LJavaLangNumberFormatException;", "getHSBColor", "RGBtoHSB", "III[F", "HSBtoRGB", &HarmonyJavaAwtColor_white, &HarmonyJavaAwtColor_WHITE, &HarmonyJavaAwtColor_lightGray, &HarmonyJavaAwtColor_LIGHT_GRAY, &HarmonyJavaAwtColor_gray, &HarmonyJavaAwtColor_GRAY, &HarmonyJavaAwtColor_darkGray, &HarmonyJavaAwtColor_DARK_GRAY, &HarmonyJavaAwtColor_black, &HarmonyJavaAwtColor_BLACK, &HarmonyJavaAwtColor_red, &HarmonyJavaAwtColor_RED, &HarmonyJavaAwtColor_pink, &HarmonyJavaAwtColor_PINK, &HarmonyJavaAwtColor_orange, &HarmonyJavaAwtColor_ORANGE, &HarmonyJavaAwtColor_yellow, &HarmonyJavaAwtColor_YELLOW, &HarmonyJavaAwtColor_green, &HarmonyJavaAwtColor_GREEN, &HarmonyJavaAwtColor_magenta, &HarmonyJavaAwtColor_MAGENTA, &HarmonyJavaAwtColor_cyan, &HarmonyJavaAwtColor_CYAN, &HarmonyJavaAwtColor_blue, &HarmonyJavaAwtColor_BLUE };
  static const J2ObjcClassInfo _HarmonyJavaAwtColor = { "Color", "harmony.java.awt", ptrTable, methods, fields, 7, 0x1, 28, 33, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtColor;
}

+ (void)initialize {
  if (self == [HarmonyJavaAwtColor class]) {
    HarmonyJavaAwtColor_white = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 39
    255, 255, 255);
    HarmonyJavaAwtColor_WHITE =
#line 41
    HarmonyJavaAwtColor_white;
    HarmonyJavaAwtColor_lightGray = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 43
    192, 192, 192);
    HarmonyJavaAwtColor_LIGHT_GRAY =
#line 45
    HarmonyJavaAwtColor_lightGray;
    HarmonyJavaAwtColor_gray = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 47
    128, 128, 128);
    HarmonyJavaAwtColor_GRAY =
#line 49
    HarmonyJavaAwtColor_gray;
    HarmonyJavaAwtColor_darkGray = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 51
    64, 64, 64);
    HarmonyJavaAwtColor_DARK_GRAY =
#line 53
    HarmonyJavaAwtColor_darkGray;
    HarmonyJavaAwtColor_black = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 55
    0, 0, 0);
    HarmonyJavaAwtColor_BLACK =
#line 57
    HarmonyJavaAwtColor_black;
    HarmonyJavaAwtColor_red = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 59
    255, 0, 0);
    HarmonyJavaAwtColor_RED =
#line 61
    HarmonyJavaAwtColor_red;
    HarmonyJavaAwtColor_pink = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 63
    255, 175, 175);
    HarmonyJavaAwtColor_PINK =
#line 65
    HarmonyJavaAwtColor_pink;
    HarmonyJavaAwtColor_orange = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 67
    255, 200, 0);
    HarmonyJavaAwtColor_ORANGE =
#line 69
    HarmonyJavaAwtColor_orange;
    HarmonyJavaAwtColor_yellow = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 71
    255, 255, 0);
    HarmonyJavaAwtColor_YELLOW =
#line 73
    HarmonyJavaAwtColor_yellow;
    HarmonyJavaAwtColor_green = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 75
    0, 255, 0);
    HarmonyJavaAwtColor_GREEN =
#line 77
    HarmonyJavaAwtColor_green;
    HarmonyJavaAwtColor_magenta = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 79
    255, 0, 255);
    HarmonyJavaAwtColor_MAGENTA =
#line 81
    HarmonyJavaAwtColor_magenta;
    HarmonyJavaAwtColor_cyan = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 83
    0, 255, 255);
    HarmonyJavaAwtColor_CYAN =
#line 85
    HarmonyJavaAwtColor_cyan;
    HarmonyJavaAwtColor_blue = new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(
#line 87
    0, 0, 255);
    HarmonyJavaAwtColor_BLUE =
#line 89
    HarmonyJavaAwtColor_blue;
    J2OBJC_SET_INITIALIZED(HarmonyJavaAwtColor)
  }
}

@end


#line 164
void HarmonyJavaAwtColor_initWithInt_withBoolean_(HarmonyJavaAwtColor *self, jint rgba, jboolean hasAlpha) {
  NSObject_init(self);
  
#line 165
  if (!hasAlpha) {
    self->value_ = rgba | (jint) 0xFF000000;
  }
  else {
    
#line 168
    self->value_ = rgba;
  }
}


#line 164
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withBoolean_(jint rgba, jboolean hasAlpha) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithInt_withBoolean_, rgba, hasAlpha)
}


#line 164
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withBoolean_(jint rgba, jboolean hasAlpha) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithInt_withBoolean_, rgba, hasAlpha)
}


#line 172
void HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(HarmonyJavaAwtColor *self, jint r, jint g, jint b, jint a) {
  NSObject_init(self);
  
#line 173
  if ((r & (jint) 0xFF) != r || (g & (jint) 0xFF) != g || (b & (jint) 0xFF) != b || (a & (jint) 0xFF) != a) {
    
#line 175
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.109"));
  }
  self->value_ = b | (JreLShift32(g, 8)) | (JreLShift32(r, 16)) | (JreLShift32(a, 24));
}


#line 172
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(jint r, jint g, jint b, jint a) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithInt_withInt_withInt_withInt_, r, g, b, a)
}


#line 172
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(jint r, jint g, jint b, jint a) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithInt_withInt_withInt_withInt_, r, g, b, a)
}


#line 180
void HarmonyJavaAwtColor_initWithInt_withInt_withInt_(HarmonyJavaAwtColor *self, jint r, jint g, jint b) {
  NSObject_init(self);
  
#line 181
  if ((r & (jint) 0xFF) != r || (g & (jint) 0xFF) != g || (b & (jint) 0xFF) != b) {
    
#line 183
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.109"));
  }
  
#line 186
  self->value_ = b | (JreLShift32(g, 8)) | (JreLShift32(r, 16)) | (jint) 0xFF000000;
}


#line 180
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(jint r, jint g, jint b) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithInt_withInt_withInt_, r, g, b)
}


#line 180
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_withInt_withInt_(jint r, jint g, jint b) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithInt_withInt_withInt_, r, g, b)
}


#line 189
void HarmonyJavaAwtColor_initWithInt_(HarmonyJavaAwtColor *self, jint rgb) {
  NSObject_init(self);
  
#line 190
  self->value_ = rgb | (jint) 0xFF000000;
}


#line 189
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithInt_(jint rgb) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithInt_, rgb)
}


#line 189
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithInt_(jint rgb) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithInt_, rgb)
}

void HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtColor *self, jfloat r, jfloat g, jfloat b, jfloat a) {
  HarmonyJavaAwtColor_initWithInt_withInt_withInt_withInt_(self, JreFpToInt((r * 255 + 0.5)), JreFpToInt((g * 255 + 0.5)), JreFpToInt((b * 255 + 0.5)), JreFpToInt((a * 255 + 0.5)));
  self->falpha_ = a;
  self->fvalue_ = [IOSFloatArray newArrayWithLength:3];
  *IOSFloatArray_GetRef(self->fvalue_, 0) = r;
  *IOSFloatArray_GetRef(self->fvalue_, 1) = g;
  *IOSFloatArray_GetRef(self->fvalue_, 2) = b;
  self->frgbvalue_ = self->fvalue_;
}


#line 193
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithFloat_withFloat_withFloat_withFloat_, r, g, b, a)
}


#line 193
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithFloat_withFloat_withFloat_withFloat_, r, g, b, a)
}


#line 203
void HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(HarmonyJavaAwtColor *self, jfloat r, jfloat g, jfloat b) {
  HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_withFloat_(self, r, g, b, 1.0f);
}


#line 203
HarmonyJavaAwtColor *new_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtColor, initWithFloat_withFloat_withFloat_, r, g, b)
}


#line 203
HarmonyJavaAwtColor *create_HarmonyJavaAwtColor_initWithFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtColor, initWithFloat_withFloat_withFloat_, r, g, b)
}


#line 429
HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_withHarmonyJavaAwtColor_(NSString *nm, HarmonyJavaAwtColor *def) {
  HarmonyJavaAwtColor_initialize();
  
#line 430
  JavaLangInteger *integer = JavaLangInteger_getIntegerWithNSString_(nm);
  
#line 432
  if (integer == nil) {
    return def;
  }
  
#line 436
  return new_HarmonyJavaAwtColor_initWithInt_([integer intValue]);
}


#line 439
HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_withInt_(NSString *nm, jint def) {
  HarmonyJavaAwtColor_initialize();
  
#line 440
  JavaLangInteger *integer = JavaLangInteger_getIntegerWithNSString_(nm);
  
#line 442
  if (integer == nil) {
    return new_HarmonyJavaAwtColor_initWithInt_(def);
  }
  
#line 446
  return new_HarmonyJavaAwtColor_initWithInt_([integer intValue]);
}


#line 449
HarmonyJavaAwtColor *HarmonyJavaAwtColor_getColorWithNSString_(NSString *nm) {
  HarmonyJavaAwtColor_initialize();
  
#line 450
  JavaLangInteger *integer = JavaLangInteger_getIntegerWithNSString_(nm);
  
#line 452
  if (integer == nil) {
    return nil;
  }
  
#line 456
  return new_HarmonyJavaAwtColor_initWithInt_([integer intValue]);
}


#line 459
HarmonyJavaAwtColor *HarmonyJavaAwtColor_decodeWithNSString_(NSString *nm) {
  HarmonyJavaAwtColor_initialize();
  
#line 460
  JavaLangInteger *integer = JavaLangInteger_decodeWithNSString_(nm);
  return new_HarmonyJavaAwtColor_initWithInt_([((JavaLangInteger *) nil_chk(integer)) intValue]);
}


#line 464
HarmonyJavaAwtColor *HarmonyJavaAwtColor_getHSBColorWithFloat_withFloat_withFloat_(jfloat h, jfloat s, jfloat b) {
  HarmonyJavaAwtColor_initialize();
  
#line 465
  return new_HarmonyJavaAwtColor_initWithInt_(HarmonyJavaAwtColor_HSBtoRGBWithFloat_withFloat_withFloat_(h, s, b));
}


#line 468
IOSFloatArray *HarmonyJavaAwtColor_RGBtoHSBWithInt_withInt_withInt_withFloatArray_(jint r, jint g, jint b, IOSFloatArray *hsbvals) {
  HarmonyJavaAwtColor_initialize();
  
#line 469
  if (hsbvals == nil) {
    hsbvals = [IOSFloatArray newArrayWithLength:3];
  }
  
#line 473
  jint V = JavaLangMath_maxWithInt_withInt_(b, JavaLangMath_maxWithInt_withInt_(r, g));
  jint temp = JavaLangMath_minWithInt_withInt_(b, JavaLangMath_minWithInt_withInt_(r, g));
  
#line 476
  jfloat H;
  
#line 476
  jfloat S;
  
#line 476
  jfloat B;
  
#line 478
  B = V / 255.f;
  
#line 480
  if (V == temp) {
    H = S = 0;
  }
  else {
    
#line 483
    S = (V - temp) / ((jfloat) V);
    
#line 485
    jfloat Cr = (V - r) / (jfloat) (V - temp);
    jfloat Cg = (V - g) / (jfloat) (V - temp);
    jfloat Cb = (V - b) / (jfloat) (V - temp);
    
#line 489
    if (r == V) {
      H = Cb - Cg;
    }
    else
#line 491
    if (g == V) {
      H = 2 + Cr - Cb;
    }
    else {
      
#line 494
      H = 4 + Cg - Cr;
    }
    
#line 497
    JreDivideAssignFloatF(&H, 6.f);
    if (H < 0) {
      H++;
    }
  }
  
#line 503
  *IOSFloatArray_GetRef(hsbvals, 0) = H;
  *IOSFloatArray_GetRef(hsbvals, 1) = S;
  *IOSFloatArray_GetRef(hsbvals, 2) = B;
  
#line 507
  return hsbvals;
}


#line 510
jint HarmonyJavaAwtColor_HSBtoRGBWithFloat_withFloat_withFloat_(jfloat hue, jfloat saturation, jfloat brightness) {
  HarmonyJavaAwtColor_initialize();
  
#line 511
  jfloat fr;
  
#line 511
  jfloat fg;
  
#line 511
  jfloat fb;
  
#line 513
  if (saturation == 0) {
    fr = fg = fb = brightness;
  }
  else {
    
#line 516
    jfloat H = (hue - (jfloat) JavaLangMath_floorWithDouble_(hue)) * 6;
    jint I = JreFpToInt(JavaLangMath_floorWithDouble_(H));
    jfloat F = H - I;
    jfloat M = brightness * (1 - saturation);
    jfloat N = brightness * (1 - saturation * F);
    jfloat K = brightness * (1 - saturation * (1 - F));
    
#line 523
    switch (I) {
      case 0:
      fr = brightness;
      fg = K;
      fb = M;
      break;
      case 1:
      fr = N;
      fg = brightness;
      fb = M;
      break;
      case 2:
      fr = M;
      fg = brightness;
      fb = K;
      break;
      case 3:
      fr = M;
      fg = N;
      fb = brightness;
      break;
      case 4:
      fr = K;
      fg = M;
      fb = brightness;
      break;
      case 5:
      fr = brightness;
      fg = M;
      fb = N;
      break;
      default:
      fr = fb = fg = 0;
    }
  }
  
#line 559
  jint r = JreFpToInt((fr * 255. + 0.5));
  jint g = JreFpToInt((fg * 255. + 0.5));
  jint b = JreFpToInt((fb * 255. + 0.5));
  
#line 563
  return (JreLShift32(r, 16)) | (JreLShift32(g, 8)) | b | (jint) 0xFF000000;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtColor)
