//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Cell.java
//

#include "BadElementException.h"
#include "Cell.h"
#include "Chunk.h"
#include "DocumentException.h"
#include "Element.h"
#include "ElementListener.h"
#include "ElementTags.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "List.h"
#include "Paragraph.h"
#include "PdfPCell.h"
#include "PdfPTable.h"
#include "Phrase.h"
#include "Rectangle.h"
#include "Table.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#if !__has_feature(objc_arc)
#error "Cell must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextCell () {
 @public
  /*!
   @brief The <CODE>ArrayList</CODE> of <CODE>Element</CODE>s
  that are part of the content of the Cell.
   */
  JavaUtilArrayList *arrayList_;
  /*!
   @brief The horizontal alignment of the cell content.
   */
  jint horizontalAlignment_;
  /*!
   @brief The vertical alignment of the cell content.
   */
  jint verticalAlignment_;
  /*!
   @brief The width of the cell as a String.
   It can be an absolute value "100" or a percentage "20%".
   */
  jfloat width_;
  jboolean percentage_;
  /*!
   @brief The colspan of the cell.
   */
  jint colspan_;
  /*!
   @brief The rowspan of the cell.
   */
  jint rowspan_;
  /*!
   @brief The leading of the content inside the cell.
   */
  jfloat leading_;
  /*!
   @brief Is this <CODE>Cell</CODE> a header?
   */
  jboolean header_;
  /*!
   @brief Maximum number of lines allowed in the cell.
   The default value of this property is not to limit the maximum number of lines
  (contributed by dperezcar@@fcc.es)
   */
  jint maxLines_;
  /*!
   @brief If a truncation happens due to the maxLines property, then this text will
  be added to indicate a truncation has happened.
   Default value is null, and means avoiding marking the truncation.
  A useful value of this property could be e.g. "..."
  (contributed by dperezcar@@fcc.es)
   */
  NSString *showTruncation_;
  /*!
   @brief Indicates that the largest ascender height should be used to determine the
  height of the first line.Note that this only has an effect when rendered
  to PDF.
   Setting this to true can help with vertical alignment problems.
   */
  jboolean useAscender_;
  /*!
   @brief Indicates that the largest descender height should be added to the height of
  the last line (so characters like y don't dip into the border).Note that
  this only has an effect when rendered to PDF.
   */
  jboolean useDescender_;
  /*!
   @brief Adjusts the cell contents to compensate for border widths.Note that
  this only has an effect when rendered to PDF.
   */
  jboolean useBorderPadding_;
  /*!
   @brief Does this <CODE>Cell</CODE> force a group change?
   */
  jboolean groupChange_;
}

/*!
 @brief Gets the number of <CODE>Element</CODE>s in the Cell.
 @return a <CODE>size</CODE>.
 */
- (jint)size;

/*!
 @brief Clears all the <CODE>Element</CODE>s of this <CODE>Cell</CODE>.
 */
- (void)clear;

/*!
 @brief Adds an element to this <CODE>Cell</CODE>.
 <P>
  Remark: you can't add <CODE>ListItem</CODE>s, <CODE>Row</CODE>s, <CODE>Cell</CODE>s,
  <CODE>JPEG</CODE>s, <CODE>GIF</CODE>s or <CODE>PNG</CODE>s to a <CODE>Cell</CODE>.
 @param element The  <CODE> Element </CODE>  to add
 @throw BadElementExceptionif the method was called with a <CODE>ListItem</CODE>, <CODE>Row</CODE> or <CODE>Cell</CODE>
 */
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

/*!
 @brief Get dummy cell used when merging inner tables.
 @return a cell with colspan 3 and no border
 */
+ (ComAowagieTextCell *)getDummyCell;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextCell, arrayList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextCell, showTruncation_, NSString *)

__attribute__((unused)) static jint ComAowagieTextCell_size(ComAowagieTextCell *self);

__attribute__((unused)) static void ComAowagieTextCell_clear(ComAowagieTextCell *self);

__attribute__((unused)) static void ComAowagieTextCell_addElementWithComAowagieTextElement_(ComAowagieTextCell *self, id<ComAowagieTextElement> element);

__attribute__((unused)) static ComAowagieTextCell *ComAowagieTextCell_getDummyCell(void);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Cell.java"


#line 92
@implementation ComAowagieTextCell

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 169
- (instancetype)init {
  ComAowagieTextCell_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 183
- (instancetype)initWithBoolean:(jboolean)dummy {
  ComAowagieTextCell_initWithBoolean_(self, dummy);
  return self;
}


#line 196
- (instancetype)initWithComAowagieTextElement:(id<ComAowagieTextElement>)element {
  ComAowagieTextCell_initWithComAowagieTextElement_(self, element);
  return self;
}


#line 213
- (jboolean)processWithComAowagieTextElementListener:(id<ComAowagieTextElementListener>)listener {
  
#line 215
  @try {
    return [((id<ComAowagieTextElementListener>) nil_chk(listener)) addWithComAowagieTextElement:self];
  }
  @catch (ComAowagieTextDocumentException *de) {
    return false;
  }
}


#line 228
- (jint)type {
  
#line 230
  return ComAowagieTextElement_CELL;
}


#line 238
- (JavaUtilArrayList *)getChunks {
  
#line 240
  JavaUtilArrayList *tmp = new_JavaUtilArrayList_init();
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->arrayList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    [tmp addAllWithJavaUtilCollection:[((id<ComAowagieTextElement>) nil_chk(((id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_())))) getChunks]];
  }
  return tmp;
}


#line 254
- (jint)getHorizontalAlignment {
  return self->horizontalAlignment_;
}


#line 262
- (void)setHorizontalAlignmentWithInt:(jint)value {
  self->horizontalAlignment_ = value;
}


#line 271
- (void)setHorizontalAlignmentWithNSString:(NSString *)alignment {
  [self setHorizontalAlignmentWithInt:ComAowagieTextElementTags_alignmentValueWithNSString_(alignment)];
}


#line 279
- (jint)getVerticalAlignment {
  return self->verticalAlignment_;
}


#line 287
- (void)setVerticalAlignmentWithInt:(jint)value {
  self->verticalAlignment_ = value;
}


#line 296
- (void)setVerticalAlignmentWithNSString:(NSString *)alignment {
  [self setVerticalAlignmentWithInt:ComAowagieTextElementTags_alignmentValueWithNSString_(alignment)];
}


#line 305
- (void)setWidthWithFloat:(jfloat)value {
  self->width_ = value;
}


#line 315
- (void)setWidthWithNSString:(NSString *)value {
  if ([((NSString *) nil_chk(value)) java_hasSuffix:@"%"]) {
    value = [value java_substring:0 endIndex:[value java_length] - 1];
    self->percentage_ = true;
  }
  self->width_ = JavaLangInteger_parseIntWithNSString_(value);
}


#line 326
- (jfloat)getWidth {
  
#line 328
  return self->width_;
}


#line 336
- (NSString *)getWidthAsString {
  NSString *w = NSString_java_valueOfFloat_(self->width_);
  if ([((NSString *) nil_chk(w)) java_hasSuffix:@".0"]) {
    w = [w java_substring:0 endIndex:[w java_length] - 2];
  }
  if (self->percentage_) {
    (void) JreStrAppendStrong(&w, "$", @"%");
  }
  return w;
}


#line 352
- (void)setColspanWithInt:(jint)value {
  self->colspan_ = value;
}


#line 360
- (jint)getColspan {
  return self->colspan_;
}


#line 369
- (void)setRowspanWithInt:(jint)value {
  self->rowspan_ = value;
}


#line 377
- (jint)getRowspan {
  return self->rowspan_;
}


#line 386
- (void)setLeadingWithFloat:(jfloat)value {
  self->leading_ = value;
}


#line 395
- (jfloat)getLeading {
  if (JavaLangFloat_isNaNWithFloat_(self->leading_)) {
    return 16;
  }
  return self->leading_;
}


#line 407
- (void)setHeaderWithBoolean:(jboolean)value {
  self->header_ = value;
}


#line 416
- (jboolean)isHeader {
  return self->header_;
}


#line 424
- (void)setMaxLinesWithInt:(jint)value {
  self->maxLines_ = value;
}


#line 432
- (jint)getMaxLines {
  return self->maxLines_;
}


#line 440
- (void)setShowTruncationWithNSString:(NSString *)value {
  self->showTruncation_ = value;
}


#line 448
- (NSString *)getShowTruncation {
  return self->showTruncation_;
}


#line 456
- (void)setUseAscenderWithBoolean:(jboolean)use {
  self->useAscender_ = use;
}


#line 464
- (jboolean)isUseAscender {
  return self->useAscender_;
}


#line 472
- (void)setUseDescenderWithBoolean:(jboolean)use {
  self->useDescender_ = use;
}


#line 480
- (jboolean)isUseDescender {
  return self->useDescender_;
}


#line 488
- (void)setUseBorderPaddingWithBoolean:(jboolean)use {
  self->useBorderPadding_ = use;
}


#line 496
- (jboolean)isUseBorderPadding {
  return self->useBorderPadding_;
}


#line 505
- (jboolean)getGroupChange {
  return self->groupChange_;
}


#line 514
- (void)setGroupChangeWithBoolean:(jboolean)value {
  self->groupChange_ = value;
}


#line 525
- (jint)size {
  return ComAowagieTextCell_size(self);
}


#line 534
- (id<JavaUtilIterator>)getElements {
  return [((JavaUtilArrayList *) nil_chk(self->arrayList_)) iterator];
}


#line 541
- (void)clear {
  ComAowagieTextCell_clear(self);
}


#line 550
- (jboolean)isEmpty {
  {
    
#line 555
    id<ComAowagieTextElement> element;
    
#line 551
    switch (ComAowagieTextCell_size(self)) {
      case 0:
      return true;
      case 1:
      element = (id<ComAowagieTextElement>) cast_check([((JavaUtilArrayList *) nil_chk(self->arrayList_)) getWithInt:0], ComAowagieTextElement_class_());
      switch ([((id<ComAowagieTextElement>) nil_chk(element)) type]) {
        case ComAowagieTextElement_CHUNK:
        return [((ComAowagieTextChunk *) cast_chk(element, [ComAowagieTextChunk class])) isEmpty];
        case ComAowagieTextElement_ANCHOR:
        case ComAowagieTextElement_PHRASE:
        case ComAowagieTextElement_PARAGRAPH:
        return [((ComAowagieTextPhrase *) cast_chk(element, [ComAowagieTextPhrase class])) isEmpty];
        case ComAowagieTextElement_LIST:
        return [((ComAowagieTextList *) cast_chk(element, [ComAowagieTextList class])) isEmpty];
      }
      return false;
      default:
      return false;
    }
  }
}


#line 577
- (void)fill {
  if (ComAowagieTextCell_size(self) == 0) {
    [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:new_ComAowagieTextParagraph_initWithFloat_(0)];
  }
}


#line 588
- (jboolean)isTable {
  return ComAowagieTextCell_size(self) == 1 &&
#line 590
  [((id<ComAowagieTextElement>) nil_chk(((id<ComAowagieTextElement>) cast_check([((JavaUtilArrayList *) nil_chk(self->arrayList_)) getWithInt:0], ComAowagieTextElement_class_())))) type] == ComAowagieTextElement_TABLE;
}


#line 602
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element {
  ComAowagieTextCell_addElementWithComAowagieTextElement_(self, element);
}


#line 697
- (jboolean)addWithId:(id)o {
  
#line 699
  @try {
    ComAowagieTextCell_addElementWithComAowagieTextElement_(self, (id<ComAowagieTextElement>) cast_check(o, ComAowagieTextElement_class_()));
    return true;
  }
  @catch (JavaLangClassCastException *cce) {
    @throw new_JavaLangClassCastException_initWithNSString_(@"You can only add objects that implement the Element interface.");
  }
  @catch (ComAowagieTextBadElementException *bee) {
    @throw new_JavaLangClassCastException_initWithNSString_([bee getMessage]);
  }
}


#line 717
+ (ComAowagieTextCell *)getDummyCell {
  return ComAowagieTextCell_getDummyCell();
}


#line 729
- (ComAowagieTextPdfPdfPCell *)createPdfPCell {
  if (self->rowspan_ > 1) {
    @throw new_ComAowagieTextBadElementException_initWithNSString_(@"PdfPCells can't have a rowspan > 1");
  }
  if ([self isTable]) {
    return new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_([((ComAowagieTextTable *) nil_chk(((ComAowagieTextTable *) cast_chk([((JavaUtilArrayList *) nil_chk(self->arrayList_)) getWithInt:0], [ComAowagieTextTable class])))) createPdfPTable]);
  }
  ComAowagieTextPdfPdfPCell *cell = new_ComAowagieTextPdfPdfPCell_init();
  [cell setVerticalAlignmentWithInt:self->verticalAlignment_];
  [cell setHorizontalAlignmentWithInt:self->horizontalAlignment_];
  [cell setColspanWithInt:self->colspan_];
  [cell setUseBorderPaddingWithBoolean:self->useBorderPadding_];
  [cell setUseDescenderWithBoolean:self->useDescender_];
  [cell setLeadingWithFloat:[self getLeading] withFloat:0];
  [cell cloneNonPositionParametersWithComAowagieTextRectangle:self];
  [cell setNoWrapWithBoolean:[self getMaxLines] == 1];
  for (id<JavaUtilIterator> i = [self getElements]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    id<ComAowagieTextElement> e = (id<ComAowagieTextElement>) cast_check([i next], ComAowagieTextElement_class_());
    if ([((id<ComAowagieTextElement>) nil_chk(e)) type] == ComAowagieTextElement_PHRASE || [e type] == ComAowagieTextElement_PARAGRAPH) {
      ComAowagieTextParagraph *p = new_ComAowagieTextParagraph_initWithComAowagieTextPhrase_((ComAowagieTextPhrase *) cast_chk(e, [ComAowagieTextPhrase class]));
      [p setAlignmentWithInt:self->horizontalAlignment_];
      e = p;
    }
    [cell addElementWithComAowagieTextElement:e];
  }
  return cell;
}


#line 763
- (jfloat)getTop {
  
#line 765
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell can't be calculated. See the FAQ.");
}


#line 772
- (jfloat)getBottom {
  
#line 774
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell can't be calculated. See the FAQ.");
}


#line 781
- (jfloat)getLeft {
  
#line 783
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell can't be calculated. See the FAQ.");
}


#line 790
- (jfloat)getRight {
  
#line 792
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell can't be calculated. See the FAQ.");
}


#line 799
- (void)setTopWithInt:(jint)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell are attributed automagically. See the FAQ.");
}


#line 807
- (void)setBottomWithInt:(jint)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell are attributed automagically. See the FAQ.");
}


#line 815
- (void)setLeftWithInt:(jint)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell are attributed automagically. See the FAQ.");
}


#line 823
- (void)setRightWithInt:(jint)value {
  @throw new_JavaLangUnsupportedOperationException_initWithNSString_(@"Dimensions of a Cell are attributed automagically. See the FAQ.");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextCell;", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPCell;", 0x0, -1, -1, 2, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithBoolean:);
  methods[2].selector = @selector(initWithComAowagieTextElement:);
  methods[3].selector = @selector(processWithComAowagieTextElementListener:);
  methods[4].selector = @selector(type);
  methods[5].selector = @selector(getChunks);
  methods[6].selector = @selector(getHorizontalAlignment);
  methods[7].selector = @selector(setHorizontalAlignmentWithInt:);
  methods[8].selector = @selector(setHorizontalAlignmentWithNSString:);
  methods[9].selector = @selector(getVerticalAlignment);
  methods[10].selector = @selector(setVerticalAlignmentWithInt:);
  methods[11].selector = @selector(setVerticalAlignmentWithNSString:);
  methods[12].selector = @selector(setWidthWithFloat:);
  methods[13].selector = @selector(setWidthWithNSString:);
  methods[14].selector = @selector(getWidth);
  methods[15].selector = @selector(getWidthAsString);
  methods[16].selector = @selector(setColspanWithInt:);
  methods[17].selector = @selector(getColspan);
  methods[18].selector = @selector(setRowspanWithInt:);
  methods[19].selector = @selector(getRowspan);
  methods[20].selector = @selector(setLeadingWithFloat:);
  methods[21].selector = @selector(getLeading);
  methods[22].selector = @selector(setHeaderWithBoolean:);
  methods[23].selector = @selector(isHeader);
  methods[24].selector = @selector(setMaxLinesWithInt:);
  methods[25].selector = @selector(getMaxLines);
  methods[26].selector = @selector(setShowTruncationWithNSString:);
  methods[27].selector = @selector(getShowTruncation);
  methods[28].selector = @selector(setUseAscenderWithBoolean:);
  methods[29].selector = @selector(isUseAscender);
  methods[30].selector = @selector(setUseDescenderWithBoolean:);
  methods[31].selector = @selector(isUseDescender);
  methods[32].selector = @selector(setUseBorderPaddingWithBoolean:);
  methods[33].selector = @selector(isUseBorderPadding);
  methods[34].selector = @selector(getGroupChange);
  methods[35].selector = @selector(setGroupChangeWithBoolean:);
  methods[36].selector = @selector(size);
  methods[37].selector = @selector(getElements);
  methods[38].selector = @selector(clear);
  methods[39].selector = @selector(isEmpty);
  methods[40].selector = @selector(fill);
  methods[41].selector = @selector(isTable);
  methods[42].selector = @selector(addElementWithComAowagieTextElement:);
  methods[43].selector = @selector(addWithId:);
  methods[44].selector = @selector(getDummyCell);
  methods[45].selector = @selector(createPdfPCell);
  methods[46].selector = @selector(getTop);
  methods[47].selector = @selector(getBottom);
  methods[48].selector = @selector(getLeft);
  methods[49].selector = @selector(getRight);
  methods[50].selector = @selector(setTopWithInt:);
  methods[51].selector = @selector(setBottomWithInt:);
  methods[52].selector = @selector(setLeftWithInt:);
  methods[53].selector = @selector(setRightWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "arrayList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "percentage_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "colspan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rowspan_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "header_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxLines_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "showTruncation_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAscender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useDescender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useBorderPadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "groupChange_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "LComAowagieTextElement;", "LComAowagieTextBadElementException;", "process", "LComAowagieTextElementListener;", "setHorizontalAlignment", "I", "LNSString;", "setVerticalAlignment", "setWidth", "F", "setColspan", "setRowspan", "setLeading", "setHeader", "setMaxLines", "setShowTruncation", "setUseAscender", "setUseDescender", "setUseBorderPadding", "setGroupChange", "addElement", "add", "LNSObject;", "setTop", "setBottom", "setLeft", "setRight" };
  static const J2ObjcClassInfo _ComAowagieTextCell = { "Cell", "com.aowagie.text", ptrTable, methods, fields, 7, 0x1, 54, 15, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextCell;
}

@end


#line 169
void ComAowagieTextCell_init(ComAowagieTextCell *self) {
  ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(self,
#line 171
  0, 0, 0, 0);
  self->arrayList_ =
#line 100
  nil;
  self->horizontalAlignment_ =
#line 103
  ComAowagieTextElement_ALIGN_UNDEFINED;
  self->verticalAlignment_ =
#line 106
  ComAowagieTextElement_ALIGN_UNDEFINED;
  self->percentage_ =
#line 113
  false;
  self->colspan_ =
#line 116
  1;
  self->rowspan_ =
#line 119
  1;
  self->leading_ =
#line 122
  JavaLangFloat_NaN;
  self->maxLines_ =
#line 132
  JavaLangInteger_MAX_VALUE;
  self->useAscender_ =
#line 148
  false;
  self->useDescender_ =
#line 155
  false;
  self->groupChange_ =
#line 164
  true;
  
#line 172
  [self setBorderWithInt:ComAowagieTextRectangle_UNDEFINED];
  [self setBorderWidthWithFloat:0.5f];
  
#line 175
  self->arrayList_ = new_JavaUtilArrayList_init();
}


#line 169
ComAowagieTextCell *new_ComAowagieTextCell_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextCell, init)
}


#line 169
ComAowagieTextCell *create_ComAowagieTextCell_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextCell, init)
}


#line 183
void ComAowagieTextCell_initWithBoolean_(ComAowagieTextCell *self, jboolean dummy) {
  ComAowagieTextCell_init(self);
  [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:new_ComAowagieTextParagraph_initWithFloat_(0)];
}


#line 183
ComAowagieTextCell *new_ComAowagieTextCell_initWithBoolean_(jboolean dummy) {
  J2OBJC_NEW_IMPL(ComAowagieTextCell, initWithBoolean_, dummy)
}


#line 183
ComAowagieTextCell *create_ComAowagieTextCell_initWithBoolean_(jboolean dummy) {
  J2OBJC_CREATE_IMPL(ComAowagieTextCell, initWithBoolean_, dummy)
}


#line 196
void ComAowagieTextCell_initWithComAowagieTextElement_(ComAowagieTextCell *self, id<ComAowagieTextElement> element) {
  ComAowagieTextCell_init(self);
  if ([element isKindOfClass:[ComAowagieTextPhrase class]]) {
    [self setLeadingWithFloat:[((ComAowagieTextPhrase *) nil_chk(((ComAowagieTextPhrase *) element))) getLeading]];
  }
  ComAowagieTextCell_addElementWithComAowagieTextElement_(self, element);
}


#line 196
ComAowagieTextCell *new_ComAowagieTextCell_initWithComAowagieTextElement_(id<ComAowagieTextElement> element) {
  J2OBJC_NEW_IMPL(ComAowagieTextCell, initWithComAowagieTextElement_, element)
}


#line 196
ComAowagieTextCell *create_ComAowagieTextCell_initWithComAowagieTextElement_(id<ComAowagieTextElement> element) {
  J2OBJC_CREATE_IMPL(ComAowagieTextCell, initWithComAowagieTextElement_, element)
}


#line 525
jint ComAowagieTextCell_size(ComAowagieTextCell *self) {
  return [((JavaUtilArrayList *) nil_chk(self->arrayList_)) size];
}


#line 541
void ComAowagieTextCell_clear(ComAowagieTextCell *self) {
  [((JavaUtilArrayList *) nil_chk(self->arrayList_)) clear];
}


#line 602
void ComAowagieTextCell_addElementWithComAowagieTextElement_(ComAowagieTextCell *self, id<ComAowagieTextElement> element) {
  if ([self isTable]) {
    ComAowagieTextTable *table = (ComAowagieTextTable *) cast_chk([((JavaUtilArrayList *) nil_chk(self->arrayList_)) getWithInt:0], [ComAowagieTextTable class]);
    ComAowagieTextCell *tmp = new_ComAowagieTextCell_initWithComAowagieTextElement_(element);
    [tmp setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
    [tmp setColspanWithInt:[((ComAowagieTextTable *) nil_chk(table)) getColumns]];
    [table addCellWithComAowagieTextCell:tmp];
    return;
  }
  {
    
#line 617
    ComAowagieTextList *list;
    
#line 629
    ComAowagieTextPhrase *p;
    
#line 645
    ComAowagieTextTable *table;
    IOSFloatArray *widths;
    
#line 662
    ComAowagieTextCell *tmp;
    
#line 611
    switch ([((id<ComAowagieTextElement>) nil_chk(element)) type]) {
      case ComAowagieTextElement_LISTITEM:
      case ComAowagieTextElement_ROW:
      case ComAowagieTextElement_CELL:
      @throw new_ComAowagieTextBadElementException_initWithNSString_(@"You can't add listitems, rows or cells to a cell.");
      case ComAowagieTextElement_LIST:
      list = (ComAowagieTextList *) cast_chk(element, [ComAowagieTextList class]);
      if (JavaLangFloat_isNaNWithFloat_(self->leading_)) {
        [self setLeadingWithFloat:[list getTotalLeading]];
      }
      if ([list isEmpty]) {
        return;
      }
      [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:element];
      return;
      case ComAowagieTextElement_ANCHOR:
      case ComAowagieTextElement_PARAGRAPH:
      case ComAowagieTextElement_PHRASE:
      p = (ComAowagieTextPhrase *) cast_chk(element, [ComAowagieTextPhrase class]);
      if (JavaLangFloat_isNaNWithFloat_(self->leading_)) {
        [self setLeadingWithFloat:[p getLeading]];
      }
      if ([p isEmpty]) {
        return;
      }
      [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:element];
      return;
      case ComAowagieTextElement_CHUNK:
      if ([((ComAowagieTextChunk *) cast_chk(element, [ComAowagieTextChunk class])) isEmpty]) {
        return;
      }
      [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:element];
      return;
      case ComAowagieTextElement_TABLE:
      table = new_ComAowagieTextTable_initWithInt_(3);
      widths = [IOSFloatArray newArrayWithLength:3];
      *IOSFloatArray_GetRef(widths, 1) = [((ComAowagieTextTable *) cast_chk(element, [ComAowagieTextTable class])) getWidth];
      switch ([((ComAowagieTextTable *) cast_chk(element, [ComAowagieTextTable class])) getAlignment]) {
        case ComAowagieTextElement_ALIGN_LEFT:
        *IOSFloatArray_GetRef(widths, 0) = 0.0f;
        *IOSFloatArray_GetRef(widths, 2) = 100.0f - IOSFloatArray_Get(widths, 1);
        break;
        case ComAowagieTextElement_ALIGN_CENTER:
        *IOSFloatArray_GetRef(widths, 0) = (100.0f - IOSFloatArray_Get(widths, 1)) / 2.0f;
        *IOSFloatArray_GetRef(widths, 2) = IOSFloatArray_Get(widths, 0);
        break;
        case ComAowagieTextElement_ALIGN_RIGHT:
        *IOSFloatArray_GetRef(widths, 0) = 100.0f - IOSFloatArray_Get(widths, 1);
        *IOSFloatArray_GetRef(widths, 2) = 0.0f;
      }
      [table setWidthsWithFloatArray:widths];
      
#line 663
      if ([((JavaUtilArrayList *) nil_chk(self->arrayList_)) isEmpty]) {
        [table addCellWithComAowagieTextCell:ComAowagieTextCell_getDummyCell()];
      }
      else {
        tmp = new_ComAowagieTextCell_init();
        [tmp setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
        [tmp setColspanWithInt:3];
        for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->arrayList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
          [tmp addWithId:[i next]];
        }
        [table addCellWithComAowagieTextCell:tmp];
      }
      tmp = new_ComAowagieTextCell_init();
      [tmp setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
      [table addCellWithComAowagieTextCell:tmp];
      [table insertTableWithComAowagieTextTable:(ComAowagieTextTable *) cast_chk(element, [ComAowagieTextTable class])];
      tmp = new_ComAowagieTextCell_init();
      [tmp setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
      [table addCellWithComAowagieTextCell:tmp];
      [table addCellWithComAowagieTextCell:ComAowagieTextCell_getDummyCell()];
      ComAowagieTextCell_clear(self);
      [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:table];
      return;
      default:
      [((JavaUtilArrayList *) nil_chk(self->arrayList_)) addWithId:element];
    }
  }
}


#line 717
ComAowagieTextCell *ComAowagieTextCell_getDummyCell() {
  ComAowagieTextCell_initialize();
  
#line 718
  ComAowagieTextCell *cell = new_ComAowagieTextCell_initWithBoolean_(true);
  [cell setColspanWithInt:3];
  [cell setBorderWithInt:ComAowagieTextRectangle_NO_BORDER];
  return cell;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextCell)
