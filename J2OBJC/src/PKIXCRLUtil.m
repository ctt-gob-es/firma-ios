//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/PKIXCRLUtil.java
//

#include "AnnotatedException.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "PKIXCRLStoreSelector.h"
#include "PKIXCRLUtil.h"
#include "Store.h"
#include "StoreException.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/CertStoreException.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Collection.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PKIXCRLUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderPKIXCRLUtil ()

/*!
 @brief Return a Collection of all CRLs found in the X509Store's that are
  matching the crlSelect criteriums.
 @param crlSelect a <code>org.spongycastle.jcajce.PKIXCRLStoreSelector</code>  object that will be used
              to select the CRLs
 @param crlStores a List containing only             
 <code>Store</code>  objects.             These are used to search for CRLs
 @return a Collection of all found <code>X509CRL</code> objects. May be
          empty but never <code>null</code>.
 */
- (id<JavaUtilCollection>)findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:(OrgSpongycastleJcajcePKIXCRLStoreSelector *)crlSelect
                                                               withJavaUtilList:(id<JavaUtilList>)crlStores;

@end

__attribute__((unused)) static id<JavaUtilCollection> OrgSpongycastleJceProviderPKIXCRLUtil_findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaUtilList_(OrgSpongycastleJceProviderPKIXCRLUtil *self, OrgSpongycastleJcajcePKIXCRLStoreSelector *crlSelect, id<JavaUtilList> crlStores);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/PKIXCRLUtil.java"


#line 19
@implementation OrgSpongycastleJceProviderPKIXCRLUtil


#line 19
- (instancetype)initPackagePrivate {
  OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate(self);
  return self;
}


#line 21
- (id<JavaUtilSet>)findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:(OrgSpongycastleJcajcePKIXCRLStoreSelector *)crlselect
                                                        withJavaUtilDate:(JavaUtilDate *)validityDate
                                                        withJavaUtilList:(id<JavaUtilList>)certStores
                                                        withJavaUtilList:(id<JavaUtilList>)pkixCrlStores {
  
#line 24
  id<JavaUtilSet> initialSet = new_JavaUtilHashSet_init();
  
#line 27
  @try {
    
#line 29
    [initialSet addAllWithJavaUtilCollection:OrgSpongycastleJceProviderPKIXCRLUtil_findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaUtilList_(self, crlselect, pkixCrlStores)];
    [initialSet addAllWithJavaUtilCollection:OrgSpongycastleJceProviderPKIXCRLUtil_findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaUtilList_(self, crlselect, certStores)];
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 34
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Exception obtaining complete CRLs.", e);
  }
  
#line 37
  id<JavaUtilSet> finalSet = new_JavaUtilHashSet_init();
  
#line 40
  for (id<JavaUtilIterator> it = [initialSet iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 42
    JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
    
#line 44
    if ([((JavaUtilDate *) nil_chk([((JavaSecurityCertX509CRL *) nil_chk(crl)) getNextUpdate])) afterWithJavaUtilDate:validityDate]) {
      
#line 46
      JavaSecurityCertX509Certificate *cert = [((OrgSpongycastleJcajcePKIXCRLStoreSelector *) nil_chk(crlselect)) getCertificateChecking];
      
#line 48
      if (cert != nil) {
        
#line 50
        if ([((JavaUtilDate *) nil_chk([crl getThisUpdate])) beforeWithJavaUtilDate:[cert getNotAfter]]) {
          
#line 52
          [finalSet addWithId:crl];
        }
      }
      else {
        
#line 57
        [finalSet addWithId:crl];
      }
    }
  }
  
#line 62
  return finalSet;
}


#line 78
- (id<JavaUtilCollection>)findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:(OrgSpongycastleJcajcePKIXCRLStoreSelector *)crlSelect
                                                               withJavaUtilList:(id<JavaUtilList>)crlStores {
  return OrgSpongycastleJceProviderPKIXCRLUtil_findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaUtilList_(self, crlSelect, crlStores);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x12, 0, 3, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:withJavaUtilDate:withJavaUtilList:withJavaUtilList:);
  methods[2].selector = @selector(findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "findCRLs", "LOrgSpongycastleJcajcePKIXCRLStoreSelector;LJavaUtilDate;LJavaUtilList;LJavaUtilList;", "LOrgSpongycastleJceProviderAnnotatedException;", "LOrgSpongycastleJcajcePKIXCRLStoreSelector;LJavaUtilList;" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderPKIXCRLUtil = { "PKIXCRLUtil", "org.spongycastle.jce.provider", ptrTable, methods, NULL, 7, 0x0, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderPKIXCRLUtil;
}

@end


#line 19
void OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate(OrgSpongycastleJceProviderPKIXCRLUtil *self) {
  NSObject_init(self);
}


#line 19
OrgSpongycastleJceProviderPKIXCRLUtil *new_OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderPKIXCRLUtil, initPackagePrivate)
}


#line 19
OrgSpongycastleJceProviderPKIXCRLUtil *create_OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderPKIXCRLUtil, initPackagePrivate)
}


#line 78
id<JavaUtilCollection> OrgSpongycastleJceProviderPKIXCRLUtil_findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaUtilList_(OrgSpongycastleJceProviderPKIXCRLUtil *self, OrgSpongycastleJcajcePKIXCRLStoreSelector *crlSelect, id<JavaUtilList> crlStores) {
  
#line 81
  id<JavaUtilSet> crls = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(crlStores)) iterator];
  
#line 84
  OrgSpongycastleJceProviderAnnotatedException *lastException = nil;
  jboolean foundValidStore = false;
  
#line 87
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 89
    id obj = [iter next];
    
#line 91
    if ([OrgSpongycastleUtilStore_class_() isInstance:obj]) {
      
#line 93
      id<OrgSpongycastleUtilStore> store = (id<OrgSpongycastleUtilStore>) cast_check(obj, OrgSpongycastleUtilStore_class_());
      
#line 95
      @try {
        
#line 97
        [crls addAllWithJavaUtilCollection:[((id<OrgSpongycastleUtilStore>) nil_chk(store)) getMatchesWithOrgSpongycastleUtilSelector:crlSelect]];
        foundValidStore = true;
      }
      @catch (OrgSpongycastleUtilStoreException *e) {
        
#line 102
        lastException = new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 103
        @"Exception searching in X.509 CRL store.", e);
      }
    }
    else {
      
#line 108
      JavaSecurityCertCertStore *store = (JavaSecurityCertCertStore *) cast_chk(obj, [JavaSecurityCertCertStore class]);
      
#line 110
      @try {
        
#line 112
        [crls addAllWithJavaUtilCollection:OrgSpongycastleJcajcePKIXCRLStoreSelector_getCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaSecurityCertCertStore_(crlSelect, store)];
        foundValidStore = true;
      }
      @catch (JavaSecurityCertCertStoreException *e) {
        
#line 117
        lastException = new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 118
        @"Exception searching in X.509 CRL store.", e);
      }
    }
  }
  if (!foundValidStore && lastException != nil) {
    
#line 124
    @throw lastException;
  }
  return crls;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderPKIXCRLUtil)
