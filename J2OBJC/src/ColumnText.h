//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/ColumnText.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ColumnText")
#ifdef RESTRICT_ColumnText
#define INCLUDE_ALL_ColumnText 0
#else
#define INCLUDE_ALL_ColumnText 1
#endif
#undef RESTRICT_ColumnText

#if !defined (ComAowagieTextPdfColumnText_) && (INCLUDE_ALL_ColumnText || defined(INCLUDE_ComAowagieTextPdfColumnText))
#define ComAowagieTextPdfColumnText_

@class ComAowagieTextPdfPdfContentByte;
@class ComAowagieTextPhrase;
@class IOSObjectArray;
@class JavaUtilLinkedList;
@protocol ComAowagieTextElement;

/*!
 @brief Formats text in a columnwise form.The text is bound
  on the left and on the right by a sequence of lines.
 This allows the column
  to have any shape, not only rectangular. 
 <P>
  Several parameters can be set like the first paragraph line indent and
  extra space between paragraphs. 
 <P>
  A call to the method <CODE>go</CODE> will return one of the following
  situations: the column ended or the text ended. 
 <P>
  I the column ended, a new column definition can be loaded with the method 
 <CODE>setColumns</CODE> and the method <CODE>go</CODE> can be called again. 
 <P>
  If the text ended, more text can be loaded with <CODE>addText</CODE>
  and the method <CODE>go</CODE> can be called again.<BR>
  The only limitation is that one or more complete paragraphs must be loaded
  each time. 
 <P>
  Full bidirectional reordering is supported. If the run direction is 
 <CODE>PdfWriter.RUN_DIRECTION_RTL</CODE> the meaning of the horizontal
  alignments and margins is mirrored.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfColumnText : NSObject {
 @public
  JavaUtilLinkedList *compositeElements_;
}

#pragma mark Public

/*!
 @brief Creates a <CODE>ColumnText</CODE>.
 @param canvas the place where the text will be written to. Can  be a template.
 */
- (instancetype)initWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas;

/*!
 @brief Gets the alignment.
 @return the alignment
 */
- (jint)getAlignment;

/*!
 @brief Gets the arabic shaping options.
 @return the arabic shaping options
 */
- (jint)getArabicOptions;

/*!
 @brief Gets the canvas.
 If a set of four canvases exists, the TEXTCANVAS is returned.
 @return a PdfContentByte.
 */
- (ComAowagieTextPdfPdfContentByte *)getCanvas;

/*!
 @brief Gets the canvases.
 @return an array of PdfContentByte
 */
- (IOSObjectArray *)getCanvases;

/*!
 @brief Gets the biggest descender value of the last line written.
 @return the biggest descender value of the last line written
 */
- (jfloat)getDescender;

/*!
 @brief Sets the extra space between paragraphs.
 @return the extra space between paragraphs
 */
- (jfloat)getExtraParagraphSpace;

/*!
 @brief Gets the real width used by the largest line.
 @return the real width used by the largest line
 */
- (jfloat)getFilledWidth;

/*!
 @brief Gets the following paragraph lines indent.
 @return the indent
 */
- (jfloat)getFollowingIndent;

/*!
 @brief Gets the first paragraph line indent.
 @return the indent
 */
- (jfloat)getIndent;

/*!
 @brief Gets the fixed leading.
 @return the leading
 */
- (jfloat)getLeading;

/*!
 @brief Gets the number of lines written.
 @return the number of lines written
 */
- (jint)getLinesWritten;

/*!
 @brief Gets the variable leading.
 @return the leading
 */
- (jfloat)getMultipliedLeading;

/*!
 @brief Gets the right paragraph lines indent.
 @return the indent
 */
- (jfloat)getRightIndent;

/*!
 @brief Gets the run direction.
 @return the run direction
 */
- (jint)getRunDirection;

/*!
 @brief Gets the space/character extra spacing ratio for fully justified text.
 @return the space/character extra spacing ratio
 */
- (jfloat)getSpaceCharRatio;

/*!
 @brief Gets the yLine.
 @return the yLine
 */
- (jfloat)getYLine;

/*!
 @brief Outputs the lines to the document.It is equivalent to <CODE>go(false)</CODE>.
 @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
  and/or <CODE>NO_MORE_COLUMN</CODE>
 @throw DocumentExceptionon error
 */
- (jint)go;

/*!
 @brief Outputs the lines to the document.The output can be simulated.
 @param simulate <CODE> true </CODE>  to simulate the writing to the document
 @return returns the result of the operation. It can be <CODE>NO_MORE_TEXT</CODE>
  and/or <CODE>NO_MORE_COLUMN</CODE>
 @throw DocumentExceptionon error
 */
- (jint)goWithBoolean:(jboolean)simulate;

/*!
 @brief Gets the first line adjustment property.
 @return the first line adjustment property.
 */
- (jboolean)isAdjustFirstLine;

/*!
 @brief Checks if UseAscender is enabled/disabled.
 @return true is the adjustment of the first line height is based on max ascender.
 */
- (jboolean)isUseAscender;

/*!
 @brief Sets the first line adjustment.
 Some objects have properties, like spacing before, that behave
  differently if the object is the first to be written after go() or not.
  The first line adjustment is <CODE>true</CODE> by default but can be
  changed if several objects are to be placed one after the other in the
  same column calling go() several times.
 @param adjustFirstLine <CODE> true </CODE>  to adjust the first line,  <CODE> false </CODE>  otherwise
 */
- (void)setAdjustFirstLineWithBoolean:(jboolean)adjustFirstLine;

/*!
 @brief Sets the alignment.
 @param alignment the alignment
 */
- (void)setAlignmentWithInt:(jint)alignment;

/*!
 @brief Sets the arabic shaping options.The option can be AR_NOVOWEL,
  AR_COMPOSEDTASHKEEL and AR_LIG.
 @param arabicOptions the arabic shaping options
 */
- (void)setArabicOptionsWithInt:(jint)arabicOptions;

/*!
 @brief Sets the canvas.
 If before a set of four canvases was set, it is being unset.
 @param canvas Canvas
 */
- (void)setCanvasWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas;

/*!
 @brief Sets the canvases.
 @param canvases Canvases
 */
- (void)setCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

/*!
 @brief Sets the extra space between paragraphs.
 @param extraParagraphSpace the extra space between paragraphs
 */
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace;

/*!
 @brief Sets the real width used by the largest line.
 Only used to set it to zero to start another measurement.
 @param filledWidth the real width used by the largest line
 */
- (void)setFilledWidthWithFloat:(jfloat)filledWidth;

/*!
 @brief Sets the following paragraph lines indent.
 @param indent the indent
 */
- (void)setFollowingIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the first paragraph line indent.
 @param indent the indent
 */
- (void)setIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the leading to fixed.
 @param leading the leading
 */
- (void)setLeadingWithFloat:(jfloat)leading;

/*!
 @brief Sets the right paragraph lines indent.
 @param indent the indent
 */
- (void)setRightIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the run direction.
 @param runDirection the run direction
 */
- (void)setRunDirectionWithInt:(jint)runDirection;

/*!
 @brief Simplified method for rectangular columns.
 @param phrase a  <CODE> Phrase </CODE>
 @param llx the lower left x corner
 @param lly the lower left y corner
 @param urx the upper right x corner
 @param ury the upper right y corner
 @param leading the leading
 @param alignment the column alignment
 */
- (void)setSimpleColumnWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                      withFloat:(jfloat)llx
                                      withFloat:(jfloat)lly
                                      withFloat:(jfloat)urx
                                      withFloat:(jfloat)ury
                                      withFloat:(jfloat)leading
                                        withInt:(jint)alignment;

/*!
 @brief Sets the ratio between the extra word spacing and the extra character
  spacing when the text is fully justified.
 Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more
  than extra character spacing.
  If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the
  extra character spacing will be zero.
 @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
 */
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio;

/*!
 @brief Replaces the current text array with this <CODE>Phrase</CODE>.
 Anything added previously with addElement() is lost.
 @param phrase the text
 */
- (void)setTextWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Enables/Disables adjustment of first line height based on max ascender.
 @param useAscender enable adjustment if true
 */
- (void)setUseAscenderWithBoolean:(jboolean)useAscender;

/*!
 @brief Sets the yLine.The line will be written to yLine-leading.
 @param yLine the yLine
 */
- (void)setYLineWithFloat:(jfloat)yLine;

#pragma mark Package-Private

/*!
 @brief Adds an element.Elements supported are <CODE>Paragraph</CODE>,
  <CODE>List</CODE>, <CODE>PdfPTable</CODE>, <CODE>Image</CODE> and 
 <CODE>Graphic</CODE>.
 <p>
  It removes all the text placed with <CODE>addText()</CODE>.
 @param element the  <CODE> Element </CODE>
 */
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

/*!
 @brief Adds a <CODE>Phrase</CODE> to the current text array.
 Will not have any effect if addElement() was called before.
 @param phrase the text
 */
- (void)addTextWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Creates an independent duplicated of the instance <CODE>org</CODE>.
 @param org the original  <CODE> ColumnText </CODE>
 @return the duplicated
 */
+ (ComAowagieTextPdfColumnText *)duplicateWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org;

/*!
 @brief Gets the width that the line will occupy after writing.
 Only the width of the first line is returned.
 @param phrase the  <CODE> Phrase </CODE>  containing the line
 @param runDirection the run direction
 @param arabicOptions the options for the arabic shaping
 @return the width of the line
 */
+ (jfloat)getWidthWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                   withInt:(jint)runDirection
                                   withInt:(jint)arabicOptions;

/*!
 @brief Sets the leading fixed and variable.The resultant leading will be
  fixedLeading+multipliedLeading*maxFontSize where maxFontSize is the
  size of the biggest font in the line.
 @param fixedLeading the fixed leading
 @param multipliedLeading the variable leading
 */
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading;

/*!
 @brief Simplified method for rectangular columns.
 @param llx the lower left x corner
 @param lly the lower left y corner
 @param urx the upper right x corner
 @param ury the upper right y corner
 */
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury;

/*!
 @brief Simplified method for rectangular columns.
 @param llx the lower left x corner
 @param lly the lower left y corner
 @param urx the upper right x corner
 @param ury the upper right y corner
 @param leading the leading
 @param alignment the column alignment
 */
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury
                       withFloat:(jfloat)leading
                         withInt:(jint)alignment;

/*!
 @brief Shows a line of text.Only the first line is written.
 @param canvas where the text is to be written to
 @param alignment the alignment
 @param phrase the  <CODE> Phrase </CODE>  with the text
 @param x the x reference position
 @param y the y reference position
 @param rotation the rotation to be applied in degrees counterclockwise
 */
+ (void)showTextAlignedWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas
                                                   withInt:(jint)alignment
                                  withComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                                 withFloat:(jfloat)x
                                                 withFloat:(jfloat)y
                                                 withFloat:(jfloat)rotation;

/*!
 @brief Shows a line of text.Only the first line is written.
 @param canvas where the text is to be written to
 @param alignment the alignment. It is not influenced by the run direction
 @param phrase the  <CODE> Phrase </CODE>  with the text
 @param x the x reference position
 @param y the y reference position
 @param rotation the rotation to be applied in degrees counterclockwise
 @param runDirection the run direction
 @param arabicOptions the options for the arabic shaping
 */
+ (void)showTextAlignedWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas
                                                   withInt:(jint)alignment
                                  withComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                                 withFloat:(jfloat)x
                                                 withFloat:(jfloat)y
                                                 withFloat:(jfloat)rotation
                                                   withInt:(jint)runDirection
                                                   withInt:(jint)arabicOptions;

/*!
 @brief Checks if the element has a height of 0.
 @return true or false
 @since 2.1.2
 */
- (jboolean)zeroHeightElement;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfColumnText)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, compositeElements_, JavaUtilLinkedList *)

/*!
 @brief Signals that there is no more text available.
 */
inline jint ComAowagieTextPdfColumnText_get_NO_MORE_TEXT(void);
#define ComAowagieTextPdfColumnText_NO_MORE_TEXT 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, NO_MORE_TEXT, jint)

/*!
 @brief Signals that there is no more column.
 */
inline jint ComAowagieTextPdfColumnText_get_NO_MORE_COLUMN(void);
#define ComAowagieTextPdfColumnText_NO_MORE_COLUMN 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, NO_MORE_COLUMN, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfPdfContentByte *canvas);

FOUNDATION_EXPORT ComAowagieTextPdfColumnText *new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfColumnText *create_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas);

FOUNDATION_EXPORT ComAowagieTextPdfColumnText *ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *org);

FOUNDATION_EXPORT jfloat ComAowagieTextPdfColumnText_getWidthWithComAowagieTextPhrase_withInt_withInt_(ComAowagieTextPhrase *phrase, jint runDirection, jint arabicOptions);

FOUNDATION_EXPORT void ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(ComAowagieTextPdfPdfContentByte *canvas, jint alignment, ComAowagieTextPhrase *phrase, jfloat x, jfloat y, jfloat rotation, jint runDirection, jint arabicOptions);

FOUNDATION_EXPORT void ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *canvas, jint alignment, ComAowagieTextPhrase *phrase, jfloat x, jfloat y, jfloat rotation);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfColumnText)

#endif

#pragma pop_macro("INCLUDE_ALL_ColumnText")
