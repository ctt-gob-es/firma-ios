//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/HashCode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_HashCode")
#ifdef RESTRICT_HashCode
#define INCLUDE_ALL_HashCode 0
#else
#define INCLUDE_ALL_HashCode 1
#endif
#undef RESTRICT_HashCode

#if !defined (ComHashCode_) && (INCLUDE_ALL_HashCode || defined(INCLUDE_ComHashCode))
#define ComHashCode_

/*!
 @brief This class is a convenience method to sequentially calculate hash code of the
  object based on the field values.The result depends on the order of elements
  appended.
 The exact formula is the same as for 
 <code>java.util.List.hashCode</code>.
  If you need order independent hash code just summate, multiply or XOR all
  elements. 
 <p>
  Suppose we have class: 
 @code

   <code>
  class Thing {
      long id;
      String name;
      float weight;
  } 
  </code>
   
@endcode
  The hash code calculation can be expressed in 2 forms. 
 <p>
  For maximum performance: 
 @code

   <code>
  public int hashCode() {
      int hashCode = HashCode.EMPTY_HASH_CODE;
      hashCode = HashCode.combine(hashCode, id);
      hashCode = HashCode.combine(hashCode, name);
      hashCode = HashCode.combine(hashCode, weight);
      return hashCode;
  } 
  </code>
   
@endcode
  
 <p>
  For convenience: <code>
  public int hashCode() {
      return new HashCode().append(id).append(name).append(weight).hashCode();
  } 
 </code>
 - seealso: java.util.List#hashCode()
 */
@interface ComHashCode : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithBoolean:(jboolean)value;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithDouble:(jdouble)value;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithFloat:(jfloat)value;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithInt:(jint)value;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithLong:(jlong)value;

/*!
 @brief Appends value's hashCode to the current hashCode.
 @param value new element
 @return this
 */
- (ComHashCode *)appendWithId:(id)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
           withBoolean:(jboolean)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
            withDouble:(jdouble)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
             withFloat:(jfloat)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
               withInt:(jint)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
              withLong:(jlong)value;

/*!
 @brief Combines hashCode of previous elements sequence and value's hashCode.
 @param hashCode previous hashCode value
 @param value new element
 @return combined hashCode
 */
+ (jint)combineWithInt:(jint)hashCode
                withId:(id)value;

/*!
 @brief Returns accumulated hashCode
 */
- (NSUInteger)hash;

@end

J2OBJC_EMPTY_STATIC_INIT(ComHashCode)

/*!
 @brief The hashCode value before any data is appended, equals to 1.
 - seealso: java.util.List#hashCode()
 */
inline jint ComHashCode_get_EMPTY_HASH_CODE(void);
#define ComHashCode_EMPTY_HASH_CODE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComHashCode, EMPTY_HASH_CODE, jint)

FOUNDATION_EXPORT void ComHashCode_init(ComHashCode *self);

FOUNDATION_EXPORT ComHashCode *new_ComHashCode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComHashCode *create_ComHashCode_init(void);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withBoolean_(jint hashCode, jboolean value);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withLong_(jint hashCode, jlong value);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withFloat_(jint hashCode, jfloat value);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withDouble_(jint hashCode, jdouble value);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withId_(jint hashCode, id value);

FOUNDATION_EXPORT jint ComHashCode_combineWithInt_withInt_(jint hashCode, jint value);

J2OBJC_TYPE_LITERAL_HEADER(ComHashCode)

#endif

#pragma pop_macro("INCLUDE_ALL_HashCode")
