//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/AWTFont.java
//

#include "AWTFont.h"
#include "J2ObjC_source.h"

#if !__has_feature(objc_arc)
#error "AWTFont must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtAWTFont () {
 @public
  NSString *name_;
  jint size_;
  jboolean bold_;
  jboolean italic_;
}

@end

J2OBJC_FIELD_SETTER(HarmonyJavaAwtAWTFont, name_, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/AWTFont.java"


#line 3
@implementation HarmonyJavaAwtAWTFont


#line 15
- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)style
                         withInt:(jint)size {
  HarmonyJavaAwtAWTFont_initWithNSString_withInt_withInt_(self, name, style, size);
  return self;
}


#line 28
- (NSString *)getFontName {
  return JreStrcat("$$$", name_, ([self isBold] ? @" Bold" : @""), ([self isItalic] ? @" Italic" : @""));
}

- (jboolean)isBold {
  return bold_;
}

- (jboolean)isItalic {
  return italic_;
}

- (NSString *)getName {
  return self->name_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withInt:);
  methods[1].selector = @selector(getFontName);
  methods[2].selector = @selector(isBold);
  methods[3].selector = @selector(isItalic);
  methods[4].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "I", .constantValue.asInt = HarmonyJavaAwtAWTFont_NORMAL, 0x19, -1, -1, -1, -1 },
    { "BOLD", "I", .constantValue.asInt = HarmonyJavaAwtAWTFont_BOLD, 0x19, -1, -1, -1, -1 },
    { "ITALIC", "I", .constantValue.asInt = HarmonyJavaAwtAWTFont_ITALIC, 0x19, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bold_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "italic_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;II" };
  static const J2ObjcClassInfo _HarmonyJavaAwtAWTFont = { "AWTFont", "harmony.java.awt", ptrTable, methods, fields, 7, 0x1, 5, 7, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtAWTFont;
}

@end


#line 15
void HarmonyJavaAwtAWTFont_initWithNSString_withInt_withInt_(HarmonyJavaAwtAWTFont *self, NSString *name, jint style, jint size) {
  NSObject_init(self);
  
#line 16
  self->name_ = name;
  
#line 18
  if ((style & HarmonyJavaAwtAWTFont_BOLD) == HarmonyJavaAwtAWTFont_BOLD) {
    self->bold_ = true;
  }
  if ((style & HarmonyJavaAwtAWTFont_ITALIC) == HarmonyJavaAwtAWTFont_ITALIC) {
    self->italic_ = true;
  }
  
#line 25
  self->size_ = size;
}


#line 15
HarmonyJavaAwtAWTFont *new_HarmonyJavaAwtAWTFont_initWithNSString_withInt_withInt_(NSString *name, jint style, jint size) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtAWTFont, initWithNSString_withInt_withInt_, name, style, size)
}


#line 15
HarmonyJavaAwtAWTFont *create_HarmonyJavaAwtAWTFont_initWithNSString_withInt_withInt_(NSString *name, jint style, jint size) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtAWTFont, initWithNSString_withInt_withInt_, name, style, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtAWTFont)
