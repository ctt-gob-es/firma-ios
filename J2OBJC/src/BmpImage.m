//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/BmpImage.java
//

#include "BadElementException.h"
#include "BmpImage.h"
#include "ExceptionConverter.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "ImgRaw.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfString.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

#if !__has_feature(objc_arc)
#error "BmpImage must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCodecBmpImage () {
 @public
  JavaIoInputStream *inputStream_;
  jlong bitmapFileSize_;
  jlong bitmapOffset_;
  jlong compression_;
  jlong imageSize_;
  IOSByteArray *palette_;
  jint imageType_;
  jint numBands_;
  jboolean isBottomUp_;
  jint bitsPerPixel_;
  jint redMask_;
  jint greenMask_;
  jint blueMask_;
  jint alphaMask_;
  JavaUtilHashMap *properties_;
  jlong xPelsPerMeter_;
  jlong yPelsPerMeter_;
  jint width_;
  jint height_;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                              withBoolean:(jboolean)noHeader
                                  withInt:(jint)size;

/*!
 @brief Reads a BMP from a stream.The stream is not closed.
 @param is the stream
 @throw IOExceptionon error
 @return the image
 */
+ (ComAowagieTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is;

- (void)processWithJavaIoInputStream:(JavaIoInputStream *)stream
                         withBoolean:(jboolean)noHeader;

- (IOSByteArray *)getPaletteWithInt:(jint)group;

- (ComAowagieTextImage *)getImage;

- (ComAowagieTextImage *)indexedModelWithByteArray:(IOSByteArray *)bdata
                                           withInt:(jint)bpc
                                           withInt:(jint)paletteEntries;

- (void)readPaletteWithInt:(jint)sizeOfPalette;

- (ComAowagieTextImage *)read1BitWithInt:(jint)paletteEntries;

- (ComAowagieTextImage *)read4BitWithInt:(jint)paletteEntries;

- (ComAowagieTextImage *)read8BitWithInt:(jint)paletteEntries;

- (void)read24BitWithByteArray:(IOSByteArray *)bdata;

- (jint)findMaskWithInt:(jint)mask;

- (jint)findShiftWithInt:(jint)mask;

- (ComAowagieTextImage *)read1632BitWithBoolean:(jboolean)is32;

- (ComAowagieTextImage *)readRLE8;

- (ComAowagieTextImage *)readRLE4;

- (IOSByteArray *)decodeRLEWithBoolean:(jboolean)is8
                         withByteArray:(IOSByteArray *)values;

- (jint)readUnsignedByteWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jint)readUnsignedShortWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jint)readShortWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jint)readWordWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jlong)readUnsignedIntWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jint)readIntWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jlong)readDWordWithJavaIoInputStream:(JavaIoInputStream *)stream;

- (jint)readLongWithJavaIoInputStream:(JavaIoInputStream *)stream;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecBmpImage, inputStream_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecBmpImage, palette_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecBmpImage, properties_, JavaUtilHashMap *)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_2_1_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_2_1_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_2_4_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_2_4_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_2_8_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_2_8_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_2_24_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_2_24_BIT 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_2_24_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_1_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_1_BIT 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_1_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_4_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_4_BIT 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_4_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_8_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_8_BIT 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_8_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_24_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_24_BIT 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_24_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_NT_16_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_16_BIT 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_NT_16_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_3_NT_32_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_32_BIT 9
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_3_NT_32_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_1_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_1_BIT 10
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_1_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_4_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_4_BIT 11
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_4_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_8_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_8_BIT 12
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_8_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_16_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_16_BIT 13
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_16_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_24_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_24_BIT 14
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_24_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_VERSION_4_32_BIT(void);
#define ComAowagieTextPdfCodecBmpImage_VERSION_4_32_BIT 15
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, VERSION_4_32_BIT, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_LCS_CALIBRATED_RGB(void);
#define ComAowagieTextPdfCodecBmpImage_LCS_CALIBRATED_RGB 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, LCS_CALIBRATED_RGB, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_LCS_sRGB(void);
#define ComAowagieTextPdfCodecBmpImage_LCS_sRGB 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, LCS_sRGB, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_LCS_CMYK(void);
#define ComAowagieTextPdfCodecBmpImage_LCS_CMYK 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, LCS_CMYK, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_BI_RGB(void);
#define ComAowagieTextPdfCodecBmpImage_BI_RGB 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, BI_RGB, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_BI_RLE8(void);
#define ComAowagieTextPdfCodecBmpImage_BI_RLE8 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, BI_RLE8, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_BI_RLE4(void);
#define ComAowagieTextPdfCodecBmpImage_BI_RLE4 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, BI_RLE4, jint)

inline jint ComAowagieTextPdfCodecBmpImage_get_BI_BITFIELDS(void);
#define ComAowagieTextPdfCodecBmpImage_BI_BITFIELDS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfCodecBmpImage, BI_BITFIELDS, jint)

__attribute__((unused)) static void ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *is, jboolean noHeader, jint size);

__attribute__((unused)) static ComAowagieTextPdfCodecBmpImage *new_ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(JavaIoInputStream *is, jboolean noHeader, jint size) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfCodecBmpImage *create_ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(JavaIoInputStream *is, jboolean noHeader, jint size);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_(JavaIoInputStream *is);

__attribute__((unused)) static void ComAowagieTextPdfCodecBmpImage_processWithJavaIoInputStream_withBoolean_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream, jboolean noHeader);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCodecBmpImage_getPaletteWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint group);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImage(ComAowagieTextPdfCodecBmpImage *self);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(ComAowagieTextPdfCodecBmpImage *self, IOSByteArray *bdata, jint bpc, jint paletteEntries);

__attribute__((unused)) static void ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint sizeOfPalette);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries);

__attribute__((unused)) static void ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(ComAowagieTextPdfCodecBmpImage *self, IOSByteArray *bdata);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint mask);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint mask);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(ComAowagieTextPdfCodecBmpImage *self, jboolean is32);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_readRLE8(ComAowagieTextPdfCodecBmpImage *self);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_readRLE4(ComAowagieTextPdfCodecBmpImage *self);

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfCodecBmpImage_decodeRLEWithBoolean_withByteArray_(ComAowagieTextPdfCodecBmpImage *self, jboolean is8, IOSByteArray *values);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readUnsignedShortWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readShortWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jlong ComAowagieTextPdfCodecBmpImage_readUnsignedIntWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readIntWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jlong ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

__attribute__((unused)) static jint ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/codec/BmpImage.java"


#line 115
@implementation ComAowagieTextPdfCodecBmpImage


#line 167
- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)is
                              withBoolean:(jboolean)noHeader
                                  withInt:(jint)size {
  ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(self, is, noHeader, size);
  return self;
}


#line 178
+ (ComAowagieTextImage *)getImageWithJavaNetURL:(JavaNetURL *)url {
  return ComAowagieTextPdfCodecBmpImage_getImageWithJavaNetURL_(url);
}


#line 198
+ (ComAowagieTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is {
  return ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_(is);
}


#line 210
+ (ComAowagieTextImage *)getImageWithJavaIoInputStream:(JavaIoInputStream *)is
                                           withBoolean:(jboolean)noHeader
                                               withInt:(jint)size {
  return ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_withBoolean_withInt_(is, noHeader, size);
}


#line 230
+ (ComAowagieTextImage *)getImageWithByteArray:(IOSByteArray *)data {
  return ComAowagieTextPdfCodecBmpImage_getImageWithByteArray_(data);
}


#line 238
- (void)processWithJavaIoInputStream:(JavaIoInputStream *)stream
                         withBoolean:(jboolean)noHeader {
  ComAowagieTextPdfCodecBmpImage_processWithJavaIoInputStream_withBoolean_(self, stream, noHeader);
}


#line 628
- (IOSByteArray *)getPaletteWithInt:(jint)group {
  return ComAowagieTextPdfCodecBmpImage_getPaletteWithInt_(self, group);
}


#line 644
- (ComAowagieTextImage *)getImage {
  return ComAowagieTextPdfCodecBmpImage_getImage(self);
}


#line 762
- (ComAowagieTextImage *)indexedModelWithByteArray:(IOSByteArray *)bdata
                                           withInt:(jint)bpc
                                           withInt:(jint)paletteEntries {
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, bdata, bpc, paletteEntries);
}


#line 777
- (void)readPaletteWithInt:(jint)sizeOfPalette {
  ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(self, sizeOfPalette);
}


#line 795
- (ComAowagieTextImage *)read1BitWithInt:(jint)paletteEntries {
  return ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(self, paletteEntries);
}


#line 840
- (ComAowagieTextImage *)read4BitWithInt:(jint)paletteEntries {
  return ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(self, paletteEntries);
}


#line 886
- (ComAowagieTextImage *)read8BitWithInt:(jint)paletteEntries {
  return ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(self, paletteEntries);
}


#line 931
- (void)read24BitWithByteArray:(IOSByteArray *)bdata {
  ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(self, bdata);
}


#line 990
- (jint)findMaskWithInt:(jint)mask {
  return ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(self, mask);
}


#line 1001
- (jint)findShiftWithInt:(jint)mask {
  return ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(self, mask);
}


#line 1012
- (ComAowagieTextImage *)read1632BitWithBoolean:(jboolean)is32 {
  return ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(self, is32);
}


#line 1080
- (ComAowagieTextImage *)readRLE8 {
  return ComAowagieTextPdfCodecBmpImage_readRLE8(self);
}


#line 1120
- (ComAowagieTextImage *)readRLE4 {
  return ComAowagieTextPdfCodecBmpImage_readRLE4(self);
}


#line 1171
- (IOSByteArray *)decodeRLEWithBoolean:(jboolean)is8
                         withByteArray:(IOSByteArray *)values {
  return ComAowagieTextPdfCodecBmpImage_decodeRLEWithBoolean_withByteArray_(self, is8, values);
}


#line 1255
- (jint)readUnsignedByteWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
}


#line 1260
- (jint)readUnsignedShortWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readUnsignedShortWithJavaIoInputStream_(self, stream);
}


#line 1267
- (jint)readShortWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readShortWithJavaIoInputStream_(self, stream);
}


#line 1274
- (jint)readWordWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, stream);
}


#line 1279
- (jlong)readUnsignedIntWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readUnsignedIntWithJavaIoInputStream_(self, stream);
}


#line 1289
- (jint)readIntWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readIntWithJavaIoInputStream_(self, stream);
}


#line 1298
- (jlong)readDWordWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, stream);
}


#line 1303
- (jint)readLongWithJavaIoInputStream:(JavaIoInputStream *)stream {
  return ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, stream);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x9, 2, 3, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0xa, 2, 4, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x9, 2, 0, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x9, 2, 5, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 9, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, 15, 9, 10, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, 16, 9, 10, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, 17, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 19, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, 21, 22, 10, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x2, -1, -1, 10, -1, -1, -1 },
    { NULL, "[B", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 25, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 28, 4, 1, -1, -1, -1 },
    { NULL, "J", 0x2, 29, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 30, 4, 1, -1, -1, -1 },
    { NULL, "J", 0x2, 31, 4, 1, -1, -1, -1 },
    { NULL, "I", 0x2, 32, 4, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaIoInputStream:withBoolean:withInt:);
  methods[1].selector = @selector(getImageWithJavaNetURL:);
  methods[2].selector = @selector(getImageWithJavaIoInputStream:);
  methods[3].selector = @selector(getImageWithJavaIoInputStream:withBoolean:withInt:);
  methods[4].selector = @selector(getImageWithByteArray:);
  methods[5].selector = @selector(processWithJavaIoInputStream:withBoolean:);
  methods[6].selector = @selector(getPaletteWithInt:);
  methods[7].selector = @selector(getImage);
  methods[8].selector = @selector(indexedModelWithByteArray:withInt:withInt:);
  methods[9].selector = @selector(readPaletteWithInt:);
  methods[10].selector = @selector(read1BitWithInt:);
  methods[11].selector = @selector(read4BitWithInt:);
  methods[12].selector = @selector(read8BitWithInt:);
  methods[13].selector = @selector(read24BitWithByteArray:);
  methods[14].selector = @selector(findMaskWithInt:);
  methods[15].selector = @selector(findShiftWithInt:);
  methods[16].selector = @selector(read1632BitWithBoolean:);
  methods[17].selector = @selector(readRLE8);
  methods[18].selector = @selector(readRLE4);
  methods[19].selector = @selector(decodeRLEWithBoolean:withByteArray:);
  methods[20].selector = @selector(readUnsignedByteWithJavaIoInputStream:);
  methods[21].selector = @selector(readUnsignedShortWithJavaIoInputStream:);
  methods[22].selector = @selector(readShortWithJavaIoInputStream:);
  methods[23].selector = @selector(readWordWithJavaIoInputStream:);
  methods[24].selector = @selector(readUnsignedIntWithJavaIoInputStream:);
  methods[25].selector = @selector(readIntWithJavaIoInputStream:);
  methods[26].selector = @selector(readDWordWithJavaIoInputStream:);
  methods[27].selector = @selector(readLongWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "inputStream_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitmapFileSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitmapOffset_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compression_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageSize_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "palette_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numBands_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isBottomUp_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitsPerPixel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "redMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "greenMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "blueMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alphaMask_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "properties_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "xPelsPerMeter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yPelsPerMeter_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "VERSION_2_1_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_2_4_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_2_8_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_2_24_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_2_24_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_1_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_1_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_4_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_4_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_8_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_8_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_24_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_24_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_NT_16_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_16_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_3_NT_32_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_32_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_1_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_1_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_4_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_4_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_8_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_8_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_16_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_16_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_24_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_24_BIT, 0x1a, -1, -1, -1, -1 },
    { "VERSION_4_32_BIT", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_VERSION_4_32_BIT, 0x1a, -1, -1, -1, -1 },
    { "LCS_CALIBRATED_RGB", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_LCS_CALIBRATED_RGB, 0x1a, -1, -1, -1, -1 },
    { "LCS_sRGB", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_LCS_sRGB, 0x1a, -1, -1, -1, -1 },
    { "LCS_CMYK", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_LCS_CMYK, 0x1a, -1, -1, -1, -1 },
    { "BI_RGB", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_BI_RGB, 0x1a, -1, -1, -1, -1 },
    { "BI_RLE8", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_BI_RLE8, 0x1a, -1, -1, -1, -1 },
    { "BI_RLE4", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_BI_RLE4, 0x1a, -1, -1, -1, -1 },
    { "BI_BITFIELDS", "I", .constantValue.asInt = ComAowagieTextPdfCodecBmpImage_BI_BITFIELDS, 0x1a, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoInputStream;ZI", "LJavaIoIOException;", "getImage", "LJavaNetURL;", "LJavaIoInputStream;", "[B", "process", "LJavaIoInputStream;Z", "getPalette", "I", "LJavaIoIOException;LComAowagieTextBadElementException;", "indexedModel", "[BII", "LComAowagieTextBadElementException;", "readPalette", "read1Bit", "read4Bit", "read8Bit", "read24Bit", "findMask", "findShift", "read1632Bit", "Z", "decodeRLE", "Z[B", "readUnsignedByte", "readUnsignedShort", "readShort", "readWord", "readUnsignedInt", "readInt", "readDWord", "readLong" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecBmpImage = { "BmpImage", "com.aowagie.text.pdf.codec", ptrTable, methods, fields, 7, 0x1, 28, 42, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecBmpImage;
}

@end


#line 167
void ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *is, jboolean noHeader, jint size) {
  NSObject_init(self);
  self->properties_ = new_JavaUtilLinkedHashMap_init();
  
#line 168
  self->bitmapFileSize_ = size;
  self->bitmapOffset_ = 0;
  ComAowagieTextPdfCodecBmpImage_processWithJavaIoInputStream_withBoolean_(self, is, noHeader);
}


#line 167
ComAowagieTextPdfCodecBmpImage *new_ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(JavaIoInputStream *is, jboolean noHeader, jint size) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecBmpImage, initWithJavaIoInputStream_withBoolean_withInt_, is, noHeader, size)
}


#line 167
ComAowagieTextPdfCodecBmpImage *create_ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(JavaIoInputStream *is, jboolean noHeader, jint size) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecBmpImage, initWithJavaIoInputStream_withBoolean_withInt_, is, noHeader, size)
}


#line 178
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImageWithJavaNetURL_(JavaNetURL *url) {
  ComAowagieTextPdfCodecBmpImage_initialize();
  
#line 179
  JavaIoInputStream *is = nil;
  @try {
    is = [((JavaNetURL *) nil_chk(url)) openStream];
    ComAowagieTextImage *img = ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_(is);
    [((ComAowagieTextImage *) nil_chk(img)) setUrlWithJavaNetURL:url];
    return img;
  }
  @finally {
    if (is != nil) {
      [is close];
    }
  }
}


#line 198
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_(JavaIoInputStream *is) {
  ComAowagieTextPdfCodecBmpImage_initialize();
  
#line 199
  return ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_withBoolean_withInt_(is, false, 0);
}


#line 210
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_withBoolean_withInt_(JavaIoInputStream *is, jboolean noHeader, jint size) {
  ComAowagieTextPdfCodecBmpImage_initialize();
  
#line 211
  ComAowagieTextPdfCodecBmpImage *bmp = new_ComAowagieTextPdfCodecBmpImage_initWithJavaIoInputStream_withBoolean_withInt_(is, noHeader, size);
  @try {
    ComAowagieTextImage *img = ComAowagieTextPdfCodecBmpImage_getImage(bmp);
    [((ComAowagieTextImage *) nil_chk(img)) setDpiWithInt:JreFpToInt((bmp->xPelsPerMeter_ * 0.0254 + 0.5)) withInt:JreFpToInt((bmp->yPelsPerMeter_ * 0.0254 + 0.5))];
    [img setOriginalTypeWithInt:ComAowagieTextImage_ORIGINAL_BMP];
    return img;
  }
  @catch (ComAowagieTextBadElementException *be) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(be);
  }
}


#line 230
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImageWithByteArray_(IOSByteArray *data) {
  ComAowagieTextPdfCodecBmpImage_initialize();
  
#line 231
  JavaIoByteArrayInputStream *is = new_JavaIoByteArrayInputStream_initWithByteArray_(data);
  ComAowagieTextImage *img = ComAowagieTextPdfCodecBmpImage_getImageWithJavaIoInputStream_(is);
  [((ComAowagieTextImage *) nil_chk(img)) setOriginalDataWithByteArray:data];
  return img;
}


#line 238
void ComAowagieTextPdfCodecBmpImage_processWithJavaIoInputStream_withBoolean_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream, jboolean noHeader) {
  if (noHeader || [stream isKindOfClass:[JavaIoBufferedInputStream class]]) {
    self->inputStream_ = stream;
  }
  else {
    
#line 242
    self->inputStream_ = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(stream);
  }
  if (!noHeader) {
    
#line 246
    if (!(ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, self->inputStream_) == 'B' &&
#line 247
    ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, self->inputStream_) == 'M')) {
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 249
      @"Invalid magic value for BMP file.");
    }
    
#line 253
    self->bitmapFileSize_ = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
    
#line 256
    ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
    ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
    
#line 260
    self->bitmapOffset_ = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
  }
  
#line 265
  jlong size = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
  
#line 267
  if (size == 12) {
    self->width_ = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
    self->height_ = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
  }
  else {
    
#line 271
    self->width_ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
    self->height_ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
  }
  
#line 275
  jint planes = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
  self->bitsPerPixel_ = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
  
#line 278
  (void) [((JavaUtilHashMap *) nil_chk(self->properties_)) putWithId:@"color_planes" withId:new_JavaLangInteger_initWithInt_(planes)];
  (void) [self->properties_ putWithId:@"bits_per_pixel" withId:new_JavaLangInteger_initWithInt_(self->bitsPerPixel_)];
  
#line 283
  self->numBands_ = 3;
  if (self->bitmapOffset_ == 0) {
    self->bitmapOffset_ = size;
  }
  if (size == 12) {
    
#line 289
    (void) [self->properties_ putWithId:@"bmp_version" withId:@"BMP v. 2.x"];
    
#line 292
    if (self->bitsPerPixel_ == 1) {
      self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT;
    }
    else
#line 294
    if (self->bitsPerPixel_ == 4) {
      self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT;
    }
    else
#line 296
    if (self->bitsPerPixel_ == 8) {
      self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT;
    }
    else
#line 298
    if (self->bitsPerPixel_ == 24) {
      self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_2_24_BIT;
    }
    
#line 303
    jint numberOfEntries = (jint) (JreLongDiv((self->bitmapOffset_ - 14 - size), 3));
    jint sizeOfPalette = numberOfEntries * 3;
    if (self->bitmapOffset_ == size) {
      switch (self->imageType_) {
        case ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT:
        sizeOfPalette = 2 * 3;
        break;
        case ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT:
        sizeOfPalette = 16 * 3;
        break;
        case ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT:
        sizeOfPalette = 256 * 3;
        break;
        case ComAowagieTextPdfCodecBmpImage_VERSION_2_24_BIT:
        sizeOfPalette = 0;
        break;
      }
      self->bitmapOffset_ = size + sizeOfPalette;
    }
    ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(self, sizeOfPalette);
  }
  else {
    self->compression_ = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
    self->imageSize_ = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
    self->xPelsPerMeter_ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
    self->yPelsPerMeter_ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
    jlong colorsUsed = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
    jlong colorsImportant = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
    
#line 332
    switch ((jint) self->compression_) {
      case ComAowagieTextPdfCodecBmpImage_BI_RGB:
      (void) [self->properties_ putWithId:@"compression" withId:@"BI_RGB"];
      break;
      
#line 337
      case ComAowagieTextPdfCodecBmpImage_BI_RLE8:
      (void) [self->properties_ putWithId:@"compression" withId:@"BI_RLE8"];
      break;
      
#line 341
      case ComAowagieTextPdfCodecBmpImage_BI_RLE4:
      (void) [self->properties_ putWithId:@"compression" withId:@"BI_RLE4"];
      break;
      
#line 345
      case ComAowagieTextPdfCodecBmpImage_BI_BITFIELDS:
      (void) [self->properties_ putWithId:@"compression" withId:@"BI_BITFIELDS"];
      break;
    }
    
#line 350
    (void) [self->properties_ putWithId:@"x_pixels_per_meter" withId:new_JavaLangLong_initWithLong_(self->xPelsPerMeter_)];
    (void) [self->properties_ putWithId:@"y_pixels_per_meter" withId:new_JavaLangLong_initWithLong_(self->yPelsPerMeter_)];
    (void) [self->properties_ putWithId:@"colors_used" withId:new_JavaLangLong_initWithLong_(colorsUsed)];
    (void) [self->properties_ putWithId:@"colors_important" withId:new_JavaLangLong_initWithLong_(colorsImportant)];
    
#line 355
    if (size == 40) {
      {
        
#line 390
        jint numberOfEntries;
        jint sizeOfPalette;
        
#line 357
        switch ((jint) self->compression_) {
          
#line 359
          case ComAowagieTextPdfCodecBmpImage_BI_RGB:
          case ComAowagieTextPdfCodecBmpImage_BI_RLE8:
          case ComAowagieTextPdfCodecBmpImage_BI_RLE4:
          
#line 363
          if (self->bitsPerPixel_ == 1) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_1_BIT;
          }
          else
#line 365
          if (self->bitsPerPixel_ == 4) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_4_BIT;
          }
          else
#line 367
          if (self->bitsPerPixel_ == 8) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_8_BIT;
          }
          else
#line 369
          if (self->bitsPerPixel_ == 24) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_24_BIT;
          }
          else
#line 371
          if (self->bitsPerPixel_ == 16) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_16_BIT;
            self->redMask_ = (jint) 0x7C00;
            self->greenMask_ = (jint) 0x3E0;
            self->blueMask_ = (jint) 0x1F;
            (void) [self->properties_ putWithId:@"red_mask" withId:new_JavaLangInteger_initWithInt_(self->redMask_)];
            (void) [self->properties_ putWithId:@"green_mask" withId:new_JavaLangInteger_initWithInt_(self->greenMask_)];
            (void) [self->properties_ putWithId:@"blue_mask" withId:new_JavaLangInteger_initWithInt_(self->blueMask_)];
          }
          else
#line 379
          if (self->bitsPerPixel_ == 32) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_32_BIT;
            self->redMask_ = (jint) 0x00FF0000;
            self->greenMask_ = (jint) 0x0000FF00;
            self->blueMask_ = (jint) 0x000000FF;
            (void) [self->properties_ putWithId:@"red_mask" withId:new_JavaLangInteger_initWithInt_(self->redMask_)];
            (void) [self->properties_ putWithId:@"green_mask" withId:new_JavaLangInteger_initWithInt_(self->greenMask_)];
            (void) [self->properties_ putWithId:@"blue_mask" withId:new_JavaLangInteger_initWithInt_(self->blueMask_)];
          }
          numberOfEntries =
#line 390
          (jint) (JreLongDiv((self->bitmapOffset_ - 14 - size), 4));
          sizeOfPalette = numberOfEntries * 4;
          if (self->bitmapOffset_ == size) {
            switch (self->imageType_) {
              case ComAowagieTextPdfCodecBmpImage_VERSION_3_1_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 2 : colorsUsed) * 4;
              break;
              case ComAowagieTextPdfCodecBmpImage_VERSION_3_4_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 16 : colorsUsed) * 4;
              break;
              case ComAowagieTextPdfCodecBmpImage_VERSION_3_8_BIT:
              sizeOfPalette = (jint) (colorsUsed == 0 ? 256 : colorsUsed) * 4;
              break;
              default:
              sizeOfPalette = 0;
              break;
            }
            self->bitmapOffset_ = size + sizeOfPalette;
          }
          ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(self, sizeOfPalette);
          
#line 411
          (void) [self->properties_ putWithId:@"bmp_version" withId:@"BMP v. 3.x"];
          break;
          
#line 414
          case ComAowagieTextPdfCodecBmpImage_BI_BITFIELDS:
          
#line 416
          if (self->bitsPerPixel_ == 16) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_16_BIT;
          }
          else
#line 418
          if (self->bitsPerPixel_ == 32) {
            self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_32_BIT;
          }
          
#line 423
          self->redMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
          self->greenMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
          self->blueMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
          
#line 427
          (void) [self->properties_ putWithId:@"red_mask" withId:new_JavaLangInteger_initWithInt_(self->redMask_)];
          (void) [self->properties_ putWithId:@"green_mask" withId:new_JavaLangInteger_initWithInt_(self->greenMask_)];
          (void) [self->properties_ putWithId:@"blue_mask" withId:new_JavaLangInteger_initWithInt_(self->blueMask_)];
          
#line 431
          if (colorsUsed != 0) {
            
#line 433
            sizeOfPalette = (jint) colorsUsed * 4;
            ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(self, sizeOfPalette);
          }
          
#line 437
          (void) [self->properties_ putWithId:@"bmp_version" withId:@"BMP v. 3.x NT"];
          break;
          
#line 440
          default:
          @throw new_JavaLangRuntimeException_initWithNSString_(
#line 442
          @"Invalid compression specified in BMP file.");
        }
      }
    }
    else
#line 444
    if (size == 108) {
      
#line 447
      (void) [self->properties_ putWithId:@"bmp_version" withId:@"BMP v. 4.x"];
      
#line 450
      self->redMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      self->greenMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      self->blueMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      
#line 454
      self->alphaMask_ = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      jlong csType = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      jint redX = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint redY = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint redZ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint greenX = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint greenY = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint greenZ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint blueX = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint blueY = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jint blueZ = ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(self, self->inputStream_);
      jlong gammaRed = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      jlong gammaGreen = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      jlong gammaBlue = ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
      
#line 469
      if (self->bitsPerPixel_ == 1) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_1_BIT;
      }
      else
#line 471
      if (self->bitsPerPixel_ == 4) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_4_BIT;
      }
      else
#line 473
      if (self->bitsPerPixel_ == 8) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_8_BIT;
      }
      else
#line 475
      if (self->bitsPerPixel_ == 16) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_16_BIT;
        if ((jint) self->compression_ == ComAowagieTextPdfCodecBmpImage_BI_RGB) {
          self->redMask_ = (jint) 0x7C00;
          self->greenMask_ = (jint) 0x3E0;
          self->blueMask_ = (jint) 0x1F;
        }
      }
      else
#line 482
      if (self->bitsPerPixel_ == 24) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_24_BIT;
      }
      else
#line 484
      if (self->bitsPerPixel_ == 32) {
        self->imageType_ = ComAowagieTextPdfCodecBmpImage_VERSION_4_32_BIT;
        if ((jint) self->compression_ == ComAowagieTextPdfCodecBmpImage_BI_RGB) {
          self->redMask_ = (jint) 0x00FF0000;
          self->greenMask_ = (jint) 0x0000FF00;
          self->blueMask_ = (jint) 0x000000FF;
        }
      }
      
#line 493
      (void) [self->properties_ putWithId:@"red_mask" withId:new_JavaLangInteger_initWithInt_(self->redMask_)];
      (void) [self->properties_ putWithId:@"green_mask" withId:new_JavaLangInteger_initWithInt_(self->greenMask_)];
      (void) [self->properties_ putWithId:@"blue_mask" withId:new_JavaLangInteger_initWithInt_(self->blueMask_)];
      (void) [self->properties_ putWithId:@"alpha_mask" withId:new_JavaLangInteger_initWithInt_(self->alphaMask_)];
      
#line 499
      jint numberOfEntries = (jint) (JreLongDiv((self->bitmapOffset_ - 14 - size), 4));
      jint sizeOfPalette = numberOfEntries * 4;
      if (self->bitmapOffset_ == size) {
        switch (self->imageType_) {
          case ComAowagieTextPdfCodecBmpImage_VERSION_4_1_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 2 : colorsUsed) * 4;
          break;
          case ComAowagieTextPdfCodecBmpImage_VERSION_4_4_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 16 : colorsUsed) * 4;
          break;
          case ComAowagieTextPdfCodecBmpImage_VERSION_4_8_BIT:
          sizeOfPalette = (jint) (colorsUsed == 0 ? 256 : colorsUsed) * 4;
          break;
          default:
          sizeOfPalette = 0;
          break;
        }
        self->bitmapOffset_ = size + sizeOfPalette;
      }
      ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(self, sizeOfPalette);
      
#line 520
      switch ((jint) csType) {
        case ComAowagieTextPdfCodecBmpImage_LCS_CALIBRATED_RGB:
        
#line 523
        (void) [self->properties_ putWithId:@"color_space" withId:@"LCS_CALIBRATED_RGB"];
        (void) [self->properties_ putWithId:@"redX" withId:new_JavaLangInteger_initWithInt_(redX)];
        (void) [self->properties_ putWithId:@"redY" withId:new_JavaLangInteger_initWithInt_(redY)];
        (void) [self->properties_ putWithId:@"redZ" withId:new_JavaLangInteger_initWithInt_(redZ)];
        (void) [self->properties_ putWithId:@"greenX" withId:new_JavaLangInteger_initWithInt_(greenX)];
        (void) [self->properties_ putWithId:@"greenY" withId:new_JavaLangInteger_initWithInt_(greenY)];
        (void) [self->properties_ putWithId:@"greenZ" withId:new_JavaLangInteger_initWithInt_(greenZ)];
        (void) [self->properties_ putWithId:@"blueX" withId:new_JavaLangInteger_initWithInt_(blueX)];
        (void) [self->properties_ putWithId:@"blueY" withId:new_JavaLangInteger_initWithInt_(blueY)];
        (void) [self->properties_ putWithId:@"blueZ" withId:new_JavaLangInteger_initWithInt_(blueZ)];
        (void) [self->properties_ putWithId:@"gamma_red" withId:new_JavaLangLong_initWithLong_(gammaRed)];
        (void) [self->properties_ putWithId:@"gamma_green" withId:new_JavaLangLong_initWithLong_(gammaGreen)];
        (void) [self->properties_ putWithId:@"gamma_blue" withId:new_JavaLangLong_initWithLong_(gammaBlue)];
        
#line 538
        @throw new_JavaLangRuntimeException_initWithNSString_(
#line 539
        @"Not implemented yet.");
        
#line 541
        case ComAowagieTextPdfCodecBmpImage_LCS_sRGB:
        
#line 543
        (void) [self->properties_ putWithId:@"color_space" withId:@"LCS_sRGB"];
        break;
        
#line 546
        case ComAowagieTextPdfCodecBmpImage_LCS_CMYK:
        (void) [self->properties_ putWithId:@"color_space" withId:@"LCS_CMYK"];
        
#line 549
        @throw new_JavaLangRuntimeException_initWithNSString_(
#line 550
        @"Not implemented yet.");
      }
    }
    else {
      (void) [self->properties_ putWithId:@"bmp_version" withId:@"BMP v. 5.x"];
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 556
      @"BMP version 5 not implemented yet.");
    }
  }
  
#line 560
  if (self->height_ > 0) {
    
#line 562
    self->isBottomUp_ = true;
  }
  else {
    self->isBottomUp_ = false;
    self->height_ = JavaLangMath_absWithInt_(self->height_);
  }
  
#line 569
  if (self->bitsPerPixel_ == 1 || self->bitsPerPixel_ == 4 || self->bitsPerPixel_ == 8) {
    
#line 571
    self->numBands_ = 1;
    
#line 575
    IOSByteArray *r;
    
#line 575
    IOSByteArray *g;
    
#line 575
    IOSByteArray *b;
    jint sizep;
    if (self->imageType_ == ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT ||
#line 578
    self->imageType_ == ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT ||
#line 579
    self->imageType_ == ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT) {
      
#line 581
      sizep = JreIntDiv(((IOSByteArray *) nil_chk(self->palette_))->size_, 3);
      
#line 583
      if (sizep > 256) {
        sizep = 256;
      }
      
#line 587
      jint off;
      r = [IOSByteArray newArrayWithLength:sizep];
      g = [IOSByteArray newArrayWithLength:sizep];
      b = [IOSByteArray newArrayWithLength:sizep];
      for (jint i = 0; i < sizep; i++) {
        off = 3 * i;
        *IOSByteArray_GetRef(b, i) = IOSByteArray_Get(self->palette_, off);
        *IOSByteArray_GetRef(g, i) = IOSByteArray_Get(self->palette_, off + 1);
        *IOSByteArray_GetRef(r, i) = IOSByteArray_Get(self->palette_, off + 2);
      }
    }
    else {
      
#line 598
      sizep = JreIntDiv(((IOSByteArray *) nil_chk(self->palette_))->size_, 4);
      
#line 600
      if (sizep > 256) {
        sizep = 256;
      }
      
#line 604
      jint off;
      r = [IOSByteArray newArrayWithLength:sizep];
      g = [IOSByteArray newArrayWithLength:sizep];
      b = [IOSByteArray newArrayWithLength:sizep];
      for (jint i = 0; i < sizep; i++) {
        off = 4 * i;
        *IOSByteArray_GetRef(b, i) = IOSByteArray_Get(self->palette_, off);
        *IOSByteArray_GetRef(g, i) = IOSByteArray_Get(self->palette_, off + 1);
        *IOSByteArray_GetRef(r, i) = IOSByteArray_Get(self->palette_, off + 2);
      }
    }
  }
  else if (self->bitsPerPixel_ == 16) {
    self->numBands_ = 3;
  }
  else
#line 618
  if (self->bitsPerPixel_ == 32) {
    self->numBands_ = self->alphaMask_ == 0 ? 3 : 4;
  }
  else {
    
#line 624
    self->numBands_ = 3;
  }
}


#line 628
IOSByteArray *ComAowagieTextPdfCodecBmpImage_getPaletteWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint group) {
  if (self->palette_ == nil) {
    return nil;
  }
  IOSByteArray *np = [IOSByteArray newArrayWithLength:JreIntDiv(self->palette_->size_, group) * 3];
  jint e = JreIntDiv(self->palette_->size_, group);
  for (jint k = 0; k < e; ++k) {
    jint src = k * group;
    jint dest = k * 3;
    *IOSByteArray_GetRef(np, dest + 2) = IOSByteArray_Get(self->palette_, src++);
    *IOSByteArray_GetRef(np, dest + 1) = IOSByteArray_Get(self->palette_, src++);
    *IOSByteArray_GetRef(np, dest) = IOSByteArray_Get(self->palette_, src);
  }
  return np;
}

ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_getImage(ComAowagieTextPdfCodecBmpImage *self) {
  IOSByteArray *bdata = nil;
  
#line 655
  switch (self->imageType_) {
    
#line 657
    case ComAowagieTextPdfCodecBmpImage_VERSION_2_1_BIT:
    
#line 659
    return ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(self, 3);
    
#line 661
    case ComAowagieTextPdfCodecBmpImage_VERSION_2_4_BIT:
    
#line 663
    return ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(self, 3);
    
#line 665
    case ComAowagieTextPdfCodecBmpImage_VERSION_2_8_BIT:
    
#line 667
    return ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(self, 3);
    
#line 669
    case ComAowagieTextPdfCodecBmpImage_VERSION_2_24_BIT:
    
#line 671
    bdata = [IOSByteArray newArrayWithLength:self->width_ * self->height_ * 3];
    ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(self, bdata);
    return new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->width_, self->height_, 3, 8, bdata);
    
#line 675
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_1_BIT:
    
#line 677
    return ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(self, 4);
    
#line 679
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_4_BIT:
    switch ((jint) self->compression_) {
      case ComAowagieTextPdfCodecBmpImage_BI_RGB:
      return ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(self, 4);
      
#line 684
      case ComAowagieTextPdfCodecBmpImage_BI_RLE4:
      return ComAowagieTextPdfCodecBmpImage_readRLE4(self);
      
#line 687
      default:
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 689
      @"Invalid compression specified for BMP file.");
    }
    
#line 692
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_8_BIT:
    switch ((jint) self->compression_) {
      case ComAowagieTextPdfCodecBmpImage_BI_RGB:
      return ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(self, 4);
      
#line 697
      case ComAowagieTextPdfCodecBmpImage_BI_RLE8:
      return ComAowagieTextPdfCodecBmpImage_readRLE8(self);
      
#line 700
      default:
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 702
      @"Invalid compression specified for BMP file.");
    }
    
#line 705
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_24_BIT:
    
#line 707
    bdata = [IOSByteArray newArrayWithLength:self->width_ * self->height_ * 3];
    ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(self, bdata);
    return new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->width_, self->height_, 3, 8, bdata);
    
#line 711
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_16_BIT:
    return ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(self, false);
    
#line 714
    case ComAowagieTextPdfCodecBmpImage_VERSION_3_NT_32_BIT:
    return ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(self, true);
    
#line 717
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_1_BIT:
    return ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(self, 4);
    
#line 720
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_4_BIT:
    switch ((jint) self->compression_) {
      
#line 723
      case ComAowagieTextPdfCodecBmpImage_BI_RGB:
      return ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(self, 4);
      
#line 726
      case ComAowagieTextPdfCodecBmpImage_BI_RLE4:
      return ComAowagieTextPdfCodecBmpImage_readRLE4(self);
      
#line 729
      default:
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 731
      @"Invalid compression specified for BMP file.");
    }
    
#line 734
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_8_BIT:
    switch ((jint) self->compression_) {
      
#line 737
      case ComAowagieTextPdfCodecBmpImage_BI_RGB:
      return ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(self, 4);
      
#line 740
      case ComAowagieTextPdfCodecBmpImage_BI_RLE8:
      return ComAowagieTextPdfCodecBmpImage_readRLE8(self);
      
#line 743
      default:
      @throw new_JavaLangRuntimeException_initWithNSString_(
#line 745
      @"Invalid compression specified for BMP file.");
    }
    
#line 748
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_16_BIT:
    return ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(self, false);
    
#line 751
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_24_BIT:
    bdata = [IOSByteArray newArrayWithLength:self->width_ * self->height_ * 3];
    ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(self, bdata);
    return new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->width_, self->height_, 3, 8, bdata);
    
#line 756
    case ComAowagieTextPdfCodecBmpImage_VERSION_4_32_BIT:
    return ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(self, true);
  }
  return nil;
}


#line 762
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(ComAowagieTextPdfCodecBmpImage *self, IOSByteArray *bdata, jint bpc, jint paletteEntries) {
  ComAowagieTextImage *img = new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->width_, self->height_, 1, bpc, bdata);
  ComAowagieTextPdfPdfArray *colorspace = new_ComAowagieTextPdfPdfArray_init();
  [colorspace addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, INDEXED)];
  [colorspace addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
  IOSByteArray *np = ComAowagieTextPdfCodecBmpImage_getPaletteWithInt_(self, paletteEntries);
  jint len = ((IOSByteArray *) nil_chk(np))->size_;
  [colorspace addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(JreIntDiv(len, 3) - 1)];
  [colorspace addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithByteArray_(np)];
  ComAowagieTextPdfPdfDictionary *ad = new_ComAowagieTextPdfPdfDictionary_init();
  [ad putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:colorspace];
  [img setAdditionalWithComAowagieTextPdfPdfDictionary:ad];
  return img;
}

void ComAowagieTextPdfCodecBmpImage_readPaletteWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint sizeOfPalette) {
  if (sizeOfPalette == 0) {
    return;
  }
  
#line 782
  self->palette_ = [IOSByteArray newArrayWithLength:sizeOfPalette];
  jint bytesRead = 0;
  while (bytesRead < sizeOfPalette) {
    jint r = [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:self->palette_ withInt:bytesRead withInt:sizeOfPalette - bytesRead];
    if (r < 0) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"incomplete palette");
    }
    bytesRead += r;
  }
  (void) [((JavaUtilHashMap *) nil_chk(self->properties_)) putWithId:@"palette" withId:self->palette_];
}

ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read1BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries) {
  IOSByteArray *bdata = [IOSByteArray newArrayWithLength:JreIntDiv((self->width_ + 7), 8) * self->height_];
  jint padding = 0;
  jint bytesPerScanline = JreFpToInt(JavaLangMath_ceilWithDouble_(self->width_ / 8.0));
  
#line 800
  jint remainder = JreIntMod(bytesPerScanline, 4);
  if (remainder != 0) {
    padding = 4 - remainder;
  }
  
#line 805
  jint imSize = (bytesPerScanline + padding) * self->height_;
  
#line 808
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 812
    imSize - bytesRead];
  }
  
#line 815
  if (self->isBottomUp_) {
    
#line 820
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 822
      imSize - (i + 1) * (bytesPerScanline + padding),
#line 823
      bdata,
#line 824
      i * bytesPerScanline, bytesPerScanline);
    }
  }
  else {
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 830
      i * (bytesPerScanline + padding),
#line 831
      bdata,
#line 832
      i * bytesPerScanline,
#line 833
      bytesPerScanline);
    }
  }
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, bdata, 1, paletteEntries);
}


#line 840
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read4BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries) {
  IOSByteArray *bdata = [IOSByteArray newArrayWithLength:JreIntDiv((self->width_ + 1), 2) * self->height_];
  
#line 844
  jint padding = 0;
  
#line 846
  jint bytesPerScanline = JreFpToInt(JavaLangMath_ceilWithDouble_(self->width_ / 2.0));
  jint remainder = JreIntMod(bytesPerScanline, 4);
  if (remainder != 0) {
    padding = 4 - remainder;
  }
  
#line 852
  jint imSize = (bytesPerScanline + padding) * self->height_;
  
#line 855
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 859
    imSize - bytesRead];
  }
  
#line 862
  if (self->isBottomUp_) {
    
#line 866
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 868
      imSize - (i + 1) * (bytesPerScanline + padding),
#line 869
      bdata,
#line 870
      i * bytesPerScanline,
#line 871
      bytesPerScanline);
    }
  }
  else {
    
#line 874
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 876
      i * (bytesPerScanline + padding),
#line 877
      bdata,
#line 878
      i * bytesPerScanline,
#line 879
      bytesPerScanline);
    }
  }
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, bdata, 4, paletteEntries);
}


#line 886
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read8BitWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint paletteEntries) {
  IOSByteArray *bdata = [IOSByteArray newArrayWithLength:self->width_ * self->height_];
  
#line 889
  jint padding = 0;
  
#line 892
  jint bitsPerScanline = self->width_ * 8;
  if (JreIntMod(bitsPerScanline, 32) != 0) {
    padding = (JreIntDiv(bitsPerScanline, 32) + 1) * 32 - bitsPerScanline;
    padding = JreFpToInt(JavaLangMath_ceilWithDouble_(padding / 8.0));
  }
  
#line 898
  jint imSize = (self->width_ + padding) * self->height_;
  
#line 901
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:imSize - bytesRead];
  }
  
#line 907
  if (self->isBottomUp_) {
    
#line 911
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 913
      imSize - (i + 1) * (self->width_ + padding),
#line 914
      bdata,
#line 915
      i * self->width_,
#line 916
      self->width_);
    }
  }
  else {
    
#line 919
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values,
#line 921
      i * (self->width_ + padding),
#line 922
      bdata,
#line 923
      i * self->width_,
#line 924
      self->width_);
    }
  }
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, bdata, 8, paletteEntries);
}


#line 931
void ComAowagieTextPdfCodecBmpImage_read24BitWithByteArray_(ComAowagieTextPdfCodecBmpImage *self, IOSByteArray *bdata) {
  
#line 933
  jint padding = 0;
  
#line 936
  jint bitsPerScanline = self->width_ * 24;
  if (JreIntMod(bitsPerScanline, 32) != 0) {
    padding = (JreIntDiv(bitsPerScanline, 32) + 1) * 32 - bitsPerScanline;
    padding = JreFpToInt(JavaLangMath_ceilWithDouble_(padding / 8.0));
  }
  
#line 943
  jint imSize = JreIntDiv((self->width_ * 3 + 3), 4) * 4 * self->height_;
  
#line 945
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  @try {
    jint bytesRead = 0;
    while (bytesRead < imSize) {
      jint r = [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 950
      imSize - bytesRead];
      if (r < 0) {
        break;
      }
      bytesRead += r;
    }
  }
  @catch (
#line 956
  JavaIoIOException *ioe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
  }
  
#line 960
  jint l = 0;
  
#line 960
  jint count;
  
#line 962
  if (self->isBottomUp_) {
    jint max = self->width_ * self->height_ * 3 - 1;
    
#line 965
    count = -padding;
    for (jint i = 0; i < self->height_; i++) {
      l = max - (i + 1) * self->width_ * 3 + 1;
      count += padding;
      for (jint j = 0; j < self->width_; j++) {
        *IOSByteArray_GetRef(nil_chk(bdata), l + 2) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l + 1) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l) = IOSByteArray_Get(values, count++);
        l += 3;
      }
    }
  }
  else {
    
#line 977
    count = -padding;
    for (jint i = 0; i < self->height_; i++) {
      count += padding;
      for (jint j = 0; j < self->width_; j++) {
        *IOSByteArray_GetRef(nil_chk(bdata), l + 2) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l + 1) = IOSByteArray_Get(values, count++);
        *IOSByteArray_GetRef(bdata, l) = IOSByteArray_Get(values, count++);
        l += 3;
      }
    }
  }
}


#line 990
jint ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint mask) {
  jint k = 0;
  for (; k < 32; ++k) {
    if ((mask & 1) == 1) {
      break;
    }
    JreURShiftAssignInt(&mask, 1);
  }
  return mask;
}

jint ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(ComAowagieTextPdfCodecBmpImage *self, jint mask) {
  jint k = 0;
  for (; k < 32; ++k) {
    if ((mask & 1) == 1) {
      break;
    }
    JreURShiftAssignInt(&mask, 1);
  }
  return k;
}

ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_read1632BitWithBoolean_(ComAowagieTextPdfCodecBmpImage *self, jboolean is32) {
  
#line 1014
  jint red_mask = ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(self, self->redMask_);
  jint red_shift = ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(self, self->redMask_);
  jint red_factor = red_mask + 1;
  jint green_mask = ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(self, self->greenMask_);
  jint green_shift = ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(self, self->greenMask_);
  jint green_factor = green_mask + 1;
  jint blue_mask = ComAowagieTextPdfCodecBmpImage_findMaskWithInt_(self, self->blueMask_);
  jint blue_shift = ComAowagieTextPdfCodecBmpImage_findShiftWithInt_(self, self->blueMask_);
  jint blue_factor = blue_mask + 1;
  IOSByteArray *bdata = [IOSByteArray newArrayWithLength:self->width_ * self->height_ * 3];
  
#line 1025
  jint padding = 0;
  
#line 1027
  if (!is32) {
    
#line 1029
    jint bitsPerScanline = self->width_ * 16;
    if (JreIntMod(bitsPerScanline, 32) != 0) {
      padding = (JreIntDiv(bitsPerScanline, 32) + 1) * 32 - bitsPerScanline;
      padding = JreFpToInt(JavaLangMath_ceilWithDouble_(padding / 8.0));
    }
  }
  
#line 1036
  jint imSize = (jint) self->imageSize_;
  if (imSize == 0) {
    imSize = (jint) (self->bitmapFileSize_ - self->bitmapOffset_);
  }
  
#line 1041
  jint l = 0;
  jint v;
  if (self->isBottomUp_) {
    for (jint i = self->height_ - 1; i >= 0; --i) {
      l = self->width_ * 3 * i;
      for (jint j = 0; j < self->width_; j++) {
        if (is32) {
          v = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
        }
        else {
          
#line 1050
          v = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
        }
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, red_shift)) & red_mask) * 256, red_factor));
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, green_shift)) & green_mask) * 256, green_factor));
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, blue_shift)) & blue_mask) * 256, blue_factor));
      }
      for (jint m = 0; m < padding; m++) {
        [((JavaIoInputStream *) nil_chk(self->inputStream_)) read];
      }
    }
  }
  else {
    
#line 1061
    for (jint i = 0; i < self->height_; i++) {
      for (jint j = 0; j < self->width_; j++) {
        if (is32) {
          v = (jint) ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(self, self->inputStream_);
        }
        else {
          
#line 1066
          v = ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(self, self->inputStream_);
        }
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, red_shift)) & red_mask) * 256, red_factor));
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, green_shift)) & green_mask) * 256, green_factor));
        *IOSByteArray_GetRef(bdata, l++) = (jbyte) (JreIntDiv(((JreURShift32(v, blue_shift)) & blue_mask) * 256, blue_factor));
      }
      for (jint m = 0; m < padding; m++) {
        [((JavaIoInputStream *) nil_chk(self->inputStream_)) read];
      }
    }
  }
  return new_ComAowagieTextImgRaw_initWithInt_withInt_withInt_withInt_withByteArray_(self->width_, self->height_, 3, 8, bdata);
}


#line 1080
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_readRLE8(ComAowagieTextPdfCodecBmpImage *self) {
  
#line 1083
  jint imSize = (jint) self->imageSize_;
  if (imSize == 0) {
    imSize = (jint) (self->bitmapFileSize_ - self->bitmapOffset_);
  }
  
#line 1089
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 1093
    imSize - bytesRead];
  }
  
#line 1097
  IOSByteArray *val = ComAowagieTextPdfCodecBmpImage_decodeRLEWithBoolean_withByteArray_(self, true, values);
  
#line 1100
  imSize = self->width_ * self->height_;
  
#line 1102
  if (self->isBottomUp_) {
    
#line 1107
    IOSByteArray *temp = [IOSByteArray newArrayWithLength:((IOSByteArray *) nil_chk(val))->size_];
    jint bytesPerScanline = self->width_;
    for (jint i = 0; i < self->height_; i++) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val,
#line 1111
      imSize - (i + 1) * bytesPerScanline,
#line 1112
      temp,
#line 1113
      i * bytesPerScanline, bytesPerScanline);
    }
    val = temp;
  }
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, val, 8, 4);
}


#line 1120
ComAowagieTextImage *ComAowagieTextPdfCodecBmpImage_readRLE4(ComAowagieTextPdfCodecBmpImage *self) {
  
#line 1123
  jint imSize = (jint) self->imageSize_;
  if (imSize == 0) {
    imSize = (jint) (self->bitmapFileSize_ - self->bitmapOffset_);
  }
  
#line 1129
  IOSByteArray *values = [IOSByteArray newArrayWithLength:imSize];
  jint bytesRead = 0;
  while (bytesRead < imSize) {
    bytesRead += [((JavaIoInputStream *) nil_chk(self->inputStream_)) readWithByteArray:values withInt:bytesRead withInt:
#line 1133
    imSize - bytesRead];
  }
  
#line 1137
  IOSByteArray *val = ComAowagieTextPdfCodecBmpImage_decodeRLEWithBoolean_withByteArray_(self, false, values);
  
#line 1140
  if (self->isBottomUp_) {
    
#line 1142
    IOSByteArray *inverted = val;
    val = [IOSByteArray newArrayWithLength:self->width_ * self->height_];
    jint l = 0;
    
#line 1144
    jint index;
    
#line 1144
    jint lineEnd;
    
#line 1146
    for (jint i = self->height_ - 1; i >= 0; i--) {
      index = i * self->width_;
      lineEnd = l + self->width_;
      while (l != lineEnd) {
        *IOSByteArray_GetRef(val, l++) = IOSByteArray_Get(nil_chk(inverted), index++);
      }
    }
  }
  jint stride = JreIntDiv((self->width_ + 1), 2);
  IOSByteArray *bdata = [IOSByteArray newArrayWithLength:stride * self->height_];
  jint ptr = 0;
  jint sh = 0;
  for (jint h = 0; h < self->height_; ++h) {
    for (jint w = 0; w < self->width_; ++w) {
      if ((w & 1) == 0) {
        *IOSByteArray_GetRef(bdata, sh + JreIntDiv(w, 2)) = (jbyte) (JreLShift32(IOSByteArray_Get(nil_chk(val), ptr++), 4));
      }
      else {
        
#line 1163
        *IOSByteArray_GetRef(bdata, sh + JreIntDiv(w, 2)) |= (jbyte) (IOSByteArray_Get(nil_chk(val), ptr++) & (jint) 0x0f);
      }
    }
    sh += stride;
  }
  return ComAowagieTextPdfCodecBmpImage_indexedModelWithByteArray_withInt_withInt_(self, bdata, 4, 4);
}


#line 1171
IOSByteArray *ComAowagieTextPdfCodecBmpImage_decodeRLEWithBoolean_withByteArray_(ComAowagieTextPdfCodecBmpImage *self, jboolean is8, IOSByteArray *values) {
  IOSByteArray *val = [IOSByteArray newArrayWithLength:self->width_ * self->height_];
  @try {
    jint ptr = 0;
    jint x = 0;
    jint q = 0;
    for (jint y = 0; y < self->height_ && ptr < ((IOSByteArray *) nil_chk(values))->size_; ) {
      jint count = IOSByteArray_Get(nil_chk(values), ptr++) & (jint) 0xff;
      if (count != 0) {
        
#line 1181
        jint bt = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
        if (is8) {
          for (jint i = count; i != 0; --i) {
            *IOSByteArray_GetRef(val, q++) = (jbyte) bt;
          }
        }
        else {
          for (jint i = 0; i < count; ++i) {
            *IOSByteArray_GetRef(val, q++) = (jbyte) ((i & 1) == 1 ? bt & (jint) 0x0f : (JreURShift32(bt, 4)) & (jint) 0x0f);
          }
        }
        x += count;
      }
      else {
        
#line 1196
        count = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
        if (count == 1) {
          break;
        }
        switch (count) {
          case 0:
          x = 0;
          ++y;
          q = y * self->width_;
          break;
          case 2:
          
#line 1208
          x += IOSByteArray_Get(values, ptr++) & (jint) 0xff;
          y += IOSByteArray_Get(values, ptr++) & (jint) 0xff;
          q = y * self->width_ + x;
          break;
          default:
          
#line 1214
          if (is8) {
            for (jint i = count; i != 0; --i) {
              *IOSByteArray_GetRef(val, q++) = (jbyte) (IOSByteArray_Get(values, ptr++) & (jint) 0xff);
            }
          }
          else {
            jint bt = 0;
            for (jint i = 0; i < count; ++i) {
              if ((i & 1) == 0) {
                bt = IOSByteArray_Get(values, ptr++) & (jint) 0xff;
              }
              *IOSByteArray_GetRef(val, q++) = (jbyte) ((i & 1) == 1 ? bt & (jint) 0x0f : (JreURShift32(bt, 4)) & (jint) 0x0f);
            }
          }
          x += count;
          
#line 1230
          if (is8) {
            if ((count & 1) == 1) {
              ++ptr;
            }
          }
          else {
            if ((count & 3) == 1 || (count & 3) == 2) {
              ++ptr;
            }
          }
          break;
        }
      }
    }
  }
  @catch (JavaLangRuntimeException *e) {
  }
  
#line 1249
  return val;
}


#line 1255
jint ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  return [((JavaIoInputStream *) nil_chk(stream)) read] & (jint) 0xff;
}


#line 1260
jint ComAowagieTextPdfCodecBmpImage_readUnsignedShortWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  jint b1 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b2 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  return ((JreLShift32(b2, 8)) | b1) & (jint) 0xffff;
}


#line 1267
jint ComAowagieTextPdfCodecBmpImage_readShortWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  jint b1 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b2 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  return (JreLShift32(b2, 8)) | b1;
}


#line 1274
jint ComAowagieTextPdfCodecBmpImage_readWordWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  return ComAowagieTextPdfCodecBmpImage_readUnsignedShortWithJavaIoInputStream_(self, stream);
}


#line 1279
jlong ComAowagieTextPdfCodecBmpImage_readUnsignedIntWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  jint b1 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b2 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b3 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b4 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jlong l = (JreLShift32(b4, 24)) | (JreLShift32(b3, 16)) | (JreLShift32(b2, 8)) | b1;
  return l & (jint) 0xffffffff;
}


#line 1289
jint ComAowagieTextPdfCodecBmpImage_readIntWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  jint b1 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b2 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b3 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  jint b4 = ComAowagieTextPdfCodecBmpImage_readUnsignedByteWithJavaIoInputStream_(self, stream);
  return (JreLShift32(b4, 24)) | (JreLShift32(b3, 16)) | (JreLShift32(b2, 8)) | b1;
}


#line 1298
jlong ComAowagieTextPdfCodecBmpImage_readDWordWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  return ComAowagieTextPdfCodecBmpImage_readUnsignedIntWithJavaIoInputStream_(self, stream);
}


#line 1303
jint ComAowagieTextPdfCodecBmpImage_readLongWithJavaIoInputStream_(ComAowagieTextPdfCodecBmpImage *self, JavaIoInputStream *stream) {
  return ComAowagieTextPdfCodecBmpImage_readIntWithJavaIoInputStream_(self, stream);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecBmpImage)
