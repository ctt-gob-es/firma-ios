//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESUtils.java
//

#include "AOAlgorithmID.h"
#include "AOSigPolicyQualifierInfo.h"
#include "AOSignConstants.h"
#include "ASN1EncodableVector.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AdESPolicy.h"
#include "AlgorithmIdentifier.h"
#include "Attribute.h"
#include "Base64.h"
#include "CAdESAttributes.h"
#include "CAdESParameters.h"
#include "CAdESSignerMetadata.h"
#include "CAdESSignerMetadataHelper.h"
#include "CAdESUtils.h"
#include "CMSAttributes.h"
#include "CertificatePolicies.h"
#include "CommitmentTypeIndication.h"
#include "CommitmentTypeIndicationBean.h"
#include "CommitmentTypeIndicationsHelper.h"
#include "ContentHints.h"
#include "DEROctetString.h"
#include "DERSequence.h"
#include "DERSet.h"
#include "DERTaggedObject.h"
#include "DERUTCTime.h"
#include "DERUTF8String.h"
#include "DigestInfo.h"
#include "ESSCertID.h"
#include "ESSCertIDv2.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuerSerial.h"
#include "J2ObjC_source.h"
#include "PKCSObjectIdentifiers.h"
#include "SigUtils.h"
#include "SignerLocation.h"
#include "SigningCertificate.h"
#include "SigningCertificateV2.h"
#include "X500Name.h"
#include "X509AttributeIdentifiers.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/net/URL.h"
#include "java/security/MessageDigest.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "CAdESUtils must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersCadesCAdESUtils ()

- (instancetype)init;

/*!
 @brief Genera una estructura <i>SigningCertificateV2</i> seg&uacute;n RFC 5035.
 Es importante rese&ntilde;ar que la estructura <code>ESSCertIDv2</code> tiene la siguiente estructura: 
 @code

   ESSCertIDv2 ::=  SEQUENCE {
    hashAlgorithm AlgorithmIdentifier DEFAULT {algorithm id-sha256},
    certHash Hash,
    issuerSerial IssuerSerial OPTIONAL
   } 
  
@endcode
  En <code>DER</code> un campo marcado como <code>DEFAULT</code> no debe codificarse, debe dejarse ausente: 
 <a href="http://www.oss.com/asn1/resources/asn1-faq.html#default">http://www.oss.com/asn1/resources/asn1-faq.html#default</a>.<br>
  Dado que el <code>SignedData</code> debe codificarse en <code>DER</code>, si el algoritmo de huella es SHA-256, el campo de OID de
  algoritmo debe estar ausente.<br>
  Citando la especificaci&oacute;n "ETSI TS 102 778-3"  (PDF Advanced Electronic Signature Profiles;Part 3: PAdES Enhanced - PAdES-BES
  and PAdES-EPES Profiles) en su apartado "4.2 b"):<br>
  <i>
   b) A <b>DER-encoded</b> SignedData object as specified in CMS (RFC 3852 [4]) shall be included as the PDF signature in the entry with the
   key Content of the signature dictionary as described in ISO 32000-1 [1], clause 12.8.1. 
 </i>
 @param cert Certificado del firmante.
 @param digestAlgorithmName Nombre del algoritmo de huella digital a usar.
 @param includePolicyOnSigningCertificate Si se establece a  <code> false </code> , omite la inclusi &oacute; n de la                                                pol &iacute; tica de certificaci &oacute; n en el  <i> SigningCertificate </i> ,                                                si se establece a  <code> true </code>  se incluye siempre que el certificado                                                la declare.
 @param includeIssuerSerial Si se establece a <code>false</code> , se omite la inclusi &oacute; n del n &uacute; mero                                                de serie del issuer en el atributo  <i> SigningCertificate </i> ;                                                si se establece a <code>true</code> , se incluye.
 @return Estructura <i>SigningCertificateV2</i> seg&uacute;n RFC 5035.
 @throw CertificateEncodingExceptionSi el certificado proporcionado no es v&aacute;lido.
 @throw NoSuchAlgorithmExceptionSi no se soporta el algoritmo de huella indicado.
 */
+ (OrgSpongycastleAsn1CmsAttribute *)getSigningCertificateV2WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                                   withNSString:(NSString *)digestAlgorithmName
                                                                                    withBoolean:(jboolean)includePolicyOnSigningCertificate
                                                                                    withBoolean:(jboolean)includeIssuerSerial;

/*!
 @brief Genera una estructura <i>SigningCertificateV2</i> seg&uacute;n RFC 5035.
 @param cert Certificado del firmante.
 @param digestAlgorithmName Nombre del algoritmo de huella digital a usar.
 @param includePolicyOnSigningCertificate Si se establece a <code>false</code> , se omite la inclusi &oacute; n de la                                                pol &iacute; tica de certificaci &oacute; n en el  <i> SigningCertificate </i> ;                                                si se establece a <code>true</code> , se incluye siempre que el certificado                                                la declare.
 @param includeIssuerSerial Si se establece a <code>false</code> , se omite la inclusi &oacute; n del n &uacute; mero                                                de serie del issuer en el atributo  <i> SigningCertificate </i> ;                                                si se establece a <code>true</code> , se incluye.
 @return Estructura <i>SigningCertificate</i> seg&uacute;n RFC 5035.
 @throw CertificateEncodingExceptionSi el certificado proporcionado no es v&aacute;lido.
 @throw NoSuchAlgorithmExceptionSi no se soporta el algoritmo de huella indicado.
 */
+ (OrgSpongycastleAsn1CmsAttribute *)getSigningCertificateV1WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                                   withNSString:(NSString *)digestAlgorithmName
                                                                                    withBoolean:(jboolean)includePolicyOnSigningCertificate
                                                                                    withBoolean:(jboolean)includeIssuerSerial;

+ (OrgSpongycastleAsn1DERSet *)getSigPolicyAttributeWithNSString:(NSString *)digestAlgorithmName
                            withEsGobAfirmaCoreSignersAdESPolicy:(EsGobAfirmaCoreSignersAdESPolicy *)policy;

/*!
 @brief Crea un vector de atributos con los claimed roles declarados.
 @param claimedRoles Roles declarados.
 @return Vector de atributos con los roles para su uso en signer-attributes
  o signer-attributes-v2.
 */
+ (OrgSpongycastleAsn1ASN1EncodableVector *)getSignerClaimedRolesWithNSStringArray:(IOSObjectArray *)claimedRoles;

/*!
 @brief Obtiene un <i>PolicyInformation</i> a partir de los datos de la pol&iacute;tica de un certificado.
 Sirve para los datos de SigningCertificate y SigningCertificateV2. Tiene que llevar algunos
  datos de la pol&iacute;tica.
  
 @code

  PolicyInformation ::= SEQUENCE {
        policyIdentifier   CertPolicyId,
        policyQualifiers   SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo OPTIONAL
  }
  CertPolicyId ::= OBJECT IDENTIFIER
  PolicyQualifierInfo ::= SEQUENCE {
       policyQualifierId  PolicyQualifierId,
       qualifier          ANY DEFINED BY policyQualifierId
  }
  -- policyQualifierIds for Internet policy qualifiers
  id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
  id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
  id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
  PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
  Qualifier ::= CHOICE {
       cPSuri           CPSuri,
       userNotice       UserNotice
  }
  CPSuri ::= IA5String
  UserNotice ::= SEQUENCE {
       noticeRef        NoticeReference OPTIONAL,
       explicitText     DisplayText OPTIONAL
  }
  NoticeReference ::= SEQUENCE {
       organization     DisplayText,
       noticeNumbers    SEQUENCE OF INTEGER
  }
  DisplayText ::= CHOICE {
       ia5String        IA5String      (SIZE (1..200)),
       visibleString    VisibleString  (SIZE (1..200)),
       bmpString        BMPString      (SIZE (1..200)),
       utf8String       UTF8String     (SIZE (1..200))
  }
  PolicyQualifierInfo ::= SEQUENCE {
           policyQualifierId  PolicyQualifierId,
           qualifier          ANY DEFINED BY policyQualifierId
  }
  PolicyInformation ::= SEQUENCE {
      policyIdentifier   CertPolicyId,
      policyQualifiers   SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo OPTIONAL
  } 
  
@endcode
 @param cert Certificado del cual queremos describir su pol &iacute; tica.
 @return Estructura con la pol&iacute;tica preparada para insertarla en la firma o
          <code>null</code> si el certificado no tiene declarada una pol&iacute;tica.
 */
+ (IOSObjectArray *)getPolicyInformationWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

@end

__attribute__((unused)) static void EsGobAfirmaSignersCadesCAdESUtils_init(EsGobAfirmaSignersCadesCAdESUtils *self);

__attribute__((unused)) static EsGobAfirmaSignersCadesCAdESUtils *new_EsGobAfirmaSignersCadesCAdESUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaSignersCadesCAdESUtils *create_EsGobAfirmaSignersCadesCAdESUtils_init(void);

__attribute__((unused)) static OrgSpongycastleAsn1CmsAttribute *EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV2WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(JavaSecurityCertX509Certificate *cert, NSString *digestAlgorithmName, jboolean includePolicyOnSigningCertificate, jboolean includeIssuerSerial);

__attribute__((unused)) static OrgSpongycastleAsn1CmsAttribute *EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV1WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(JavaSecurityCertX509Certificate *cert, NSString *digestAlgorithmName, jboolean includePolicyOnSigningCertificate, jboolean includeIssuerSerial);

__attribute__((unused)) static OrgSpongycastleAsn1DERSet *EsGobAfirmaSignersCadesCAdESUtils_getSigPolicyAttributeWithNSString_withEsGobAfirmaCoreSignersAdESPolicy_(NSString *digestAlgorithmName, EsGobAfirmaCoreSignersAdESPolicy *policy);

__attribute__((unused)) static OrgSpongycastleAsn1ASN1EncodableVector *EsGobAfirmaSignersCadesCAdESUtils_getSignerClaimedRolesWithNSStringArray_(IOSObjectArray *claimedRoles);

__attribute__((unused)) static IOSObjectArray *EsGobAfirmaSignersCadesCAdESUtils_getPolicyInformationWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESUtils.java"


#line 164
@implementation EsGobAfirmaSignersCadesCAdESUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 166
- (instancetype)init {
  EsGobAfirmaSignersCadesCAdESUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 201
+ (OrgSpongycastleAsn1CmsAttribute *)getSigningCertificateV2WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                                   withNSString:(NSString *)digestAlgorithmName
                                                                                    withBoolean:(jboolean)includePolicyOnSigningCertificate
                                                                                    withBoolean:(jboolean)includeIssuerSerial {
  return EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV2WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(cert, digestAlgorithmName, includePolicyOnSigningCertificate, includeIssuerSerial);
}


#line 261
+ (OrgSpongycastleAsn1CmsAttribute *)getSigningCertificateV1WithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                                   withNSString:(NSString *)digestAlgorithmName
                                                                                    withBoolean:(jboolean)includePolicyOnSigningCertificate
                                                                                    withBoolean:(jboolean)includeIssuerSerial {
  return EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV1WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(cert, digestAlgorithmName, includePolicyOnSigningCertificate, includeIssuerSerial);
}


#line 303
+ (OrgSpongycastleAsn1DERSet *)getSigPolicyAttributeWithNSString:(NSString *)digestAlgorithmName
                            withEsGobAfirmaCoreSignersAdESPolicy:(EsGobAfirmaCoreSignersAdESPolicy *)policy {
  return EsGobAfirmaSignersCadesCAdESUtils_getSigPolicyAttributeWithNSString_withEsGobAfirmaCoreSignersAdESPolicy_(digestAlgorithmName, policy);
}


#line 368
+ (OrgSpongycastleAsn1ASN1EncodableVector *)generateSignedAttributesWithJavaSecurityCertCertificate:(JavaSecurityCertCertificate *)cert
                                                         withEsGobAfirmaSignersCadesCAdESParameters:(EsGobAfirmaSignersCadesCAdESParameters *)config
                                                                                        withBoolean:(jboolean)isCountersign {
  return EsGobAfirmaSignersCadesCAdESUtils_generateSignedAttributesWithJavaSecurityCertCertificate_withEsGobAfirmaSignersCadesCAdESParameters_withBoolean_(cert, config, isCountersign);
}


#line 583
+ (OrgSpongycastleAsn1ASN1EncodableVector *)getSignerClaimedRolesWithNSStringArray:(IOSObjectArray *)claimedRoles {
  return EsGobAfirmaSignersCadesCAdESUtils_getSignerClaimedRolesWithNSStringArray_(claimedRoles);
}


#line 664
+ (IOSObjectArray *)getPolicyInformationWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return EsGobAfirmaSignersCadesCAdESUtils_getPolicyInformationWithJavaSecurityCertX509Certificate_(cert);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1CmsAttribute;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1CmsAttribute;", 0xa, 3, 1, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1DERSet;", 0xa, 4, 5, 6, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1EncodableVector;", 0x9, 7, 8, 9, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1EncodableVector;", 0xa, 10, 11, -1, -1, -1, -1 },
    { NULL, "[LOrgSpongycastleAsn1X509PolicyInformation;", 0xa, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSigningCertificateV2WithJavaSecurityCertX509Certificate:withNSString:withBoolean:withBoolean:);
  methods[2].selector = @selector(getSigningCertificateV1WithJavaSecurityCertX509Certificate:withNSString:withBoolean:withBoolean:);
  methods[3].selector = @selector(getSigPolicyAttributeWithNSString:withEsGobAfirmaCoreSignersAdESPolicy:);
  methods[4].selector = @selector(generateSignedAttributesWithJavaSecurityCertCertificate:withEsGobAfirmaSignersCadesCAdESParameters:withBoolean:);
  methods[5].selector = @selector(getSignerClaimedRolesWithNSStringArray:);
  methods[6].selector = @selector(getPolicyInformationWithJavaSecurityCertX509Certificate:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getSigningCertificateV2", "LJavaSecurityCertX509Certificate;LNSString;ZZ", "LJavaSecurityCertCertificateEncodingException;LJavaSecurityNoSuchAlgorithmException;", "getSigningCertificateV1", "getSigPolicyAttribute", "LNSString;LEsGobAfirmaCoreSignersAdESPolicy;", "LJavaIoIOException;", "generateSignedAttributes", "LJavaSecurityCertCertificate;LEsGobAfirmaSignersCadesCAdESParameters;Z", "LJavaSecurityNoSuchAlgorithmException;LJavaIoIOException;LJavaSecurityCertCertificateEncodingException;", "getSignerClaimedRoles", "[LNSString;", "getPolicyInformation", "LJavaSecurityCertX509Certificate;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersCadesCAdESUtils = { "CAdESUtils", "es.gob.afirma.signers.cades", ptrTable, methods, NULL, 7, 0x11, 7, 0, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersCadesCAdESUtils;
}

@end


#line 166
void EsGobAfirmaSignersCadesCAdESUtils_init(EsGobAfirmaSignersCadesCAdESUtils *self) {
  NSObject_init(self);
}


#line 166
EsGobAfirmaSignersCadesCAdESUtils *new_EsGobAfirmaSignersCadesCAdESUtils_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersCadesCAdESUtils, init)
}


#line 166
EsGobAfirmaSignersCadesCAdESUtils *create_EsGobAfirmaSignersCadesCAdESUtils_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersCadesCAdESUtils, init)
}


#line 201
OrgSpongycastleAsn1CmsAttribute *EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV2WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(JavaSecurityCertX509Certificate *cert, NSString *digestAlgorithmName, jboolean includePolicyOnSigningCertificate, jboolean includeIssuerSerial) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  
#line 207
  NSString *hashOid = EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(digestAlgorithmName);
  
#line 210
  OrgSpongycastleAsn1X509AlgorithmIdentifier *digestAlgorithmOID =
#line 211
  [((NSString *) nil_chk(EsGobAfirmaSignersPkcs7AOAlgorithmID_OID_SHA256)) isEqual:hashOid] ?
#line 212
  nil : EsGobAfirmaSignersPkcs7SigUtils_makeAlgIdWithNSString_(
#line 213
  hashOid);
  
#line 217
  OrgSpongycastleAsn1X509GeneralNames *gns = new_OrgSpongycastleAsn1X509GeneralNames_initWithOrgSpongycastleAsn1X509GeneralName_(new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(
#line 218
  [((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])) getEncoded])));
  
#line 221
  OrgSpongycastleAsn1X509IssuerSerial *issuerSerial = nil;
  if (includeIssuerSerial) {
    issuerSerial = new_OrgSpongycastleAsn1X509IssuerSerial_initWithOrgSpongycastleAsn1X509GeneralNames_withJavaMathBigInteger_(gns, [cert getSerialNumber]);
  }
  
#line 226
  IOSByteArray *certHash = [((JavaSecurityMessageDigest *) nil_chk(JavaSecurityMessageDigest_getInstanceWithNSString_(digestAlgorithmName))) digestWithByteArray:[cert getEncoded]];
  IOSObjectArray *essCertIDv2 = [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgSpongycastleAsn1EssESSCertIDv2_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withByteArray_withOrgSpongycastleAsn1X509IssuerSerial_(
#line 228
  digestAlgorithmOID, certHash, issuerSerial) } count:1 type:OrgSpongycastleAsn1EssESSCertIDv2_class_()];
  
#line 231
  OrgSpongycastleAsn1EssSigningCertificateV2 *scv2;
  IOSObjectArray *polInfo = includePolicyOnSigningCertificate ? EsGobAfirmaSignersCadesCAdESUtils_getPolicyInformationWithJavaSecurityCertX509Certificate_(cert) : nil;
  
#line 234
  if (polInfo != nil) {
    scv2 = new_OrgSpongycastleAsn1EssSigningCertificateV2_initWithOrgSpongycastleAsn1EssESSCertIDv2Array_withOrgSpongycastleAsn1X509PolicyInformationArray_(essCertIDv2, polInfo);
  }
  else {
    scv2 = new_OrgSpongycastleAsn1EssSigningCertificateV2_initWithOrgSpongycastleAsn1EssESSCertIDv2Array_(essCertIDv2);
  }
  
#line 241
  return new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_signingCertificateV2), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(
#line 243
  scv2));
}


#line 261
OrgSpongycastleAsn1CmsAttribute *EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV1WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(JavaSecurityCertX509Certificate *cert, NSString *digestAlgorithmName, jboolean includePolicyOnSigningCertificate, jboolean includeIssuerSerial) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  
#line 269
  OrgSpongycastleAsn1X509GeneralName *gn = new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])) getEncoded]));
  OrgSpongycastleAsn1X509GeneralNames *gns = new_OrgSpongycastleAsn1X509GeneralNames_initWithOrgSpongycastleAsn1X509GeneralName_(gn);
  
#line 272
  OrgSpongycastleAsn1X509IssuerSerial *issuerSerial = nil;
  if (includeIssuerSerial) {
    issuerSerial = new_OrgSpongycastleAsn1X509IssuerSerial_initWithOrgSpongycastleAsn1X509GeneralNames_withJavaMathBigInteger_(gns, [cert getSerialNumber]);
  }
  
#line 277
  IOSByteArray *certHash = [((JavaSecurityMessageDigest *) nil_chk(JavaSecurityMessageDigest_getInstanceWithNSString_(digestAlgorithmName))) digestWithByteArray:[cert getEncoded]];
  OrgSpongycastleAsn1EssESSCertID *essCertID = new_OrgSpongycastleAsn1EssESSCertID_initWithByteArray_withOrgSpongycastleAsn1X509IssuerSerial_(certHash, issuerSerial);
  
#line 280
  OrgSpongycastleAsn1EssSigningCertificate *scv;
  IOSObjectArray *polInfo = includePolicyOnSigningCertificate ? EsGobAfirmaSignersCadesCAdESUtils_getPolicyInformationWithJavaSecurityCertX509Certificate_(cert) : nil;
  
#line 283
  if (polInfo != nil) {
    
#line 288
    OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
    [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1Encodable_(essCertID)];
    [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableArray_(polInfo)];
    scv = OrgSpongycastleAsn1EssSigningCertificate_getInstanceWithId_(new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v));
  }
  else {
    scv = new_OrgSpongycastleAsn1EssSigningCertificate_initWithOrgSpongycastleAsn1EssESSCertID_(essCertID);
  }
  
#line 297
  return new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_signingCertificate), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(
#line 299
  scv));
}


#line 303
OrgSpongycastleAsn1DERSet *EsGobAfirmaSignersCadesCAdESUtils_getSigPolicyAttributeWithNSString_withEsGobAfirmaCoreSignersAdESPolicy_(NSString *digestAlgorithmName, EsGobAfirmaCoreSignersAdESPolicy *policy) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  
#line 306
  OrgSpongycastleAsn1ASN1ObjectIdentifier *doiSigPolicyId = new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 307
  [((NSString *) nil_chk([((NSString *) nil_chk([((EsGobAfirmaCoreSignersAdESPolicy *) nil_chk(policy)) getPolicyIdentifier])) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)])) java_replace:@"urn:oid:" withSequence:@""]);
  
#line 311
  OrgSpongycastleAsn1X509AlgorithmIdentifier *hashid;
  
#line 313
  if ([policy getPolicyIdentifierHashAlgorithm] != nil) {
    hashid = EsGobAfirmaSignersPkcs7SigUtils_makeAlgIdWithNSString_(EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(
#line 317
    [policy getPolicyIdentifierHashAlgorithm])));
  }
  else {
    
#line 324
    hashid = EsGobAfirmaSignersPkcs7SigUtils_makeAlgIdWithNSString_(EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(digestAlgorithmName));
  }
  
#line 328
  IOSByteArray *hashed;
  if ([policy getPolicyIdentifierHash] != nil) {
    hashed = EsGobAfirmaCoreMiscBase64_decodeWithNSString_([policy getPolicyIdentifierHash]);
  }
  else {
    hashed = [IOSByteArray newArrayWithBytes:(jbyte[]){ 0 } count:1];
  }
  
#line 336
  OrgSpongycastleAsn1X509DigestInfo *otherHashAlgAndValue = new_OrgSpongycastleAsn1X509DigestInfo_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withByteArray_(hashid, hashed);
  
#line 338
  EsGobAfirmaSignersCadesAOSigPolicyQualifierInfo *spqInfo = nil;
  if ([policy getPolicyQualifier] != nil) {
    spqInfo = new_EsGobAfirmaSignersCadesAOSigPolicyQualifierInfo_initPackagePrivateWithNSString_([((JavaNetURL *) nil_chk([policy getPolicyQualifier])) description]);
  }
  
#line 343
  OrgSpongycastleAsn1ASN1EncodableVector *v = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  
#line 345
  [v addWithOrgSpongycastleAsn1ASN1Encodable:doiSigPolicyId];
  
#line 347
  [v addWithOrgSpongycastleAsn1ASN1Encodable:[otherHashAlgAndValue toASN1Primitive]];
  
#line 349
  if (spqInfo != nil) {
    [v addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1Encodable_([spqInfo toASN1Primitive])];
  }
  
#line 353
  OrgSpongycastleAsn1DERSequence *ds = new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(v);
  
#line 355
  return new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_([ds toASN1Primitive]);
}


#line 368
OrgSpongycastleAsn1ASN1EncodableVector *EsGobAfirmaSignersCadesCAdESUtils_generateSignedAttributesWithJavaSecurityCertCertificate_withEsGobAfirmaSignersCadesCAdESParameters_withBoolean_(JavaSecurityCertCertificate *cert, EsGobAfirmaSignersCadesCAdESParameters *config, jboolean isCountersign) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  
#line 377
  OrgSpongycastleAsn1ASN1EncodableVector *contextSpecific = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  
#line 383
  if (!isCountersign) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1CmsCMSAttributes, contentType), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, data)))];
  }
  
#line 393
  if ([((EsGobAfirmaSignersCadesCAdESParameters *) nil_chk(config)) getDataDigest] != nil || [config getContentData] != nil) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1CmsCMSAttributes, messageDigest), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(
#line 399
    [config getDataDigest] != nil ?
#line 400
    [config getDataDigest] :
#line 401
    [((JavaSecurityMessageDigest *) nil_chk(JavaSecurityMessageDigest_getInstanceWithNSString_([config getDigestAlgorithm]))) digestWithByteArray:[config getContentData]])))];
  }
  else {
    
#line 408
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Ni los datos a firmar ni la huella de los mismos se han configurado o encontrado ");
  }
  
#line 412
  if ([config isSigningCertificateV2]) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV2WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(
#line 415
    (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]),
#line 416
    [config getDigestAlgorithm],
#line 417
    [config isIncludedPolicyOnSigningCertificate],
#line 418
    [config isIncludedIssuerSerial])];
  }
  else {
    
#line 423
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:EsGobAfirmaSignersCadesCAdESUtils_getSigningCertificateV1WithJavaSecurityCertX509Certificate_withNSString_withBoolean_withBoolean_(
#line 425
    (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]),
#line 426
    [config getDigestAlgorithm],
#line 427
    [config isIncludedPolicyOnSigningCertificate],
#line 428
    [config isIncludedIssuerSerial])];
  }
  
#line 434
  if ([config getExternalPolicy] != nil && [((EsGobAfirmaCoreSignersAdESPolicy *) nil_chk([config getExternalPolicy])) getPolicyIdentifier] != nil) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_sigPolicyId), EsGobAfirmaSignersCadesCAdESUtils_getSigPolicyAttributeWithNSString_withEsGobAfirmaCoreSignersAdESPolicy_(
#line 438
    [config getDigestAlgorithm], [config getExternalPolicy]))];
  }
  
#line 445
  if (!isCountersign || ![((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE)) isEqual:[config getProfileSet]]) {
    
#line 447
    if ([config getContentTypeOid] != nil) {
      OrgSpongycastleAsn1EssContentHints *contentHints;
      if ([config getContentDescription] != nil) {
        contentHints = new_OrgSpongycastleAsn1EssContentHints_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1DERUTF8String_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 451
        [config getContentTypeOid]), new_OrgSpongycastleAsn1DERUTF8String_initWithNSString_(
#line 452
        [config getContentDescription]));
      }
      else {
        
#line 456
        contentHints = new_OrgSpongycastleAsn1EssContentHints_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 457
        [config getContentTypeOid]));
      }
      
#line 460
      [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_contentHint), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(
#line 463
      [contentHints toASN1Primitive]))];
    }
  }
  
#line 472
  if ([config getCommitmentTypeIndications] != nil && [((id<JavaUtilList>) nil_chk([config getCommitmentTypeIndications])) size] > 0) {
    for (EsGobAfirmaSignersCadesCommitmentTypeIndicationBean * __strong ctib in nil_chk([config getCommitmentTypeIndications])) {
      [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_commitmentType), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(
#line 478
      [((OrgSpongycastleAsn1EsfCommitmentTypeIndication *) nil_chk(EsGobAfirmaSignersCadesCommitmentTypeIndicationsHelper_generateCommitmentTypeIndicationWithEsGobAfirmaSignersCadesCommitmentTypeIndicationBean_(ctib))) toASN1Primitive]))];
    }
  }
  
#line 490
  if ([config getMetadata] != nil) {
    OrgSpongycastleAsn1EsfSignerLocation *location = EsGobAfirmaSignersCadesCAdESSignerMetadataHelper_getSignerLocationWithEsGobAfirmaSignersCadesCAdESSignerMetadata_CAdESSignerLocation_([((EsGobAfirmaSignersCadesCAdESSignerMetadata *) nil_chk([config getMetadata])) getSignerLocation]);
    if (location != nil) {
      [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_signerLocation), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(
#line 496
      location))];
    }
  }
  
#line 522
  if ([config getClaimedRoles] != nil && ((IOSObjectArray *) nil_chk([config getClaimedRoles]))->size_ > 0) {
    
#line 524
    OrgSpongycastleAsn1ASN1EncodableVector *claimedRoles = EsGobAfirmaSignersCadesCAdESUtils_getSignerClaimedRolesWithNSStringArray_([config getClaimedRoles]);
    if (claimedRoles != nil) {
      
#line 527
      OrgSpongycastleAsn1ASN1ObjectIdentifier *signerAttrOid = nil;
      if ([((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_ADVANCED)) isEqual:[config getProfileSet]]) {
        signerAttrOid = JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, id_aa_ets_signerAttr);
      }
      else if ([((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE)) isEqual:[config getProfileSet]]) {
        signerAttrOid = new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(EsGobAfirmaSignersCadesCAdESAttributes_OID_id_aa_ets_signerAttrV2);
      }
      
#line 535
      if (signerAttrOid != nil) {
        [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(
#line 538
        signerAttrOid, new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DERTaggedObject_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(
#line 541
        0, new_OrgSpongycastleAsn1DERSequence_initWithOrgSpongycastleAsn1ASN1EncodableVector_(claimedRoles)))))];
      }
    }
  }
  
#line 553
  if ([config getSigningTime] != nil) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1CmsCMSAttributes, signingTime), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DERUTCTime_initWithJavaUtilDate_(
#line 558
    [config getSigningTime])))];
  }
  
#line 566
  if (!isCountersign && [config getMimeType] != nil) {
    [contextSpecific addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 569
    EsGobAfirmaSignersCadesCAdESAttributes_OID_id_aa_ets_mimeType), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DERUTF8String_initWithNSString_(
#line 570
    [config getMimeType])))];
  }
  
#line 574
  return contextSpecific;
}


#line 583
OrgSpongycastleAsn1ASN1EncodableVector *EsGobAfirmaSignersCadesCAdESUtils_getSignerClaimedRolesWithNSStringArray_(IOSObjectArray *claimedRoles) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  
#line 586
  OrgSpongycastleAsn1ASN1EncodableVector *roles = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  {
    IOSObjectArray *a__ =
#line 587
    claimedRoles;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *role = *b__++;
      
#line 588
      if (role != nil && ![role java_isEmpty]) {
        [roles addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsAttribute_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Set_(JreLoadStatic(OrgSpongycastleAsn1X509X509AttributeIdentifiers, id_at_role), new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1DERUTF8String_initWithNSString_(
#line 592
        role)))];
      }
    }
  }
  
#line 598
  return [roles size] > 0 ? roles : nil;
}


#line 664
IOSObjectArray *EsGobAfirmaSignersCadesCAdESUtils_getPolicyInformationWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  EsGobAfirmaSignersCadesCAdESUtils_initialize();
  if (cert == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El certificado no puede ser nulo");
  }
  
#line 670
  IOSByteArray *certificatePoliciesBytes = [cert getExtensionValueWithNSString:@"2.5.29.32"];
  if (certificatePoliciesBytes == nil || certificatePoliciesBytes->size_ < 1) {
    return nil;
  }
  
#line 675
  return [((OrgSpongycastleAsn1X509CertificatePolicies *) nil_chk(OrgSpongycastleAsn1X509CertificatePolicies_getInstanceWithId_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(
#line 677
  [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(certificatePoliciesBytes))) getOctets])))) getPolicyInformation];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersCadesCAdESUtils)
