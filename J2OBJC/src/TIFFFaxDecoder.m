//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/TIFFFaxDecoder.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TIFFFaxDecoder.h"
#include "java/lang/RuntimeException.h"

#if !__has_feature(objc_arc)
#error "TIFFFaxDecoder must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCodecTIFFFaxDecoder () {
 @public
  jint bitPointer_;
  jint bytePointer_;
  IOSByteArray *data_;
  jint w_;
  jint h_;
  jint fillOrder_;
  jint changingElemSize_;
  IOSIntArray *prevChangingElems_;
  IOSIntArray *currChangingElems_;
  jint lastChangingElement_;
  jint compression_;
  jint uncompressedMode_;
  jint fillBits_;
  jint oneD_;
}

- (void)decodeNextScanlineWithByteArray:(IOSByteArray *)buffer
                                withInt:(jint)lineOffset
                                withInt:(jint)bitOffset;

- (void)setToBlackWithByteArray:(IOSByteArray *)buffer
                        withInt:(jint)lineOffset
                        withInt:(jint)bitOffset
                        withInt:(jint)numBits;

- (jint)decodeWhiteCodeWord;

- (jint)decodeBlackCodeWord;

- (jint)readEOLWithBoolean:(jboolean)isFirstEOL;

- (void)getNextChangingElementWithInt:(jint)a0
                          withBoolean:(jboolean)isWhite
                         withIntArray:(IOSIntArray *)ret;

- (jint)nextNBitsWithInt:(jint)bitsToGet;

- (jint)nextLesserThan8BitsWithInt:(jint)bitsToGet;

- (void)updatePointerWithInt:(jint)bitsToMoveBack;

- (jboolean)advancePointer;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFFaxDecoder, data_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFFaxDecoder, prevChangingElems_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfCodecTIFFFaxDecoder, currChangingElems_, IOSIntArray *)

inline IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_table1(void);
inline IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_table1(IOSIntArray *value);
static IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_table1;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, table1, IOSIntArray *)

inline IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_table2(void);
inline IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_table2(IOSIntArray *value);
static IOSIntArray *ComAowagieTextPdfCodecTIFFFaxDecoder_table2;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, table2, IOSIntArray *)

inline IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_flipTable(void);
inline IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_flipTable(IOSByteArray *value);
static IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, flipTable, IOSByteArray *)

inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_white(void);
inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_white(IOSShortArray *value);
static IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_white;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, white, IOSShortArray *)

inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_additionalMakeup(void);
inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_additionalMakeup(IOSShortArray *value);
static IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, additionalMakeup, IOSShortArray *)

inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_initBlack(void);
inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_initBlack(IOSShortArray *value);
static IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_initBlack;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, initBlack, IOSShortArray *)

inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_twoBitBlack(void);
inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_twoBitBlack(IOSShortArray *value);
static IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_twoBitBlack;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, twoBitBlack, IOSShortArray *)

inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_black(void);
inline IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_black(IOSShortArray *value);
static IOSShortArray *ComAowagieTextPdfCodecTIFFFaxDecoder_black;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, black, IOSShortArray *)

inline IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_get_twoDCodes(void);
inline IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_set_twoDCodes(IOSByteArray *value);
static IOSByteArray *ComAowagieTextPdfCodecTIFFFaxDecoder_twoDCodes;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfCodecTIFFFaxDecoder, twoDCodes, IOSByteArray *)

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, IOSByteArray *buffer, jint lineOffset, jint bitOffset);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, IOSByteArray *buffer, jint lineOffset, jint bitOffset, jint numBits);

__attribute__((unused)) static jint ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(ComAowagieTextPdfCodecTIFFFaxDecoder *self);

__attribute__((unused)) static jint ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(ComAowagieTextPdfCodecTIFFFaxDecoder *self);

__attribute__((unused)) static jint ComAowagieTextPdfCodecTIFFFaxDecoder_readEOLWithBoolean_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jboolean isFirstEOL);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFFaxDecoder_getNextChangingElementWithInt_withBoolean_withIntArray_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint a0, jboolean isWhite, IOSIntArray *ret);

__attribute__((unused)) static jint ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToGet);

__attribute__((unused)) static jint ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToGet);

__attribute__((unused)) static void ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToMoveBack);

__attribute__((unused)) static jboolean ComAowagieTextPdfCodecTIFFFaxDecoder_advancePointer(ComAowagieTextPdfCodecTIFFFaxDecoder *self);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/TIFFFaxDecoder.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfCodecTIFFFaxDecoder)


#line 48
@implementation ComAowagieTextPdfCodecTIFFFaxDecoder


#line 582
- (instancetype)initWithInt:(jint)fillOrder
                    withInt:(jint)w
                    withInt:(jint)h {
  ComAowagieTextPdfCodecTIFFFaxDecoder_initWithInt_withInt_withInt_(self, fillOrder, w, h);
  return self;
}


#line 599
+ (void)reverseBitsWithByteArray:(IOSByteArray *)b {
  ComAowagieTextPdfCodecTIFFFaxDecoder_reverseBitsWithByteArray_(b);
}


#line 607
- (void)decode1DWithByteArray:(IOSByteArray *)buffer
                withByteArray:(IOSByteArray *)compData
                      withInt:(jint)startX
                      withInt:(jint)height {
  
#line 609
  self->data_ = compData;
  
#line 611
  jint lineOffset = 0;
  jint scanlineStride = JreIntDiv((self->w_ + 7), 8);
  
#line 614
  self->bitPointer_ = 0;
  self->bytePointer_ = 0;
  
#line 617
  for (jint i = 0; i < height; i++) {
    ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(self, buffer, lineOffset, startX);
    lineOffset += scanlineStride;
  }
}


#line 623
- (void)decodeNextScanlineWithByteArray:(IOSByteArray *)buffer
                                withInt:(jint)lineOffset
                                withInt:(jint)bitOffset {
  ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(self, buffer, lineOffset, bitOffset);
}


#line 762
- (void)decode2DWithByteArray:(IOSByteArray *)buffer
                withByteArray:(IOSByteArray *)compData
                      withInt:(jint)startX
                      withInt:(jint)height
                     withLong:(jlong)tiffT4Options {
  self->data_ = compData;
  self->compression_ = 3;
  
#line 770
  self->bitPointer_ = 0;
  self->bytePointer_ = 0;
  
#line 773
  jint scanlineStride = JreIntDiv((self->w_ + 7), 8);
  
#line 775
  jint a0;
  
#line 775
  jint a1;
  
#line 775
  jint b1;
  
#line 775
  jint b2;
  IOSIntArray *b = [IOSIntArray newArrayWithLength:2];
  jint entry_;
  
#line 777
  jint code;
  
#line 777
  jint bits;
  jboolean isWhite;
  jint currIndex = 0;
  IOSIntArray *temp;
  
#line 788
  self->oneD_ = (jint) (tiffT4Options & (jint) 0x01);
  self->uncompressedMode_ = (jint) (JreRShift64((tiffT4Options & (jint) 0x02), 1));
  self->fillBits_ = (jint) (JreRShift64((tiffT4Options & (jint) 0x04), 2));
  
#line 793
  if (ComAowagieTextPdfCodecTIFFFaxDecoder_readEOLWithBoolean_(self, true) != 1) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"First scanline must be 1D encoded.");
  }
  
#line 797
  jint lineOffset = 0;
  jint bitOffset;
  
#line 802
  ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(self, buffer, lineOffset, startX);
  lineOffset += scanlineStride;
  
#line 805
  for (jint lines = 1; lines < height; lines++) {
    
#line 809
    if (ComAowagieTextPdfCodecTIFFFaxDecoder_readEOLWithBoolean_(self, false) == 0) {
      
#line 814
      temp = self->prevChangingElems_;
      self->prevChangingElems_ = self->currChangingElems_;
      self->currChangingElems_ = temp;
      currIndex = 0;
      
#line 820
      a0 = -1;
      isWhite = true;
      bitOffset = startX;
      
#line 824
      self->lastChangingElement_ = 0;
      
#line 826
      while (bitOffset < self->w_) {
        
#line 828
        ComAowagieTextPdfCodecTIFFFaxDecoder_getNextChangingElementWithInt_withBoolean_withIntArray_(self, a0, isWhite, b);
        
#line 830
        b1 = IOSIntArray_Get(b, 0);
        b2 = IOSIntArray_Get(b, 1);
        
#line 834
        entry_ = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 7);
        
#line 837
        entry_ = IOSByteArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_twoDCodes), entry_) & (jint) 0xff;
        
#line 840
        code = JreURShift32((entry_ & (jint) 0x78), 3);
        bits = entry_ & (jint) 0x07;
        
#line 843
        if (code == 0) {
          if (!isWhite) {
            ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset,
#line 846
            b2 - bitOffset);
          }
          bitOffset = a0 = b2;
          
#line 851
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
        }
        else
#line 852
        if (code == 1) {
          
#line 854
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
          
#line 857
          jint number;
          if (isWhite) {
            number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(self);
            bitOffset += number;
            *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = bitOffset;
            
#line 863
            number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(self);
            ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, number);
            bitOffset += number;
            *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = bitOffset;
          }
          else {
            
#line 868
            number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(self);
            ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, number);
            bitOffset += number;
            *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = bitOffset;
            
#line 873
            number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(self);
            bitOffset += number;
            *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = bitOffset;
          }
          
#line 878
          a0 = bitOffset;
        }
        else
#line 879
        if (code <= 8) {
          
#line 881
          a1 = b1 + code - 5;
          
#line 883
          *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = a1;
          
#line 887
          if (!isWhite) {
            ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset,
#line 889
            a1 - bitOffset);
          }
          bitOffset = a0 = a1;
          isWhite = !isWhite;
          
#line 894
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
        }
        else {
          
#line 896
          @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid code encountered while decoding 2D group 3 compressed data.");
        }
      }
      
#line 902
      *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), currIndex++) = bitOffset;
      self->changingElemSize_ = currIndex;
    }
    else {
      ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(self, buffer, lineOffset, startX);
    }
    
#line 909
    lineOffset += scanlineStride;
  }
}


#line 913
- (void)decodeT6WithByteArray:(IOSByteArray *)buffer
                withByteArray:(IOSByteArray *)compData
                      withInt:(jint)startX
                      withInt:(jint)height
                     withLong:(jlong)tiffT6Options {
  self->data_ = compData;
  self->compression_ = 4;
  
#line 921
  self->bitPointer_ = 0;
  self->bytePointer_ = 0;
  
#line 924
  jint scanlineStride = JreIntDiv((self->w_ + 7), 8);
  
#line 926
  jint a0;
  
#line 926
  jint a1;
  
#line 926
  jint b1;
  
#line 926
  jint b2;
  jint entry_;
  
#line 927
  jint code;
  
#line 927
  jint bits;
  jboolean isWhite;
  jint currIndex;
  IOSIntArray *temp;
  
#line 933
  IOSIntArray *b = [IOSIntArray newArrayWithLength:2];
  
#line 938
  self->uncompressedMode_ = (jint) (JreRShift64((tiffT6Options & (jint) 0x02), 1));
  
#line 941
  IOSIntArray *cce = self->currChangingElems_;
  
#line 946
  self->changingElemSize_ = 0;
  *IOSIntArray_GetRef(nil_chk(cce), self->changingElemSize_++) = self->w_;
  *IOSIntArray_GetRef(cce, self->changingElemSize_++) = self->w_;
  
#line 950
  jint lineOffset = 0;
  jint bitOffset;
  
#line 953
  for (jint lines = 0; lines < height; lines++) {
    
#line 955
    a0 = -1;
    isWhite = true;
    
#line 961
    temp = self->prevChangingElems_;
    self->prevChangingElems_ = self->currChangingElems_;
    cce = self->currChangingElems_ = temp;
    currIndex = 0;
    
#line 967
    bitOffset = startX;
    
#line 970
    self->lastChangingElement_ = 0;
    
#line 973
    while (bitOffset < self->w_) {
      
#line 975
      ComAowagieTextPdfCodecTIFFFaxDecoder_getNextChangingElementWithInt_withBoolean_withIntArray_(self, a0, isWhite, b);
      b1 = IOSIntArray_Get(b, 0);
      b2 = IOSIntArray_Get(b, 1);
      
#line 980
      entry_ = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 7);
      
#line 982
      entry_ = IOSByteArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_twoDCodes), entry_) & (jint) 0xff;
      
#line 985
      code = JreURShift32((entry_ & (jint) 0x78), 3);
      bits = entry_ & (jint) 0x07;
      
#line 988
      if (code == 0) {
        
#line 990
        if (!isWhite) {
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset,
#line 992
          b2 - bitOffset);
        }
        bitOffset = a0 = b2;
        
#line 997
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
      }
      else
#line 998
      if (code == 1) {
        
#line 1000
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
        
#line 1003
        jint number;
        if (isWhite) {
          
#line 1006
          number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(self);
          bitOffset += number;
          *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
          
#line 1010
          number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(self);
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, number);
          bitOffset += number;
          *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
        }
        else {
          number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(self);
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, number);
          bitOffset += number;
          *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
          
#line 1021
          number = ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(self);
          bitOffset += number;
          *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
        }
        
#line 1026
        a0 = bitOffset;
      }
      else
#line 1027
      if (code <= 8) {
        a1 = b1 + code - 5;
        *IOSIntArray_GetRef(cce, currIndex++) = a1;
        
#line 1033
        if (!isWhite) {
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset,
#line 1035
          a1 - bitOffset);
        }
        bitOffset = a0 = a1;
        isWhite = !isWhite;
        
#line 1040
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
      }
      else
#line 1041
      if (code == 11) {
        if (ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 3) != 7) {
          @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid code encountered while decoding 2D group 4 compressed data.");
        }
        
#line 1046
        jint zeros = 0;
        jboolean exit = false;
        
#line 1049
        while (!exit) {
          while (ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 1) != 1) {
            zeros++;
          }
          
#line 1054
          if (zeros > 5) {
            
#line 1058
            zeros = zeros - 6;
            
#line 1060
            if (!isWhite && zeros > 0) {
              *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
            }
            
#line 1065
            bitOffset += zeros;
            if (zeros > 0) {
              
#line 1068
              isWhite = true;
            }
            
#line 1073
            if (ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 1) == 0) {
              if (!isWhite) {
                *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
              }
              isWhite = true;
            }
            else {
              
#line 1079
              if (isWhite) {
                *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
              }
              isWhite = false;
            }
            
#line 1085
            exit = true;
          }
          
#line 1088
          if (zeros == 5) {
            if (!isWhite) {
              *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
            }
            bitOffset += zeros;
            
#line 1095
            isWhite = true;
          }
          else {
            
#line 1097
            bitOffset += zeros;
            
#line 1099
            *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
            ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, 1);
            ++bitOffset;
            
#line 1104
            isWhite = false;
          }
        }
      }
      else {
        
#line 1113
        bitOffset = self->w_;
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 7 - bits);
      }
    }
    
#line 1121
    if (currIndex < cce->size_) {
      *IOSIntArray_GetRef(cce, currIndex++) = bitOffset;
    }
    
#line 1126
    self->changingElemSize_ = currIndex;
    
#line 1128
    lineOffset += scanlineStride;
  }
}


#line 1132
- (void)setToBlackWithByteArray:(IOSByteArray *)buffer
                        withInt:(jint)lineOffset
                        withInt:(jint)bitOffset
                        withInt:(jint)numBits {
  ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, numBits);
}


#line 1169
- (jint)decodeWhiteCodeWord {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(self);
}


#line 1211
- (jint)decodeBlackCodeWord {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(self);
}


#line 1274
- (jint)readEOLWithBoolean:(jboolean)isFirstEOL {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_readEOLWithBoolean_(self, isFirstEOL);
}


#line 1340
- (void)getNextChangingElementWithInt:(jint)a0
                          withBoolean:(jboolean)isWhite
                         withIntArray:(IOSIntArray *)ret {
  ComAowagieTextPdfCodecTIFFFaxDecoder_getNextChangingElementWithInt_withBoolean_withIntArray_(self, a0, isWhite, ret);
}


#line 1370
- (jint)nextNBitsWithInt:(jint)bitsToGet {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, bitsToGet);
}


#line 1439
- (jint)nextLesserThan8BitsWithInt:(jint)bitsToGet {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, bitsToGet);
}


#line 1487
- (void)updatePointerWithInt:(jint)bitsToMoveBack {
  ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, bitsToMoveBack);
}


#line 1499
- (jboolean)advancePointer {
  return ComAowagieTextPdfCodecTIFFFaxDecoder_advancePointer(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 18, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(reverseBitsWithByteArray:);
  methods[2].selector = @selector(decode1DWithByteArray:withByteArray:withInt:withInt:);
  methods[3].selector = @selector(decodeNextScanlineWithByteArray:withInt:withInt:);
  methods[4].selector = @selector(decode2DWithByteArray:withByteArray:withInt:withInt:withLong:);
  methods[5].selector = @selector(decodeT6WithByteArray:withByteArray:withInt:withInt:withLong:);
  methods[6].selector = @selector(setToBlackWithByteArray:withInt:withInt:withInt:);
  methods[7].selector = @selector(decodeWhiteCodeWord);
  methods[8].selector = @selector(decodeBlackCodeWord);
  methods[9].selector = @selector(readEOLWithBoolean:);
  methods[10].selector = @selector(getNextChangingElementWithInt:withBoolean:withIntArray:);
  methods[11].selector = @selector(nextNBitsWithInt:);
  methods[12].selector = @selector(nextLesserThan8BitsWithInt:);
  methods[13].selector = @selector(updatePointerWithInt:);
  methods[14].selector = @selector(advancePointer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitPointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bytePointer_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "h_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fillOrder_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "changingElemSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prevChangingElems_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currChangingElems_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastChangingElement_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compression_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uncompressedMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fillBits_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oneD_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "table1", "[I", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "table2", "[I", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "flipTable", "[B", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "white", "[S", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "additionalMakeup", "[S", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
    { "initBlack", "[S", .constantValue.asLong = 0, 0xa, -1, 25, -1, -1 },
    { "twoBitBlack", "[S", .constantValue.asLong = 0, 0xa, -1, 26, -1, -1 },
    { "black", "[S", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "twoDCodes", "[B", .constantValue.asLong = 0, 0xa, -1, 28, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "reverseBits", "[B", "decode1D", "[B[BII", "decodeNextScanline", "[BII", "decode2D", "[B[BIIJ", "decodeT6", "setToBlack", "[BIII", "readEOL", "Z", "getNextChangingElement", "IZ[I", "nextNBits", "I", "nextLesserThan8Bits", "updatePointer", &ComAowagieTextPdfCodecTIFFFaxDecoder_table1, &ComAowagieTextPdfCodecTIFFFaxDecoder_table2, &ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable, &ComAowagieTextPdfCodecTIFFFaxDecoder_white, &ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup, &ComAowagieTextPdfCodecTIFFFaxDecoder_initBlack, &ComAowagieTextPdfCodecTIFFFaxDecoder_twoBitBlack, &ComAowagieTextPdfCodecTIFFFaxDecoder_black, &ComAowagieTextPdfCodecTIFFFaxDecoder_twoDCodes };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecTIFFFaxDecoder = { "TIFFFaxDecoder", "com.aowagie.text.pdf.codec", ptrTable, methods, fields, 7, 0x1, 15, 23, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecTIFFFaxDecoder;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfCodecTIFFFaxDecoder class]) {
    ComAowagieTextPdfCodecTIFFFaxDecoder_table1 = [IOSIntArray newArrayWithInts:(jint[]){
#line 72
      (jint) 0x00,
#line 73
      (jint) 0x01,
#line 74
      (jint) 0x03,
#line 75
      (jint) 0x07,
#line 76
      (jint) 0x0f,
#line 77
      (jint) 0x1f,
#line 78
      (jint) 0x3f,
#line 79
      (jint) 0x7f,
#line 80
      (jint) 0xff } count:9];
      ComAowagieTextPdfCodecTIFFFaxDecoder_table2 = [IOSIntArray newArrayWithInts:(jint[]){
#line 84
        (jint) 0x00,
#line 85
        (jint) 0x80,
#line 86
        (jint) 0xc0,
#line 87
        (jint) 0xe0,
#line 88
        (jint) 0xf0,
#line 89
        (jint) 0xf8,
#line 90
        (jint) 0xfc,
#line 91
        (jint) 0xfe,
#line 92
        (jint) 0xff } count:9];
        ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 97
          0, -128, 64, -64, 32, -96, 96, -32,
#line 98
          16, -112, 80, -48, 48, -80, 112, -16,
#line 99
          8, -120, 72, -56, 40, -88, 104, -24,
#line 100
          24, -104, 88, -40, 56, -72, 120, -8,
#line 101
          4, -124, 68, -60, 36, -92, 100, -28,
#line 102
          20, -108, 84, -44, 52, -76, 116, -12,
#line 103
          12, -116, 76, -52, 44, -84, 108, -20,
#line 104
          28, -100, 92, -36, 60, -68, 124, -4,
#line 105
          2, -126, 66, -62, 34, -94, 98, -30,
#line 106
          18, -110, 82, -46, 50, -78, 114, -14,
#line 107
          10, -118, 74, -54, 42, -86, 106, -22,
#line 108
          26, -102, 90, -38, 58, -70, 122, -6,
#line 109
          6, -122, 70, -58, 38, -90, 102, -26,
#line 110
          22, -106, 86, -42, 54, -74, 118, -10,
#line 111
          14, -114, 78, -50, 46, -82, 110, -18,
#line 112
          30, -98, 94, -34, 62, -66, 126, -2,
#line 113
          1, -127, 65, -63, 33, -95, 97, -31,
#line 114
          17, -111, 81, -47, 49, -79, 113, -15,
#line 115
          9, -119, 73, -55, 41, -87, 105, -23,
#line 116
          25, -103, 89, -39, 57, -71, 121, -7,
#line 117
          5, -123, 69, -59, 37, -91, 101, -27,
#line 118
          21, -107, 85, -43, 53, -75, 117, -11,
#line 119
          13, -115, 77, -51, 45, -83, 109, -19,
#line 120
          29, -99, 93, -35, 61, -67, 125, -3,
#line 121
          3, -125, 67, -61, 35, -93, 99, -29,
#line 122
          19, -109, 83, -45, 51, -77, 115, -13,
#line 123
          11, -117, 75, -53, 43, -85, 107, -21,
#line 124
          27, -101, 91, -37, 59, -69, 123, -5,
#line 125
          7, -121, 71, -57, 39, -89, 103, -25,
#line 126
          23, -105, 87, -41, 55, -73, 119, -9,
#line 127
          15, -113, 79, -49, 47, -81, 111, -17,
#line 128
          31, -97, 95, -33, 63, -65, 127, -1 } count:256];
          ComAowagieTextPdfCodecTIFFFaxDecoder_white = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 134
            6430, 6400, 6400, 6400, 3225, 3225, 3225, 3225,
#line 136
            944, 944, 944, 944, 976, 976, 976, 976,
#line 138
            1456, 1456, 1456, 1456, 1488, 1488, 1488, 1488,
#line 140
            718, 718, 718, 718, 718, 718, 718, 718,
#line 142
            750, 750, 750, 750, 750, 750, 750, 750,
#line 144
            1520, 1520, 1520, 1520, 1552, 1552, 1552, 1552,
#line 146
            428, 428, 428, 428, 428, 428, 428, 428,
#line 148
            428, 428, 428, 428, 428, 428, 428, 428,
#line 150
            654, 654, 654, 654, 654, 654, 654, 654,
#line 152
            1072, 1072, 1072, 1072, 1104, 1104, 1104, 1104,
#line 154
            1136, 1136, 1136, 1136, 1168, 1168, 1168, 1168,
#line 156
            1200, 1200, 1200, 1200, 1232, 1232, 1232, 1232,
#line 158
            622, 622, 622, 622, 622, 622, 622, 622,
#line 160
            1008, 1008, 1008, 1008, 1040, 1040, 1040, 1040,
#line 162
            44, 44, 44, 44, 44, 44, 44, 44,
#line 164
            44, 44, 44, 44, 44, 44, 44, 44,
#line 166
            396, 396, 396, 396, 396, 396, 396, 396,
#line 168
            396, 396, 396, 396, 396, 396, 396, 396,
#line 170
            1712, 1712, 1712, 1712, 1744, 1744, 1744, 1744,
#line 172
            846, 846, 846, 846, 846, 846, 846, 846,
#line 174
            1264, 1264, 1264, 1264, 1296, 1296, 1296, 1296,
#line 176
            1328, 1328, 1328, 1328, 1360, 1360, 1360, 1360,
#line 178
            1392, 1392, 1392, 1392, 1424, 1424, 1424, 1424,
#line 180
            686, 686, 686, 686, 686, 686, 686, 686,
#line 182
            910, 910, 910, 910, 910, 910, 910, 910,
#line 184
            1968, 1968, 1968, 1968, 2000, 2000, 2000, 2000,
#line 186
            2032, 2032, 2032, 2032, 16, 16, 16, 16,
#line 188
            10257, 10257, 10257, 10257, 12305, 12305, 12305, 12305,
#line 190
            330, 330, 330, 330, 330, 330, 330, 330,
#line 192
            330, 330, 330, 330, 330, 330, 330, 330,
#line 194
            330, 330, 330, 330, 330, 330, 330, 330,
#line 196
            330, 330, 330, 330, 330, 330, 330, 330,
#line 198
            362, 362, 362, 362, 362, 362, 362, 362,
#line 200
            362, 362, 362, 362, 362, 362, 362, 362,
#line 202
            362, 362, 362, 362, 362, 362, 362, 362,
#line 204
            362, 362, 362, 362, 362, 362, 362, 362,
#line 206
            878, 878, 878, 878, 878, 878, 878, 878,
#line 208
            1904, 1904, 1904, 1904, 1936, 1936, 1936, 1936,
#line 210
            -18413, -18413, -16365, -16365, -14317, -14317, -10221, -10221,
#line 212
            590, 590, 590, 590, 590, 590, 590, 590,
#line 214
            782, 782, 782, 782, 782, 782, 782, 782,
#line 216
            1584, 1584, 1584, 1584, 1616, 1616, 1616, 1616,
#line 218
            1648, 1648, 1648, 1648, 1680, 1680, 1680, 1680,
#line 220
            814, 814, 814, 814, 814, 814, 814, 814,
#line 222
            1776, 1776, 1776, 1776, 1808, 1808, 1808, 1808,
#line 224
            1840, 1840, 1840, 1840, 1872, 1872, 1872, 1872,
#line 226
            6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157,
#line 228
            6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157,
#line 230
            -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275,
#line 232
            -12275, -12275, -12275, -12275, -12275, -12275, -12275, -12275,
#line 234
            14353, 14353, 14353, 14353, 16401, 16401, 16401, 16401,
#line 236
            22547, 22547, 24595, 24595, 20497, 20497, 20497, 20497,
#line 238
            18449, 18449, 18449, 18449, 26643, 26643, 28691, 28691,
#line 240
            30739, 30739, -32749, -32749, -30701, -30701, -28653, -28653,
#line 242
            -26605, -26605, -24557, -24557, -22509, -22509, -20461, -20461,
#line 244
            8207, 8207, 8207, 8207, 8207, 8207, 8207, 8207,
#line 246
            72, 72, 72, 72, 72, 72, 72, 72,
#line 248
            72, 72, 72, 72, 72, 72, 72, 72,
#line 250
            72, 72, 72, 72, 72, 72, 72, 72,
#line 252
            72, 72, 72, 72, 72, 72, 72, 72,
#line 254
            72, 72, 72, 72, 72, 72, 72, 72,
#line 256
            72, 72, 72, 72, 72, 72, 72, 72,
#line 258
            72, 72, 72, 72, 72, 72, 72, 72,
#line 260
            72, 72, 72, 72, 72, 72, 72, 72,
#line 262
            104, 104, 104, 104, 104, 104, 104, 104,
#line 264
            104, 104, 104, 104, 104, 104, 104, 104,
#line 266
            104, 104, 104, 104, 104, 104, 104, 104,
#line 268
            104, 104, 104, 104, 104, 104, 104, 104,
#line 270
            104, 104, 104, 104, 104, 104, 104, 104,
#line 272
            104, 104, 104, 104, 104, 104, 104, 104,
#line 274
            104, 104, 104, 104, 104, 104, 104, 104,
#line 276
            104, 104, 104, 104, 104, 104, 104, 104,
#line 278
            4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
#line 280
            4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
#line 282
            4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
#line 284
            4107, 4107, 4107, 4107, 4107, 4107, 4107, 4107,
#line 286
            266, 266, 266, 266, 266, 266, 266, 266,
#line 288
            266, 266, 266, 266, 266, 266, 266, 266,
#line 290
            266, 266, 266, 266, 266, 266, 266, 266,
#line 292
            266, 266, 266, 266, 266, 266, 266, 266,
#line 294
            298, 298, 298, 298, 298, 298, 298, 298,
#line 296
            298, 298, 298, 298, 298, 298, 298, 298,
#line 298
            298, 298, 298, 298, 298, 298, 298, 298,
#line 300
            298, 298, 298, 298, 298, 298, 298, 298,
#line 302
            524, 524, 524, 524, 524, 524, 524, 524,
#line 304
            524, 524, 524, 524, 524, 524, 524, 524,
#line 306
            556, 556, 556, 556, 556, 556, 556, 556,
#line 308
            556, 556, 556, 556, 556, 556, 556, 556,
#line 310
            136, 136, 136, 136, 136, 136, 136, 136,
#line 312
            136, 136, 136, 136, 136, 136, 136, 136,
#line 314
            136, 136, 136, 136, 136, 136, 136, 136,
#line 316
            136, 136, 136, 136, 136, 136, 136, 136,
#line 318
            136, 136, 136, 136, 136, 136, 136, 136,
#line 320
            136, 136, 136, 136, 136, 136, 136, 136,
#line 322
            136, 136, 136, 136, 136, 136, 136, 136,
#line 324
            136, 136, 136, 136, 136, 136, 136, 136,
#line 326
            168, 168, 168, 168, 168, 168, 168, 168,
#line 328
            168, 168, 168, 168, 168, 168, 168, 168,
#line 330
            168, 168, 168, 168, 168, 168, 168, 168,
#line 332
            168, 168, 168, 168, 168, 168, 168, 168,
#line 334
            168, 168, 168, 168, 168, 168, 168, 168,
#line 336
            168, 168, 168, 168, 168, 168, 168, 168,
#line 338
            168, 168, 168, 168, 168, 168, 168, 168,
#line 340
            168, 168, 168, 168, 168, 168, 168, 168,
#line 342
            460, 460, 460, 460, 460, 460, 460, 460,
#line 344
            460, 460, 460, 460, 460, 460, 460, 460,
#line 346
            492, 492, 492, 492, 492, 492, 492, 492,
#line 348
            492, 492, 492, 492, 492, 492, 492, 492,
#line 350
            2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
#line 352
            2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
#line 354
            2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
#line 356
            2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,
#line 358
            200, 200, 200, 200, 200, 200, 200, 200,
#line 360
            200, 200, 200, 200, 200, 200, 200, 200,
#line 362
            200, 200, 200, 200, 200, 200, 200, 200,
#line 364
            200, 200, 200, 200, 200, 200, 200, 200,
#line 366
            200, 200, 200, 200, 200, 200, 200, 200,
#line 368
            200, 200, 200, 200, 200, 200, 200, 200,
#line 370
            200, 200, 200, 200, 200, 200, 200, 200,
#line 372
            200, 200, 200, 200, 200, 200, 200, 200,
#line 374
            232, 232, 232, 232, 232, 232, 232, 232,
#line 376
            232, 232, 232, 232, 232, 232, 232, 232,
#line 378
            232, 232, 232, 232, 232, 232, 232, 232,
#line 380
            232, 232, 232, 232, 232, 232, 232, 232,
#line 382
            232, 232, 232, 232, 232, 232, 232, 232,
#line 384
            232, 232, 232, 232, 232, 232, 232, 232,
#line 386
            232, 232, 232, 232, 232, 232, 232, 232,
#line 388
            232, 232, 232, 232, 232, 232, 232, 232 } count:1024];
            ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 393
              28679, 28679, 31752, (jshort) 32777,
#line 394
              (jshort) 33801, (jshort) 34825, (jshort) 35849, (jshort) 36873,
#line 395
              (jshort) 29703, (jshort) 29703, (jshort) 30727, (jshort) 30727,
#line 396
              (jshort) 37897, (jshort) 38921, (jshort) 39945, (jshort) 40969 } count:16];
              ComAowagieTextPdfCodecTIFFFaxDecoder_initBlack = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 402
                3226, 6412, 200, 168, 38, 38, 134, 134,
#line 404
                100, 100, 100, 100, 68, 68, 68, 68 } count:16];
                ComAowagieTextPdfCodecTIFFFaxDecoder_twoBitBlack = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 408
                  292, 260, 226, 226 } count:4];
                  ComAowagieTextPdfCodecTIFFFaxDecoder_black = [IOSShortArray newArrayWithShorts:(jshort[]){
#line 413
                    62, 62, 30, 30, 0, 0, 0, 0,
#line 415
                    0, 0, 0, 0, 0, 0, 0, 0,
#line 417
                    0, 0, 0, 0, 0, 0, 0, 0,
#line 419
                    0, 0, 0, 0, 0, 0, 0, 0,
#line 421
                    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
#line 423
                    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
#line 425
                    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
#line 427
                    3225, 3225, 3225, 3225, 3225, 3225, 3225, 3225,
#line 429
                    588, 588, 588, 588, 588, 588, 588, 588,
#line 431
                    1680, 1680, 20499, 22547, 24595, 26643, 1776, 1776,
#line 433
                    1808, 1808, -24557, -22509, -20461, -18413, 1904, 1904,
#line 435
                    1936, 1936, -16365, -14317, 782, 782, 782, 782,
#line 437
                    814, 814, 814, 814, -12269, -10221, 10257, 10257,
#line 439
                    12305, 12305, 14353, 14353, 16403, 18451, 1712, 1712,
#line 441
                    1744, 1744, 28691, 30739, -32749, -30701, -28653, -26605,
#line 443
                    2061, 2061, 2061, 2061, 2061, 2061, 2061, 2061,
#line 445
                    424, 424, 424, 424, 424, 424, 424, 424,
#line 447
                    424, 424, 424, 424, 424, 424, 424, 424,
#line 449
                    424, 424, 424, 424, 424, 424, 424, 424,
#line 451
                    424, 424, 424, 424, 424, 424, 424, 424,
#line 453
                    750, 750, 750, 750, 1616, 1616, 1648, 1648,
#line 455
                    1424, 1424, 1456, 1456, 1488, 1488, 1520, 1520,
#line 457
                    1840, 1840, 1872, 1872, 1968, 1968, 8209, 8209,
#line 459
                    524, 524, 524, 524, 524, 524, 524, 524,
#line 461
                    556, 556, 556, 556, 556, 556, 556, 556,
#line 463
                    1552, 1552, 1584, 1584, 2000, 2000, 2032, 2032,
#line 465
                    976, 976, 1008, 1008, 1040, 1040, 1072, 1072,
#line 467
                    1296, 1296, 1328, 1328, 718, 718, 718, 718,
#line 469
                    456, 456, 456, 456, 456, 456, 456, 456,
#line 471
                    456, 456, 456, 456, 456, 456, 456, 456,
#line 473
                    456, 456, 456, 456, 456, 456, 456, 456,
#line 475
                    456, 456, 456, 456, 456, 456, 456, 456,
#line 477
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 479
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 481
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 483
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 485
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 487
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 489
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 491
                    326, 326, 326, 326, 326, 326, 326, 326,
#line 493
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 495
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 497
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 499
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 501
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 503
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 505
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 507
                    358, 358, 358, 358, 358, 358, 358, 358,
#line 509
                    490, 490, 490, 490, 490, 490, 490, 490,
#line 511
                    490, 490, 490, 490, 490, 490, 490, 490,
#line 513
                    4113, 4113, 6161, 6161, 848, 848, 880, 880,
#line 515
                    912, 912, 944, 944, 622, 622, 622, 622,
#line 517
                    654, 654, 654, 654, 1104, 1104, 1136, 1136,
#line 519
                    1168, 1168, 1200, 1200, 1232, 1232, 1264, 1264,
#line 521
                    686, 686, 686, 686, 1360, 1360, 1392, 1392,
#line 523
                    12, 12, 12, 12, 12, 12, 12, 12,
#line 525
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 527
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 529
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 531
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 533
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 535
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 537
                    390, 390, 390, 390, 390, 390, 390, 390,
#line 539
                    390, 390, 390, 390, 390, 390, 390, 390 } count:512];
                    ComAowagieTextPdfCodecTIFFFaxDecoder_twoDCodes = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 544
                      80, 88, 23, 71, 30, 30, 62, 62,
#line 546
                      4, 4, 4, 4, 4, 4, 4, 4,
#line 548
                      11, 11, 11, 11, 11, 11, 11, 11,
#line 550
                      11, 11, 11, 11, 11, 11, 11, 11,
#line 552
                      35, 35, 35, 35, 35, 35, 35, 35,
#line 554
                      35, 35, 35, 35, 35, 35, 35, 35,
#line 556
                      51, 51, 51, 51, 51, 51, 51, 51,
#line 558
                      51, 51, 51, 51, 51, 51, 51, 51,
#line 560
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 562
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 564
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 566
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 568
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 570
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 572
                      41, 41, 41, 41, 41, 41, 41, 41,
#line 574
                      41, 41, 41, 41, 41, 41, 41, 41 } count:128];
                      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfCodecTIFFFaxDecoder)
                    }
                  }

@end


#line 582
void ComAowagieTextPdfCodecTIFFFaxDecoder_initWithInt_withInt_withInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint fillOrder, jint w, jint h) {
  NSObject_init(self);
  self->changingElemSize_ =
#line 57
  0;
  self->lastChangingElement_ =
#line 62
  0;
  self->compression_ =
#line 64
  2;
  self->uncompressedMode_ =
#line 67
  0;
  self->fillBits_ = 0;
  
#line 583
  self->fillOrder_ = fillOrder;
  self->w_ = w;
  self->h_ = h;
  
#line 587
  self->bitPointer_ = 0;
  self->bytePointer_ = 0;
  self->prevChangingElems_ = [IOSIntArray newArrayWithLength:w];
  self->currChangingElems_ = [IOSIntArray newArrayWithLength:w];
}


#line 582
ComAowagieTextPdfCodecTIFFFaxDecoder *new_ComAowagieTextPdfCodecTIFFFaxDecoder_initWithInt_withInt_withInt_(jint fillOrder, jint w, jint h) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecTIFFFaxDecoder, initWithInt_withInt_withInt_, fillOrder, w, h)
}


#line 582
ComAowagieTextPdfCodecTIFFFaxDecoder *create_ComAowagieTextPdfCodecTIFFFaxDecoder_initWithInt_withInt_withInt_(jint fillOrder, jint w, jint h) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecTIFFFaxDecoder, initWithInt_withInt_withInt_, fillOrder, w, h)
}


#line 599
void ComAowagieTextPdfCodecTIFFFaxDecoder_reverseBitsWithByteArray_(IOSByteArray *b) {
  ComAowagieTextPdfCodecTIFFFaxDecoder_initialize();
  
#line 600
  for (jint k = 0; k < ((IOSByteArray *) nil_chk(b))->size_; ++k) {
    *IOSByteArray_GetRef(b, k) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable), IOSByteArray_Get(b, k) & (jint) 0xff);
  }
}


#line 623
void ComAowagieTextPdfCodecTIFFFaxDecoder_decodeNextScanlineWithByteArray_withInt_withInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, IOSByteArray *buffer, jint lineOffset, jint bitOffset) {
  
#line 625
  jint bits = 0;
  
#line 625
  jint code = 0;
  
#line 625
  jint isT = 0;
  jint current;
  
#line 626
  jint entry_;
  
#line 626
  jint twoBits;
  jboolean isWhite = true;
  
#line 630
  self->changingElemSize_ = 0;
  
#line 633
  while (bitOffset < self->w_) {
    while (isWhite) {
      
#line 636
      current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 10);
      entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_white), current);
      
#line 640
      isT = entry_ & (jint) 0x0001;
      bits = (JreURShift32(entry_, 1)) & (jint) 0x0f;
      
#line 643
      if (bits == 12) {
        
#line 645
        twoBits = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 2);
        
#line 647
        current = ((JreLShift32(current, 2)) & (jint) 0x000c) | twoBits;
        entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup), current);
        bits = (JreURShift32(entry_, 1)) & (jint) 0x07;
        code = (JreURShift32(entry_, 4)) & (jint) 0x0fff;
        bitOffset += code;
        
#line 653
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
      }
      else
#line 654
      if (bits == 0) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid code encountered.");
      }
      else
#line 656
      if (bits == 15) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"EOL code word encountered in White run.");
      }
      else {
        code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
        bitOffset += code;
        
#line 663
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 10 - bits);
        if (isT == 0) {
          isWhite = false;
          *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), self->changingElemSize_++) = bitOffset;
        }
      }
    }
    
#line 673
    if (bitOffset == self->w_) {
      if (self->compression_ == 2) {
        ComAowagieTextPdfCodecTIFFFaxDecoder_advancePointer(self);
      }
      break;
    }
    
#line 680
    while (!isWhite) {
      
#line 682
      current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 4);
      entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_initBlack), current);
      
#line 686
      isT = entry_ & (jint) 0x0001;
      bits = (JreURShift32(entry_, 1)) & (jint) 0x000f;
      code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
      
#line 690
      if (code == 100) {
        current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 9);
        entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_black), current);
        
#line 695
        isT = entry_ & (jint) 0x0001;
        bits = (JreURShift32(entry_, 1)) & (jint) 0x000f;
        code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
        
#line 699
        if (bits == 12) {
          
#line 701
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 5);
          current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 4);
          entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup), current);
          bits = (JreURShift32(entry_, 1)) & (jint) 0x07;
          code = (JreURShift32(entry_, 4)) & (jint) 0x0fff;
          
#line 707
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, code);
          bitOffset += code;
          
#line 710
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
        }
        else
#line 711
        if (bits == 15) {
          
#line 713
          @throw new_JavaLangRuntimeException_initWithNSString_(@"EOL code word encountered in Black run.");
        }
        else {
          
#line 715
          ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, code);
          bitOffset += code;
          
#line 718
          ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 9 - bits);
          if (isT == 0) {
            isWhite = true;
            *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), self->changingElemSize_++) = bitOffset;
          }
        }
      }
      else
#line 724
      if (code == 200) {
        
#line 726
        current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 2);
        entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_twoBitBlack), current);
        code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
        bits = (JreURShift32(entry_, 1)) & (jint) 0x0f;
        
#line 731
        ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, code);
        bitOffset += code;
        
#line 734
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 2 - bits);
        isWhite = true;
        *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), self->changingElemSize_++) = bitOffset;
      }
      else {
        ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(self, buffer, lineOffset, bitOffset, code);
        bitOffset += code;
        
#line 742
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
        isWhite = true;
        *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), self->changingElemSize_++) = bitOffset;
      }
    }
    
#line 749
    if (bitOffset == self->w_) {
      if (self->compression_ == 2) {
        ComAowagieTextPdfCodecTIFFFaxDecoder_advancePointer(self);
      }
      break;
    }
  }
  
#line 757
  *IOSIntArray_GetRef(nil_chk(self->currChangingElems_), self->changingElemSize_++) = bitOffset;
}


#line 1132
void ComAowagieTextPdfCodecTIFFFaxDecoder_setToBlackWithByteArray_withInt_withInt_withInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, IOSByteArray *buffer, jint lineOffset, jint bitOffset, jint numBits) {
  
#line 1135
  jint bitNum = 8 * lineOffset + bitOffset;
  jint lastBit = bitNum + numBits;
  
#line 1138
  jint byteNum = JreRShift32(bitNum, 3);
  
#line 1141
  jint shift = bitNum & (jint) 0x7;
  if (shift > 0) {
    jint maskVal = JreLShift32(1, 7 - shift);
    jbyte val = IOSByteArray_Get(nil_chk(buffer), byteNum);
    while (maskVal > 0 && bitNum < lastBit) {
      val |= maskVal;
      JreRShiftAssignInt(&maskVal, 1);
      ++bitNum;
    }
    *IOSByteArray_GetRef(buffer, byteNum) = val;
  }
  
#line 1154
  byteNum = JreRShift32(bitNum, 3);
  while (bitNum < lastBit - 7) {
    *IOSByteArray_GetRef(nil_chk(buffer), byteNum++) = (jbyte) 255;
    bitNum += 8;
  }
  
#line 1161
  while (bitNum < lastBit) {
    byteNum = JreRShift32(bitNum, 3);
    *IOSByteArray_GetRef(nil_chk(buffer), byteNum) |= JreLShift32(1, 7 - (bitNum & (jint) 0x7));
    ++bitNum;
  }
}

jint ComAowagieTextPdfCodecTIFFFaxDecoder_decodeWhiteCodeWord(ComAowagieTextPdfCodecTIFFFaxDecoder *self) {
  jint current;
  
#line 1170
  jint entry_;
  
#line 1170
  jint bits;
  
#line 1170
  jint isT;
  
#line 1170
  jint twoBits;
  
#line 1170
  jint code = -1;
  jint runLength = 0;
  jboolean isWhite = true;
  
#line 1174
  while (isWhite) {
    current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 10);
    entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_white), current);
    
#line 1179
    isT = entry_ & (jint) 0x0001;
    bits = (JreURShift32(entry_, 1)) & (jint) 0x0f;
    
#line 1182
    if (bits == 12) {
      
#line 1184
      twoBits = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 2);
      
#line 1186
      current = ((JreLShift32(current, 2)) & (jint) 0x000c) | twoBits;
      entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup), current);
      bits = (JreURShift32(entry_, 1)) & (jint) 0x07;
      code = (JreURShift32(entry_, 4)) & (jint) 0x0fff;
      runLength += code;
      ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
    }
    else
#line 1192
    if (bits == 0) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid code encountered.");
    }
    else
#line 1194
    if (bits == 15) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"EOL code word encountered in White run.");
    }
    else {
      code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
      runLength += code;
      ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 10 - bits);
      if (isT == 0) {
        isWhite = false;
      }
    }
  }
  
#line 1207
  return runLength;
}


#line 1211
jint ComAowagieTextPdfCodecTIFFFaxDecoder_decodeBlackCodeWord(ComAowagieTextPdfCodecTIFFFaxDecoder *self) {
  jint current;
  
#line 1212
  jint entry_;
  
#line 1212
  jint bits;
  
#line 1212
  jint isT;
  
#line 1212
  jint code = -1;
  jint runLength = 0;
  jboolean isWhite = false;
  
#line 1216
  while (!isWhite) {
    current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 4);
    entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_initBlack), current);
    
#line 1221
    isT = entry_ & (jint) 0x0001;
    bits = (JreURShift32(entry_, 1)) & (jint) 0x000f;
    code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
    
#line 1225
    if (code == 100) {
      current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 9);
      entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_black), current);
      
#line 1230
      isT = entry_ & (jint) 0x0001;
      bits = (JreURShift32(entry_, 1)) & (jint) 0x000f;
      code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
      
#line 1234
      if (bits == 12) {
        
#line 1236
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 5);
        current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 4);
        entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_additionalMakeup), current);
        bits = (JreURShift32(entry_, 1)) & (jint) 0x07;
        code = (JreURShift32(entry_, 4)) & (jint) 0x0fff;
        runLength += code;
        
#line 1243
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
      }
      else
#line 1244
      if (bits == 15) {
        
#line 1246
        @throw new_JavaLangRuntimeException_initWithNSString_(@"EOL code word encountered in Black run.");
      }
      else {
        
#line 1248
        runLength += code;
        ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 9 - bits);
        if (isT == 0) {
          isWhite = true;
        }
      }
    }
    else
#line 1254
    if (code == 200) {
      
#line 1256
      current = ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 2);
      entry_ = IOSShortArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_twoBitBlack), current);
      code = (JreURShift32(entry_, 5)) & (jint) 0x07ff;
      runLength += code;
      bits = (JreURShift32(entry_, 1)) & (jint) 0x0f;
      ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 2 - bits);
      isWhite = true;
    }
    else {
      runLength += code;
      ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(self, 4 - bits);
      isWhite = true;
    }
  }
  
#line 1271
  return runLength;
}


#line 1274
jint ComAowagieTextPdfCodecTIFFFaxDecoder_readEOLWithBoolean_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jboolean isFirstEOL) {
  if (self->fillBits_ == 0) {
    jint next12Bits = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 12);
    if (isFirstEOL && next12Bits == 0) {
      
#line 1284
      if (ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 4) == 1) {
        
#line 1288
        self->fillBits_ = 1;
        return 1;
      }
    }
    if (next12Bits != 1) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Scanline must begin with EOL code word.");
    }
  }
  else
#line 1295
  if (self->fillBits_ == 1) {
    
#line 1301
    jint bitsLeft = 8 - self->bitPointer_;
    
#line 1303
    if (ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, bitsLeft) != 0) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"All fill bits preceding EOL code must be 0.");
    }
    
#line 1311
    if (bitsLeft < 4) {
      if (ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 8) != 0) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"All fill bits preceding EOL code must be 0.");
      }
    }
    
#line 1320
    jint n;
    while ((n = ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(self, 8)) != 1) {
      
#line 1324
      if (n != 0) {
        @throw new_JavaLangRuntimeException_initWithNSString_(@"All fill bits preceding EOL code must be 0.");
      }
    }
  }
  
#line 1331
  if (self->oneD_ == 0) {
    return 1;
  }
  else {
    
#line 1336
    return ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(self, 1);
  }
}


#line 1340
void ComAowagieTextPdfCodecTIFFFaxDecoder_getNextChangingElementWithInt_withBoolean_withIntArray_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint a0, jboolean isWhite, IOSIntArray *ret) {
  
#line 1342
  IOSIntArray *pce = self->prevChangingElems_;
  jint ces = self->changingElemSize_;
  
#line 1348
  jint start = self->lastChangingElement_ > 0 ? self->lastChangingElement_ - 1 : 0;
  if (isWhite) {
    start &= ~(jint) 0x1;
  }
  else {
    
#line 1352
    start |= (jint) 0x1;
  }
  
#line 1355
  jint i = start;
  for (; i < ces; i += 2) {
    jint temp = IOSIntArray_Get(nil_chk(pce), i);
    if (temp > a0) {
      self->lastChangingElement_ = i;
      *IOSIntArray_GetRef(nil_chk(ret), 0) = temp;
      break;
    }
  }
  
#line 1365
  if (i + 1 < ces) {
    *IOSIntArray_GetRef(nil_chk(ret), 1) = IOSIntArray_Get(nil_chk(pce), i + 1);
  }
}


#line 1370
jint ComAowagieTextPdfCodecTIFFFaxDecoder_nextNBitsWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToGet) {
  jbyte b;
  
#line 1371
  jbyte next;
  
#line 1371
  jbyte next2next;
  jint l = ((IOSByteArray *) nil_chk(self->data_))->size_ - 1;
  jint bp = self->bytePointer_;
  
#line 1375
  if (self->fillOrder_ == 1) {
    b = IOSByteArray_Get(self->data_, bp);
    
#line 1378
    if (bp == l) {
      next = (jint) 0x00;
      next2next = (jint) 0x00;
    }
    else
#line 1381
    if (bp + 1 == l) {
      next = IOSByteArray_Get(self->data_, bp + 1);
      next2next = (jint) 0x00;
    }
    else {
      
#line 1385
      next = IOSByteArray_Get(self->data_, bp + 1);
      next2next = IOSByteArray_Get(self->data_, bp + 2);
    }
  }
  else
#line 1388
  if (self->fillOrder_ == 2) {
    b = IOSByteArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable), IOSByteArray_Get(self->data_, bp) & (jint) 0xff);
    
#line 1391
    if (bp == l) {
      next = (jint) 0x00;
      next2next = (jint) 0x00;
    }
    else
#line 1394
    if (bp + 1 == l) {
      next = IOSByteArray_Get(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable, IOSByteArray_Get(self->data_, bp + 1) & (jint) 0xff);
      next2next = (jint) 0x00;
    }
    else {
      
#line 1398
      next = IOSByteArray_Get(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable, IOSByteArray_Get(self->data_, bp + 1) & (jint) 0xff);
      next2next = IOSByteArray_Get(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable, IOSByteArray_Get(self->data_, bp + 2) & (jint) 0xff);
    }
  }
  else {
    
#line 1402
    @throw new_JavaLangRuntimeException_initWithNSString_(@"TIFF_FILL_ORDER tag must be either 1 or 2.");
  }
  
#line 1405
  jint bitsLeft = 8 - self->bitPointer_;
  jint bitsFromNextByte = bitsToGet - bitsLeft;
  jint bitsFromNext2NextByte = 0;
  if (bitsFromNextByte > 8) {
    bitsFromNext2NextByte = bitsFromNextByte - 8;
    bitsFromNextByte = 8;
  }
  
#line 1413
  self->bytePointer_++;
  
#line 1415
  jint i1 = JreLShift32((b & IOSIntArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_table1), bitsLeft)), bitsToGet - bitsLeft);
  jint i2 = JreURShift32((next & IOSIntArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_table2), bitsFromNextByte)), 8 - bitsFromNextByte);
  
#line 1418
  jint i3 = 0;
  if (bitsFromNext2NextByte != 0) {
    JreLShiftAssignInt(&i2, bitsFromNext2NextByte);
    i3 = JreURShift32((next2next & IOSIntArray_Get(ComAowagieTextPdfCodecTIFFFaxDecoder_table2, bitsFromNext2NextByte)),
#line 1422
    8 - bitsFromNext2NextByte);
    i2 |= i3;
    self->bytePointer_++;
    self->bitPointer_ = bitsFromNext2NextByte;
  }
  else {
    
#line 1427
    if (bitsFromNextByte == 8) {
      self->bitPointer_ = 0;
      self->bytePointer_++;
    }
    else {
      
#line 1431
      self->bitPointer_ = bitsFromNextByte;
    }
  }
  
#line 1435
  jint i = i1 | i2;
  return i;
}


#line 1439
jint ComAowagieTextPdfCodecTIFFFaxDecoder_nextLesserThan8BitsWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToGet) {
  jbyte b;
  
#line 1440
  jbyte next;
  jint l = ((IOSByteArray *) nil_chk(self->data_))->size_ - 1;
  jint bp = self->bytePointer_;
  
#line 1444
  if (self->fillOrder_ == 1) {
    b = IOSByteArray_Get(self->data_, bp);
    if (bp == l) {
      next = (jint) 0x00;
    }
    else {
      
#line 1449
      next = IOSByteArray_Get(self->data_, bp + 1);
    }
  }
  else
#line 1451
  if (self->fillOrder_ == 2) {
    b = IOSByteArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable), IOSByteArray_Get(self->data_, bp) & (jint) 0xff);
    if (bp == l) {
      next = (jint) 0x00;
    }
    else {
      
#line 1456
      next = IOSByteArray_Get(ComAowagieTextPdfCodecTIFFFaxDecoder_flipTable, IOSByteArray_Get(self->data_, bp + 1) & (jint) 0xff);
    }
  }
  else {
    
#line 1459
    @throw new_JavaLangRuntimeException_initWithNSString_(@"TIFF_FILL_ORDER tag must be either 1 or 2.");
  }
  
#line 1462
  jint bitsLeft = 8 - self->bitPointer_;
  jint bitsFromNextByte = bitsToGet - bitsLeft;
  
#line 1465
  jint shift = bitsLeft - bitsToGet;
  jint i1;
  
#line 1466
  jint i2;
  if (shift >= 0) {
    i1 = JreURShift32((b & IOSIntArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_table1), bitsLeft)), shift);
    self->bitPointer_ += bitsToGet;
    if (self->bitPointer_ == 8) {
      self->bitPointer_ = 0;
      self->bytePointer_++;
    }
  }
  else {
    
#line 1475
    i1 = JreLShift32((b & IOSIntArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_table1), bitsLeft)), -shift);
    i2 = JreURShift32((next & IOSIntArray_Get(nil_chk(ComAowagieTextPdfCodecTIFFFaxDecoder_table2), bitsFromNextByte)), 8 - bitsFromNextByte);
    
#line 1478
    i1 |= i2;
    self->bytePointer_++;
    self->bitPointer_ = bitsFromNextByte;
  }
  
#line 1483
  return i1;
}


#line 1487
void ComAowagieTextPdfCodecTIFFFaxDecoder_updatePointerWithInt_(ComAowagieTextPdfCodecTIFFFaxDecoder *self, jint bitsToMoveBack) {
  jint i = self->bitPointer_ - bitsToMoveBack;
  
#line 1490
  if (i < 0) {
    self->bytePointer_--;
    self->bitPointer_ = 8 + i;
  }
  else {
    
#line 1494
    self->bitPointer_ = i;
  }
}


#line 1499
jboolean ComAowagieTextPdfCodecTIFFFaxDecoder_advancePointer(ComAowagieTextPdfCodecTIFFFaxDecoder *self) {
  if (self->bitPointer_ != 0) {
    self->bytePointer_++;
    self->bitPointer_ = 0;
  }
  
#line 1505
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecTIFFFaxDecoder)
