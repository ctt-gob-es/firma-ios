//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/WNafUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WNafUtil")
#ifdef RESTRICT_WNafUtil
#define INCLUDE_ALL_WNafUtil 0
#else
#define INCLUDE_ALL_WNafUtil 1
#endif
#undef RESTRICT_WNafUtil

#if !defined (OrgSpongycastleMathEcWNafUtil_) && (INCLUDE_ALL_WNafUtil || defined(INCLUDE_OrgSpongycastleMathEcWNafUtil))
#define OrgSpongycastleMathEcWNafUtil_

@class IOSByteArray;
@class IOSIntArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECPoint;
@class OrgSpongycastleMathEcWNafPreCompInfo;
@protocol OrgSpongycastleMathEcECPointMap;
@protocol OrgSpongycastleMathEcPreCompInfo;

@interface OrgSpongycastleMathEcWNafUtil : NSObject

#pragma mark Public

- (instancetype)init;

+ (IOSIntArray *)generateCompactNafWithJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (IOSIntArray *)generateCompactWindowNafWithInt:(jint)width
                          withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (IOSByteArray *)generateJSFWithJavaMathBigInteger:(JavaMathBigInteger *)g
                             withJavaMathBigInteger:(JavaMathBigInteger *)h;

+ (IOSByteArray *)generateNafWithJavaMathBigInteger:(JavaMathBigInteger *)k;

/*!
 @brief Computes the Window NAF (non-adjacent Form) of an integer.
 @param width The width  <code> w </code>  of the Window NAF. The width is
   defined as the minimal number  <code> w </code> , such that for any
    <code> w </code>  consecutive digits in the resulting representation, at  most one is non-zero.
 @param k The integer of which the Window NAF is computed.
 @return The Window NAF of the given width, such that the following holds: 
 <code>k = &sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
  </code>, where the <code>k<sub>i</sub></code> denote the elements of the
  returned <code>byte[]</code>.
 */
+ (IOSByteArray *)generateWindowNafWithInt:(jint)width
                    withJavaMathBigInteger:(JavaMathBigInteger *)k;

+ (jint)getNafWeightWithJavaMathBigInteger:(JavaMathBigInteger *)k;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits;

/*!
 @brief Determine window width to use for a scalar multiplication of the given size.
 @param bits the bit-length of the scalar to multiply by
 @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
 @return the window size to use
 */
+ (jint)getWindowSizeWithInt:(jint)bits
                withIntArray:(IOSIntArray *)windowSizeCutoffs;

+ (OrgSpongycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p;

+ (OrgSpongycastleMathEcWNafPreCompInfo *)getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo:(id<OrgSpongycastleMathEcPreCompInfo>)preCompInfo;

+ (OrgSpongycastleMathEcECPoint *)mapPointWithPrecompWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                                              withInt:(jint)width
                                                                          withBoolean:(jboolean)includeNegated
                                                  withOrgSpongycastleMathEcECPointMap:(id<OrgSpongycastleMathEcECPointMap>)pointMap;

+ (OrgSpongycastleMathEcWNafPreCompInfo *)precomputeWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)p
                                                                             withInt:(jint)width
                                                                         withBoolean:(jboolean)includeNegated;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleMathEcWNafUtil)

inline NSString *OrgSpongycastleMathEcWNafUtil_get_PRECOMP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleMathEcWNafUtil_PRECOMP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWNafUtil, PRECOMP_NAME, NSString *)

FOUNDATION_EXPORT void OrgSpongycastleMathEcWNafUtil_init(OrgSpongycastleMathEcWNafUtil *self);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleMathEcWNafUtil_generateCompactNafWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleMathEcWNafUtil_generateCompactWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateJSFWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *g, JavaMathBigInteger *h);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateNafWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleMathEcWNafUtil_generateWindowNafWithInt_withJavaMathBigInteger_(jint width, JavaMathBigInteger *k);

FOUNDATION_EXPORT jint OrgSpongycastleMathEcWNafUtil_getNafWeightWithJavaMathBigInteger_(JavaMathBigInteger *k);

FOUNDATION_EXPORT OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcECPoint_(OrgSpongycastleMathEcECPoint *p);

FOUNDATION_EXPORT OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_getWNafPreCompInfoWithOrgSpongycastleMathEcPreCompInfo_(id<OrgSpongycastleMathEcPreCompInfo> preCompInfo);

FOUNDATION_EXPORT jint OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_(jint bits);

FOUNDATION_EXPORT jint OrgSpongycastleMathEcWNafUtil_getWindowSizeWithInt_withIntArray_(jint bits, IOSIntArray *windowSizeCutoffs);

FOUNDATION_EXPORT OrgSpongycastleMathEcECPoint *OrgSpongycastleMathEcWNafUtil_mapPointWithPrecompWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_withOrgSpongycastleMathEcECPointMap_(OrgSpongycastleMathEcECPoint *p, jint width, jboolean includeNegated, id<OrgSpongycastleMathEcECPointMap> pointMap);

FOUNDATION_EXPORT OrgSpongycastleMathEcWNafPreCompInfo *OrgSpongycastleMathEcWNafUtil_precomputeWithOrgSpongycastleMathEcECPoint_withInt_withBoolean_(OrgSpongycastleMathEcECPoint *p, jint width, jboolean includeNegated);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcWNafUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_WNafUtil")
