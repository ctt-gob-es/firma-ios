//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java
//

#include "BaseFont.h"
#include "Chunk.h"
#include "Color.h"
#include "ColumnText.h"
#include "Document.h"
#include "DocumentException.h"
#include "DrawInterface.h"
#include "Element.h"
#include "ExceptionConverter.h"
#include "HeaderFooter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "PageResources.h"
#include "Paragraph.h"
#include "PdfAcroForm.h"
#include "PdfAction.h"
#include "PdfAnnotation.h"
#include "PdfAnnotationsImp.h"
#include "PdfArray.h"
#include "PdfCell.h"
#include "PdfChunk.h"
#include "PdfCollection.h"
#include "PdfContentByte.h"
#include "PdfContents.h"
#include "PdfDate.h"
#include "PdfDestination.h"
#include "PdfDictionary.h"
#include "PdfDocument.h"
#include "PdfEncodings.h"
#include "PdfEncryption.h"
#include "PdfFileSpecification.h"
#include "PdfFont.h"
#include "PdfFormField.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfLine.h"
#include "PdfName.h"
#include "PdfNameTree.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfOutline.h"
#include "PdfPage.h"
#include "PdfPageEvent.h"
#include "PdfPageLabels.h"
#include "PdfRectangle.h"
#include "PdfStream.h"
#include "PdfString.h"
#include "PdfTable.h"
#include "PdfTextArray.h"
#include "PdfTransition.h"
#include "PdfVersionImp.h"
#include "PdfViewerPreferencesImp.h"
#include "PdfWriter.h"
#include "PdfXConformanceException.h"
#include "Phrase.h"
#include "Rectangle.h"
#include "Table.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@class ComAowagieTextPdfPdfDocument_Indentation;
@class ComAowagieTextPdfPdfDocument_RenderingContext;

#if !__has_feature(objc_arc)
#error "PdfDocument must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfDocument () {
 @public
  /*!
   @brief The <CODE>PdfWriter</CODE>.
   */
  ComAowagieTextPdfPdfWriter *writer_;
  /*!
   @brief This is the PdfContentByte object, containing the text.
   */
  ComAowagieTextPdfPdfContentByte *text_;
  /*!
   @brief This is the PdfContentByte object, containing the borders and other Graphics.
   */
  ComAowagieTextPdfPdfContentByte *graphics_;
  /*!
   @brief This represents the leading of the lines.
   */
  jfloat leading_;
  /*!
   @brief This represents the current alignment of the PDF Elements.
   */
  jint alignment_;
  /*!
   @brief This is the current height of the document.
   */
  jfloat currentHeight_;
  jint textEmptySize_;
  /*!
   @brief XMP Metadata for the page.
   */
  IOSByteArray *xmpMetadata_;
  /*!
   @brief margin in x direction starting from the left.Will be valid in the next page
   */
  jfloat nextMarginLeft_;
  /*!
   @brief margin in x direction starting from the right.Will be valid in the next page
   */
  jfloat nextMarginRight_;
  /*!
   @brief margin in y direction starting from the top.Will be valid in the next page
   */
  jfloat nextMarginTop_;
  /*!
   @brief margin in y direction starting from the bottom.Will be valid in the next page
   */
  jfloat nextMarginBottom_;
  /*!
   @brief Signals that OnOpenDocument should be called.
   */
  jboolean firstPageEvent_;
  /*!
   @brief The line that is currently being written.
   */
  ComAowagieTextPdfPdfLine *line_;
  /*!
   @brief The lines that are written until now.
   */
  JavaUtilArrayList *lines_;
  /*!
   @brief Holds the type of the last element, that has been added to the document.
   */
  jint lastElementType_;
  ComAowagieTextPdfPdfDocument_Indentation *indentation_;
  /*!
   @brief some meta information about the Document.
   */
  ComAowagieTextPdfPdfDocument_PdfInfo *info_;
  /*!
   @brief This is the root outline of the document.
   */
  ComAowagieTextPdfPdfOutline *rootOutline_;
  /*!
   @brief This is the current <CODE>PdfOutline</CODE> in the hierarchy of outlines.
   */
  ComAowagieTextPdfPdfOutline *currentOutline_;
  /*!
   @brief Contains the Viewer preferences of this PDF document.
   */
  ComAowagieTextPdfInternalPdfViewerPreferencesImp *viewerPreferences_;
  /*!
   @brief Stores the destinations keyed by name.Value is 
 <CODE>Object[]{PdfAction,PdfIndirectReference,PdfDestintion}</CODE>.
   */
  JavaUtilTreeMap *localDestinations_;
  /*!
   @brief Stores a list of document level JavaScript actions.
   */
  jint jsCounter_;
  JavaUtilHashMap *documentLevelJS_;
  JavaUtilHashMap *documentFileAttachment_;
  NSString *openActionName_;
  ComAowagieTextPdfPdfAction *openActionAction_;
  ComAowagieTextPdfPdfDictionary *additionalActions_;
  ComAowagieTextPdfCollectionPdfCollection *collection_;
  ComAowagieTextPdfInternalPdfAnnotationsImp *annotationsImp_;
  jint markPoint_;
  /*!
   @brief This is the size of the next page.
   */
  ComAowagieTextRectangle *nextPageSize_;
  /*!
   @brief This is the size of the several boxes of the current Page.
   */
  JavaUtilHashMap *thisBoxSize_;
  /*!
   @brief This is the size of the several boxes that will be used in
  the next page.
   */
  JavaUtilHashMap *boxSize_;
  /*!
   @brief This checks if the page is empty.
   */
  jboolean pageEmpty_;
  /*!
   @brief The duration of the page
   */
  jint duration_;
  /*!
   @brief The page transition
   */
  ComAowagieTextPdfPdfTransition *transition_;
  ComAowagieTextPdfPdfDictionary *pageAA_;
  ComAowagieTextPdfPdfIndirectReference *thumb_;
  /*!
   @brief This are the page resources of the current Page.
   */
  ComAowagieTextPdfPageResources *pageResources_;
  /*!
   @brief Holds value of property strictImageSequence.
   */
  jboolean strictImageSequence_;
  /*!
   @brief This is the position where the image ends.
   */
  jfloat imageEnd_;
  /*!
   @brief This is the image that could not be shown on a previous page.
   */
  ComAowagieTextImage *imageWait_;
}

/*!
 @brief Initializes a page.
 <P>
  If the footer/header is set, it is printed.
 @throw DocumentExceptionon error
 */
- (void)initPage OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Adds the current line to the list of lines and also adds an empty line.
 @throw DocumentExceptionon error
 */
- (void)newLine OBJC_METHOD_FAMILY_NONE;

/*!
 @brief If the current line is not empty or null, it is added to the arraylist
  of lines and a new empty line is added.
 */
- (void)carriageReturn;

/*!
 @brief Ensures that a new line has been started.
 */
- (void)ensureNewLine;

/*!
 @brief Writes all the lines to the text-object.
 @return the displacement that was caused
 @throw DocumentExceptionon error
 */
- (jfloat)flushLines;

/*!
 @brief Gets the indentation on the left side.
 @return a margin
 */
- (jfloat)indentLeft;

/*!
 @brief Gets the indentation on the right side.
 @return a margin
 */
- (jfloat)indentRight;

/*!
 @brief Gets the indentation on the top side.
 @return a margin
 */
- (jfloat)indentTop;

/*!
 @brief Updates the count in the outlines.
 */
- (void)calculateOutlineCount;

/*!
 @brief Recursive method to update the count in the outlines.
 @param outline Outline
 */
- (void)traverseOutlineCountWithComAowagieTextPdfPdfOutline:(ComAowagieTextPdfPdfOutline *)outline;

/*!
 @brief Writes the outline tree to the body of the PDF document.
 @throw IOExceptionon error
 */
- (void)writeOutlines;

/*!
 @brief Recursive method used to write outlines.
 @param outline Outline
 @throw IOExceptionon error
 */
- (void)outlineTreeWithComAowagieTextPdfPdfOutline:(ComAowagieTextPdfPdfOutline *)outline;

/*!
 @brief Implements a link to other part of the document.The jump will
  be made to a local destination with the same name, that must exist.
 @param name the name for this link
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 */
- (void)localGotoWithNSString:(NSString *)name
                    withFloat:(jfloat)llx
                    withFloat:(jfloat)lly
                    withFloat:(jfloat)urx
                    withFloat:(jfloat)ury;

/*!
 @brief Implements a link to another document.
 @param filename the filename for the remote document
 @param name the name to jump to
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 */
- (void)remoteGotoWithNSString:(NSString *)filename
                  withNSString:(NSString *)name
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury;

/*!
 @brief Implements a link to another document.
 @param filename the filename for the remote document
 @param page the page to jump to
 @param llx the lower left x corner of the activation area
 @param lly the lower left y corner of the activation area
 @param urx the upper right x corner of the activation area
 @param ury the upper right y corner of the activation area
 */
- (void)remoteGotoWithNSString:(NSString *)filename
                       withInt:(jint)page
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury;

- (ComAowagieTextPdfPdfAction *)getLocalGotoActionWithNSString:(NSString *)name;

/*!
 @brief The local destination to where a local goto with the same
  name will jump to.
 @param name the name of this local destination
 @param destination the  <CODE> PdfDestination </CODE>  with the jump coordinates
 @return <CODE>true</CODE> if the local destination was added, 
 <CODE>false</CODE> if a local destination with the same name
  already existed
 */
- (jboolean)localDestinationWithNSString:(NSString *)name
     withComAowagieTextPdfPdfDestination:(ComAowagieTextPdfPdfDestination *)destination;

- (void)setBoxSizeWithNSString:(NSString *)boxName
   withComAowagieTextRectangle:(ComAowagieTextRectangle *)size;

- (void)setNewPageSizeAndMargins;

/*!
 @brief Adds an image to the document.
 @param image the  <CODE> Image </CODE>  to add
 @throw PdfExceptionon error
 @throw DocumentExceptionon error
 */
- (void)addWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Adds a new table to the document.
 @param t Table to add.  Rendered rows will be deleted after processing.
 @throw DocumentExceptionon error
 @since iText 2.0.8
 */
- (void)addPdfTableWithComAowagieTextTable:(ComAowagieTextTable *)t;

- (void)analyzeRowWithJavaUtilArrayList:(JavaUtilArrayList *)rows
withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx;

- (jboolean)mayBeRemovedWithJavaUtilArrayList:(JavaUtilArrayList *)row;

- (void)consumeRowspanWithJavaUtilArrayList:(JavaUtilArrayList *)row
withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx;

- (JavaUtilArrayList *)extractRowsWithJavaUtilArrayList:(JavaUtilArrayList *)cells
      withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx;

- (void)renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx
                                                    withJavaUtilList:(id<JavaUtilList>)cells
                                                         withBoolean:(jboolean)hasToFit;

- (void)doFooter;

- (void)doHeader;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, writer_, ComAowagieTextPdfPdfWriter *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, text_, ComAowagieTextPdfPdfContentByte *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, graphics_, ComAowagieTextPdfPdfContentByte *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, xmpMetadata_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, line_, ComAowagieTextPdfPdfLine *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, lines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, indentation_, ComAowagieTextPdfPdfDocument_Indentation *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, info_, ComAowagieTextPdfPdfDocument_PdfInfo *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, rootOutline_, ComAowagieTextPdfPdfOutline *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, currentOutline_, ComAowagieTextPdfPdfOutline *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, viewerPreferences_, ComAowagieTextPdfInternalPdfViewerPreferencesImp *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, localDestinations_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, documentLevelJS_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, documentFileAttachment_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, openActionName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, openActionAction_, ComAowagieTextPdfPdfAction *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, additionalActions_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, collection_, ComAowagieTextPdfCollectionPdfCollection *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, annotationsImp_, ComAowagieTextPdfInternalPdfAnnotationsImp *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, nextPageSize_, ComAowagieTextRectangle *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, thisBoxSize_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, boxSize_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, transition_, ComAowagieTextPdfPdfTransition *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, pageAA_, ComAowagieTextPdfPdfDictionary *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, thumb_, ComAowagieTextPdfPdfIndirectReference *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, pageResources_, ComAowagieTextPdfPageResources *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument, imageWait_, ComAowagieTextImage *)

/*!
 @brief The characters to be applied the hanging punctuation.
 */
inline NSString *ComAowagieTextPdfPdfDocument_get_hangingPunctuation(void);
static NSString *ComAowagieTextPdfPdfDocument_hangingPunctuation = @".,;:'";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDocument, hangingPunctuation, NSString *)

inline JavaTextDecimalFormat *ComAowagieTextPdfPdfDocument_get_SIXTEEN_DIGITS(void);
static JavaTextDecimalFormat *ComAowagieTextPdfPdfDocument_SIXTEEN_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDocument, SIXTEEN_DIGITS, JavaTextDecimalFormat *)

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_initPage(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_newLine(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_carriageReturn(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_ensureNewLine(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfDocument_flushLines(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfDocument_indentLeft(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfDocument_indentRight(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfDocument_indentTop(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_calculateOutlineCount(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_traverseOutlineCountWithComAowagieTextPdfPdfOutline_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfOutline *outline);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_writeOutlines(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_outlineTreeWithComAowagieTextPdfPdfOutline_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfOutline *outline);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_localGotoWithNSString_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *name, jfloat llx, jfloat lly, jfloat urx, jfloat ury);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withNSString_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *filename, NSString *name, jfloat llx, jfloat lly, jfloat urx, jfloat ury);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withInt_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *filename, jint page, jfloat llx, jfloat lly, jfloat urx, jfloat ury);

__attribute__((unused)) static ComAowagieTextPdfPdfAction *ComAowagieTextPdfPdfDocument_getLocalGotoActionWithNSString_(ComAowagieTextPdfPdfDocument *self, NSString *name);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfDocument_localDestinationWithNSString_withComAowagieTextPdfPdfDestination_(ComAowagieTextPdfPdfDocument *self, NSString *name, ComAowagieTextPdfPdfDestination *destination);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_setBoxSizeWithNSString_withComAowagieTextRectangle_(ComAowagieTextPdfPdfDocument *self, NSString *boxName, ComAowagieTextRectangle *size);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_setNewPageSizeAndMargins(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_addWithComAowagieTextImage_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextImage *image);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_addPdfTableWithComAowagieTextTable_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextTable *t);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_analyzeRowWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *rows, ComAowagieTextPdfPdfDocument_RenderingContext *ctx);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfDocument_mayBeRemovedWithJavaUtilArrayList_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *row);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_consumeRowspanWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *row, ComAowagieTextPdfPdfDocument_RenderingContext *ctx);

__attribute__((unused)) static JavaUtilArrayList *ComAowagieTextPdfPdfDocument_extractRowsWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *cells, ComAowagieTextPdfPdfDocument_RenderingContext *ctx);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext_withJavaUtilList_withBoolean_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfDocument_RenderingContext *ctx, id<JavaUtilList> cells, jboolean hasToFit);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_doFooter(ComAowagieTextPdfPdfDocument *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_doHeader(ComAowagieTextPdfPdfDocument *self);

@interface ComAowagieTextPdfPdfDocument_PdfInfo ()

/*!
 @brief Construct a <CODE>PdfInfo</CODE>-object.
 @param globalDate Global date
 */
- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

/*!
 @brief Adds the title of the document.
 @param title the title of the document
 */
- (void)addTitleWithNSString:(NSString *)title;

/*!
 @brief Adds the name of the producer to the document.
 */
- (void)addProducer;

/*!
 @brief Adds the date of creation to the document.
 @param globalDate Date
 */
- (void)addCreationDateWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate;

@end

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(ComAowagieTextPdfPdfDocument_PdfInfo *self, JavaUtilCalendar *globalDate);

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_PdfInfo *new_ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(JavaUtilCalendar *globalDate) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_PdfInfo *create_ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(JavaUtilCalendar *globalDate);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfInfo_addTitleWithNSString_(ComAowagieTextPdfPdfDocument_PdfInfo *self, NSString *title);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfInfo_addProducer(ComAowagieTextPdfPdfDocument_PdfInfo *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfInfo_addCreationDateWithJavaUtilCalendar_(ComAowagieTextPdfPdfDocument_PdfInfo *self, JavaUtilCalendar *globalDate);

@interface ComAowagieTextPdfPdfDocument_PdfCatalog () {
 @public
  /*!
   @brief The writer writing the PDF for which we are creating this catalog object.
   */
  ComAowagieTextPdfPdfWriter *writer_;
}

/*!
 @brief Adds the names of the named destinations to the catalog.
 @param localDestinations the local destinations
 @param documentLevelJS the javascript used in the document
 @param documentFileAttachment the attached files
 @param writer the writer the catalog applies to
 */
- (void)addNamesWithJavaUtilTreeMap:(JavaUtilTreeMap *)localDestinations
                withJavaUtilHashMap:(JavaUtilHashMap *)documentLevelJS
                withJavaUtilHashMap:(JavaUtilHashMap *)documentFileAttachment
     withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

/*!
 @brief Adds an open action to the catalog.
 @param action the action that will be triggered upon opening the document
 */
- (void)setOpenActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action;

/*!
 @brief Sets the document level additional actions.
 @param actions dictionary of actions
 */
- (void)setAdditionalActionsWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)actions;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument_PdfCatalog, writer_, ComAowagieTextPdfPdfWriter *)

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfCatalog_addNamesWithJavaUtilTreeMap_withJavaUtilHashMap_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, JavaUtilTreeMap *localDestinations, JavaUtilHashMap *documentLevelJS, JavaUtilHashMap *documentFileAttachment, ComAowagieTextPdfPdfWriter *writer);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfCatalog_setOpenActionWithComAowagieTextPdfPdfAction_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, ComAowagieTextPdfPdfAction *action);

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_PdfCatalog_setAdditionalActionsWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, ComAowagieTextPdfPdfDictionary *actions);

/*!
 @since 2.0.8 (PdfDocument was package-private before)
 */
@interface ComAowagieTextPdfPdfDocument_Indentation : NSObject {
 @public
  /*!
   @brief This represents the current indentation of the PDF Elements on the left side.
   */
  jfloat indentLeft_;
  /*!
   @brief This represents the current indentation of the PDF Elements on the left side.
   */
  jfloat listIndentLeft_;
  /*!
   @brief This is the indentation caused by an image on the left.
   */
  jfloat imageIndentLeft_;
  /*!
   @brief This represents the current indentation of the PDF Elements on the right side.
   */
  jfloat indentRight_;
  /*!
   @brief This is the indentation caused by an image on the right.
   */
  jfloat imageIndentRight_;
  /*!
   @brief This represents the current indentation of the PDF Elements on the top side.
   */
  jfloat indentTop_;
  /*!
   @brief This represents the current indentation of the PDF Elements on the bottom side.
   */
  jfloat indentBottom_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfDocument_Indentation)

/*!
 @brief Indentation to the left caused by a section.
 */
inline jfloat ComAowagieTextPdfPdfDocument_Indentation_get_sectionIndentLeft(void);
#define ComAowagieTextPdfPdfDocument_Indentation_sectionIndentLeft 0.0f
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfDocument_Indentation, sectionIndentLeft, jfloat)

/*!
 @brief Indentation to the right caused by a section.
 */
inline jfloat ComAowagieTextPdfPdfDocument_Indentation_get_sectionIndentRight(void);
#define ComAowagieTextPdfPdfDocument_Indentation_sectionIndentRight 0.0f
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfDocument_Indentation, sectionIndentRight, jfloat)

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_Indentation_init(ComAowagieTextPdfPdfDocument_Indentation *self);

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_Indentation *new_ComAowagieTextPdfPdfDocument_Indentation_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_Indentation *create_ComAowagieTextPdfPdfDocument_Indentation_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfDocument_Indentation)

/*!
 @brief This is a helper class for adding a Table to a document.
 @since 2.0.8 (PdfDocument was package-private before)
 */
@interface ComAowagieTextPdfPdfDocument_RenderingContext : NSObject {
 @public
  jfloat pagetop_;
  jfloat oldHeight_;
  ComAowagieTextPdfPdfContentByte *cellGraphics_;
  jfloat lostTableBottom_;
  jfloat maxCellBottom_;
  id<JavaUtilMap> rowspanMap_;
  id<JavaUtilMap> pageMap_;
  /*!
   @brief A PdfPTable
   */
  ComAowagieTextPdfPdfTable *table_;
}

- (instancetype)init;

/*!
 @brief Consumes the rowspan
 @param c Cell
 @return a rowspan.
 */
- (jint)consumeRowspanWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)c;

/*!
 @brief Looks at the current rowspan.
 @param c Cell
 @return the current rowspan
 */
- (jint)currentRowspanWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)c;

- (jint)cellRenderedWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell
                                         withInt:(jint)pageNumber;

- (jint)numCellRenderedWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell;

- (jboolean)isCellRenderedOnPageWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell
                                                     withInt:(jint)pageNumber;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfDocument_RenderingContext)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument_RenderingContext, cellGraphics_, ComAowagieTextPdfPdfContentByte *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument_RenderingContext, rowspanMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument_RenderingContext, pageMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfDocument_RenderingContext, table_, ComAowagieTextPdfPdfTable *)

__attribute__((unused)) static void ComAowagieTextPdfPdfDocument_RenderingContext_init(ComAowagieTextPdfPdfDocument_RenderingContext *self);

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_RenderingContext *new_ComAowagieTextPdfPdfDocument_RenderingContext_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComAowagieTextPdfPdfDocument_RenderingContext *create_ComAowagieTextPdfPdfDocument_RenderingContext_init(void);

__attribute__((unused)) static jint ComAowagieTextPdfPdfDocument_RenderingContext_currentRowspanWithComAowagieTextPdfPdfCell_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *c);

__attribute__((unused)) static jint ComAowagieTextPdfPdfDocument_RenderingContext_cellRenderedWithComAowagieTextPdfPdfCell_withInt_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell, jint pageNumber);

__attribute__((unused)) static jint ComAowagieTextPdfPdfDocument_RenderingContext_numCellRenderedWithComAowagieTextPdfPdfCell_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfDocument_RenderingContext_isCellRenderedOnPageWithComAowagieTextPdfPdfCell_withInt_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell, jint pageNumber);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfDocument_RenderingContext)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfDocument)


#line 96
@implementation ComAowagieTextPdfPdfDocument


#line 272
- (instancetype)initPackagePrivateWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  ComAowagieTextPdfPdfDocument_initPackagePrivateWithJavaUtilCalendar_(self, globalDate);
  return self;
}


#line 290
- (void)addWriterWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  if (self->writer_ == nil) {
    self->writer_ = writer;
    self->annotationsImp_ = new_ComAowagieTextPdfInternalPdfAnnotationsImp_initWithComAowagieTextPdfPdfWriter_(writer);
    return;
  }
  @throw new_ComAowagieTextDocumentException_initWithNSString_(@"You can only add a writer to a PdfDocument once.");
}


#line 317
- (jfloat)getLeading {
  return self->leading_;
}


#line 326
- (void)setLeadingWithFloat:(jfloat)leading {
  self->leading_ = leading;
}


#line 345
- (void)open {
  
#line 347
  if (!self->open_) {
    [super open];
    [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) open];
    self->rootOutline_ = new_ComAowagieTextPdfPdfOutline_initPackagePrivateWithComAowagieTextPdfPdfWriter_(self->writer_);
    self->currentOutline_ = self->rootOutline_;
  }
  @try {
    ComAowagieTextPdfPdfDocument_initPage(self);
  }
  @catch (ComAowagieTextDocumentException *de) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(de);
  }
}


#line 368
- (void)close {
  
#line 370
  if (self->close_) {
    return;
  }
  @try {
    jboolean wasImage = self->imageWait_ != nil;
    [self newPage];
    if (self->imageWait_ != nil || wasImage) {
      [self newPage];
    }
    if ([((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) hasUnusedAnnotations]) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Not all annotations could be added to the document (the document doesn't have enough pages).");
    }
    id<ComAowagieTextPdfPdfPageEvent> pageEvent = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPageEvent];
    if (pageEvent != nil) {
      [pageEvent onCloseDocumentWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextDocument:self];
    }
    [super close];
    
#line 388
    [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addLocalDestinationsWithJavaUtilTreeMap:self->localDestinations_];
    ComAowagieTextPdfPdfDocument_calculateOutlineCount(self);
    ComAowagieTextPdfPdfDocument_writeOutlines(self);
  }
  @catch (JavaLangException *e) {
    @throw nil_chk(ComAowagieTextExceptionConverter_convertExceptionWithJavaLangException_(e));
  }
  
#line 396
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) close];
}


#line 409
- (void)setXmpMetadataWithByteArray:(IOSByteArray *)xmpMetadata {
  self->xmpMetadata_ = xmpMetadata;
}


#line 418
- (jboolean)newPage {
  
#line 420
  self->lastElementType_ = -1;
  if (self->writer_ == nil || ([((ComAowagieTextPdfPdfContentByte *) nil_chk([self->writer_ getDirectContent])) size] == 0 && [((ComAowagieTextPdfPdfContentByte *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getDirectContentUnder])) size] == 0 && (self->pageEmpty_ || [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) isPaused]))) {
    ComAowagieTextPdfPdfDocument_setNewPageSizeAndMargins(self);
    return false;
  }
  if (!self->open_ || self->close_) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"The document isn't open.");
  }
  id<ComAowagieTextPdfPdfPageEvent> pageEvent = [self->writer_ getPageEvent];
  if (pageEvent != nil) {
    [pageEvent onEndPageWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextDocument:self];
  }
  
#line 434
  [super newPage];
  
#line 437
  ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->imageIndentLeft_ = 0;
  self->indentation_->imageIndentRight_ = 0;
  
#line 440
  @try {
    
#line 442
    ComAowagieTextPdfPdfDocument_flushLines(self);
    
#line 447
    jint rotation = [((ComAowagieTextRectangle *) nil_chk(self->pageSize_)) getRotation];
    
#line 450
    if ([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) isPdfX]) {
      if ([((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) containsKeyWithId:@"art"] && [((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) containsKeyWithId:@"trim"]) {
        @throw new_ComAowagieTextPdfPdfXConformanceException_initWithNSString_(@"Only one of ArtBox or TrimBox can exist in the page.");
      }
      if (![((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) containsKeyWithId:@"art"] && ![((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) containsKeyWithId:@"trim"]) {
        if ([((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) containsKeyWithId:@"crop"]) {
          (void) [((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) putWithId:@"trim" withId:[self->thisBoxSize_ getWithId:@"crop"]];
        }
        else {
          
#line 458
          (void) [((JavaUtilHashMap *) nil_chk(self->thisBoxSize_)) putWithId:@"trim" withId:new_ComAowagieTextPdfPdfRectangle_initWithComAowagieTextRectangle_withInt_(self->pageSize_, [((ComAowagieTextRectangle *) nil_chk(self->pageSize_)) getRotation])];
        }
      }
    }
    
#line 464
    [((ComAowagieTextPdfPageResources *) nil_chk(self->pageResources_)) addDefaultColorDiffWithComAowagieTextPdfPdfDictionary:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getDefaultColorspace]];
    if ([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) isRgbTransparencyBlending]) {
      ComAowagieTextPdfPdfDictionary *dcs = new_ComAowagieTextPdfPdfDictionary_init();
      [dcs putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CS) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
      [((ComAowagieTextPdfPageResources *) nil_chk(self->pageResources_)) addDefaultColorDiffWithComAowagieTextPdfPdfDictionary:dcs];
    }
    ComAowagieTextPdfPdfDictionary *resources = [((ComAowagieTextPdfPageResources *) nil_chk(self->pageResources_)) getResources];
    
#line 474
    ComAowagieTextPdfPdfPage *page = new_ComAowagieTextPdfPdfPage_initPackagePrivateWithComAowagieTextPdfPdfRectangle_withJavaUtilHashMap_withComAowagieTextPdfPdfDictionary_withInt_(new_ComAowagieTextPdfPdfRectangle_initWithComAowagieTextRectangle_withInt_(self->pageSize_, rotation), self->thisBoxSize_, resources, rotation);
    [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TABS) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getTabs]];
    
#line 480
    if (self->xmpMetadata_ != nil) {
      ComAowagieTextPdfPdfStream *xmp = new_ComAowagieTextPdfPdfStream_initWithByteArray_(self->xmpMetadata_);
      [xmp putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, METADATA)];
      [xmp putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBTYPE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, XML)];
      ComAowagieTextPdfPdfEncryption *crypto = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getEncryption];
      if (crypto != nil && ![crypto isMetadataEncrypted]) {
        ComAowagieTextPdfPdfArray *ar = new_ComAowagieTextPdfPdfArray_init();
        [ar addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, CRYPT)];
        [xmp putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:ar];
      }
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, METADATA) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:xmp])) getIndirectReference]];
    }
    
#line 494
    if (self->transition_ != nil) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TRANS) withComAowagieTextPdfPdfObject:[self->transition_ getTransitionDictionary]];
      self->transition_ = nil;
    }
    if (self->duration_ > 0) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DUR) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(self->duration_)];
      self->duration_ = 0;
    }
    if (self->pageAA_ != nil) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AA) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:self->pageAA_])) getIndirectReference]];
      self->pageAA_ = nil;
    }
    
#line 508
    if (self->thumb_ != nil) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, THUMB) withComAowagieTextPdfPdfObject:self->thumb_];
      self->thumb_ = nil;
    }
    
#line 514
    if ([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getUserunit] > 0.0f) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, USERUNIT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithFloat_([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getUserunit])];
    }
    
#line 519
    if ([((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) hasUnusedAnnotations]) {
      ComAowagieTextPdfPdfArray *array = [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) rotateAnnotationsWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextRectangle:self->pageSize_];
      if ([((ComAowagieTextPdfPdfArray *) nil_chk(array)) size] != 0) {
        [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ANNOTS) withComAowagieTextPdfPdfObject:array];
      }
    }
    
#line 527
    if ([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) isTagged]) {
      [page putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, STRUCTPARENTS) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getCurrentPageNumber] - 1)];
    }
    
#line 531
    if ([((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) size] > self->textEmptySize_) {
      [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) endText];
    }
    else {
      
#line 534
      self->text_ = nil;
    }
    (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addWithComAowagieTextPdfPdfPage:page withComAowagieTextPdfPdfContents:new_ComAowagieTextPdfPdfContents_initPackagePrivateWithComAowagieTextPdfPdfContentByte_withComAowagieTextPdfPdfContentByte_withComAowagieTextPdfPdfContentByte_withComAowagieTextPdfPdfContentByte_withComAowagieTextRectangle_([self->writer_ getDirectContentUnder], self->graphics_, self->text_, [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getDirectContent], self->pageSize_)];
    
#line 538
    ComAowagieTextPdfPdfDocument_initPage(self);
  }
  @catch (ComAowagieTextDocumentException *de) {
    
#line 542
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(de);
  }
  @catch (JavaIoIOException *ioe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
  }
  return true;
}


#line 558
- (jboolean)setPageSizeWithComAowagieTextRectangle:(ComAowagieTextRectangle *)pageSize {
  
#line 560
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return false;
  }
  self->nextPageSize_ = new_ComAowagieTextRectangle_initWithComAowagieTextRectangle_(pageSize);
  return true;
}


#line 590
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom {
  
#line 592
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return false;
  }
  self->nextMarginLeft_ = marginLeft;
  self->nextMarginRight_ = marginRight;
  self->nextMarginTop_ = marginTop;
  self->nextMarginBottom_ = marginBottom;
  return true;
}


#line 607
- (jboolean)setMarginMirroringWithBoolean:(jboolean)MarginMirroring {
  
#line 609
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return false;
  }
  return [super setMarginMirroringWithBoolean:MarginMirroring];
}


#line 619
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)MarginMirroringTopBottom {
  
#line 621
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return false;
  }
  return [super setMarginMirroringTopBottomWithBoolean:MarginMirroringTopBottom];
}


#line 634
- (void)setPageCountWithInt:(jint)pageN {
  
#line 636
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super setPageCountWithInt:pageN];
}


#line 647
- (void)resetPageCount {
  
#line 649
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super resetPageCount];
}


#line 662
- (void)setHeaderWithComAowagieTextHeaderFooter:(ComAowagieTextHeaderFooter *)header {
  
#line 664
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super setHeaderWithComAowagieTextHeaderFooter:header];
}


#line 675
- (void)resetHeader {
  
#line 677
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super resetHeader];
}


#line 690
- (void)setFooterWithComAowagieTextHeaderFooter:(ComAowagieTextHeaderFooter *)footer {
  
#line 692
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super setFooterWithComAowagieTextHeaderFooter:footer];
}


#line 703
- (void)resetFooter {
  
#line 705
  if (self->writer_ != nil && [self->writer_ isPaused]) {
    return;
  }
  [super resetFooter];
}


#line 722
- (void)initPage {
  ComAowagieTextPdfPdfDocument_initPage(self);
}


#line 795
- (void)newLine {
  ComAowagieTextPdfPdfDocument_newLine(self);
}


#line 809
- (void)carriageReturn {
  ComAowagieTextPdfPdfDocument_carriageReturn(self);
}


#line 847
- (void)ensureNewLine {
  ComAowagieTextPdfPdfDocument_ensureNewLine(self);
}


#line 865
- (jfloat)flushLines {
  return ComAowagieTextPdfPdfDocument_flushLines(self);
}


#line 929
- (void)writeLineToContentWithComAowagieTextPdfPdfLine:(ComAowagieTextPdfPdfLine *)line
                   withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)text
                   withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)graphics
                                     withNSObjectArray:(IOSObjectArray *)currentValues
                                             withFloat:(jfloat)ratio {
  
#line 930
  ComAowagieTextPdfPdfFont *currentFont = (ComAowagieTextPdfPdfFont *) cast_chk(IOSObjectArray_Get(nil_chk(currentValues), 0), [ComAowagieTextPdfPdfFont class]);
  jfloat lastBaseFactor = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(currentValues, 1), [JavaLangFloat class])))) floatValue];
  ComAowagieTextPdfPdfChunk *chunk;
  jint numberOfSpaces;
  jint lineLen;
  jboolean isJustified;
  jfloat hangingCorrection = 0;
  jfloat hScale = 1;
  jfloat lastHScale = JavaLangFloat_NaN;
  jfloat baseWordSpacing = 0;
  jfloat baseCharacterSpacing = 0;
  jfloat glueWidth = 0;
  
#line 943
  numberOfSpaces = [((ComAowagieTextPdfPdfLine *) nil_chk(line)) numberOfSpaces];
  lineLen = [line GetLineLengthUtf32];
  
#line 946
  isJustified = ([line hasToBeJustified] && (numberOfSpaces != 0 || lineLen > 1));
  jint separatorCount = [line getSeparatorCount];
  if (separatorCount > 0) {
    glueWidth = [line widthLeft] / separatorCount;
  }
  else if (isJustified) {
    if ([line isNewlineSplit] && [line widthLeft] >= lastBaseFactor * (ratio * numberOfSpaces + lineLen - 1)) {
      if ([line isRTL]) {
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) moveTextWithFloat:[line widthLeft] - lastBaseFactor * (ratio * numberOfSpaces + lineLen - 1) withFloat:0];
      }
      baseWordSpacing = ratio * lastBaseFactor;
      baseCharacterSpacing = lastBaseFactor;
    }
    else {
      jfloat width = [line widthLeft];
      ComAowagieTextPdfPdfChunk *last = [line getChunkWithInt:[line size] - 1];
      if (last != nil) {
        NSString *s = [last description];
        jchar c;
        if ([((NSString *) nil_chk(s)) java_length] > 0 && [((NSString *) nil_chk(ComAowagieTextPdfPdfDocument_hangingPunctuation)) java_indexOf:c = [s charAtWithInt:[s java_length] - 1]] >= 0) {
          jfloat oldWidth = width;
          JrePlusAssignFloatF(&width, [((ComAowagieTextPdfPdfFont *) nil_chk([last font])) widthWithInt:c] * 0.4f);
          hangingCorrection = width - oldWidth;
        }
      }
      jfloat baseFactor = width / (ratio * numberOfSpaces + lineLen - 1);
      baseWordSpacing = ratio * baseFactor;
      baseCharacterSpacing = baseFactor;
      lastBaseFactor = baseFactor;
    }
  }
  
#line 978
  jint lastChunkStroke = [line getLastStrokeChunk];
  jint chunkStrokeIdx = 0;
  jfloat xMarker = [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) getXTLM];
  jfloat baseXMarker = xMarker;
  jfloat yMarker = [text getYTLM];
  jboolean adjustMatrix = false;
  jfloat tabPosition = 0;
  
#line 987
  for (id<JavaUtilIterator> j = [line iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
    chunk = (ComAowagieTextPdfPdfChunk *) cast_chk([j next], [ComAowagieTextPdfPdfChunk class]);
    HarmonyJavaAwtColor *color = [((ComAowagieTextPdfPdfChunk *) nil_chk(chunk)) color];
    hScale = 1;
    
#line 992
    if (chunkStrokeIdx <= lastChunkStroke) {
      jfloat width;
      if (isJustified) {
        width = [chunk getWidthCorrectedWithFloat:baseCharacterSpacing withFloat:baseWordSpacing];
      }
      else {
        width = [chunk width];
      }
      if ([chunk isStroked]) {
        ComAowagieTextPdfPdfChunk *nextChunk = [line getChunkWithInt:chunkStrokeIdx + 1];
        if ([chunk isSeparator]) {
          width = glueWidth;
          IOSObjectArray *sep = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_SEPARATOR], IOSClass_arrayType(NSObject_class_(), 1));
          id<ComAowagieTextPdfDrawDrawInterface> di = (id<ComAowagieTextPdfDrawDrawInterface>) cast_check(IOSObjectArray_Get(nil_chk(sep), 0), ComAowagieTextPdfDrawDrawInterface_class_());
          JavaLangBoolean *vertical = (JavaLangBoolean *) cast_chk(IOSObjectArray_Get(sep, 1), [JavaLangBoolean class]);
          jfloat fontSize = [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size];
          jfloat ascender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:fontSize];
          jfloat descender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:fontSize];
          if ([((JavaLangBoolean *) nil_chk(vertical)) booleanValue]) {
            [((id<ComAowagieTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComAowagieTextPdfPdfContentByte:graphics withFloat:baseXMarker withFloat:yMarker + descender withFloat:baseXMarker + [line getOriginalWidth] withFloat:ascender - descender withFloat:yMarker];
          }
          else {
            [((id<ComAowagieTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComAowagieTextPdfPdfContentByte:graphics withFloat:xMarker withFloat:yMarker + descender withFloat:xMarker + width withFloat:ascender - descender withFloat:yMarker];
          }
        }
        if ([chunk isTab]) {
          IOSObjectArray *tab = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_TAB], IOSClass_arrayType(NSObject_class_(), 1));
          id<ComAowagieTextPdfDrawDrawInterface> di = (id<ComAowagieTextPdfDrawDrawInterface>) cast_check(IOSObjectArray_Get(nil_chk(tab), 0), ComAowagieTextPdfDrawDrawInterface_class_());
          tabPosition = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(tab, 1), [JavaLangFloat class])))) floatValue] + [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(tab, 3), [JavaLangFloat class])))) floatValue];
          jfloat fontSize = [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size];
          jfloat ascender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:fontSize];
          jfloat descender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:fontSize];
          if (tabPosition > xMarker) {
            [((id<ComAowagieTextPdfDrawDrawInterface>) nil_chk(di)) drawWithComAowagieTextPdfPdfContentByte:graphics withFloat:xMarker withFloat:yMarker + descender withFloat:tabPosition withFloat:ascender - descender withFloat:yMarker];
          }
          jfloat tmp = xMarker;
          xMarker = tabPosition;
          tabPosition = tmp;
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_BACKGROUND]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_BACKGROUND]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          jfloat fontSize = [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size];
          jfloat ascender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:fontSize];
          jfloat descender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:fontSize];
          IOSObjectArray *bgr = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_BACKGROUND], IOSClass_arrayType(NSObject_class_(), 1));
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(graphics)) setColorFillWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *) cast_chk(IOSObjectArray_Get(nil_chk(bgr), 0), [HarmonyJavaAwtColor class])];
          IOSFloatArray *extra = (IOSFloatArray *) cast_chk(IOSObjectArray_Get(bgr, 1), [IOSFloatArray class]);
          [graphics rectangleWithFloat:xMarker - IOSFloatArray_Get(nil_chk(extra), 0) withFloat:
#line 1046
          yMarker + descender - IOSFloatArray_Get(extra, 1) + [chunk getTextRise] withFloat:
#line 1047
          width - subtract + IOSFloatArray_Get(extra, 0) + IOSFloatArray_Get(extra, 2) withFloat:
#line 1048
          ascender - descender + IOSFloatArray_Get(extra, 1) + IOSFloatArray_Get(extra, 3)];
          [graphics fill];
          [graphics setGrayFillWithFloat:0];
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_UNDERLINE]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_UNDERLINE]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          IOSObjectArray *unders = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_UNDERLINE], IOSClass_arrayType(NSObject_class_(), 2));
          HarmonyJavaAwtColor *scolor = nil;
          {
            IOSObjectArray *a__ =
#line 1062
            unders;
            IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
            IOSObjectArray * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              IOSObjectArray *obj = *b__++;
              
#line 1063
              scolor = (HarmonyJavaAwtColor *) cast_chk(IOSObjectArray_Get(nil_chk(obj), 0), [HarmonyJavaAwtColor class]);
              IOSFloatArray *ps = (IOSFloatArray *) cast_chk(IOSObjectArray_Get(obj, 1), [IOSFloatArray class]);
              if (scolor == nil) {
                scolor = color;
              }
              if (scolor != nil) {
                [((ComAowagieTextPdfPdfContentByte *) nil_chk(graphics)) setColorStrokeWithHarmonyJavaAwtColor:scolor];
              }
              jfloat fsize = [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size];
              [((ComAowagieTextPdfPdfContentByte *) nil_chk(graphics)) setLineWidthWithFloat:IOSFloatArray_Get(nil_chk(ps), 0) + fsize * IOSFloatArray_Get(ps, 1)];
              jfloat shift = IOSFloatArray_Get(ps, 2) + fsize * IOSFloatArray_Get(ps, 3);
              jint cap2 = JreFpToInt(IOSFloatArray_Get(ps, 4));
              if (cap2 != 0) {
                [graphics setLineCapWithInt:cap2];
              }
              [graphics moveToWithFloat:xMarker withFloat:yMarker + shift];
              [graphics lineToWithFloat:xMarker + width - subtract withFloat:yMarker + shift];
              [graphics stroke];
              if (scolor != nil) {
                [graphics resetGrayStroke];
              }
              if (cap2 != 0) {
                [graphics setLineCapWithInt:0];
              }
            }
          }
          
#line 1088
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(graphics)) setLineWidthWithFloat:1];
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_ACTION]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_ACTION]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          [text addAnnotationWithComAowagieTextPdfPdfAnnotation:new_ComAowagieTextPdfPdfAnnotation_initWithComAowagieTextPdfPdfWriter_withFloat_withFloat_withFloat_withFloat_withComAowagieTextPdfPdfAction_(self->writer_, xMarker, yMarker, xMarker + width - subtract, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size], (ComAowagieTextPdfPdfAction *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_ACTION], [ComAowagieTextPdfPdfAction class]))];
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_REMOTEGOTO]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_REMOTEGOTO]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          IOSObjectArray *obj = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_REMOTEGOTO], IOSClass_arrayType(NSObject_class_(), 1));
          NSString *filename = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(obj), 0), [NSString class]);
          if ([IOSObjectArray_Get(obj, 1) isKindOfClass:[NSString class]]) {
            ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withNSString_withFloat_withFloat_withFloat_withFloat_(self, filename, (NSString *) cast_chk(IOSObjectArray_Get(obj, 1), [NSString class]), xMarker, yMarker, xMarker + width - subtract, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size]);
          }
          else {
            
#line 1113
            ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withInt_withFloat_withFloat_withFloat_withFloat_(self, filename, [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(obj, 1), [JavaLangInteger class])))) intValue], xMarker, yMarker, xMarker + width - subtract, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size]);
          }
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_LOCALGOTO]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_LOCALGOTO]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          ComAowagieTextPdfPdfDocument_localGotoWithNSString_withFloat_withFloat_withFloat_withFloat_(self, (NSString *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_LOCALGOTO], [NSString class]), xMarker, yMarker, xMarker + width - subtract, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size]);
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_LOCALDESTINATION]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_LOCALDESTINATION]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          ComAowagieTextPdfPdfDocument_localDestinationWithNSString_withComAowagieTextPdfPdfDestination_(self, (NSString *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_LOCALDESTINATION], [NSString class]), new_ComAowagieTextPdfPdfDestination_initPackagePrivateWithInt_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDestination_XYZ, xMarker, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size], 0));
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_GENERICTAG]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_GENERICTAG]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          ComAowagieTextRectangle *rect = new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(xMarker, yMarker, xMarker + width - subtract, yMarker + [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size]);
          id<ComAowagieTextPdfPdfPageEvent> pev = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPageEvent];
          if (pev != nil) {
            [pev onGenericTagWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextDocument:self withComAowagieTextRectangle:rect withNSString:(NSString *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_GENERICTAG], [NSString class])];
          }
        }
        if ([chunk isAttributeWithNSString:ComAowagieTextChunk_PDFANNOTATION]) {
          jfloat subtract = lastBaseFactor;
          if (nextChunk != nil && [nextChunk isAttributeWithNSString:ComAowagieTextChunk_PDFANNOTATION]) {
            subtract = 0;
          }
          if (nextChunk == nil) {
            JrePlusAssignFloatF(&subtract, hangingCorrection);
          }
          jfloat fontSize = [((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) size];
          jfloat ascender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_ASCENT withFloat:fontSize];
          jfloat descender = [((ComAowagieTextPdfBaseFont *) nil_chk([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) getFont])) getFontDescriptorWithInt:ComAowagieTextPdfBaseFont_DESCENT withFloat:fontSize];
          ComAowagieTextPdfPdfAnnotation *annot = ComAowagieTextPdfPdfFormField_shallowDuplicateWithComAowagieTextPdfPdfAnnotation_((ComAowagieTextPdfPdfAnnotation *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_PDFANNOTATION], [ComAowagieTextPdfPdfAnnotation class]));
          [((ComAowagieTextPdfPdfAnnotation *) nil_chk(annot)) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, RECT) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfRectangle_initWithFloat_withFloat_withFloat_withFloat_(xMarker, yMarker + descender, xMarker + width - subtract, yMarker + ascender)];
          [text addAnnotationWithComAowagieTextPdfPdfAnnotation:annot];
        }
        IOSFloatArray *params = (IOSFloatArray *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_SKEW], [IOSFloatArray class]);
        JavaLangFloat *hs = (JavaLangFloat *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_HSCALE], [JavaLangFloat class]);
        if (params != nil || hs != nil) {
          jfloat b = 0;
          
#line 1168
          jfloat c = 0;
          if (params != nil) {
            b = IOSFloatArray_Get(params, 0);
            c = IOSFloatArray_Get(params, 1);
          }
          if (hs != nil) {
            hScale = [hs floatValue];
          }
          [text setTextMatrixWithFloat:hScale withFloat:b withFloat:c withFloat:1 withFloat:xMarker withFloat:yMarker];
        }
        if ([chunk isImage]) {
          ComAowagieTextImage *image = [chunk getImage];
          IOSFloatArray *matrix = [((ComAowagieTextImage *) nil_chk(image)) matrix];
          *IOSFloatArray_GetRef(nil_chk(matrix), ComAowagieTextImage_CX) = xMarker + [chunk getImageOffsetX] - IOSFloatArray_Get(matrix, ComAowagieTextImage_CX);
          *IOSFloatArray_GetRef(matrix, ComAowagieTextImage_CY) = yMarker + [chunk getImageOffsetY] - IOSFloatArray_Get(matrix, ComAowagieTextImage_CY);
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(graphics)) addImageWithComAowagieTextImage:image withFloat:IOSFloatArray_Get(matrix, 0) withFloat:IOSFloatArray_Get(matrix, 1) withFloat:IOSFloatArray_Get(matrix, 2) withFloat:IOSFloatArray_Get(matrix, 3) withFloat:IOSFloatArray_Get(matrix, 4) withFloat:IOSFloatArray_Get(matrix, 5)];
          [text moveTextWithFloat:xMarker + lastBaseFactor + [image getScaledWidth] - [text getXTLM] withFloat:0];
        }
      }
      JrePlusAssignFloatF(&xMarker, width);
      ++chunkStrokeIdx;
    }
    
#line 1191
    if ([((ComAowagieTextPdfPdfFont *) nil_chk([chunk font])) compareToWithId:currentFont] != 0) {
      currentFont = [chunk font];
      [text setFontAndSizeWithComAowagieTextPdfBaseFont:[((ComAowagieTextPdfPdfFont *) nil_chk(currentFont)) getFont] withFloat:[currentFont size]];
    }
    jfloat rise = 0;
    IOSObjectArray *textRender = (IOSObjectArray *) cast_check([chunk getAttributeWithNSString:ComAowagieTextChunk_TEXTRENDERMODE], IOSClass_arrayType(NSObject_class_(), 1));
    jint tr = 0;
    jfloat strokeWidth = 1;
    HarmonyJavaAwtColor *strokeColor = nil;
    JavaLangFloat *fr = (JavaLangFloat *) cast_chk([chunk getAttributeWithNSString:ComAowagieTextChunk_SUBSUPSCRIPT], [JavaLangFloat class]);
    if (textRender != nil) {
      tr = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(textRender, 0), [JavaLangInteger class])))) intValue] & 3;
      if (tr != ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL) {
        [text setTextRenderingModeWithInt:tr];
      }
      if (tr == ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE || tr == ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE) {
        strokeWidth = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(textRender, 1), [JavaLangFloat class])))) floatValue];
        if (strokeWidth != 1) {
          [text setLineWidthWithFloat:strokeWidth];
        }
        strokeColor = (HarmonyJavaAwtColor *) cast_chk(IOSObjectArray_Get(textRender, 2), [HarmonyJavaAwtColor class]);
        if (strokeColor == nil) {
          strokeColor = color;
        }
        if (strokeColor != nil) {
          [text setColorStrokeWithHarmonyJavaAwtColor:strokeColor];
        }
      }
    }
    if (fr != nil) {
      rise = [fr floatValue];
    }
    if (color != nil) {
      [text setColorFillWithHarmonyJavaAwtColor:color];
    }
    if (rise != 0) {
      [text setTextRiseWithFloat:rise];
    }
    if ([chunk isImage]) {
      adjustMatrix = true;
    }
    else if ([chunk isHorizontalSeparator]) {
      ComAowagieTextPdfPdfTextArray *array = new_ComAowagieTextPdfPdfTextArray_initPackagePrivate();
      [array addWithFloat:-glueWidth * 1000.0f / [((ComAowagieTextPdfPdfFont *) nil_chk(chunk->font_)) size] / hScale];
      [text showTextWithComAowagieTextPdfPdfTextArray:array];
    }
    else if ([chunk isTab]) {
      ComAowagieTextPdfPdfTextArray *array = new_ComAowagieTextPdfPdfTextArray_initPackagePrivate();
      [array addWithFloat:(tabPosition - xMarker) * 1000.0f / [((ComAowagieTextPdfPdfFont *) nil_chk(chunk->font_)) size] / hScale];
      [text showTextWithComAowagieTextPdfPdfTextArray:array];
    }
    else
#line 1244
    if (isJustified && numberOfSpaces > 0 && [chunk isSpecialEncoding]) {
      if (hScale != lastHScale) {
        lastHScale = hScale;
        [text setWordSpacingWithFloat:baseWordSpacing / hScale];
        [text setCharacterSpacingWithFloat:baseCharacterSpacing / hScale];
      }
      NSString *s = [chunk description];
      jint idx = [((NSString *) nil_chk(s)) java_indexOf:' '];
      if (idx < 0) {
        [text showTextWithNSString:s];
      }
      else {
        
#line 1255
        jfloat spaceCorrection = -baseWordSpacing * 1000.0f / [((ComAowagieTextPdfPdfFont *) nil_chk(chunk->font_)) size] / hScale;
        ComAowagieTextPdfPdfTextArray *textArray = new_ComAowagieTextPdfPdfTextArray_initPackagePrivateWithNSString_([s java_substring:0 endIndex:idx]);
        jint lastIdx = idx;
        while ((idx = [s java_indexOf:' ' fromIndex:lastIdx + 1]) >= 0) {
          [textArray addWithFloat:spaceCorrection];
          [textArray addWithNSString:[s java_substring:lastIdx endIndex:idx]];
          lastIdx = idx;
        }
        [textArray addWithFloat:spaceCorrection];
        [textArray addWithNSString:[s java_substring:lastIdx]];
        [text showTextWithComAowagieTextPdfPdfTextArray:textArray];
      }
    }
    else {
      if (isJustified && hScale != lastHScale) {
        lastHScale = hScale;
        [text setWordSpacingWithFloat:baseWordSpacing / hScale];
        [text setCharacterSpacingWithFloat:baseCharacterSpacing / hScale];
      }
      [text showTextWithNSString:[chunk description]];
    }
    
#line 1277
    if (rise != 0) {
      [text setTextRiseWithFloat:0];
    }
    if (color != nil) {
      [text resetRGBColorFill];
    }
    if (tr != ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL) {
      [text setTextRenderingModeWithInt:ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL];
    }
    if (strokeColor != nil) {
      [text resetRGBColorStroke];
    }
    if (strokeWidth != 1) {
      [text setLineWidthWithFloat:1];
    }
    if ([chunk isAttributeWithNSString:ComAowagieTextChunk_SKEW] || [chunk isAttributeWithNSString:ComAowagieTextChunk_HSCALE]) {
      adjustMatrix = true;
      [text setTextMatrixWithFloat:xMarker withFloat:yMarker];
    }
  }
  if (isJustified) {
    [text setWordSpacingWithFloat:0];
    [text setCharacterSpacingWithFloat:0];
    if ([line isNewlineSplit]) {
      lastBaseFactor = 0;
    }
  }
  if (adjustMatrix) {
    [text moveTextWithFloat:baseXMarker - [text getXTLM] withFloat:0];
  }
  (void) IOSObjectArray_Set(currentValues, 0, currentFont);
  (void) IOSObjectArray_SetAndConsume(currentValues, 1, new_JavaLangFloat_initWithFloat_(lastBaseFactor));
}


#line 1352
- (jfloat)indentLeft {
  return ComAowagieTextPdfPdfDocument_indentLeft(self);
}


#line 1362
- (jfloat)indentRight {
  return ComAowagieTextPdfPdfDocument_indentRight(self);
}


#line 1372
- (jfloat)indentTop {
  return ComAowagieTextPdfPdfDocument_indentTop(self);
}


#line 1382
- (jfloat)indentBottom {
  return [self bottomWithFloat:((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentBottom_];
}


#line 1399
- (ComAowagieTextPdfPdfDocument_PdfInfo *)getInfo {
  return self->info_;
}


#line 1410
- (ComAowagieTextPdfPdfDocument_PdfCatalog *)getCatalogWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)pages {
  ComAowagieTextPdfPdfDocument_PdfCatalog *catalog = new_ComAowagieTextPdfPdfDocument_PdfCatalog_initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_(pages, self->writer_);
  
#line 1414
  if ([((JavaUtilArrayList *) nil_chk([((ComAowagieTextPdfPdfOutline *) nil_chk(self->rootOutline_)) getKids])) size] > 0) {
    [catalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGEMODE) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, USEOUTLINES)];
    [catalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OUTLINES) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk(self->rootOutline_)) indirectReference]];
  }
  
#line 1420
  [((ComAowagieTextPdfInternalPdfVersionImp *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPdfVersion])) addToCatalogWithComAowagieTextPdfPdfDictionary:catalog];
  
#line 1423
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addToCatalogWithComAowagieTextPdfPdfDictionary:catalog];
  
#line 1426
  if (self->pageLabels_ != nil) {
    [catalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGELABELS) withComAowagieTextPdfPdfObject:[self->pageLabels_ getDictionaryWithComAowagieTextPdfPdfWriter:self->writer_]];
  }
  
#line 1431
  ComAowagieTextPdfPdfDocument_PdfCatalog_addNamesWithJavaUtilTreeMap_withJavaUtilHashMap_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(catalog, self->localDestinations_, [self getDocumentLevelJS], self->documentFileAttachment_, self->writer_);
  
#line 1434
  if (self->openActionName_ != nil) {
    ComAowagieTextPdfPdfAction *action = ComAowagieTextPdfPdfDocument_getLocalGotoActionWithNSString_(self, self->openActionName_);
    ComAowagieTextPdfPdfDocument_PdfCatalog_setOpenActionWithComAowagieTextPdfPdfAction_(catalog, action);
  }
  else if (self->openActionAction_ != nil) {
    ComAowagieTextPdfPdfDocument_PdfCatalog_setOpenActionWithComAowagieTextPdfPdfAction_(catalog, self->openActionAction_);
  }
  if (self->additionalActions_ != nil) {
    ComAowagieTextPdfPdfDocument_PdfCatalog_setAdditionalActionsWithComAowagieTextPdfPdfDictionary_(catalog, self->additionalActions_);
  }
  
#line 1446
  if (self->collection_ != nil) {
    [catalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLLECTION) withComAowagieTextPdfPdfObject:self->collection_];
  }
  
#line 1451
  if ([((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) hasValidAcroForm]) {
    @try {
      [catalog putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, ACROFORM) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:[((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) getAcroForm]])) getIndirectReference]];
    }
    @catch (JavaIoIOException *e) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
    }
  }
  
#line 1460
  return catalog;
}


#line 1478
- (ComAowagieTextPdfPdfOutline *)getRootOutline {
  return self->rootOutline_;
}


#line 1486
- (void)calculateOutlineCount {
  ComAowagieTextPdfPdfDocument_calculateOutlineCount(self);
}


#line 1497
- (void)traverseOutlineCountWithComAowagieTextPdfPdfOutline:(ComAowagieTextPdfPdfOutline *)outline {
  ComAowagieTextPdfPdfDocument_traverseOutlineCountWithComAowagieTextPdfPdfOutline_(self, outline);
}


#line 1525
- (void)writeOutlines {
  ComAowagieTextPdfPdfDocument_writeOutlines(self);
}


#line 1538
- (void)outlineTreeWithComAowagieTextPdfPdfOutline:(ComAowagieTextPdfPdfOutline *)outline {
  ComAowagieTextPdfPdfDocument_outlineTreeWithComAowagieTextPdfPdfOutline_(self, outline);
}


#line 1574
- (void)setViewerPreferencesWithInt:(jint)preferences {
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) setViewerPreferencesWithInt:preferences];
}


#line 1583
- (void)addViewerPreferenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)key
                         withComAowagieTextPdfPdfObject:(ComAowagieTextPdfPdfObject *)value {
  
#line 1584
  [((ComAowagieTextPdfInternalPdfViewerPreferencesImp *) nil_chk(self->viewerPreferences_)) addViewerPreferenceWithComAowagieTextPdfPdfName:key withComAowagieTextPdfPdfObject:value];
}


#line 1594
- (void)setPageLabelsWithComAowagieTextPdfPdfPageLabels:(ComAowagieTextPdfPdfPageLabels *)pageLabels {
  self->pageLabels_ = pageLabels;
}


#line 1609
- (void)localGotoWithNSString:(NSString *)name
                    withFloat:(jfloat)llx
                    withFloat:(jfloat)lly
                    withFloat:(jfloat)urx
                    withFloat:(jfloat)ury {
  ComAowagieTextPdfPdfDocument_localGotoWithNSString_withFloat_withFloat_withFloat_withFloat_(self, name, llx, lly, urx, ury);
}


#line 1623
- (void)remoteGotoWithNSString:(NSString *)filename
                  withNSString:(NSString *)name
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withNSString_withFloat_withFloat_withFloat_withFloat_(self, filename, name, llx, lly, urx, ury);
}


#line 1636
- (void)remoteGotoWithNSString:(NSString *)filename
                       withInt:(jint)page
                     withFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withInt_withFloat_withFloat_withFloat_withFloat_(self, filename, page, llx, lly, urx, ury);
}


#line 1647
- (void)setActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action
                                      withFloat:(jfloat)llx
                                      withFloat:(jfloat)lly
                                      withFloat:(jfloat)urx
                                      withFloat:(jfloat)ury {
  
#line 1648
  [self addAnnotationWithComAowagieTextPdfPdfAnnotation:new_ComAowagieTextPdfPdfAnnotation_initWithComAowagieTextPdfPdfWriter_withFloat_withFloat_withFloat_withFloat_withComAowagieTextPdfPdfAction_(self->writer_, llx, lly, urx, ury, action)];
}

- (ComAowagieTextPdfPdfAction *)getLocalGotoActionWithNSString:(NSString *)name {
  return ComAowagieTextPdfPdfDocument_getLocalGotoActionWithNSString_(self, name);
}


#line 1686
- (jboolean)localDestinationWithNSString:(NSString *)name
     withComAowagieTextPdfPdfDestination:(ComAowagieTextPdfPdfDestination *)destination {
  return ComAowagieTextPdfPdfDocument_localDestinationWithNSString_withComAowagieTextPdfPdfDestination_(self, name, destination);
}


#line 1706
- (void)addJavaScriptWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)js {
  if ([((ComAowagieTextPdfPdfAction *) nil_chk(js)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JS)] == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Only JavaScript actions are allowed.");
  }
  @try {
    (void) [((JavaUtilHashMap *) nil_chk(self->documentLevelJS_)) putWithId:[((JavaTextDecimalFormat *) nil_chk(ComAowagieTextPdfPdfDocument_SIXTEEN_DIGITS)) formatWithLong:self->jsCounter_++] withId:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:js])) getIndirectReference]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 1717
- (void)addJavaScriptWithNSString:(NSString *)name
   withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)js {
  
#line 1718
  if ([((ComAowagieTextPdfPdfAction *) nil_chk(js)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JS)] == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Only JavaScript actions are allowed.");
  }
  @try {
    (void) [((JavaUtilHashMap *) nil_chk(self->documentLevelJS_)) putWithId:name withId:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:js])) getIndirectReference]];
  }
  @catch (JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 1729
- (JavaUtilHashMap *)getDocumentLevelJS {
  return self->documentLevelJS_;
}


#line 1735
- (void)addFileAttachmentWithNSString:(NSString *)description_
withComAowagieTextPdfPdfFileSpecification:(ComAowagieTextPdfPdfFileSpecification *)fs {
  
#line 1736
  if (description_ == nil) {
    ComAowagieTextPdfPdfString *desc = (ComAowagieTextPdfPdfString *) cast_chk([((ComAowagieTextPdfPdfFileSpecification *) nil_chk(fs)) getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESC)], [ComAowagieTextPdfPdfString class]);
    if (desc == nil) {
      description_ = @"";
    }
    else {
      description_ = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([desc getBytes], nil);
    }
  }
  [((ComAowagieTextPdfPdfFileSpecification *) nil_chk(fs)) addDescriptionWithNSString:description_ withBoolean:true];
  if ([((NSString *) nil_chk(description_)) java_length] == 0) {
    description_ = @"Unnamed";
  }
  NSString *fn = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(description_, ComAowagieTextPdfPdfObject_TEXT_UNICODE) getBytes], nil);
  jint k = 0;
  while ([((JavaUtilHashMap *) nil_chk(self->documentFileAttachment_)) containsKeyWithId:fn]) {
    ++k;
    fn = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_([new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(JreStrcat("$CI", description_, ' ', k), ComAowagieTextPdfPdfObject_TEXT_UNICODE) getBytes], nil);
  }
  (void) [self->documentFileAttachment_ putWithId:fn withId:[fs getReference]];
}


#line 1758
- (JavaUtilHashMap *)getDocumentFileAttachment {
  return self->documentFileAttachment_;
}


#line 1766
- (void)setOpenActionWithNSString:(NSString *)name {
  self->openActionName_ = name;
  self->openActionAction_ = nil;
}


#line 1772
- (void)setOpenActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action {
  self->openActionAction_ = action;
  self->openActionName_ = nil;
}


#line 1778
- (void)addAdditionalActionWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)actionType
                         withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action {
  
#line 1779
  if (self->additionalActions_ == nil) {
    self->additionalActions_ = new_ComAowagieTextPdfPdfDictionary_init();
  }
  if (action == nil) {
    [self->additionalActions_ removeWithComAowagieTextPdfPdfName:actionType];
  }
  else {
    
#line 1785
    [self->additionalActions_ putWithComAowagieTextPdfPdfName:actionType withComAowagieTextPdfPdfObject:action];
  }
  if ([((ComAowagieTextPdfPdfDictionary *) nil_chk(self->additionalActions_)) size] == 0) {
    self->additionalActions_ = nil;
  }
}


#line 1800
- (void)setCollectionWithComAowagieTextPdfCollectionPdfCollection:(ComAowagieTextPdfCollectionPdfCollection *)collection {
  self->collection_ = collection;
}


#line 1812
- (ComAowagieTextPdfPdfAcroForm *)getAcroForm {
  return [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) getAcroForm];
}

- (void)setSigFlagsWithInt:(jint)f {
  [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) setSigFlagsWithInt:f];
}


#line 1822
- (void)addAnnotationWithComAowagieTextPdfPdfAnnotation:(ComAowagieTextPdfPdfAnnotation *)annot {
  self->pageEmpty_ = false;
  [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) addAnnotationWithComAowagieTextPdfPdfAnnotation:annot];
}


#line 1847
- (void)setCropBoxSizeWithComAowagieTextRectangle:(ComAowagieTextRectangle *)crop {
  ComAowagieTextPdfPdfDocument_setBoxSizeWithNSString_withComAowagieTextRectangle_(self, @"crop", crop);
}

- (void)setBoxSizeWithNSString:(NSString *)boxName
   withComAowagieTextRectangle:(ComAowagieTextRectangle *)size {
  ComAowagieTextPdfPdfDocument_setBoxSizeWithNSString_withComAowagieTextRectangle_(self, boxName, size);
}


#line 1859
- (void)setNewPageSizeAndMargins {
  ComAowagieTextPdfPdfDocument_setNewPageSizeAndMargins(self);
}


#line 1886
- (void)setPageEmptyWithBoolean:(jboolean)pageEmpty {
  self->pageEmpty_ = pageEmpty;
}


#line 1902
- (void)setDurationWithInt:(jint)seconds {
  if (seconds > 0) {
    self->duration_ = seconds;
  }
  else {
    
#line 1906
    self->duration_ = -1;
  }
}


#line 1914
- (void)setTransitionWithComAowagieTextPdfPdfTransition:(ComAowagieTextPdfPdfTransition *)transition {
  self->transition_ = transition;
}


#line 1919
- (void)setPageActionWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)actionType
                   withComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action {
  
#line 1920
  if (self->pageAA_ == nil) {
    self->pageAA_ = new_ComAowagieTextPdfPdfDictionary_init();
  }
  [self->pageAA_ putWithComAowagieTextPdfPdfName:actionType withComAowagieTextPdfPdfObject:action];
}

- (void)setThumbnailWithComAowagieTextImage:(ComAowagieTextImage *)image {
  self->thumb_ = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getImageReferenceWithComAowagieTextPdfPdfName:[self->writer_ addDirectImageSimpleWithComAowagieTextImage:image]];
}


#line 1938
- (ComAowagieTextPdfPageResources *)getPageResources {
  return self->pageResources_;
}


#line 1951
- (jboolean)isStrictImageSequence {
  return self->strictImageSequence_;
}


#line 1959
- (void)setStrictImageSequenceWithBoolean:(jboolean)strictImageSequence {
  self->strictImageSequence_ = strictImageSequence;
}


#line 1978
- (void)addWithComAowagieTextImage:(ComAowagieTextImage *)image {
  ComAowagieTextPdfPdfDocument_addWithComAowagieTextImage_(self, image);
}


#line 2168
- (void)addPdfTableWithComAowagieTextTable:(ComAowagieTextTable *)t {
  ComAowagieTextPdfPdfDocument_addPdfTableWithComAowagieTextTable_(self, t);
}


#line 2377
- (void)analyzeRowWithJavaUtilArrayList:(JavaUtilArrayList *)rows
withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx {
  ComAowagieTextPdfPdfDocument_analyzeRowWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, rows, ctx);
}


#line 2417
- (jboolean)mayBeRemovedWithJavaUtilArrayList:(JavaUtilArrayList *)row {
  return ComAowagieTextPdfPdfDocument_mayBeRemovedWithJavaUtilArrayList_(self, row);
}


#line 2428
- (void)consumeRowspanWithJavaUtilArrayList:(JavaUtilArrayList *)row
withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx {
  ComAowagieTextPdfPdfDocument_consumeRowspanWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, row, ctx);
}


#line 2436
- (JavaUtilArrayList *)extractRowsWithJavaUtilArrayList:(JavaUtilArrayList *)cells
      withComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx {
  return ComAowagieTextPdfPdfDocument_extractRowsWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, cells, ctx);
}


#line 2504
- (void)renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext:(ComAowagieTextPdfPdfDocument_RenderingContext *)ctx
                                                    withJavaUtilList:(id<JavaUtilList>)cells
                                                         withBoolean:(jboolean)hasToFit {
  ComAowagieTextPdfPdfDocument_renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext_withJavaUtilList_withBoolean_(self, ctx, cells, hasToFit);
}


#line 2574
- (jfloat)bottomWithComAowagieTextTable:(ComAowagieTextTable *)table {
  
#line 2576
  ComAowagieTextPdfPdfTable *tmp = new_ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(table, ComAowagieTextPdfPdfDocument_indentLeft(self), ComAowagieTextPdfPdfDocument_indentRight(self), ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_);
  return [tmp getBottom];
}

- (void)doFooter {
  ComAowagieTextPdfPdfDocument_doFooter(self);
}


#line 2628
- (void)doHeader {
  ComAowagieTextPdfPdfDocument_doHeader(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, 3, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDocument_PdfInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDocument_PdfCatalog;", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfOutline;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 26, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 25, 26, -1, -1, -1 },
    { NULL, "V", 0x0, 28, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 38, 39, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAction;", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 44, 46, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, -1, 47, -1, -1 },
    { NULL, "V", 0x0, 48, 49, 26, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x0, -1, -1, -1, 47, -1, -1 },
    { NULL, "V", 0x0, 50, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 50, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAcroForm;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 55, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 58, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 61, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 62, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 65, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 66, 67, 68, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPageResources;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 69, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 67, 68, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 72, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 74, -1, 75, -1, -1 },
    { NULL, "Z", 0x2, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 74, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 79, 74, -1, 80, -1, -1 },
    { NULL, "V", 0x2, 81, 82, 3, -1, -1, -1 },
    { NULL, "F", 0x0, 83, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithJavaUtilCalendar:);
  methods[1].selector = @selector(addWriterWithComAowagieTextPdfPdfWriter:);
  methods[2].selector = @selector(getLeading);
  methods[3].selector = @selector(setLeadingWithFloat:);
  methods[4].selector = @selector(open);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(setXmpMetadataWithByteArray:);
  methods[7].selector = @selector(newPage);
  methods[8].selector = @selector(setPageSizeWithComAowagieTextRectangle:);
  methods[9].selector = @selector(setMarginsWithFloat:withFloat:withFloat:withFloat:);
  methods[10].selector = @selector(setMarginMirroringWithBoolean:);
  methods[11].selector = @selector(setMarginMirroringTopBottomWithBoolean:);
  methods[12].selector = @selector(setPageCountWithInt:);
  methods[13].selector = @selector(resetPageCount);
  methods[14].selector = @selector(setHeaderWithComAowagieTextHeaderFooter:);
  methods[15].selector = @selector(resetHeader);
  methods[16].selector = @selector(setFooterWithComAowagieTextHeaderFooter:);
  methods[17].selector = @selector(resetFooter);
  methods[18].selector = @selector(initPage);
  methods[19].selector = @selector(newLine);
  methods[20].selector = @selector(carriageReturn);
  methods[21].selector = @selector(ensureNewLine);
  methods[22].selector = @selector(flushLines);
  methods[23].selector = @selector(writeLineToContentWithComAowagieTextPdfPdfLine:withComAowagieTextPdfPdfContentByte:withComAowagieTextPdfPdfContentByte:withNSObjectArray:withFloat:);
  methods[24].selector = @selector(indentLeft);
  methods[25].selector = @selector(indentRight);
  methods[26].selector = @selector(indentTop);
  methods[27].selector = @selector(indentBottom);
  methods[28].selector = @selector(getInfo);
  methods[29].selector = @selector(getCatalogWithComAowagieTextPdfPdfIndirectReference:);
  methods[30].selector = @selector(getRootOutline);
  methods[31].selector = @selector(calculateOutlineCount);
  methods[32].selector = @selector(traverseOutlineCountWithComAowagieTextPdfPdfOutline:);
  methods[33].selector = @selector(writeOutlines);
  methods[34].selector = @selector(outlineTreeWithComAowagieTextPdfPdfOutline:);
  methods[35].selector = @selector(setViewerPreferencesWithInt:);
  methods[36].selector = @selector(addViewerPreferenceWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfObject:);
  methods[37].selector = @selector(setPageLabelsWithComAowagieTextPdfPdfPageLabels:);
  methods[38].selector = @selector(localGotoWithNSString:withFloat:withFloat:withFloat:withFloat:);
  methods[39].selector = @selector(remoteGotoWithNSString:withNSString:withFloat:withFloat:withFloat:withFloat:);
  methods[40].selector = @selector(remoteGotoWithNSString:withInt:withFloat:withFloat:withFloat:withFloat:);
  methods[41].selector = @selector(setActionWithComAowagieTextPdfPdfAction:withFloat:withFloat:withFloat:withFloat:);
  methods[42].selector = @selector(getLocalGotoActionWithNSString:);
  methods[43].selector = @selector(localDestinationWithNSString:withComAowagieTextPdfPdfDestination:);
  methods[44].selector = @selector(addJavaScriptWithComAowagieTextPdfPdfAction:);
  methods[45].selector = @selector(addJavaScriptWithNSString:withComAowagieTextPdfPdfAction:);
  methods[46].selector = @selector(getDocumentLevelJS);
  methods[47].selector = @selector(addFileAttachmentWithNSString:withComAowagieTextPdfPdfFileSpecification:);
  methods[48].selector = @selector(getDocumentFileAttachment);
  methods[49].selector = @selector(setOpenActionWithNSString:);
  methods[50].selector = @selector(setOpenActionWithComAowagieTextPdfPdfAction:);
  methods[51].selector = @selector(addAdditionalActionWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfAction:);
  methods[52].selector = @selector(setCollectionWithComAowagieTextPdfCollectionPdfCollection:);
  methods[53].selector = @selector(getAcroForm);
  methods[54].selector = @selector(setSigFlagsWithInt:);
  methods[55].selector = @selector(addAnnotationWithComAowagieTextPdfPdfAnnotation:);
  methods[56].selector = @selector(setCropBoxSizeWithComAowagieTextRectangle:);
  methods[57].selector = @selector(setBoxSizeWithNSString:withComAowagieTextRectangle:);
  methods[58].selector = @selector(setNewPageSizeAndMargins);
  methods[59].selector = @selector(setPageEmptyWithBoolean:);
  methods[60].selector = @selector(setDurationWithInt:);
  methods[61].selector = @selector(setTransitionWithComAowagieTextPdfPdfTransition:);
  methods[62].selector = @selector(setPageActionWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfAction:);
  methods[63].selector = @selector(setThumbnailWithComAowagieTextImage:);
  methods[64].selector = @selector(getPageResources);
  methods[65].selector = @selector(isStrictImageSequence);
  methods[66].selector = @selector(setStrictImageSequenceWithBoolean:);
  methods[67].selector = @selector(addWithComAowagieTextImage:);
  methods[68].selector = @selector(addPdfTableWithComAowagieTextTable:);
  methods[69].selector = @selector(analyzeRowWithJavaUtilArrayList:withComAowagieTextPdfPdfDocument_RenderingContext:);
  methods[70].selector = @selector(mayBeRemovedWithJavaUtilArrayList:);
  methods[71].selector = @selector(consumeRowspanWithJavaUtilArrayList:withComAowagieTextPdfPdfDocument_RenderingContext:);
  methods[72].selector = @selector(extractRowsWithJavaUtilArrayList:withComAowagieTextPdfPdfDocument_RenderingContext:);
  methods[73].selector = @selector(renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext:withJavaUtilList:withBoolean:);
  methods[74].selector = @selector(bottomWithComAowagieTextTable:);
  methods[75].selector = @selector(doFooter);
  methods[76].selector = @selector(doHeader);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LComAowagieTextPdfPdfWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LComAowagieTextPdfPdfContentByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "graphics_", "LComAowagieTextPdfPdfContentByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textEmptySize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xmpMetadata_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMarginLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMarginRight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMarginTop_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextMarginBottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstPageEvent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "line_", "LComAowagieTextPdfPdfLine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lines_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 84, -1 },
    { "lastElementType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hangingPunctuation", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 85, -1, -1 },
    { "indentation_", "LComAowagieTextPdfPdfDocument_Indentation;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "info_", "LComAowagieTextPdfPdfDocument_PdfInfo;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rootOutline_", "LComAowagieTextPdfPdfOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentOutline_", "LComAowagieTextPdfPdfOutline;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewerPreferences_", "LComAowagieTextPdfInternalPdfViewerPreferencesImp;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "pageLabels_", "LComAowagieTextPdfPdfPageLabels;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "localDestinations_", "LJavaUtilTreeMap;", .constantValue.asLong = 0, 0x12, -1, -1, 86, -1 },
    { "jsCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "documentLevelJS_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 87, -1 },
    { "SIXTEEN_DIGITS", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x1a, -1, 88, -1, -1 },
    { "documentFileAttachment_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 87, -1 },
    { "openActionName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "openActionAction_", "LComAowagieTextPdfPdfAction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "additionalActions_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "collection_", "LComAowagieTextPdfCollectionPdfCollection;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "annotationsImp_", "LComAowagieTextPdfInternalPdfAnnotationsImp;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "markPoint_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextPageSize_", "LComAowagieTextRectangle;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thisBoxSize_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 89, -1 },
    { "boxSize_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 89, -1 },
    { "pageEmpty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "duration_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transition_", "LComAowagieTextPdfPdfTransition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageAA_", "LComAowagieTextPdfPdfDictionary;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thumb_", "LComAowagieTextPdfPdfIndirectReference;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageResources_", "LComAowagieTextPdfPageResources;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strictImageSequence_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageEnd_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageWait_", "LComAowagieTextImage;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCalendar;", "addWriter", "LComAowagieTextPdfPdfWriter;", "LComAowagieTextDocumentException;", "setLeading", "F", "setXmpMetadata", "[B", "setPageSize", "LComAowagieTextRectangle;", "setMargins", "FFFF", "setMarginMirroring", "Z", "setMarginMirroringTopBottom", "setPageCount", "I", "setHeader", "LComAowagieTextHeaderFooter;", "setFooter", "writeLineToContent", "LComAowagieTextPdfPdfLine;LComAowagieTextPdfPdfContentByte;LComAowagieTextPdfPdfContentByte;[LNSObject;F", "getCatalog", "LComAowagieTextPdfPdfIndirectReference;", "traverseOutlineCount", "LComAowagieTextPdfPdfOutline;", "LJavaIoIOException;", "outlineTree", "setViewerPreferences", "addViewerPreference", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfObject;", "setPageLabels", "LComAowagieTextPdfPdfPageLabels;", "localGoto", "LNSString;FFFF", "remoteGoto", "LNSString;LNSString;FFFF", "LNSString;IFFFF", "setAction", "LComAowagieTextPdfPdfAction;FFFF", "getLocalGotoAction", "LNSString;", "localDestination", "LNSString;LComAowagieTextPdfPdfDestination;", "addJavaScript", "LComAowagieTextPdfPdfAction;", "LNSString;LComAowagieTextPdfPdfAction;", "()Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/PdfIndirectReference;>;", "addFileAttachment", "LNSString;LComAowagieTextPdfPdfFileSpecification;", "setOpenAction", "addAdditionalAction", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfAction;", "setCollection", "LComAowagieTextPdfCollectionPdfCollection;", "setSigFlags", "addAnnotation", "LComAowagieTextPdfPdfAnnotation;", "setCropBoxSize", "setBoxSize", "LNSString;LComAowagieTextRectangle;", "setPageEmpty", "setDuration", "setTransition", "LComAowagieTextPdfPdfTransition;", "setPageAction", "setThumbnail", "LComAowagieTextImage;", "LComAowagieTextPdfPdfException;LComAowagieTextDocumentException;", "setStrictImageSequence", "add", "addPdfTable", "LComAowagieTextTable;", "analyzeRow", "LJavaUtilArrayList;LComAowagieTextPdfPdfDocument_RenderingContext;", "(Ljava/util/ArrayList<Ljava/util/List;>;Lcom/aowagie/text/pdf/PdfDocument$RenderingContext;)V", "mayBeRemoved", "LJavaUtilArrayList;", "consumeRowspan", "extractRows", "(Ljava/util/ArrayList<Lcom/aowagie/text/pdf/PdfCell;>;Lcom/aowagie/text/pdf/PdfDocument$RenderingContext;)Ljava/util/ArrayList<Ljava/util/List;>;", "renderCells", "LComAowagieTextPdfPdfDocument_RenderingContext;LJavaUtilList;Z", "bottom", "Ljava/util/ArrayList<Lcom/aowagie/text/pdf/PdfLine;>;", &ComAowagieTextPdfPdfDocument_hangingPunctuation, "Ljava/util/TreeMap<Ljava/lang/String;[Ljava/lang/Object;>;", "Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/PdfIndirectReference;>;", &ComAowagieTextPdfPdfDocument_SIXTEEN_DIGITS, "Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/PdfRectangle;>;", "LComAowagieTextPdfPdfDocument_PdfInfo;LComAowagieTextPdfPdfDocument_PdfCatalog;LComAowagieTextPdfPdfDocument_Indentation;LComAowagieTextPdfPdfDocument_RenderingContext;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDocument = { "PdfDocument", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x0, 77, 46, -1, 90, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDocument;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfDocument class]) {
    ComAowagieTextPdfPdfDocument_SIXTEEN_DIGITS = new_JavaTextDecimalFormat_initWithNSString_(
#line 1705
    @"0000000000000000");
    J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfDocument)
  }
}

@end


#line 272
void ComAowagieTextPdfPdfDocument_initPackagePrivateWithJavaUtilCalendar_(ComAowagieTextPdfPdfDocument *self, JavaUtilCalendar *globalDate) {
  ComAowagieTextDocument_init(self);
  self->leading_ =
#line 310
  0;
  self->alignment_ =
#line 331
  ComAowagieTextElement_ALIGN_LEFT;
  self->currentHeight_ =
#line 334
  0;
  self->xmpMetadata_ =
#line 404
  nil;
  self->firstPageEvent_ =
#line 714
  true;
  self->line_ =
#line 787
  nil;
  self->lines_ = new_JavaUtilArrayList_init();
  self->lastElementType_ =
#line 842
  -1;
  self->indentation_ = new_ComAowagieTextPdfPdfDocument_Indentation_init();
  self->viewerPreferences_ = new_ComAowagieTextPdfInternalPdfViewerPreferencesImp_init();
  self->localDestinations_ = new_JavaUtilTreeMap_init();
  self->documentLevelJS_ = new_JavaUtilLinkedHashMap_init();
  self->documentFileAttachment_ = new_JavaUtilLinkedHashMap_init();
  self->nextPageSize_ =
#line 1838
  nil;
  self->thisBoxSize_ = new_JavaUtilLinkedHashMap_init();
  self->boxSize_ = new_JavaUtilLinkedHashMap_init();
  self->pageEmpty_ =
#line 1884
  true;
  self->duration_ =
#line 1893
  -1;
  self->transition_ =
#line 1896
  nil;
  self->pageAA_ =
#line 1918
  nil;
  self->strictImageSequence_ =
#line 1945
  false;
  self->imageEnd_ =
#line 1964
  -1;
  self->imageWait_ =
#line 1969
  nil;
  
#line 274
  [self addProducer];
  [self addCreationDateWithJavaUtilCalendar:globalDate];
  
#line 277
  self->info_ = new_ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(globalDate);
}


#line 272
ComAowagieTextPdfPdfDocument *new_ComAowagieTextPdfPdfDocument_initPackagePrivateWithJavaUtilCalendar_(JavaUtilCalendar *globalDate) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDocument, initPackagePrivateWithJavaUtilCalendar_, globalDate)
}


#line 272
ComAowagieTextPdfPdfDocument *create_ComAowagieTextPdfPdfDocument_initPackagePrivateWithJavaUtilCalendar_(JavaUtilCalendar *globalDate) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDocument, initPackagePrivateWithJavaUtilCalendar_, globalDate)
}


#line 722
void ComAowagieTextPdfPdfDocument_initPage(ComAowagieTextPdfPdfDocument *self) {
  
#line 724
  self->pageN_++;
  
#line 727
  [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) resetAnnotations];
  self->pageResources_ = new_ComAowagieTextPdfPageResources_initPackagePrivate();
  
#line 730
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) resetContent];
  self->graphics_ = new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(self->writer_);
  self->text_ = new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(self->writer_);
  [self->text_ reset];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) beginText];
  self->textEmptySize_ = [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) size];
  
#line 737
  self->markPoint_ = 0;
  ComAowagieTextPdfPdfDocument_setNewPageSizeAndMargins(self);
  self->imageEnd_ = -1;
  ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->imageIndentRight_ = 0;
  self->indentation_->imageIndentLeft_ = 0;
  self->indentation_->indentBottom_ = 0;
  self->indentation_->indentTop_ = 0;
  self->currentHeight_ = 0;
  
#line 747
  self->thisBoxSize_ = new_JavaUtilLinkedHashMap_initWithJavaUtilMap_(self->boxSize_);
  if ([((ComAowagieTextRectangle *) nil_chk(self->pageSize_)) getBackgroundColor] != nil ||
#line 749
  [((ComAowagieTextRectangle *) nil_chk(self->pageSize_)) hasBorders] ||
#line 750
  [((ComAowagieTextRectangle *) nil_chk(self->pageSize_)) getBorderColor] != nil) {
    [self addWithComAowagieTextElement:self->pageSize_];
  }
  
#line 754
  jfloat oldleading = self->leading_;
  jint oldAlignment = self->alignment_;
  
#line 757
  ComAowagieTextPdfPdfDocument_doFooter(self);
  
#line 759
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:[self left] withFloat:[self top]];
  ComAowagieTextPdfPdfDocument_doHeader(self);
  self->pageEmpty_ = true;
  
#line 763
  @try {
    if (self->imageWait_ != nil) {
      ComAowagieTextPdfPdfDocument_addWithComAowagieTextImage_(self, self->imageWait_);
      self->imageWait_ = nil;
    }
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  self->leading_ = oldleading;
  self->alignment_ = oldAlignment;
  ComAowagieTextPdfPdfDocument_carriageReturn(self);
  
#line 776
  id<ComAowagieTextPdfPdfPageEvent> pageEvent = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPageEvent];
  if (pageEvent != nil) {
    if (self->firstPageEvent_) {
      [pageEvent onOpenDocumentWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextDocument:self];
    }
    [pageEvent onStartPageWithComAowagieTextPdfPdfWriter:self->writer_ withComAowagieTextDocument:self];
  }
  self->firstPageEvent_ = false;
}


#line 795
void ComAowagieTextPdfPdfDocument_newLine(ComAowagieTextPdfPdfDocument *self) {
  self->lastElementType_ = -1;
  ComAowagieTextPdfPdfDocument_carriageReturn(self);
  if (self->lines_ != nil && ![self->lines_ isEmpty]) {
    [self->lines_ addWithId:self->line_];
    JrePlusAssignFloatF(&self->currentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) height]);
  }
  self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(ComAowagieTextPdfPdfDocument_indentLeft(self), ComAowagieTextPdfPdfDocument_indentRight(self), self->alignment_, self->leading_);
}


#line 809
void ComAowagieTextPdfPdfDocument_carriageReturn(ComAowagieTextPdfPdfDocument *self) {
  
#line 811
  if (self->lines_ == nil) {
    self->lines_ = new_JavaUtilArrayList_init();
  }
  
#line 815
  if (self->line_ != nil) {
    
#line 817
    if (self->currentHeight_ + [self->line_ height] + self->leading_ < ComAowagieTextPdfPdfDocument_indentTop(self) - [self indentBottom]) {
      
#line 819
      if ([((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) size] > 0) {
        JrePlusAssignFloatF(&self->currentHeight_, [((ComAowagieTextPdfPdfLine *) nil_chk(self->line_)) height]);
        [((JavaUtilArrayList *) nil_chk(self->lines_)) addWithId:self->line_];
        self->pageEmpty_ = false;
      }
    }
    else {
      
#line 827
      [self newPage];
    }
  }
  if (self->imageEnd_ > -1 && self->currentHeight_ > self->imageEnd_) {
    self->imageEnd_ = -1;
    ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->imageIndentRight_ = 0;
    self->indentation_->imageIndentLeft_ = 0;
  }
  
#line 836
  self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(ComAowagieTextPdfPdfDocument_indentLeft(self), ComAowagieTextPdfPdfDocument_indentRight(self), self->alignment_, self->leading_);
}


#line 847
void ComAowagieTextPdfPdfDocument_ensureNewLine(ComAowagieTextPdfPdfDocument *self) {
  @try {
    if (self->lastElementType_ == ComAowagieTextElement_PHRASE ||
#line 850
    self->lastElementType_ == ComAowagieTextElement_CHUNK) {
      ComAowagieTextPdfPdfDocument_newLine(self);
      ComAowagieTextPdfPdfDocument_flushLines(self);
    }
  }
  @catch (
#line 854
  ComAowagieTextDocumentException *ex) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ex);
  }
}


#line 865
jfloat ComAowagieTextPdfPdfDocument_flushLines(ComAowagieTextPdfPdfDocument *self) {
  
#line 867
  if (self->lines_ == nil) {
    return 0;
  }
  
#line 871
  if (self->line_ != nil && [self->line_ size] > 0) {
    [((JavaUtilArrayList *) nil_chk(self->lines_)) addWithId:self->line_];
    self->line_ = new_ComAowagieTextPdfPdfLine_initPackagePrivateWithFloat_withFloat_withInt_withFloat_(ComAowagieTextPdfPdfDocument_indentLeft(self), ComAowagieTextPdfPdfDocument_indentRight(self), self->alignment_, self->leading_);
  }
  
#line 877
  if ([((JavaUtilArrayList *) nil_chk(self->lines_)) isEmpty]) {
    return 0;
  }
  
#line 882
  IOSObjectArray *currentValues = [IOSObjectArray newArrayWithLength:2 type:NSObject_class_()];
  ComAowagieTextPdfPdfFont *currentFont = nil;
  jfloat displacement = 0;
  ComAowagieTextPdfPdfLine *l;
  JavaLangFloat *lastBaseFactor = new_JavaLangFloat_initWithFloat_(0);
  (void) IOSObjectArray_Set(currentValues, 1, lastBaseFactor);
  
#line 889
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->lines_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    
#line 892
    l = [i next];
    
#line 894
    jfloat moveTextX = [((ComAowagieTextPdfPdfLine *) nil_chk(l)) indentLeft] - ComAowagieTextPdfPdfDocument_indentLeft(self) + ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentLeft_ + self->indentation_->listIndentLeft_ + ComAowagieTextPdfPdfDocument_Indentation_sectionIndentLeft;
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:moveTextX withFloat:-[l height]];
    
#line 897
    if ([l listSymbol] != nil) {
      ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_(self->graphics_, ComAowagieTextElement_ALIGN_LEFT, new_ComAowagieTextPhrase_initWithComAowagieTextChunk_([l listSymbol]), [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) getXTLM] - [l listIndent], [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) getYTLM], 0);
    }
    
#line 901
    (void) IOSObjectArray_Set(currentValues, 0, currentFont);
    
#line 903
    [self writeLineToContentWithComAowagieTextPdfPdfLine:l withComAowagieTextPdfPdfContentByte:self->text_ withComAowagieTextPdfPdfContentByte:self->graphics_ withNSObjectArray:currentValues withFloat:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getSpaceCharRatio]];
    
#line 905
    currentFont = (ComAowagieTextPdfPdfFont *) cast_chk(IOSObjectArray_Get(currentValues, 0), [ComAowagieTextPdfPdfFont class]);
    JrePlusAssignFloatF(&displacement, [l height]);
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:-moveTextX withFloat:0];
  }
  
#line 910
  self->lines_ = new_JavaUtilArrayList_init();
  return displacement;
}


#line 1352
jfloat ComAowagieTextPdfPdfDocument_indentLeft(ComAowagieTextPdfPdfDocument *self) {
  return [self leftWithFloat:((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentLeft_ + self->indentation_->listIndentLeft_ + self->indentation_->imageIndentLeft_ + ComAowagieTextPdfPdfDocument_Indentation_sectionIndentLeft];
}


#line 1362
jfloat ComAowagieTextPdfPdfDocument_indentRight(ComAowagieTextPdfPdfDocument *self) {
  return [self rightWithFloat:((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentRight_ + ComAowagieTextPdfPdfDocument_Indentation_sectionIndentRight + self->indentation_->imageIndentRight_];
}


#line 1372
jfloat ComAowagieTextPdfPdfDocument_indentTop(ComAowagieTextPdfPdfDocument *self) {
  return [self topWithFloat:((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentTop_];
}


#line 1486
void ComAowagieTextPdfPdfDocument_calculateOutlineCount(ComAowagieTextPdfPdfDocument *self) {
  if ([((JavaUtilArrayList *) nil_chk([((ComAowagieTextPdfPdfOutline *) nil_chk(self->rootOutline_)) getKids])) size] == 0) {
    return;
  }
  ComAowagieTextPdfPdfDocument_traverseOutlineCountWithComAowagieTextPdfPdfOutline_(self, self->rootOutline_);
}


#line 1497
void ComAowagieTextPdfPdfDocument_traverseOutlineCountWithComAowagieTextPdfPdfOutline_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfOutline *outline) {
  JavaUtilArrayList *kids = [((ComAowagieTextPdfPdfOutline *) nil_chk(outline)) getKids];
  ComAowagieTextPdfPdfOutline *parent = [outline parent];
  if ([((JavaUtilArrayList *) nil_chk(kids)) isEmpty]) {
    if (parent != nil) {
      [parent setCountWithInt:[parent getCount] + 1];
    }
  }
  else {
    for (jint k = 0; k < [kids size]; ++k) {
      ComAowagieTextPdfPdfDocument_traverseOutlineCountWithComAowagieTextPdfPdfOutline_(self, (ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k], [ComAowagieTextPdfPdfOutline class]));
    }
    if (parent != nil) {
      if ([outline isOpen]) {
        [parent setCountWithInt:[outline getCount] + [parent getCount] + 1];
      }
      else {
        [parent setCountWithInt:[parent getCount] + 1];
        [outline setCountWithInt:-[outline getCount]];
      }
    }
  }
}


#line 1525
void ComAowagieTextPdfPdfDocument_writeOutlines(ComAowagieTextPdfPdfDocument *self) {
  if ([((JavaUtilArrayList *) nil_chk([((ComAowagieTextPdfPdfOutline *) nil_chk(self->rootOutline_)) getKids])) size] == 0) {
    return;
  }
  ComAowagieTextPdfPdfDocument_outlineTreeWithComAowagieTextPdfPdfOutline_(self, self->rootOutline_);
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:self->rootOutline_ withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfOutline *) nil_chk(self->rootOutline_)) indirectReference]];
}


#line 1538
void ComAowagieTextPdfPdfDocument_outlineTreeWithComAowagieTextPdfPdfOutline_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfOutline *outline) {
  [((ComAowagieTextPdfPdfOutline *) nil_chk(outline)) setIndirectReferenceWithComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPdfIndirectReference]];
  if ([outline parent] != nil) {
    [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PARENT) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk([outline parent])) indirectReference]];
  }
  JavaUtilArrayList *kids = [outline getKids];
  jint size = [((JavaUtilArrayList *) nil_chk(kids)) size];
  for (jint k = 0; k < size; ++k) {
    ComAowagieTextPdfPdfDocument_outlineTreeWithComAowagieTextPdfPdfOutline_(self, (ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k], [ComAowagieTextPdfPdfOutline class]));
  }
  for (jint k = 0; k < size; ++k) {
    if (k > 0) {
      [((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k], [ComAowagieTextPdfPdfOutline class])))) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PREV) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k - 1], [ComAowagieTextPdfPdfOutline class])))) indirectReference]];
    }
    if (k < size - 1) {
      [((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k], [ComAowagieTextPdfPdfOutline class])))) putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NEXT) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k + 1], [ComAowagieTextPdfPdfOutline class])))) indirectReference]];
    }
  }
  if (size > 0) {
    [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FIRST) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:0], [ComAowagieTextPdfPdfOutline class])))) indirectReference]];
    [outline putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LAST) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfOutline *) nil_chk(((ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:size - 1], [ComAowagieTextPdfPdfOutline class])))) indirectReference]];
  }
  for (jint k = 0; k < size; ++k) {
    ComAowagieTextPdfPdfOutline *kid = (ComAowagieTextPdfPdfOutline *) cast_chk([kids getWithInt:k], [ComAowagieTextPdfPdfOutline class]);
    (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:kid withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfOutline *) nil_chk(kid)) indirectReference]];
  }
}


#line 1609
void ComAowagieTextPdfPdfDocument_localGotoWithNSString_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *name, jfloat llx, jfloat lly, jfloat urx, jfloat ury) {
  ComAowagieTextPdfPdfAction *action = ComAowagieTextPdfPdfDocument_getLocalGotoActionWithNSString_(self, name);
  [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) addPlainAnnotationWithComAowagieTextPdfPdfAnnotation:new_ComAowagieTextPdfPdfAnnotation_initWithComAowagieTextPdfPdfWriter_withFloat_withFloat_withFloat_withFloat_withComAowagieTextPdfPdfAction_(self->writer_, llx, lly, urx, ury, action)];
}


#line 1623
void ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withNSString_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *filename, NSString *name, jfloat llx, jfloat lly, jfloat urx, jfloat ury) {
  [((ComAowagieTextPdfInternalPdfAnnotationsImp *) nil_chk(self->annotationsImp_)) addPlainAnnotationWithComAowagieTextPdfPdfAnnotation:new_ComAowagieTextPdfPdfAnnotation_initWithComAowagieTextPdfPdfWriter_withFloat_withFloat_withFloat_withFloat_withComAowagieTextPdfPdfAction_(self->writer_, llx, lly, urx, ury, new_ComAowagieTextPdfPdfAction_initWithNSString_withNSString_(filename, name))];
}


#line 1636
void ComAowagieTextPdfPdfDocument_remoteGotoWithNSString_withInt_withFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfDocument *self, NSString *filename, jint page, jfloat llx, jfloat lly, jfloat urx, jfloat ury) {
  [self addAnnotationWithComAowagieTextPdfPdfAnnotation:new_ComAowagieTextPdfPdfAnnotation_initWithComAowagieTextPdfPdfWriter_withFloat_withFloat_withFloat_withFloat_withComAowagieTextPdfPdfAction_(self->writer_, llx, lly, urx, ury, new_ComAowagieTextPdfPdfAction_initWithNSString_withInt_(filename, page))];
}


#line 1657
ComAowagieTextPdfPdfAction *ComAowagieTextPdfPdfDocument_getLocalGotoActionWithNSString_(ComAowagieTextPdfPdfDocument *self, NSString *name) {
  ComAowagieTextPdfPdfAction *action;
  IOSObjectArray *obj = [((JavaUtilTreeMap *) nil_chk(self->localDestinations_)) getWithId:name];
  if (obj == nil) {
    obj = [IOSObjectArray newArrayWithLength:3 type:NSObject_class_()];
  }
  if (IOSObjectArray_Get(obj, 0) == nil) {
    if (IOSObjectArray_Get(obj, 1) == nil) {
      (void) IOSObjectArray_Set(obj, 1, [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getPdfIndirectReference]);
    }
    action = new_ComAowagieTextPdfPdfAction_initWithComAowagieTextPdfPdfIndirectReference_((ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(obj, 1), [ComAowagieTextPdfPdfIndirectReference class]));
    (void) IOSObjectArray_Set(obj, 0, action);
    (void) [self->localDestinations_ putWithId:name withId:obj];
  }
  else {
    action = (ComAowagieTextPdfPdfAction *) cast_chk(IOSObjectArray_Get(obj, 0), [ComAowagieTextPdfPdfAction class]);
  }
  return action;
}


#line 1686
jboolean ComAowagieTextPdfPdfDocument_localDestinationWithNSString_withComAowagieTextPdfPdfDestination_(ComAowagieTextPdfPdfDocument *self, NSString *name, ComAowagieTextPdfPdfDestination *destination) {
  IOSObjectArray *obj = [((JavaUtilTreeMap *) nil_chk(self->localDestinations_)) getWithId:name];
  if (obj == nil) {
    obj = [IOSObjectArray newArrayWithLength:3 type:NSObject_class_()];
  }
  if (IOSObjectArray_Get(obj, 2) != nil) {
    return false;
  }
  (void) IOSObjectArray_Set(obj, 2, destination);
  (void) [self->localDestinations_ putWithId:name withId:obj];
  [((ComAowagieTextPdfPdfDestination *) nil_chk(destination)) addPageWithComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getCurrentPage]];
  return true;
}


#line 1851
void ComAowagieTextPdfPdfDocument_setBoxSizeWithNSString_withComAowagieTextRectangle_(ComAowagieTextPdfPdfDocument *self, NSString *boxName, ComAowagieTextRectangle *size) {
  if (size == nil) {
    (void) [((JavaUtilHashMap *) nil_chk(self->boxSize_)) removeWithId:boxName];
  }
  else {
    
#line 1855
    (void) [((JavaUtilHashMap *) nil_chk(self->boxSize_)) putWithId:boxName withId:new_ComAowagieTextPdfPdfRectangle_initWithComAowagieTextRectangle_(size)];
  }
}


#line 1859
void ComAowagieTextPdfPdfDocument_setNewPageSizeAndMargins(ComAowagieTextPdfPdfDocument *self) {
  self->pageSize_ = self->nextPageSize_;
  if (self->marginMirroring_ && ([self getPageNumber] & 1) == 0) {
    self->marginRight_ = self->nextMarginLeft_;
    self->marginLeft_ = self->nextMarginRight_;
  }
  else {
    self->marginLeft_ = self->nextMarginLeft_;
    self->marginRight_ = self->nextMarginRight_;
  }
  if (self->marginMirroringTopBottom_ && ([self getPageNumber] & 1) == 0) {
    self->marginTop_ = self->nextMarginBottom_;
    self->marginBottom_ = self->nextMarginTop_;
  }
  else {
    self->marginTop_ = self->nextMarginTop_;
    self->marginBottom_ = self->nextMarginBottom_;
  }
}


#line 1978
void ComAowagieTextPdfPdfDocument_addWithComAowagieTextImage_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextImage *image) {
  
#line 1980
  if ([((ComAowagieTextImage *) nil_chk(image)) hasAbsoluteY]) {
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) addImageWithComAowagieTextImage:image];
    self->pageEmpty_ = false;
    return;
  }
  
#line 1987
  if (self->currentHeight_ != 0 && ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_ - [image getScaledHeight] < [self indentBottom]) {
    if (!self->strictImageSequence_ && self->imageWait_ == nil) {
      self->imageWait_ = image;
      return;
    }
    [self newPage];
    if (self->currentHeight_ != 0 && ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_ - [image getScaledHeight] < [self indentBottom]) {
      self->imageWait_ = image;
      return;
    }
  }
  self->pageEmpty_ = false;
  
#line 2000
  if (JreObjectEqualsEquals(image, self->imageWait_)) {
    self->imageWait_ = nil;
  }
  jboolean textwrap = ([image getAlignment] & ComAowagieTextImage_TEXTWRAP) == ComAowagieTextImage_TEXTWRAP &&
#line 2004
  !(([image getAlignment] & ComAowagieTextImage_MIDDLE) == ComAowagieTextImage_MIDDLE);
  jboolean underlying = ([image getAlignment] & ComAowagieTextImage_UNDERLYING) == ComAowagieTextImage_UNDERLYING;
  jfloat diff = self->leading_ / 2;
  if (textwrap) {
    JrePlusAssignFloatF(&diff, self->leading_);
  }
  jfloat lowerleft = ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_ - [image getScaledHeight] - diff;
  IOSFloatArray *mt = [image matrix];
  jfloat startPosition = ComAowagieTextPdfPdfDocument_indentLeft(self) - IOSFloatArray_Get(nil_chk(mt), 4);
  if (([image getAlignment] & ComAowagieTextImage_RIGHT) == ComAowagieTextImage_RIGHT) {
    startPosition = ComAowagieTextPdfPdfDocument_indentRight(self) - [image getScaledWidth] - IOSFloatArray_Get(mt, 4);
  }
  if (([image getAlignment] & ComAowagieTextImage_MIDDLE) == ComAowagieTextImage_MIDDLE) {
    startPosition = ComAowagieTextPdfPdfDocument_indentLeft(self) + (ComAowagieTextPdfPdfDocument_indentRight(self) - ComAowagieTextPdfPdfDocument_indentLeft(self) - [image getScaledWidth]) / 2 - IOSFloatArray_Get(mt, 4);
  }
  if ([image hasAbsoluteX]) {
    startPosition = [image getAbsoluteX];
  }
  if (textwrap) {
    if (self->imageEnd_ < 0 || self->imageEnd_ < self->currentHeight_ + [image getScaledHeight] + diff) {
      self->imageEnd_ = self->currentHeight_ + [image getScaledHeight] + diff;
    }
    if (([image getAlignment] & ComAowagieTextImage_RIGHT) == ComAowagieTextImage_RIGHT) {
      
#line 2028
      JrePlusAssignFloatF(&((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->imageIndentRight_, [image getScaledWidth] + [image getIndentationLeft]);
    }
    else {
      
#line 2032
      JrePlusAssignFloatF(&((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->imageIndentLeft_, [image getScaledWidth] + [image getIndentationRight]);
    }
  }
  else {
    if (([image getAlignment] & ComAowagieTextImage_RIGHT) == ComAowagieTextImage_RIGHT) {
      JreMinusAssignFloatF(&startPosition, [image getIndentationRight]);
    }
    else
#line 2038
    if (([image getAlignment] & ComAowagieTextImage_MIDDLE) == ComAowagieTextImage_MIDDLE) {
      JrePlusAssignFloatF(&startPosition, [image getIndentationLeft] - [image getIndentationRight]);
    }
    else {
      
#line 2041
      JrePlusAssignFloatF(&startPosition, [image getIndentationLeft]);
    }
  }
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) addImageWithComAowagieTextImage:image withFloat:IOSFloatArray_Get(mt, 0) withFloat:IOSFloatArray_Get(mt, 1) withFloat:IOSFloatArray_Get(mt, 2) withFloat:IOSFloatArray_Get(mt, 3) withFloat:startPosition withFloat:lowerleft - IOSFloatArray_Get(mt, 5)];
  if (!(textwrap || underlying)) {
    JrePlusAssignFloatF(&self->currentHeight_, [image getScaledHeight] + diff);
    ComAowagieTextPdfPdfDocument_flushLines(self);
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:-([image getScaledHeight] + diff)];
    ComAowagieTextPdfPdfDocument_newLine(self);
  }
}


#line 2168
void ComAowagieTextPdfPdfDocument_addPdfTableWithComAowagieTextTable_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextTable *t) {
  
#line 2170
  ComAowagieTextPdfPdfDocument_flushLines(self);
  
#line 2172
  ComAowagieTextPdfPdfTable *table = new_ComAowagieTextPdfPdfTable_initPackagePrivateWithComAowagieTextTable_withFloat_withFloat_withFloat_(t, ComAowagieTextPdfPdfDocument_indentLeft(self), ComAowagieTextPdfPdfDocument_indentRight(self), ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_);
  ComAowagieTextPdfPdfDocument_RenderingContext *ctx = new_ComAowagieTextPdfPdfDocument_RenderingContext_init();
  ctx->pagetop_ = ComAowagieTextPdfPdfDocument_indentTop(self);
  ctx->oldHeight_ = self->currentHeight_;
  ctx->cellGraphics_ = new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(self->writer_);
  ctx->rowspanMap_ = new_JavaUtilLinkedHashMap_init();
  ctx->table_ = table;
  
#line 2181
  ComAowagieTextPdfPdfCell *cell;
  
#line 2184
  JavaUtilArrayList *headercells = [table getHeaderCells];
  JavaUtilArrayList *cells = [table getCells];
  JavaUtilArrayList *rows = ComAowagieTextPdfPdfDocument_extractRowsWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, cells, ctx);
  jboolean isContinue = false;
  while (![((JavaUtilArrayList *) nil_chk(cells)) isEmpty]) {
    
#line 2190
    ctx->lostTableBottom_ = 0;
    
#line 2193
    jboolean cellsShown = false;
    
#line 2196
    id<JavaUtilIterator> iterator = [((JavaUtilArrayList *) nil_chk(rows)) iterator];
    
#line 2198
    jboolean atLeastOneFits = false;
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      JavaUtilArrayList *row = (JavaUtilArrayList *) cast_chk([iterator next], [JavaUtilArrayList class]);
      ComAowagieTextPdfPdfDocument_analyzeRowWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, rows, ctx);
      ComAowagieTextPdfPdfDocument_renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext_withJavaUtilList_withBoolean_(self, ctx, row, [table hasToFitPageCells] & atLeastOneFits);
      
#line 2204
      if (!ComAowagieTextPdfPdfDocument_mayBeRemovedWithJavaUtilArrayList_(self, row)) {
        break;
      }
      ComAowagieTextPdfPdfDocument_consumeRowspanWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(self, row, ctx);
      [iterator remove];
      atLeastOneFits = true;
    }
    
#line 2213
    [cells clear];
    id<JavaUtilSet> opt = new_JavaUtilHashSet_init();
    iterator = [rows iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      JavaUtilArrayList *row = (JavaUtilArrayList *) cast_chk([iterator next], [JavaUtilArrayList class]);
      
#line 2219
      id<JavaUtilIterator> cellIterator = [((JavaUtilArrayList *) nil_chk(row)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(cellIterator)) hasNext]) {
        cell = (ComAowagieTextPdfPdfCell *) cast_chk([cellIterator next], [ComAowagieTextPdfPdfCell class]);
        
#line 2223
        if (![opt containsWithId:cell]) {
          [cells addWithId:cell];
          [opt addWithId:cell];
        }
      }
    }
    
#line 2231
    ComAowagieTextRectangle *tablerec = new_ComAowagieTextRectangle_initWithComAowagieTextRectangle_(table);
    [tablerec setBorderWithInt:[table getBorder]];
    [tablerec setBorderWidthWithFloat:[table getBorderWidth]];
    [tablerec setBorderColorWithHarmonyJavaAwtColor:[table getBorderColor]];
    [tablerec setBackgroundColorWithHarmonyJavaAwtColor:[table getBackgroundColor]];
    ComAowagieTextPdfPdfContentByte *under = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getDirectContentUnder];
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(under)) rectangleWithComAowagieTextRectangle:[tablerec rectangleWithFloat:[self top] withFloat:[self indentBottom]]];
    [under addWithComAowagieTextPdfPdfContentByte:ctx->cellGraphics_];
    
#line 2241
    [tablerec setBackgroundColorWithHarmonyJavaAwtColor:nil];
    tablerec = [tablerec rectangleWithFloat:[self top] withFloat:[self indentBottom]];
    [((ComAowagieTextRectangle *) nil_chk(tablerec)) setBorderWithInt:[table getBorder]];
    [under rectangleWithComAowagieTextRectangle:tablerec];
    
#line 2247
    ctx->cellGraphics_ = new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(nil);
    
#line 2250
    if (![rows isEmpty]) {
      isContinue = true;
      [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) setLineWidthWithFloat:[table getBorderWidth]];
      if (cellsShown && ([table getBorder] & ComAowagieTextRectangle_BOTTOM) == ComAowagieTextRectangle_BOTTOM) {
        
#line 2257
        HarmonyJavaAwtColor *tColor = [table getBorderColor];
        if (tColor != nil) {
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) setColorStrokeWithHarmonyJavaAwtColor:tColor];
        }
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) moveToWithFloat:[table getLeft] withFloat:JavaLangMath_maxWithFloat_withFloat_([table getBottom], [self indentBottom])];
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) lineToWithFloat:[table getRight] withFloat:JavaLangMath_maxWithFloat_withFloat_([table getBottom], [self indentBottom])];
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) stroke];
        if (tColor != nil) {
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) resetRGBColorStroke];
        }
      }
      
#line 2270
      self->pageEmpty_ = false;
      jfloat difference = ctx->lostTableBottom_;
      
#line 2274
      [self newPage];
      
#line 2277
      jfloat heightCorrection = 0;
      jboolean somethingAdded = false;
      if (self->currentHeight_ > 0) {
        heightCorrection = 6;
        JrePlusAssignFloatF(&self->currentHeight_, heightCorrection);
        somethingAdded = true;
        ComAowagieTextPdfPdfDocument_newLine(self);
        ComAowagieTextPdfPdfDocument_flushLines(self);
        ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentTop_ = self->currentHeight_ - self->leading_;
        self->currentHeight_ = 0;
      }
      else {
        ComAowagieTextPdfPdfDocument_flushLines(self);
      }
      
#line 2293
      jint size = [((JavaUtilArrayList *) nil_chk(headercells)) size];
      if (size > 0) {
        
#line 2296
        cell = (ComAowagieTextPdfPdfCell *) cast_chk([headercells getWithInt:0], [ComAowagieTextPdfPdfCell class]);
        jfloat oldTop = [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) getTopWithFloat:0];
        
#line 2299
        for (jint i = 0; i < size; i++) {
          cell = (ComAowagieTextPdfPdfCell *) cast_chk([headercells getWithInt:i], [ComAowagieTextPdfPdfCell class]);
          
#line 2302
          [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) setTopWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) - oldTop + [cell getTopWithFloat:0]];
          [cell setBottomWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) - oldTop + [cell getBottomWithFloat:0]];
          ctx->pagetop_ = [cell getBottom];
          
#line 2306
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(ctx->cellGraphics_)) rectangleWithComAowagieTextRectangle:[cell rectangleWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) withFloat:[self indentBottom]]];
          
#line 2308
          JavaUtilArrayList *images = [cell getImagesWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) withFloat:[self indentBottom]];
          for (id<JavaUtilIterator> im = [((JavaUtilArrayList *) nil_chk(images)) iterator]; [((id<JavaUtilIterator>) nil_chk(im)) hasNext]; ) {
            cellsShown = true;
            ComAowagieTextImage *image = (ComAowagieTextImage *) cast_chk([im next], [ComAowagieTextImage class]);
            [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) addImageWithComAowagieTextImage:image];
          }
          self->lines_ = [cell getLinesWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) withFloat:[self indentBottom]];
          jfloat cellTop = [cell getTopWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self)];
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:cellTop - heightCorrection];
          jfloat cellDisplacement = ComAowagieTextPdfPdfDocument_flushLines(self) - cellTop + heightCorrection;
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:cellDisplacement];
        }
        
#line 2321
        self->currentHeight_ = ComAowagieTextPdfPdfDocument_indentTop(self) - ctx->pagetop_ + [table cellspacing];
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:ctx->pagetop_ - ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_];
      }
      else {
        if (somethingAdded) {
          ctx->pagetop_ = ComAowagieTextPdfPdfDocument_indentTop(self);
          [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:-[table cellspacing]];
        }
      }
      ctx->oldHeight_ = self->currentHeight_ - heightCorrection;
      
#line 2333
      size = JavaLangMath_minWithInt_withInt_([cells size], [table columns]);
      jint i = 0;
      while (i < size) {
        cell = [cells getWithInt:i];
        if ([((ComAowagieTextPdfPdfCell *) nil_chk(cell)) getTopWithFloat:-[table cellspacing]] > ctx->lostTableBottom_) {
          jfloat newBottom = ctx->pagetop_ - difference + [cell getBottom];
          jfloat neededHeight = [cell remainingHeight];
          if (newBottom > ctx->pagetop_ - neededHeight) {
            JrePlusAssignFloatF(&difference, newBottom - (ctx->pagetop_ - neededHeight));
          }
        }
        i++;
      }
      size = [cells size];
      [table setTopWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self)];
      [table setBottomWithFloat:ctx->pagetop_ - difference + [table getBottomWithFloat:[table cellspacing]]];
      for (i = 0; i < size; i++) {
        cell = [cells getWithInt:i];
        jfloat newBottom = ctx->pagetop_ - difference + [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) getBottom];
        jfloat newTop = ctx->pagetop_ - difference + [cell getTopWithFloat:-[table cellspacing]];
        if (newTop > ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_) {
          newTop = ComAowagieTextPdfPdfDocument_indentTop(self) - self->currentHeight_;
        }
        
#line 2357
        [cell setTopWithFloat:newTop];
        [cell setBottomWithFloat:newBottom];
      }
    }
  }
  
#line 2363
  jfloat tableHeight = [table getTop] - [table getBottom];
  
#line 2366
  if (isContinue) {
    self->currentHeight_ = tableHeight;
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:-(tableHeight - ctx->oldHeight_ * 2)];
  }
  else {
    
#line 2370
    self->currentHeight_ = ctx->oldHeight_ + tableHeight;
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:-tableHeight];
  }
  
#line 2374
  self->pageEmpty_ = false;
}


#line 2377
void ComAowagieTextPdfPdfDocument_analyzeRowWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *rows, ComAowagieTextPdfPdfDocument_RenderingContext *ctx) {
  ((ComAowagieTextPdfPdfDocument_RenderingContext *) nil_chk(ctx))->maxCellBottom_ = [self indentBottom];
  
#line 2381
  jint rowIndex = 0;
  
#line 2383
  JavaUtilArrayList *row = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(rows)) getWithInt:rowIndex], [JavaUtilArrayList class]);
  jint maxRowspan = 1;
  id<JavaUtilIterator> iterator = [((JavaUtilArrayList *) nil_chk(row)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    ComAowagieTextPdfPdfCell *cell = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
    maxRowspan = JavaLangMath_maxWithInt_withInt_(ComAowagieTextPdfPdfDocument_RenderingContext_currentRowspanWithComAowagieTextPdfPdfCell_(ctx, cell), maxRowspan);
  }
  rowIndex += maxRowspan;
  
#line 2392
  jboolean useTop = true;
  if (rowIndex == [rows size]) {
    rowIndex = [rows size] - 1;
    useTop = false;
  }
  
#line 2398
  if (rowIndex < 0 || rowIndex >= [rows size]) {
    return;
  }
  
#line 2402
  row = (JavaUtilArrayList *) cast_chk([rows getWithInt:rowIndex], [JavaUtilArrayList class]);
  iterator = [((JavaUtilArrayList *) nil_chk(row)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    ComAowagieTextPdfPdfCell *cell = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
    ComAowagieTextRectangle *cellRect = [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) rectangleWithFloat:ctx->pagetop_ withFloat:[self indentBottom]];
    if (useTop) {
      ctx->maxCellBottom_ = JavaLangMath_maxWithFloat_withFloat_(ctx->maxCellBottom_, [((ComAowagieTextRectangle *) nil_chk(cellRect)) getTop]);
    }
    else {
      
#line 2410
      if (ComAowagieTextPdfPdfDocument_RenderingContext_currentRowspanWithComAowagieTextPdfPdfCell_(ctx, cell) == 1) {
        ctx->maxCellBottom_ = JavaLangMath_maxWithFloat_withFloat_(ctx->maxCellBottom_, [((ComAowagieTextRectangle *) nil_chk(cellRect)) getBottom]);
      }
    }
  }
}


#line 2417
jboolean ComAowagieTextPdfPdfDocument_mayBeRemovedWithJavaUtilArrayList_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *row) {
  id<JavaUtilIterator> iterator = [((JavaUtilArrayList *) nil_chk(row)) iterator];
  jboolean mayBeRemoved = true;
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    ComAowagieTextPdfPdfCell *cell = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
    
#line 2423
    mayBeRemoved &= [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) mayBeRemoved];
  }
  return mayBeRemoved;
}


#line 2428
void ComAowagieTextPdfPdfDocument_consumeRowspanWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *row, ComAowagieTextPdfPdfDocument_RenderingContext *ctx) {
  id<JavaUtilIterator> iterator = [((JavaUtilArrayList *) nil_chk(row)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    ComAowagieTextPdfPdfCell *c = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
    [((ComAowagieTextPdfPdfDocument_RenderingContext *) nil_chk(ctx)) consumeRowspanWithComAowagieTextPdfPdfCell:c];
  }
}

JavaUtilArrayList *ComAowagieTextPdfPdfDocument_extractRowsWithJavaUtilArrayList_withComAowagieTextPdfPdfDocument_RenderingContext_(ComAowagieTextPdfPdfDocument *self, JavaUtilArrayList *cells, ComAowagieTextPdfPdfDocument_RenderingContext *ctx) {
  ComAowagieTextPdfPdfCell *cell;
  ComAowagieTextPdfPdfCell *previousCell = nil;
  JavaUtilArrayList *rows = new_JavaUtilArrayList_init();
  id<JavaUtilList> rowCells = new_JavaUtilArrayList_init();
  
#line 2442
  id<JavaUtilIterator> iterator = [((JavaUtilArrayList *) nil_chk(cells)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    cell = [iterator next];
    
#line 2446
    jboolean isAdded = false;
    
#line 2448
    jboolean isEndOfRow = ![iterator hasNext];
    jboolean isCurrentCellPartOfRow = ![iterator hasNext];
    
#line 2451
    if (previousCell != nil) {
      if ([((ComAowagieTextPdfPdfCell *) nil_chk(cell)) getLeft] <= [previousCell getLeft]) {
        isEndOfRow = true;
        isCurrentCellPartOfRow = false;
      }
    }
    
#line 2458
    if (isCurrentCellPartOfRow) {
      [rowCells addWithId:cell];
      isAdded = true;
    }
    
#line 2463
    if (isEndOfRow) {
      if (![rowCells isEmpty]) {
        
#line 2466
        [rows addWithId:rowCells];
      }
      
#line 2470
      rowCells = new_JavaUtilArrayList_init();
    }
    
#line 2473
    if (!isAdded) {
      [rowCells addWithId:cell];
    }
    
#line 2477
    previousCell = cell;
  }
  
#line 2480
  if (![rowCells isEmpty]) {
    [rows addWithId:rowCells];
  }
  
#line 2485
  for (jint i = [rows size] - 1; i >= 0; i--) {
    JavaUtilArrayList *row = (JavaUtilArrayList *) cast_chk([rows getWithInt:i], [JavaUtilArrayList class]);
    
#line 2488
    for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(row)) size]; j++) {
      ComAowagieTextPdfPdfCell *c = (ComAowagieTextPdfPdfCell *) cast_chk([row getWithInt:j], [ComAowagieTextPdfPdfCell class]);
      jint rowspan = [((ComAowagieTextPdfPdfCell *) nil_chk(c)) rowspan];
      
#line 2492
      for (jint k = 1; k < rowspan && [rows size] < i + k; k++) {
        JavaUtilArrayList *spannedRow = (JavaUtilArrayList *) cast_chk([rows getWithInt:i + k], [JavaUtilArrayList class]);
        if ([((JavaUtilArrayList *) nil_chk(spannedRow)) size] > j) {
          [spannedRow addWithInt:j withId:c];
        }
      }
    }
  }
  
#line 2501
  return rows;
}


#line 2504
void ComAowagieTextPdfPdfDocument_renderCellsWithComAowagieTextPdfPdfDocument_RenderingContext_withJavaUtilList_withBoolean_(ComAowagieTextPdfPdfDocument *self, ComAowagieTextPdfPdfDocument_RenderingContext *ctx, id<JavaUtilList> cells, jboolean hasToFit) {
  ComAowagieTextPdfPdfCell *cell;
  id<JavaUtilIterator> iterator;
  if (hasToFit) {
    iterator = [((id<JavaUtilList>) nil_chk(cells)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      cell = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
      if (![((ComAowagieTextPdfPdfCell *) nil_chk(cell)) isHeader]) {
        if ([cell getBottom] < [self indentBottom]) {
          return;
        }
      }
    }
  }
  iterator = [((id<JavaUtilList>) nil_chk(cells)) iterator];
  
#line 2520
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    cell = (ComAowagieTextPdfPdfCell *) cast_chk([iterator next], [ComAowagieTextPdfPdfCell class]);
    if (!ComAowagieTextPdfPdfDocument_RenderingContext_isCellRenderedOnPageWithComAowagieTextPdfPdfCell_withInt_(nil_chk(ctx), cell, [self getPageNumber])) {
      
#line 2524
      jfloat correction = 0;
      if (ComAowagieTextPdfPdfDocument_RenderingContext_numCellRenderedWithComAowagieTextPdfPdfCell_(ctx, cell) >= 1) {
        correction = 1.0f;
      }
      
#line 2529
      self->lines_ = [((ComAowagieTextPdfPdfCell *) nil_chk(cell)) getLinesWithFloat:ctx->pagetop_ withFloat:[self indentBottom] - correction];
      
#line 2532
      if (self->lines_ != nil && ![self->lines_ isEmpty]) {
        
#line 2534
        jfloat cellTop = [cell getTopWithFloat:ctx->pagetop_ - ctx->oldHeight_];
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:cellTop];
        jfloat cellDisplacement = ComAowagieTextPdfPdfDocument_flushLines(self) - cellTop;
        
#line 2538
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:cellDisplacement];
        if (ctx->oldHeight_ + cellDisplacement > self->currentHeight_) {
          self->currentHeight_ = ctx->oldHeight_ + cellDisplacement;
        }
        
#line 2543
        ComAowagieTextPdfPdfDocument_RenderingContext_cellRenderedWithComAowagieTextPdfPdfCell_withInt_(ctx, cell, [self getPageNumber]);
      }
      jfloat indentBottom = JavaLangMath_maxWithFloat_withFloat_([cell getBottom], [self indentBottom]);
      ComAowagieTextRectangle *tableRect = [((ComAowagieTextPdfPdfTable *) nil_chk(ctx->table_)) rectangleWithFloat:ctx->pagetop_ withFloat:[self indentBottom]];
      indentBottom = JavaLangMath_maxWithFloat_withFloat_([((ComAowagieTextRectangle *) nil_chk(tableRect)) getBottom], indentBottom);
      
#line 2550
      ComAowagieTextRectangle *cellRect = [cell rectangleWithFloat:[tableRect getTop] withFloat:indentBottom];
      
#line 2552
      if ([((ComAowagieTextRectangle *) nil_chk(cellRect)) getHeight] > 0) {
        ctx->lostTableBottom_ = indentBottom;
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(ctx->cellGraphics_)) rectangleWithComAowagieTextRectangle:cellRect];
      }
      
#line 2558
      JavaUtilArrayList *images = [cell getImagesWithFloat:ctx->pagetop_ withFloat:[self indentBottom]];
      for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(images)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        ComAowagieTextImage *image = (ComAowagieTextImage *) cast_chk([i next], [ComAowagieTextImage class]);
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) addImageWithComAowagieTextImage:image];
      }
    }
  }
}


#line 2581
void ComAowagieTextPdfPdfDocument_doFooter(ComAowagieTextPdfPdfDocument *self) {
  if (self->footer_ == nil) {
    return;
  }
  
#line 2587
  jfloat tmpIndentLeft = ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentLeft_;
  jfloat tmpIndentRight = self->indentation_->indentRight_;
  
#line 2590
  jfloat tmpListIndentLeft = self->indentation_->listIndentLeft_;
  jfloat tmpImageIndentLeft = self->indentation_->imageIndentLeft_;
  jfloat tmpImageIndentRight = self->indentation_->imageIndentRight_;
  
#line 2595
  self->indentation_->indentLeft_ = self->indentation_->indentRight_ = 0;
  
#line 2597
  self->indentation_->listIndentLeft_ = 0;
  self->indentation_->imageIndentLeft_ = 0;
  self->indentation_->imageIndentRight_ = 0;
  
#line 2602
  [self->footer_ setPageNumberWithInt:self->pageN_];
  self->leading_ = [((ComAowagieTextParagraph *) nil_chk([((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) paragraph])) getTotalLeading];
  [self addWithComAowagieTextElement:[((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) paragraph]];
  
#line 2606
  self->indentation_->indentBottom_ = self->currentHeight_;
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:[self left] withFloat:[self indentBottom]];
  ComAowagieTextPdfPdfDocument_flushLines(self);
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:-[self left] withFloat:-[self bottom]];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) setTopWithFloat:[self bottomWithFloat:self->currentHeight_]];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) setBottomWithFloat:[self bottom] - 0.75f * self->leading_];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) setLeftWithFloat:[self left]];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->footer_)) setRightWithFloat:[self right]];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) rectangleWithComAowagieTextRectangle:self->footer_];
  self->indentation_->indentBottom_ = self->currentHeight_ + self->leading_ * 2;
  self->currentHeight_ = 0;
  
#line 2618
  self->indentation_->indentLeft_ = tmpIndentLeft;
  self->indentation_->indentRight_ = tmpIndentRight;
  
#line 2621
  self->indentation_->listIndentLeft_ = tmpListIndentLeft;
  self->indentation_->imageIndentLeft_ = tmpImageIndentLeft;
  self->indentation_->imageIndentRight_ = tmpImageIndentRight;
}


#line 2628
void ComAowagieTextPdfPdfDocument_doHeader(ComAowagieTextPdfPdfDocument *self) {
  
#line 2630
  if (self->header_ == nil) {
    return;
  }
  
#line 2635
  jfloat tmpIndentLeft = ((ComAowagieTextPdfPdfDocument_Indentation *) nil_chk(self->indentation_))->indentLeft_;
  jfloat tmpIndentRight = self->indentation_->indentRight_;
  
#line 2638
  jfloat tmpListIndentLeft = self->indentation_->listIndentLeft_;
  jfloat tmpImageIndentLeft = self->indentation_->imageIndentLeft_;
  jfloat tmpImageIndentRight = self->indentation_->imageIndentRight_;
  
#line 2642
  self->indentation_->indentLeft_ = self->indentation_->indentRight_ = 0;
  
#line 2644
  self->indentation_->listIndentLeft_ = 0;
  self->indentation_->imageIndentLeft_ = 0;
  self->indentation_->imageIndentRight_ = 0;
  
#line 2649
  [self->header_ setPageNumberWithInt:self->pageN_];
  self->leading_ = [((ComAowagieTextParagraph *) nil_chk([((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) paragraph])) getTotalLeading];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->text_)) moveTextWithFloat:0 withFloat:self->leading_];
  [self addWithComAowagieTextElement:[((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) paragraph]];
  ComAowagieTextPdfPdfDocument_newLine(self);
  self->indentation_->indentTop_ = self->currentHeight_ - self->leading_;
  [((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) setTopWithFloat:[self top] + self->leading_];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) setBottomWithFloat:ComAowagieTextPdfPdfDocument_indentTop(self) + self->leading_ * 2 / 3];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) setLeftWithFloat:[self left]];
  [((ComAowagieTextHeaderFooter *) nil_chk(self->header_)) setRightWithFloat:[self right]];
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->graphics_)) rectangleWithComAowagieTextRectangle:self->header_];
  ComAowagieTextPdfPdfDocument_flushLines(self);
  self->currentHeight_ = 0;
  
#line 2664
  self->indentation_->indentLeft_ = tmpIndentLeft;
  self->indentation_->indentRight_ = tmpIndentRight;
  
#line 2667
  self->indentation_->listIndentLeft_ = tmpListIndentLeft;
  self->indentation_->imageIndentLeft_ = tmpImageIndentLeft;
  self->indentation_->imageIndentRight_ = tmpImageIndentRight;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDocument)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java"


#line 109
@implementation ComAowagieTextPdfPdfDocument_PdfInfo


#line 116
- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(self, globalDate);
  return self;
}


#line 130
- (void)addTitleWithNSString:(NSString *)title {
  ComAowagieTextPdfPdfDocument_PdfInfo_addTitleWithNSString_(self, title);
}


#line 146
- (void)addProducer {
  ComAowagieTextPdfPdfDocument_PdfInfo_addProducer(self);
}


#line 155
- (void)addCreationDateWithJavaUtilCalendar:(JavaUtilCalendar *)globalDate {
  ComAowagieTextPdfPdfDocument_PdfInfo_addCreationDateWithJavaUtilCalendar_(self, globalDate);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCalendar:);
  methods[1].selector = @selector(addTitleWithNSString:);
  methods[2].selector = @selector(addProducer);
  methods[3].selector = @selector(addCreationDateWithJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LJavaUtilCalendar;", "addTitle", "LNSString;", "addCreationDate", "LComAowagieTextPdfPdfDocument;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDocument_PdfInfo = { "PdfInfo", "com.aowagie.text.pdf", ptrTable, methods, NULL, 7, 0xa, 4, 0, 4, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDocument_PdfInfo;
}

@end


#line 116
void ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(ComAowagieTextPdfPdfDocument_PdfInfo *self, JavaUtilCalendar *globalDate) {
  ComAowagieTextPdfPdfDictionary_init(self);
  ComAowagieTextPdfPdfDocument_PdfInfo_addProducer(self);
  ComAowagieTextPdfPdfDocument_PdfInfo_addCreationDateWithJavaUtilCalendar_(self, globalDate);
}


#line 116
ComAowagieTextPdfPdfDocument_PdfInfo *new_ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(JavaUtilCalendar *globalDate) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDocument_PdfInfo, initWithJavaUtilCalendar_, globalDate)
}


#line 116
ComAowagieTextPdfPdfDocument_PdfInfo *create_ComAowagieTextPdfPdfDocument_PdfInfo_initWithJavaUtilCalendar_(JavaUtilCalendar *globalDate) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDocument_PdfInfo, initWithJavaUtilCalendar_, globalDate)
}


#line 130
void ComAowagieTextPdfPdfDocument_PdfInfo_addTitleWithNSString_(ComAowagieTextPdfPdfDocument_PdfInfo *self, NSString *title) {
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TITLE) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(title, ComAowagieTextPdfPdfObject_TEXT_UNICODE)];
}


#line 146
void ComAowagieTextPdfPdfDocument_PdfInfo_addProducer(ComAowagieTextPdfPdfDocument_PdfInfo *self) {
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PRODUCER) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_(ComAowagieTextDocument_getVersion())];
}


#line 155
void ComAowagieTextPdfPdfDocument_PdfInfo_addCreationDateWithJavaUtilCalendar_(ComAowagieTextPdfPdfDocument_PdfInfo *self, JavaUtilCalendar *globalDate) {
  ComAowagieTextPdfPdfString *date = new_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(globalDate);
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CREATIONDATE) withComAowagieTextPdfPdfObject:date];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, MODDATE) withComAowagieTextPdfPdfObject:date];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDocument_PdfInfo)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java"


#line 178
@implementation ComAowagieTextPdfPdfDocument_PdfCatalog


#line 190
- (instancetype)initWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)pages
                               withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfPdfDocument_PdfCatalog_initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_(self, pages, writer);
  return self;
}


#line 203
- (void)addNamesWithJavaUtilTreeMap:(JavaUtilTreeMap *)localDestinations
                withJavaUtilHashMap:(JavaUtilHashMap *)documentLevelJS
                withJavaUtilHashMap:(JavaUtilHashMap *)documentFileAttachment
     withComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfPdfDocument_PdfCatalog_addNamesWithJavaUtilTreeMap_withJavaUtilHashMap_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(self, localDestinations, documentLevelJS, documentFileAttachment, writer);
}


#line 248
- (void)setOpenActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action {
  ComAowagieTextPdfPdfDocument_PdfCatalog_setOpenActionWithComAowagieTextPdfPdfAction_(self, action);
}


#line 257
- (void)setAdditionalActionsWithComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)actions {
  ComAowagieTextPdfPdfDocument_PdfCatalog_setAdditionalActionsWithComAowagieTextPdfPdfDictionary_(self, actions);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfIndirectReference:withComAowagieTextPdfPdfWriter:);
  methods[1].selector = @selector(addNamesWithJavaUtilTreeMap:withJavaUtilHashMap:withJavaUtilHashMap:withComAowagieTextPdfPdfWriter:);
  methods[2].selector = @selector(setOpenActionWithComAowagieTextPdfPdfAction:);
  methods[3].selector = @selector(setAdditionalActionsWithComAowagieTextPdfPdfDictionary:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "writer_", "LComAowagieTextPdfPdfWriter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfIndirectReference;LComAowagieTextPdfPdfWriter;", "addNames", "LJavaUtilTreeMap;LJavaUtilHashMap;LJavaUtilHashMap;LComAowagieTextPdfPdfWriter;", "(Ljava/util/TreeMap<Ljava/lang/String;[Ljava/lang/Object;>;Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/PdfIndirectReference;>;Ljava/util/HashMap<Ljava/lang/String;Lcom/aowagie/text/pdf/PdfIndirectReference;>;Lcom/aowagie/text/pdf/PdfWriter;)V", "setOpenAction", "LComAowagieTextPdfPdfAction;", "setAdditionalActions", "LComAowagieTextPdfPdfDictionary;", "LComAowagieTextPdfPdfDocument;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDocument_PdfCatalog = { "PdfCatalog", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 4, 1, 8, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDocument_PdfCatalog;
}

@end


#line 190
void ComAowagieTextPdfPdfDocument_PdfCatalog_initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, ComAowagieTextPdfPdfIndirectReference *pages, ComAowagieTextPdfPdfWriter *writer) {
  ComAowagieTextPdfPdfDictionary_initWithComAowagieTextPdfPdfName_(self, JreLoadStatic(ComAowagieTextPdfPdfDictionary, CATALOG));
  self->writer_ = writer;
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, PAGES) withComAowagieTextPdfPdfObject:pages];
}


#line 190
ComAowagieTextPdfPdfDocument_PdfCatalog *new_ComAowagieTextPdfPdfDocument_PdfCatalog_initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfIndirectReference *pages, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDocument_PdfCatalog, initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_, pages, writer)
}


#line 190
ComAowagieTextPdfPdfDocument_PdfCatalog *create_ComAowagieTextPdfPdfDocument_PdfCatalog_initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfIndirectReference *pages, ComAowagieTextPdfPdfWriter *writer) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDocument_PdfCatalog, initWithComAowagieTextPdfPdfIndirectReference_withComAowagieTextPdfPdfWriter_, pages, writer)
}


#line 203
void ComAowagieTextPdfPdfDocument_PdfCatalog_addNamesWithJavaUtilTreeMap_withJavaUtilHashMap_withJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, JavaUtilTreeMap *localDestinations, JavaUtilHashMap *documentLevelJS, JavaUtilHashMap *documentFileAttachment, ComAowagieTextPdfPdfWriter *writer) {
  if ([((JavaUtilTreeMap *) nil_chk(localDestinations)) isEmpty] && [((JavaUtilHashMap *) nil_chk(documentLevelJS)) isEmpty] && [((JavaUtilHashMap *) nil_chk(documentFileAttachment)) isEmpty]) {
    return;
  }
  @try {
    ComAowagieTextPdfPdfDictionary *names = new_ComAowagieTextPdfPdfDictionary_init();
    if (![localDestinations isEmpty]) {
      ComAowagieTextPdfPdfArray *ar = new_ComAowagieTextPdfPdfArray_init();
      for (id __strong element in nil_chk([localDestinations entrySet])) {
        id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check(element, JavaUtilMap_Entry_class_());
        NSString *name = (NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]);
        IOSObjectArray *obj = (IOSObjectArray *) cast_check([entry_ getValue], IOSClass_arrayType(NSObject_class_(), 1));
        if (IOSObjectArray_Get(nil_chk(obj), 2) == nil) {
          continue;
        }
        ComAowagieTextPdfPdfIndirectReference *ref = (ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(obj, 1), [ComAowagieTextPdfPdfIndirectReference class]);
        [ar addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithNSString_withNSString_(name, nil)];
        [ar addWithComAowagieTextPdfPdfObject:ref];
      }
      if ([ar size] > 0) {
        ComAowagieTextPdfPdfDictionary *dests = new_ComAowagieTextPdfPdfDictionary_init();
        [dests putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAMES) withComAowagieTextPdfPdfObject:ar];
        [names putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DESTS) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:dests])) getIndirectReference]];
      }
    }
    if (![((JavaUtilHashMap *) nil_chk(documentLevelJS)) isEmpty]) {
      ComAowagieTextPdfPdfDictionary *tree = ComAowagieTextPdfPdfNameTree_writeTreeWithJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(documentLevelJS, writer);
      [names putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JAVASCRIPT) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:tree])) getIndirectReference]];
    }
    if (![((JavaUtilHashMap *) nil_chk(documentFileAttachment)) isEmpty]) {
      [names putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, EMBEDDEDFILES) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:ComAowagieTextPdfPdfNameTree_writeTreeWithJavaUtilHashMap_withComAowagieTextPdfPdfWriter_(documentFileAttachment, writer)])) getIndirectReference]];
    }
    if ([names size] > 0) {
      [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, NAMES) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(writer)) addToBodyWithComAowagieTextPdfPdfObject:names])) getIndirectReference]];
    }
  }
  @catch (JavaIoIOException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 248
void ComAowagieTextPdfPdfDocument_PdfCatalog_setOpenActionWithComAowagieTextPdfPdfAction_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, ComAowagieTextPdfPdfAction *action) {
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, OPENACTION) withComAowagieTextPdfPdfObject:action];
}


#line 257
void ComAowagieTextPdfPdfDocument_PdfCatalog_setAdditionalActionsWithComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPdfDocument_PdfCatalog *self, ComAowagieTextPdfPdfDictionary *actions) {
  @try {
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, AA) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:actions])) getIndirectReference]];
  }
  @catch (
#line 260
  JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDocument_PdfCatalog)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java"


#line 1316
@implementation ComAowagieTextPdfPdfDocument_Indentation

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 1316
- (instancetype)init {
  ComAowagieTextPdfPdfDocument_Indentation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "indentLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sectionIndentLeft", "F", .constantValue.asFloat = ComAowagieTextPdfPdfDocument_Indentation_sectionIndentLeft, 0x12, 0, -1, -1, -1 },
    { "listIndentLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageIndentLeft_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indentRight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sectionIndentRight", "F", .constantValue.asFloat = ComAowagieTextPdfPdfDocument_Indentation_sectionIndentRight, 0x12, 1, -1, -1, -1 },
    { "imageIndentRight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indentTop_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indentBottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "sectionIndentLeft", "sectionIndentRight", "LComAowagieTextPdfPdfDocument;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDocument_Indentation = { "Indentation", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 1, 9, 2, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDocument_Indentation;
}

@end


#line 1316
void ComAowagieTextPdfPdfDocument_Indentation_init(ComAowagieTextPdfPdfDocument_Indentation *self) {
  NSObject_init(self);
  self->indentLeft_ =
#line 1319
  0;
  self->listIndentLeft_ =
#line 1325
  0;
  self->imageIndentLeft_ =
#line 1328
  0;
  self->indentRight_ =
#line 1331
  0;
  self->imageIndentRight_ =
#line 1337
  0;
  self->indentTop_ =
#line 1340
  0;
  self->indentBottom_ =
#line 1343
  0;
}


#line 1316
ComAowagieTextPdfPdfDocument_Indentation *new_ComAowagieTextPdfPdfDocument_Indentation_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDocument_Indentation, init)
}


#line 1316
ComAowagieTextPdfPdfDocument_Indentation *create_ComAowagieTextPdfPdfDocument_Indentation_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDocument_Indentation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDocument_Indentation)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDocument.java"


#line 2065
@implementation ComAowagieTextPdfPdfDocument_RenderingContext

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 2065
- (instancetype)init {
  ComAowagieTextPdfPdfDocument_RenderingContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 2088
- (jint)consumeRowspanWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)c {
  if ([((ComAowagieTextPdfPdfCell *) nil_chk(c)) rowspan] == 1) {
    return 1;
  }
  
#line 2093
  JavaLangInteger *i = [((id<JavaUtilMap>) nil_chk(self->rowspanMap_)) getWithId:c];
  if (i == nil) {
    i = new_JavaLangInteger_initWithInt_([c rowspan]);
  }
  
#line 2098
  i = new_JavaLangInteger_initWithInt_([i intValue] - 1);
  (void) [((id<JavaUtilMap>) nil_chk(self->rowspanMap_)) putWithId:c withId:i];
  
#line 2101
  if ([i intValue] < 1) {
    return 1;
  }
  return [i intValue];
}


#line 2112
- (jint)currentRowspanWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)c {
  return ComAowagieTextPdfPdfDocument_RenderingContext_currentRowspanWithComAowagieTextPdfPdfCell_(self, c);
}


#line 2120
- (jint)cellRenderedWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell
                                         withInt:(jint)pageNumber {
  return ComAowagieTextPdfPdfDocument_RenderingContext_cellRenderedWithComAowagieTextPdfPdfCell_withInt_(self, cell, pageNumber);
}


#line 2142
- (jint)numCellRenderedWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell {
  return ComAowagieTextPdfPdfDocument_RenderingContext_numCellRenderedWithComAowagieTextPdfPdfCell_(self, cell);
}


#line 2150
- (jboolean)isCellRenderedOnPageWithComAowagieTextPdfPdfCell:(ComAowagieTextPdfPdfCell *)cell
                                                     withInt:(jint)pageNumber {
  return ComAowagieTextPdfPdfDocument_RenderingContext_isCellRenderedOnPageWithComAowagieTextPdfPdfCell_withInt_(self, cell, pageNumber);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(consumeRowspanWithComAowagieTextPdfPdfCell:);
  methods[2].selector = @selector(currentRowspanWithComAowagieTextPdfPdfCell:);
  methods[3].selector = @selector(cellRenderedWithComAowagieTextPdfPdfCell:withInt:);
  methods[4].selector = @selector(numCellRenderedWithComAowagieTextPdfPdfCell:);
  methods[5].selector = @selector(isCellRenderedOnPageWithComAowagieTextPdfPdfCell:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pagetop_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellGraphics_", "LComAowagieTextPdfPdfContentByte;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lostTableBottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxCellBottom_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rowspanMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "pageMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "table_", "LComAowagieTextPdfPdfTable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "consumeRowspan", "LComAowagieTextPdfPdfCell;", "currentRowspan", "cellRendered", "LComAowagieTextPdfPdfCell;I", "numCellRendered", "isCellRenderedOnPage", "Ljava/util/Map<Lcom/aowagie/text/pdf/PdfCell;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/Object;Ljava/lang/Object;>;", "LComAowagieTextPdfPdfDocument;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDocument_RenderingContext = { "RenderingContext", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0xa, 6, 8, 9, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDocument_RenderingContext;
}

@end


#line 2065
void ComAowagieTextPdfPdfDocument_RenderingContext_init(ComAowagieTextPdfPdfDocument_RenderingContext *self) {
  NSObject_init(self);
  self->pagetop_ =
#line 2066
  -1;
  self->oldHeight_ = -1;
  self->cellGraphics_ =
#line 2069
  nil;
  self->pageMap_ = new_JavaUtilLinkedHashMap_init();
}


#line 2065
ComAowagieTextPdfPdfDocument_RenderingContext *new_ComAowagieTextPdfPdfDocument_RenderingContext_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDocument_RenderingContext, init)
}


#line 2065
ComAowagieTextPdfPdfDocument_RenderingContext *create_ComAowagieTextPdfPdfDocument_RenderingContext_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDocument_RenderingContext, init)
}


#line 2112
jint ComAowagieTextPdfPdfDocument_RenderingContext_currentRowspanWithComAowagieTextPdfPdfCell_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *c) {
  JavaLangInteger *i = [((id<JavaUtilMap>) nil_chk(self->rowspanMap_)) getWithId:c];
  if (i == nil) {
    return [((ComAowagieTextPdfPdfCell *) nil_chk(c)) rowspan];
  }
  return [i intValue];
}

jint ComAowagieTextPdfPdfDocument_RenderingContext_cellRenderedWithComAowagieTextPdfPdfCell_withInt_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell, jint pageNumber) {
  JavaLangInteger *i = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(self->pageMap_)) getWithId:cell], [JavaLangInteger class]);
  if (i == nil) {
    i = new_JavaLangInteger_initWithInt_(1);
  }
  else {
    
#line 2125
    i = new_JavaLangInteger_initWithInt_([i intValue] + 1);
  }
  (void) [self->pageMap_ putWithId:cell withId:i];
  
#line 2129
  JavaLangInteger *pageInteger = new_JavaLangInteger_initWithInt_(pageNumber);
  id<JavaUtilSet> set = (id<JavaUtilSet>) cast_check([self->pageMap_ getWithId:pageInteger], JavaUtilSet_class_());
  
#line 2132
  if (set == nil) {
    set = new_JavaUtilHashSet_init();
    (void) [self->pageMap_ putWithId:pageInteger withId:set];
  }
  
#line 2137
  [set addWithId:cell];
  
#line 2139
  return [i intValue];
}


#line 2142
jint ComAowagieTextPdfPdfDocument_RenderingContext_numCellRenderedWithComAowagieTextPdfPdfCell_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell) {
  JavaLangInteger *i = (JavaLangInteger *) cast_chk([((id<JavaUtilMap>) nil_chk(self->pageMap_)) getWithId:cell], [JavaLangInteger class]);
  if (i == nil) {
    i = new_JavaLangInteger_initWithInt_(0);
  }
  return [i intValue];
}

jboolean ComAowagieTextPdfPdfDocument_RenderingContext_isCellRenderedOnPageWithComAowagieTextPdfPdfCell_withInt_(ComAowagieTextPdfPdfDocument_RenderingContext *self, ComAowagieTextPdfPdfCell *cell, jint pageNumber) {
  JavaLangInteger *pageInteger = new_JavaLangInteger_initWithInt_(pageNumber);
  id<JavaUtilSet> set = (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(self->pageMap_)) getWithId:pageInteger], JavaUtilSet_class_());
  
#line 2154
  if (set != nil) {
    return [set containsWithId:cell];
  }
  
#line 2158
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDocument_RenderingContext)
