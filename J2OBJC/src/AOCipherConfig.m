//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/ciphers/AOCipherConfig.java
//

#include "AOCipherConfig.h"
#include "CipherConstants.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/security/NoSuchAlgorithmException.h"

#if !__has_feature(objc_arc)
#error "AOCipherConfig must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreCiphersAOCipherConfig () {
 @public
  /*!
   @brief Algoritmo de cifrado.
   */
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *algo_;
  /*!
   @brief Modo de bloque para el cifrado.
   */
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *mode_;
  /*!
   @brief Padding que aplicar al cifrado.
   */
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *padding_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreCiphersAOCipherConfig, algo_, EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreCiphersAOCipherConfig, mode_, EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreCiphersAOCipherConfig, padding_, EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/ciphers/AOCipherConfig.java"


#line 19
@implementation EsGobAfirmaCoreCiphersAOCipherConfig


#line 37
- (instancetype)initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)algo
                    withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)mode
                      withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)padd {
  EsGobAfirmaCoreCiphersAOCipherConfig_initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_(self, algo, mode, padd);
  return self;
}


#line 77
+ (EsGobAfirmaCoreCiphersAOCipherConfig *)parseWithNSString:(NSString *)cipherConfig {
  return EsGobAfirmaCoreCiphersAOCipherConfig_parseWithNSString_(cipherConfig);
}


#line 98
- (NSString *)description {
  
#line 100
  JavaLangStringBuilder *config = new_JavaLangStringBuilder_initWithNSString_([((EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *) nil_chk(self->algo_)) getName]);
  if (self->mode_ != nil && self->padding_ != nil) {
    (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([config appendWithNSString:@"/"])) appendWithNSString:[((EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *) nil_chk(self->mode_)) getName]])) appendWithNSString:@"/"])) appendWithNSString:[((EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *) nil_chk(self->padding_)) getName]];
  }
  return [config description];
}


#line 107
- (jboolean)isEqual:(id)obj {
  
#line 109
  if (!([obj isKindOfClass:[EsGobAfirmaCoreCiphersAOCipherConfig class]])) {
    return false;
  }
  return [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) cast_chk(obj, [EsGobAfirmaCoreCiphersAOCipherConfig class]))))->algo_)) isEqual:self->algo_] && [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) cast_chk(obj, [EsGobAfirmaCoreCiphersAOCipherConfig class]))))->mode_)) isEqual:self->mode_] && [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) nil_chk(((EsGobAfirmaCoreCiphersAOCipherConfig *) cast_chk(obj, [EsGobAfirmaCoreCiphersAOCipherConfig class]))))->padding_)) isEqual:self->padding_];
}


#line 115
- (NSUInteger)hash {
  
#line 117
  return ((jint) [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *) nil_chk(self->algo_)) hash]) + ((jint) [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *) nil_chk(self->mode_)) hash]) + ((jint) [((EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *) nil_chk(self->padding_)) hash]);
}


#line 122
- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)getAlgorithm {
  return self->algo_;
}


#line 128
- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)getBlockMode {
  return self->mode_;
}


#line 134
- (EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)getPadding {
  return self->padding_;
}


#line 141
- (void)setAlgorithmWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *)algo {
  self->algo_ = algo;
}


#line 148
- (void)setBlockModeWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *)mode {
  self->mode_ = mode;
}


#line 155
- (void)setPaddingWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding:(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *)padding {
  self->padding_ = padding;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreCiphersAOCipherConfig;", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm:withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode:withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding:);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(getAlgorithm);
  methods[6].selector = @selector(getBlockMode);
  methods[7].selector = @selector(getPadding);
  methods[8].selector = @selector(setAlgorithmWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm:);
  methods[9].selector = @selector(setBlockModeWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode:);
  methods[10].selector = @selector(setPaddingWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mode_", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "padding_", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm;LEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode;LEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding;", "parse", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;", "toString", "equals", "LNSObject;", "hashCode", "setAlgorithm", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm;", "setBlockMode", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode;", "setPadding", "LEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreCiphersAOCipherConfig = { "AOCipherConfig", "es.gob.afirma.core.ciphers", ptrTable, methods, fields, 7, 0x11, 11, 3, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreCiphersAOCipherConfig;
}

@end


#line 37
void EsGobAfirmaCoreCiphersAOCipherConfig_initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_(EsGobAfirmaCoreCiphersAOCipherConfig *self, EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *algo, EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *mode, EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *padd) {
  NSObject_init(self);
  
#line 41
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *ciphAlgo = algo != nil ? algo : EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_getDefault();
  
#line 43
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *ciphMode = mode;
  if (ciphMode == nil) {
    if ([ciphAlgo isEqual:JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHMD5ANDDES)] || [ciphAlgo isEqual:JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHSHA1ANDDESEDE)] ||
#line 46
    [ciphAlgo isEqual:JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm, PBEWITHSHA1ANDRC2_40)]) {
      ciphMode = JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, CBC);
    }
    else {
      ciphMode = JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode, ECB);
    }
  }
  
#line 54
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *ciphPadding = padd;
  if (ciphPadding == nil) {
    ciphPadding = JreLoadEnum(EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding, PKCS5PADDING);
  }
  self->algo_ = ciphAlgo;
  self->mode_ = ciphMode;
  self->padding_ = ciphPadding;
}


#line 37
EsGobAfirmaCoreCiphersAOCipherConfig *new_EsGobAfirmaCoreCiphersAOCipherConfig_initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *algo, EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *mode, EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *padd) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreCiphersAOCipherConfig, initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_, algo, mode, padd)
}


#line 37
EsGobAfirmaCoreCiphersAOCipherConfig *create_EsGobAfirmaCoreCiphersAOCipherConfig_initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_(EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *algo, EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *mode, EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *padd) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreCiphersAOCipherConfig, initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_, algo, mode, padd)
}


#line 77
EsGobAfirmaCoreCiphersAOCipherConfig *EsGobAfirmaCoreCiphersAOCipherConfig_parseWithNSString_(NSString *cipherConfig) {
  EsGobAfirmaCoreCiphersAOCipherConfig_initialize();
  
#line 81
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm *cipAlgo = nil;
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode *cipBlockMode = nil;
  EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding *cipPadding = nil;
  IOSObjectArray *algoConfig = [((NSString *) nil_chk(cipherConfig)) java_split:@"/"];
  cipAlgo = EsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_getValueOfWithNSString_(IOSObjectArray_Get(nil_chk(algoConfig), 0));
  if (cipAlgo == nil) {
    @throw new_JavaSecurityNoSuchAlgorithmException_init();
  }
  
#line 91
  if (algoConfig->size_ == 3) {
    cipBlockMode = EsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_getValueOfWithNSString_(IOSObjectArray_Get(algoConfig, 1));
    cipPadding = EsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_getValueOfWithNSString_(IOSObjectArray_Get(algoConfig, 2));
  }
  return new_EsGobAfirmaCoreCiphersAOCipherConfig_initWithEsGobAfirmaCoreCiphersCipherConstants_AOCipherAlgorithm_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherBlockMode_withEsGobAfirmaCoreCiphersCipherConstants_AOCipherPadding_(cipAlgo, cipBlockMode, cipPadding);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreCiphersAOCipherConfig)
