//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/operator/jcajce/JceAsymmetricKeyUnwrapper.java
//

#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AsymmetricKeyUnwrapper.h"
#include "DefaultJcaJceHelper.h"
#include "GenericKey.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JceAsymmetricKeyUnwrapper.h"
#include "JceGenericKey.h"
#include "NamedJcaJceHelper.h"
#include "OperatorException.h"
#include "OperatorHelper.h"
#include "ProviderJcaJceHelper.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/GeneralSecurityException.h"
#include "java/security/InvalidKeyException.h"
#include "java/security/Key.h"
#include "java/security/PrivateKey.h"
#include "java/security/Provider.h"
#include "java/security/ProviderException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "javax/crypto/BadPaddingException.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/IllegalBlockSizeException.h"
#include "javax/crypto/spec/SecretKeySpec.h"

#if !__has_feature(objc_arc)
#error "JceAsymmetricKeyUnwrapper must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper () {
 @public
  OrgSpongycastleOperatorJcajceOperatorHelper *helper_;
  id<JavaUtilMap> extraMappings_;
  id<JavaSecurityPrivateKey> privKey_;
  jboolean unwrappedKeyMustBeEncodable_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper, helper_, OrgSpongycastleOperatorJcajceOperatorHelper *)
J2OBJC_FIELD_SETTER(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper, extraMappings_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper, privKey_, id<JavaSecurityPrivateKey>)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/operator/jcajce/JceAsymmetricKeyUnwrapper.java"


#line 27
@implementation OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper


#line 35
- (instancetype)initWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)algorithmIdentifier
                                        withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)privKey {
  OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(self, algorithmIdentifier, privKey);
  return self;
}


#line 42
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider {
  
#line 44
  self->helper_ = new_OrgSpongycastleOperatorJcajceOperatorHelper_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_(new_OrgSpongycastleJcajceUtilProviderJcaJceHelper_initWithJavaSecurityProvider_(provider));
  
#line 46
  return self;
}


#line 49
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setProviderWithNSString:(NSString *)providerName {
  
#line 51
  self->helper_ = new_OrgSpongycastleOperatorJcajceOperatorHelper_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_(new_OrgSpongycastleJcajceUtilNamedJcaJceHelper_initWithNSString_(providerName));
  
#line 53
  return self;
}


#line 64
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setMustProduceEncodableUnwrappedKeyWithBoolean:(jboolean)unwrappedKeyMustBeEncodable {
  
#line 66
  self->unwrappedKeyMustBeEncodable_ = unwrappedKeyMustBeEncodable;
  
#line 68
  return self;
}


#line 85
- (OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *)setAlgorithmMappingWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                                                                              withNSString:(NSString *)algorithmName {
  (void) [((id<JavaUtilMap>) nil_chk(extraMappings_)) putWithId:algorithm withId:algorithmName];
  
#line 89
  return self;
}


#line 92
- (OrgSpongycastleOperatorGenericKey *)generateUnwrappedKeyWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)encryptedKeyAlgorithm
                                                                                            withByteArray:(IOSByteArray *)encryptedKey {
  
#line 95
  @try {
    
#line 97
    id<JavaSecurityKey> sKey = nil;
    
#line 99
    JavaxCryptoCipher *keyCipher = [((OrgSpongycastleOperatorJcajceOperatorHelper *) nil_chk(helper_)) createAsymmetricWrapperWithOrgSpongycastleAsn1ASN1ObjectIdentifier:[((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([self getAlgorithmIdentifier])) getAlgorithm] withJavaUtilMap:extraMappings_];
    JavaSecurityAlgorithmParameters *algParams = [((OrgSpongycastleOperatorJcajceOperatorHelper *) nil_chk(helper_)) createAlgorithmParametersWithOrgSpongycastleAsn1X509AlgorithmIdentifier:[self getAlgorithmIdentifier]];
    
#line 102
    @try {
      
#line 104
      if (algParams != nil) {
        
#line 106
        [((JavaxCryptoCipher *) nil_chk(keyCipher)) init__WithInt:JavaxCryptoCipher_UNWRAP_MODE withJavaSecurityKey:privKey_ withJavaSecurityAlgorithmParameters:algParams];
      }
      else {
        
#line 110
        [((JavaxCryptoCipher *) nil_chk(keyCipher)) init__WithInt:JavaxCryptoCipher_UNWRAP_MODE withJavaSecurityKey:privKey_];
      }
      
#line 113
      sKey = [keyCipher unwrapWithByteArray:encryptedKey withNSString:[((OrgSpongycastleOperatorJcajceOperatorHelper *) nil_chk(helper_)) getKeyAlgorithmNameWithOrgSpongycastleAsn1ASN1ObjectIdentifier:[((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(encryptedKeyAlgorithm)) getAlgorithm]] withInt:JavaxCryptoCipher_SECRET_KEY];
      
#line 116
      if (unwrappedKeyMustBeEncodable_) {
        
#line 118
        @try {
          
#line 120
          IOSByteArray *keyBytes = [((id<JavaSecurityKey>) nil_chk(sKey)) getEncoded];
          
#line 122
          if (keyBytes == nil || keyBytes->size_ == 0) {
            
#line 124
            sKey = nil;
          }
        }
        @catch (JavaLangException *e) {
          
#line 129
          sKey = nil;
        }
      }
    }
    @catch (JavaSecurityGeneralSecurityException *e) {
    }
    @catch (
#line 136
    JavaLangIllegalStateException *e) {
    }
    @catch (
#line 139
    JavaLangUnsupportedOperationException *e) {
    }
    @catch (
#line 142
    JavaSecurityProviderException *e) {
    }
    
#line 147
    if (sKey == nil) {
      
#line 149
      [keyCipher init__WithInt:JavaxCryptoCipher_DECRYPT_MODE withJavaSecurityKey:privKey_];
      sKey = new_JavaxCryptoSpecSecretKeySpec_initWithByteArray_withNSString_([keyCipher doFinalWithByteArray:encryptedKey], [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(encryptedKeyAlgorithm)) getAlgorithm])) getId]);
    }
    
#line 153
    return new_OrgSpongycastleOperatorJcajceJceGenericKey_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityKey_(encryptedKeyAlgorithm, sKey);
  }
  @catch (JavaSecurityInvalidKeyException *e) {
    
#line 157
    @throw new_OrgSpongycastleOperatorOperatorException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"key invalid: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoIllegalBlockSizeException *e) {
    
#line 161
    @throw new_OrgSpongycastleOperatorOperatorException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"illegal blocksize: ", [e getMessage]), e);
  }
  @catch (JavaxCryptoBadPaddingException *e) {
    
#line 165
    @throw new_OrgSpongycastleOperatorOperatorException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"bad padding: ", [e getMessage]), e);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper;", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleOperatorGenericKey;", 0x1, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509AlgorithmIdentifier:withJavaSecurityPrivateKey:);
  methods[1].selector = @selector(setProviderWithJavaSecurityProvider:);
  methods[2].selector = @selector(setProviderWithNSString:);
  methods[3].selector = @selector(setMustProduceEncodableUnwrappedKeyWithBoolean:);
  methods[4].selector = @selector(setAlgorithmMappingWithOrgSpongycastleAsn1ASN1ObjectIdentifier:withNSString:);
  methods[5].selector = @selector(generateUnwrappedKeyWithOrgSpongycastleAsn1X509AlgorithmIdentifier:withByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LOrgSpongycastleOperatorJcajceOperatorHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraMappings_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "privKey_", "LJavaSecurityPrivateKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "unwrappedKeyMustBeEncodable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1X509AlgorithmIdentifier;LJavaSecurityPrivateKey;", "setProvider", "LJavaSecurityProvider;", "LNSString;", "setMustProduceEncodableUnwrappedKey", "Z", "setAlgorithmMapping", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;LNSString;", "generateUnwrappedKey", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;[B", "LOrgSpongycastleOperatorOperatorException;" };
  static const J2ObjcClassInfo _OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper = { "JceAsymmetricKeyUnwrapper", "org.spongycastle.operator.jcajce", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper;
}

@end


#line 35
void OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *self, OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey) {
  OrgSpongycastleOperatorAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_(self,
#line 37
  algorithmIdentifier);
  self->helper_ = new_OrgSpongycastleOperatorJcajceOperatorHelper_initPackagePrivateWithOrgSpongycastleJcajceUtilJcaJceHelper_(new_OrgSpongycastleJcajceUtilDefaultJcaJceHelper_init());
  self->extraMappings_ = new_JavaUtilHashMap_init();
  
#line 39
  self->privKey_ = privKey;
}


#line 35
OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *new_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey) {
  J2OBJC_NEW_IMPL(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper, initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_, algorithmIdentifier, privKey)
}


#line 35
OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper *create_OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper_initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_(OrgSpongycastleAsn1X509AlgorithmIdentifier *algorithmIdentifier, id<JavaSecurityPrivateKey> privKey) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper, initWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withJavaSecurityPrivateKey_, algorithmIdentifier, privKey)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleOperatorJcajceJceAsymmetricKeyUnwrapper)
