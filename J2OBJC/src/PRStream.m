//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PRStream.java
//

#include "Document.h"
#include "ExceptionConverter.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PRStream.h"
#include "PdfDictionary.h"
#include "PdfEncryption.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfObject.h"
#include "PdfReader.h"
#include "PdfStream.h"
#include "PdfWriter.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/util/HashMap.h"
#include "java/util/zip/Deflater.h"
#include "java/util/zip/DeflaterOutputStream.h"

#if !__has_feature(objc_arc)
#error "PRStream must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPRStream () {
 @public
  ComAowagieTextPdfPdfReader *reader_;
  jint offset_;
  jint length_;
  jint objNum_;
  jint objGen_;
}

/*!
 @brief Sets the data associated with the stream, either compressed or
  uncompressed.Note that the data will never be compressed if
  Document.compress is set to false.
 @param data raw data, decrypted and uncompressed.
 @param compress true if you want the stream to be compressed.
 @since iText 2.1.1
 */
- (void)setDataWithByteArray:(IOSByteArray *)data
                 withBoolean:(jboolean)compress;

/*!
 @brief Sets the data associated with the stream, either compressed or
  uncompressed.Note that the data will never be compressed if
  Document.compress is set to false.
 @param data raw data, decrypted and uncompressed.
 @param compress true if you want the stream to be compressed.
 @param compressionLevel a value between -1 and 9 (ignored if compress == false)
 @since iText 2.1.3
 */
- (void)setDataWithByteArray:(IOSByteArray *)data
                 withBoolean:(jboolean)compress
                     withInt:(jint)compressionLevel;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPRStream, reader_, ComAowagieTextPdfPdfReader *)

__attribute__((unused)) static void ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_(ComAowagieTextPdfPRStream *self, IOSByteArray *data, jboolean compress);

__attribute__((unused)) static void ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_withInt_(ComAowagieTextPdfPRStream *self, IOSByteArray *data, jboolean compress, jint compressionLevel);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PRStream.java"


#line 61
@implementation ComAowagieTextPdfPRStream


#line 71
- (instancetype)initWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
               withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)newDic {
  ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_(self, stream, newDic);
  return self;
}


#line 88
- (instancetype)initWithComAowagieTextPdfPRStream:(ComAowagieTextPdfPRStream *)stream
               withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)newDic
                   withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader {
  ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(self, stream, newDic, reader);
  return self;
}


#line 93
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                           withInt:(jint)offset {
  ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withInt_(self, reader, offset);
  return self;
}


#line 108
- (instancetype)initWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader
                                     withByteArray:(IOSByteArray *)conts
                                           withInt:(jint)compressionLevel {
  ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withByteArray_withInt_(self, reader, conts, compressionLevel);
  return self;
}


#line 140
- (void)setDataWithByteArray:(IOSByteArray *)data
                 withBoolean:(jboolean)compress {
  ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_(self, data, compress);
}


#line 154
- (void)setDataWithByteArray:(IOSByteArray *)data
                 withBoolean:(jboolean)compress
                     withInt:(jint)compressionLevel {
  ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_withInt_(self, data, compress, compressionLevel);
}


#line 181
- (void)setDataWithByteArray:(IOSByteArray *)data {
  ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_(self, data, true);
}

- (void)setLengthWithInt:(jint)length {
  self->length_ = length;
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(length)];
}

- (jint)getOffset {
  return self->offset_;
}

- (jint)getLength {
  return self->length_;
}

- (ComAowagieTextPdfPdfReader *)getReader {
  return self->reader_;
}

- (IOSByteArray *)getBytes {
  
#line 204
  return self->bytes_;
}


#line 207
- (void)setObjNumWithInt:(jint)objNum
                 withInt:(jint)objGen {
  
#line 208
  self->objNum_ = objNum;
  self->objGen_ = objGen;
}


#line 212
- (jint)getObjNum {
  return self->objNum_;
}

- (jint)getObjGen {
  return self->objGen_;
}

- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os {
  IOSByteArray *b = ComAowagieTextPdfPdfReader_getStreamBytesRawWithComAowagieTextPdfPRStream_(self);
  ComAowagieTextPdfPdfEncryption *crypto = nil;
  if (writer != nil) {
    crypto = [writer getEncryption];
  }
  ComAowagieTextPdfPdfObject *objLen = [self getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH)];
  jint nn = ((IOSByteArray *) nil_chk(b))->size_;
  if (crypto != nil) {
    nn = [crypto calculateStreamSizeWithInt:nn];
  }
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(nn)];
  [self superToPdfWithComAowagieTextPdfPdfWriter:writer withJavaIoOutputStream:os];
  [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, LENGTH) withComAowagieTextPdfPdfObject:objLen];
  [((JavaIoOutputStream *) nil_chk(os)) writeWithByteArray:JreLoadStatic(ComAowagieTextPdfPdfStream, STARTSTREAM)];
  if (self->length_ > 0) {
    if (crypto != nil && ![crypto isEmbeddedFilesOnly]) {
      b = [crypto encryptByteArrayWithByteArray:b];
    }
    [os writeWithByteArray:b];
  }
  [os writeWithByteArray:JreLoadStatic(ComAowagieTextPdfPdfStream, ENDSTREAM)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 14, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPRStream:withComAowagieTextPdfPdfDictionary:);
  methods[1].selector = @selector(initWithComAowagieTextPdfPRStream:withComAowagieTextPdfPdfDictionary:withComAowagieTextPdfPdfReader:);
  methods[2].selector = @selector(initWithComAowagieTextPdfPdfReader:withInt:);
  methods[3].selector = @selector(initWithComAowagieTextPdfPdfReader:withByteArray:withInt:);
  methods[4].selector = @selector(setDataWithByteArray:withBoolean:);
  methods[5].selector = @selector(setDataWithByteArray:withBoolean:withInt:);
  methods[6].selector = @selector(setDataWithByteArray:);
  methods[7].selector = @selector(setLengthWithInt:);
  methods[8].selector = @selector(getOffset);
  methods[9].selector = @selector(getLength);
  methods[10].selector = @selector(getReader);
  methods[11].selector = @selector(getBytes);
  methods[12].selector = @selector(setObjNumWithInt:withInt:);
  methods[13].selector = @selector(getObjNum);
  methods[14].selector = @selector(getObjGen);
  methods[15].selector = @selector(toPdfWithComAowagieTextPdfPdfWriter:withJavaIoOutputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "reader_", "LComAowagieTextPdfPdfReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "length_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objNum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "objGen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPRStream;LComAowagieTextPdfPdfDictionary;", "LComAowagieTextPdfPRStream;LComAowagieTextPdfPdfDictionary;LComAowagieTextPdfPdfReader;", "LComAowagieTextPdfPdfReader;I", "LComAowagieTextPdfPdfReader;[BI", "setData", "[BZ", "[BZI", "[B", "setLength", "I", "setObjNum", "II", "toPdf", "LComAowagieTextPdfPdfWriter;LJavaIoOutputStream;", "LJavaIoIOException;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPRStream = { "PRStream", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 16, 5, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPRStream;
}

@end


#line 71
void ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPRStream *self, ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic) {
  ComAowagieTextPdfPdfStream_init(self);
  self->objNum_ =
#line 68
  0;
  self->objGen_ = 0;
  
#line 72
  self->reader_ = ((ComAowagieTextPdfPRStream *) nil_chk(stream))->reader_;
  self->offset_ = stream->offset_;
  self->length_ = stream->length_;
  self->compressed_ = stream->compressed_;
  self->compressionLevel_ = stream->compressionLevel_;
  self->streamBytes_ = stream->streamBytes_;
  self->bytes_ = stream->bytes_;
  self->objNum_ = stream->objNum_;
  self->objGen_ = stream->objGen_;
  if (newDic != nil) {
    [self putAllWithComAowagieTextPdfPdfDictionary:newDic];
  }
  else {
    
#line 84
    [((JavaUtilHashMap *) nil_chk(self->hashMap_)) putAllWithJavaUtilMap:stream->hashMap_];
  }
}


#line 71
ComAowagieTextPdfPRStream *new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_, stream, newDic)
}


#line 71
ComAowagieTextPdfPRStream *create_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_, stream, newDic)
}


#line 88
void ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPRStream *self, ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic, ComAowagieTextPdfPdfReader *reader) {
  ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_(self, stream, newDic);
  self->reader_ = reader;
}


#line 88
ComAowagieTextPdfPRStream *new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic, ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_, stream, newDic, reader)
}


#line 88
ComAowagieTextPdfPRStream *create_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_(ComAowagieTextPdfPRStream *stream, ComAowagieTextPdfPdfDictionary *newDic, ComAowagieTextPdfPdfReader *reader) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPRStream_withComAowagieTextPdfPdfDictionary_withComAowagieTextPdfPdfReader_, stream, newDic, reader)
}


#line 93
void ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withInt_(ComAowagieTextPdfPRStream *self, ComAowagieTextPdfPdfReader *reader, jint offset) {
  ComAowagieTextPdfPdfStream_init(self);
  self->objNum_ =
#line 68
  0;
  self->objGen_ = 0;
  
#line 94
  self->reader_ = reader;
  self->offset_ = offset;
}


#line 93
ComAowagieTextPdfPRStream *new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withInt_(ComAowagieTextPdfPdfReader *reader, jint offset) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPdfReader_withInt_, reader, offset)
}


#line 93
ComAowagieTextPdfPRStream *create_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withInt_(ComAowagieTextPdfPdfReader *reader, jint offset) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPdfReader_withInt_, reader, offset)
}


#line 108
void ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withByteArray_withInt_(ComAowagieTextPdfPRStream *self, ComAowagieTextPdfPdfReader *reader, IOSByteArray *conts, jint compressionLevel) {
  ComAowagieTextPdfPdfStream_init(self);
  self->objNum_ =
#line 68
  0;
  self->objGen_ = 0;
  
#line 109
  self->reader_ = reader;
  self->offset_ = -1;
  if (JreLoadStatic(ComAowagieTextDocument, compress)) {
    @try {
      JavaIoByteArrayOutputStream *stream = new_JavaIoByteArrayOutputStream_init();
      JavaUtilZipDeflater *deflater = new_JavaUtilZipDeflater_initWithInt_(compressionLevel);
      JavaUtilZipDeflaterOutputStream *zip = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_(stream, deflater);
      [zip writeWithByteArray:conts];
      [zip close];
      [deflater end];
      self->bytes_ = [stream toByteArray];
    }
    @catch (JavaIoIOException *ioe) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
    }
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
  }
  else {
    
#line 126
    self->bytes_ = conts;
  }
  [self setLengthWithInt:((IOSByteArray *) nil_chk(self->bytes_))->size_];
}


#line 108
ComAowagieTextPdfPRStream *new_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withByteArray_withInt_(ComAowagieTextPdfPdfReader *reader, IOSByteArray *conts, jint compressionLevel) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPdfReader_withByteArray_withInt_, reader, conts, compressionLevel)
}


#line 108
ComAowagieTextPdfPRStream *create_ComAowagieTextPdfPRStream_initWithComAowagieTextPdfPdfReader_withByteArray_withInt_(ComAowagieTextPdfPdfReader *reader, IOSByteArray *conts, jint compressionLevel) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRStream, initWithComAowagieTextPdfPdfReader_withByteArray_withInt_, reader, conts, compressionLevel)
}


#line 140
void ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_(ComAowagieTextPdfPRStream *self, IOSByteArray *data, jboolean compress) {
  ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_withInt_(self, data, compress, ComAowagieTextPdfPdfStream_DEFAULT_COMPRESSION);
}


#line 154
void ComAowagieTextPdfPRStream_setDataWithByteArray_withBoolean_withInt_(ComAowagieTextPdfPRStream *self, IOSByteArray *data, jboolean compress, jint compressionLevel) {
  [self removeWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER)];
  self->offset_ = -1;
  if (JreLoadStatic(ComAowagieTextDocument, compress) && compress) {
    @try {
      JavaIoByteArrayOutputStream *stream = new_JavaIoByteArrayOutputStream_init();
      JavaUtilZipDeflater *deflater = new_JavaUtilZipDeflater_initWithInt_(compressionLevel);
      JavaUtilZipDeflaterOutputStream *zip = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_withJavaUtilZipDeflater_(stream, deflater);
      [zip writeWithByteArray:data];
      [zip close];
      [deflater end];
      self->bytes_ = [stream toByteArray];
      self->compressionLevel_ = compressionLevel;
    }
    @catch (JavaIoIOException *ioe) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(ioe);
    }
    [self putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, FLATEDECODE)];
  }
  else {
    
#line 173
    self->bytes_ = data;
  }
  [self setLengthWithInt:((IOSByteArray *) nil_chk(self->bytes_))->size_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPRStream)
