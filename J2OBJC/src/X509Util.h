//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/x509/X509Util.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_X509Util")
#ifdef RESTRICT_X509Util
#define INCLUDE_ALL_X509Util 0
#else
#define INCLUDE_ALL_X509Util 1
#endif
#undef RESTRICT_X509Util

#if !defined (OrgSpongycastleX509X509Util_) && (INCLUDE_ALL_X509Util || defined(INCLUDE_OrgSpongycastleX509X509Util))
#define OrgSpongycastleX509X509Util_

@class IOSByteArray;
@class JavaSecurityProvider;
@class JavaSecuritySecureRandom;
@class JavaSecuritySignature;
@class JavaxSecurityAuthX500X500Principal;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleJceX509Principal;
@class OrgSpongycastleX509X509Util_Implementation;
@protocol JavaSecurityPrivateKey;
@protocol JavaUtilIterator;
@protocol OrgSpongycastleAsn1ASN1Encodable;

@interface OrgSpongycastleX509X509Util : NSObject

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (IOSByteArray *)calculateSignatureWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)sigOid
                                                                   withNSString:(NSString *)sigName
                                                     withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                   withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                           withOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)object;

+ (IOSByteArray *)calculateSignatureWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)sigOid
                                                                   withNSString:(NSString *)sigName
                                                                   withNSString:(NSString *)provider
                                                     withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
                                                   withJavaSecuritySecureRandom:(JavaSecuritySecureRandom *)random
                                           withOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)object;

+ (OrgSpongycastleJceX509Principal *)convertPrincipalWithJavaxSecurityAuthX500X500Principal:(JavaxSecurityAuthX500X500Principal *)principal;

+ (id<JavaUtilIterator>)getAlgNames;

+ (OrgSpongycastleAsn1ASN1ObjectIdentifier *)getAlgorithmOIDWithNSString:(NSString *)algorithmName;

/*!
 @brief return an implementation for a given algorithm/provider.
 If the provider is null, we grab the first avalaible who has the required algorithm.
 */
+ (OrgSpongycastleX509X509Util_Implementation *)getImplementationWithNSString:(NSString *)baseName
                                                                 withNSString:(NSString *)algorithm;

/*!
 @brief see if we can find an algorithm (or its alias and what it represents) in
  the property table for the given provider.
 */
+ (OrgSpongycastleX509X509Util_Implementation *)getImplementationWithNSString:(NSString *)baseName
                                                                 withNSString:(NSString *)algorithm
                                                     withJavaSecurityProvider:(JavaSecurityProvider *)prov;

+ (JavaSecurityProvider *)getProviderWithNSString:(NSString *)provider;

+ (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSigAlgIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)sigOid
                                                                                          withNSString:(NSString *)algorithmName;

+ (JavaSecuritySignature *)getSignatureInstanceWithNSString:(NSString *)algorithm;

+ (JavaSecuritySignature *)getSignatureInstanceWithNSString:(NSString *)algorithm
                                               withNSString:(NSString *)provider;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgSpongycastleX509X509Util)

FOUNDATION_EXPORT void OrgSpongycastleX509X509Util_initPackagePrivate(OrgSpongycastleX509X509Util *self);

FOUNDATION_EXPORT OrgSpongycastleX509X509Util *new_OrgSpongycastleX509X509Util_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509X509Util *create_OrgSpongycastleX509X509Util_initPackagePrivate(void);

FOUNDATION_EXPORT OrgSpongycastleAsn1ASN1ObjectIdentifier *OrgSpongycastleX509X509Util_getAlgorithmOIDWithNSString_(NSString *algorithmName);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleX509X509Util_getSigAlgIDWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withNSString_(OrgSpongycastleAsn1ASN1ObjectIdentifier *sigOid, NSString *algorithmName);

FOUNDATION_EXPORT id<JavaUtilIterator> OrgSpongycastleX509X509Util_getAlgNames(void);

FOUNDATION_EXPORT JavaSecuritySignature *OrgSpongycastleX509X509Util_getSignatureInstanceWithNSString_(NSString *algorithm);

FOUNDATION_EXPORT JavaSecuritySignature *OrgSpongycastleX509X509Util_getSignatureInstanceWithNSString_withNSString_(NSString *algorithm, NSString *provider);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleX509X509Util_calculateSignatureWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleAsn1ASN1ObjectIdentifier *sigOid, NSString *sigName, id<JavaSecurityPrivateKey> key, JavaSecuritySecureRandom *random, id<OrgSpongycastleAsn1ASN1Encodable> object);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleX509X509Util_calculateSignatureWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withNSString_withNSString_withJavaSecurityPrivateKey_withJavaSecuritySecureRandom_withOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleAsn1ASN1ObjectIdentifier *sigOid, NSString *sigName, NSString *provider, id<JavaSecurityPrivateKey> key, JavaSecuritySecureRandom *random, id<OrgSpongycastleAsn1ASN1Encodable> object);

FOUNDATION_EXPORT OrgSpongycastleJceX509Principal *OrgSpongycastleX509X509Util_convertPrincipalWithJavaxSecurityAuthX500X500Principal_(JavaxSecurityAuthX500X500Principal *principal);

FOUNDATION_EXPORT OrgSpongycastleX509X509Util_Implementation *OrgSpongycastleX509X509Util_getImplementationWithNSString_withNSString_withJavaSecurityProvider_(NSString *baseName, NSString *algorithm, JavaSecurityProvider *prov);

FOUNDATION_EXPORT OrgSpongycastleX509X509Util_Implementation *OrgSpongycastleX509X509Util_getImplementationWithNSString_withNSString_(NSString *baseName, NSString *algorithm);

FOUNDATION_EXPORT JavaSecurityProvider *OrgSpongycastleX509X509Util_getProviderWithNSString_(NSString *provider);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleX509X509Util)

#endif

#if !defined (OrgSpongycastleX509X509Util_Implementation_) && (INCLUDE_ALL_X509Util || defined(INCLUDE_OrgSpongycastleX509X509Util_Implementation))
#define OrgSpongycastleX509X509Util_Implementation_

@class JavaSecurityProvider;

@interface OrgSpongycastleX509X509Util_Implementation : NSObject {
 @public
  id engine_;
  JavaSecurityProvider *provider_;
}

#pragma mark Package-Private

- (instancetype)initWithId:(id)engine
  withJavaSecurityProvider:(JavaSecurityProvider *)provider;

- (id)getEngine;

- (JavaSecurityProvider *)getProvider;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleX509X509Util_Implementation)

J2OBJC_FIELD_SETTER(OrgSpongycastleX509X509Util_Implementation, engine_, id)
J2OBJC_FIELD_SETTER(OrgSpongycastleX509X509Util_Implementation, provider_, JavaSecurityProvider *)

FOUNDATION_EXPORT void OrgSpongycastleX509X509Util_Implementation_initWithId_withJavaSecurityProvider_(OrgSpongycastleX509X509Util_Implementation *self, id engine, JavaSecurityProvider *provider);

FOUNDATION_EXPORT OrgSpongycastleX509X509Util_Implementation *new_OrgSpongycastleX509X509Util_Implementation_initWithId_withJavaSecurityProvider_(id engine, JavaSecurityProvider *provider) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleX509X509Util_Implementation *create_OrgSpongycastleX509X509Util_Implementation_initWithId_withJavaSecurityProvider_(id engine, JavaSecurityProvider *provider);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleX509X509Util_Implementation)

#endif

#pragma pop_macro("INCLUDE_ALL_X509Util")
