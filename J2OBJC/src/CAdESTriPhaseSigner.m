//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESTriPhaseSigner.java
//

#include "AOAlgorithmID.h"
#include "AOException.h"
#include "AOSignConstants.h"
#include "AOUtil.h"
#include "ASN1EncodableVector.h"
#include "ASN1Encoding.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Set.h"
#include "AlgorithmIdentifier.h"
#include "AttributeTable.h"
#include "BEROctetString.h"
#include "CAdESParameters.h"
#include "CAdESTriPhaseSigner.h"
#include "CAdESUtils.h"
#include "CMSProcessable.h"
#include "CMSProcessableByteArray.h"
#include "Certificate.h"
#include "ContentInfo.h"
#include "DEROctetString.h"
#include "DERSet.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IssuerAndSerialNumber.h"
#include "J2ObjC_source.h"
#include "PKCSObjectIdentifiers.h"
#include "SigUtils.h"
#include "SignedData.h"
#include "SignerIdentifier.h"
#include "SignerInfo.h"
#include "TBSCertificate.h"
#include "X500Name.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "CAdESTriPhaseSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersCadesCAdESTriPhaseSigner ()

- (instancetype)init;

@end

__attribute__((unused)) static void EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init(EsGobAfirmaSignersCadesCAdESTriPhaseSigner *self);

__attribute__((unused)) static EsGobAfirmaSignersCadesCAdESTriPhaseSigner *new_EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaSignersCadesCAdESTriPhaseSigner *create_EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init(void);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/CAdESTriPhaseSigner.java"


#line 138
@implementation EsGobAfirmaSignersCadesCAdESTriPhaseSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 140
- (instancetype)init {
  EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 150
+ (IOSByteArray *)preSignWithJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                                             withJavaUtilDate:(JavaUtilDate *)signDate
                   withEsGobAfirmaSignersCadesCAdESParameters:(EsGobAfirmaSignersCadesCAdESParameters *)config {
  return EsGobAfirmaSignersCadesCAdESTriPhaseSigner_preSignWithJavaSecurityCertCertificateArray_withJavaUtilDate_withEsGobAfirmaSignersCadesCAdESParameters_(signerCertificateChain, signDate, config);
}


#line 196
+ (IOSByteArray *)postSignWithNSString:(NSString *)signatureAlgorithm
                         withByteArray:(IOSByteArray *)content
  withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                         withByteArray:(IOSByteArray *)signatureValue
                         withByteArray:(IOSByteArray *)signedAttributes {
  return EsGobAfirmaSignersCadesCAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withByteArray_(signatureAlgorithm, content, signerCertificateChain, signatureValue, signedAttributes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(preSignWithJavaSecurityCertCertificateArray:withJavaUtilDate:withEsGobAfirmaSignersCadesCAdESParameters:);
  methods[2].selector = @selector(postSignWithNSString:withByteArray:withJavaSecurityCertCertificateArray:withByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "preSign", "[LJavaSecurityCertCertificate;LJavaUtilDate;LEsGobAfirmaSignersCadesCAdESParameters;", "LEsGobAfirmaCoreAOException;", "postSign", "LNSString;[B[LJavaSecurityCertCertificate;[B[B" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersCadesCAdESTriPhaseSigner = { "CAdESTriPhaseSigner", "es.gob.afirma.signers.cades", ptrTable, methods, NULL, 7, 0x11, 3, 0, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersCadesCAdESTriPhaseSigner;
}

@end


#line 140
void EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init(EsGobAfirmaSignersCadesCAdESTriPhaseSigner *self) {
  NSObject_init(self);
}


#line 140
EsGobAfirmaSignersCadesCAdESTriPhaseSigner *new_EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersCadesCAdESTriPhaseSigner, init)
}


#line 140
EsGobAfirmaSignersCadesCAdESTriPhaseSigner *create_EsGobAfirmaSignersCadesCAdESTriPhaseSigner_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersCadesCAdESTriPhaseSigner, init)
}


#line 150
IOSByteArray *EsGobAfirmaSignersCadesCAdESTriPhaseSigner_preSignWithJavaSecurityCertCertificateArray_withJavaUtilDate_withEsGobAfirmaSignersCadesCAdESParameters_(IOSObjectArray *signerCertificateChain, JavaUtilDate *signDate, EsGobAfirmaSignersCadesCAdESParameters *config) {
  EsGobAfirmaSignersCadesCAdESTriPhaseSigner_initialize();
  
#line 156
  if (signerCertificateChain == nil || signerCertificateChain->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La cadena de certificados debe contener al menos una entrada");
  }
  
#line 161
  OrgSpongycastleAsn1ASN1Set *signedAttributes;
  @try {
    OrgSpongycastleAsn1ASN1EncodableVector *signedAttributesVector = EsGobAfirmaSignersCadesCAdESUtils_generateSignedAttributesWithJavaSecurityCertCertificate_withEsGobAfirmaSignersCadesCAdESParameters_withBoolean_(IOSObjectArray_Get(
#line 165
    signerCertificateChain, 0),
#line 166
    config,
#line 167
    false);
    
#line 170
    signedAttributes = EsGobAfirmaSignersPkcs7SigUtils_getAttributeSetWithOrgSpongycastleAsn1CmsAttributeTable_(new_OrgSpongycastleAsn1CmsAttributeTable_initWithOrgSpongycastleAsn1ASN1EncodableVector_(
#line 171
    signedAttributesVector));
  }
  @catch (
#line 174
  JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error obteniendo los atributos a firmar: ", e), e);
  }
  
#line 179
  @try {
    return [((OrgSpongycastleAsn1ASN1Set *) nil_chk(signedAttributes)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaLangException *ex) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al codificar los datos ASN.1 a firmar finalmente", ex);
  }
}


#line 196
IOSByteArray *EsGobAfirmaSignersCadesCAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withByteArray_(NSString *signatureAlgorithm, IOSByteArray *content, IOSObjectArray *signerCertificateChain, IOSByteArray *signatureValue, IOSByteArray *signedAttributes) {
  EsGobAfirmaSignersCadesCAdESTriPhaseSigner_initialize();
  
#line 202
  if (signerCertificateChain == nil || signerCertificateChain->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 204
    @"La cadena de certificados debe contener al menos una entrada");
  }
  
#line 208
  NSString *digestAlgorithmName = EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(signatureAlgorithm);
  
#line 210
  OrgSpongycastleAsn1X509TBSCertificate *tbsCertificateStructure;
  @try {
    tbsCertificateStructure = OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(
#line 214
    [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk(IOSObjectArray_Get(signerCertificateChain, 0), [JavaSecurityCertX509Certificate class])))) getTBSCertificate]));
  }
  @catch (
#line 218
  JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"No se ha podido crear la estructura de certificados", e);
  }
  
#line 222
  OrgSpongycastleAsn1CmsSignerIdentifier *signerIdentifier = new_OrgSpongycastleAsn1CmsSignerIdentifier_initWithOrgSpongycastleAsn1CmsIssuerAndSerialNumber_(new_OrgSpongycastleAsn1CmsIssuerAndSerialNumber_initWithOrgSpongycastleAsn1X500X500Name_withJavaMathBigInteger_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(
#line 224
  [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk(tbsCertificateStructure)) getIssuer]),
#line 225
  [((OrgSpongycastleAsn1ASN1Integer *) nil_chk([tbsCertificateStructure getSerialNumber])) getValue]));
  
#line 230
  OrgSpongycastleAsn1X509AlgorithmIdentifier *digestAlgorithmOID;
  @try {
    digestAlgorithmOID = EsGobAfirmaSignersPkcs7SigUtils_makeAlgIdWithNSString_(EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(digestAlgorithmName));
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error obteniendo el OID en ASN.1 del algoritmo de huella digital: ", e), e);
  }
  
#line 239
  OrgSpongycastleAsn1X509AlgorithmIdentifier *keyAlgorithmIdentifier;
  @try {
    
#line 242
    keyAlgorithmIdentifier = EsGobAfirmaSignersPkcs7SigUtils_makeAlgIdWithNSString_(
#line 243
    [((NSString *) nil_chk(signatureAlgorithm)) java_contains:@"withRSA"] ? EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(
#line 244
    @"RSA") : EsGobAfirmaSignersPkcs7AOAlgorithmID_getOIDWithNSString_(
#line 245
    signatureAlgorithm));
  }
  @catch (
#line 248
  JavaLangException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al codificar el algoritmo de cifrado: ", e), e);
  }
  
#line 253
  OrgSpongycastleAsn1ASN1OctetString *encodedPKCS1Signature = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(signatureValue);
  
#line 256
  OrgSpongycastleAsn1ASN1Set *asn1SignedAttributes;
  @try {
    asn1SignedAttributes = (OrgSpongycastleAsn1ASN1Set *) cast_chk(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(signedAttributes), [OrgSpongycastleAsn1ASN1Set class]);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error en la inclusion de la recuperacion de los SignedAttibutes", e);
  }
  
#line 265
  OrgSpongycastleAsn1ASN1EncodableVector *signerInfo = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  [signerInfo addWithOrgSpongycastleAsn1ASN1Encodable:new_OrgSpongycastleAsn1CmsSignerInfo_initWithOrgSpongycastleAsn1CmsSignerIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1ASN1OctetString_withOrgSpongycastleAsn1ASN1Set_(
#line 268
  signerIdentifier,
#line 269
  digestAlgorithmOID,
#line 270
  asn1SignedAttributes,
#line 271
  keyAlgorithmIdentifier,
#line 272
  encodedPKCS1Signature,
#line 273
  nil)];
  
#line 278
  OrgSpongycastleAsn1CmsContentInfo *contentInfo;
  if (content != nil) {
    JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
    id<OrgSpongycastleCmsCMSProcessable> msg = new_OrgSpongycastleCmsCMSProcessableByteArray_initWithByteArray_(content);
    @try {
      [msg writeWithJavaIoOutputStream:baos];
    }
    @catch (JavaLangException *e) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error en la escritura del contenido implicito en el ContentInfo", e);
    }
    contentInfo = new_OrgSpongycastleAsn1CmsContentInfo_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 290
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, data))) getId]), new_OrgSpongycastleAsn1BEROctetString_initWithByteArray_(
#line 292
    [baos toByteArray]));
  }
  else {
    
#line 296
    contentInfo = new_OrgSpongycastleAsn1CmsContentInfo_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(
#line 298
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, data))) getId]),
#line 300
    nil);
  }
  
#line 305
  id<JavaUtilList> ce = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ =
#line 306
    signerCertificateChain;
    JavaSecurityCertCertificate * const *b__ = a__->buffer_;
    JavaSecurityCertCertificate * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaSecurityCertCertificate *cert = *b__++;
      
#line 307
      @try {
        [ce addWithId:OrgSpongycastleAsn1X509Certificate_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(
#line 311
        [((JavaSecurityCertCertificate *) nil_chk(cert)) getEncoded]))];
      }
      @catch (
#line 316
      JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(JavaUtilLoggingLogger_getLoggerWithNSString_(@"es.gob.afirma"))) severeWithNSString:JreStrcat("$$$@", @"Error insertando el certificado '", EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_(
#line 318
        (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])), @"' en la cadena de confianza: ", e)];
      }
    }
  }
  OrgSpongycastleAsn1ASN1Set *certificates = EsGobAfirmaSignersPkcs7SigUtils_createBerSetFromListWithJavaUtilList_(ce);
  
#line 325
  OrgSpongycastleAsn1ASN1EncodableVector *digestAlgorithms = new_OrgSpongycastleAsn1ASN1EncodableVector_init();
  [digestAlgorithms addWithOrgSpongycastleAsn1ASN1Encodable:digestAlgorithmOID];
  
#line 328
  @try {
    return [new_OrgSpongycastleAsn1CmsContentInfo_initWithOrgSpongycastleAsn1ASN1ObjectIdentifier_withOrgSpongycastleAsn1ASN1Encodable_(JreLoadStatic(OrgSpongycastleAsn1PkcsPKCSObjectIdentifiers, signedData), new_OrgSpongycastleAsn1CmsSignedData_initWithOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1CmsContentInfo_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_withOrgSpongycastleAsn1ASN1Set_(new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(
#line 332
    digestAlgorithms),
#line 333
    contentInfo,
#line 334
    certificates,
#line 335
    nil, new_OrgSpongycastleAsn1DERSet_initWithOrgSpongycastleAsn1ASN1EncodableVector_(
#line 336
    signerInfo))) getEncodedWithNSString:
#line 338
    OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error creando el ContentInfo de CAdES: ", e), e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersCadesCAdESTriPhaseSigner)
