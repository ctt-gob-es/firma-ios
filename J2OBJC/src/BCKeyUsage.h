//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x509/BCKeyUsage.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BCKeyUsage")
#ifdef RESTRICT_BCKeyUsage
#define INCLUDE_ALL_BCKeyUsage 0
#else
#define INCLUDE_ALL_BCKeyUsage 1
#endif
#undef RESTRICT_BCKeyUsage

#if !defined (OrgSpongycastleAsn1X509BCKeyUsage_) && (INCLUDE_ALL_BCKeyUsage || defined(INCLUDE_OrgSpongycastleAsn1X509BCKeyUsage))
#define OrgSpongycastleAsn1X509BCKeyUsage_

#define RESTRICT_ASN1Object 1
#define INCLUDE_OrgSpongycastleAsn1ASN1Object 1
#include "ASN1Object.h"

@class IOSByteArray;
@class OrgSpongycastleAsn1ASN1Primitive;
@class OrgSpongycastleAsn1X509Extensions;

/*!
 @brief The KeyUsage object.
 @code

     id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
     KeyUsage ::= BIT STRING {
          digitalSignature        (0),
          nonRepudiation          (1),
          keyEncipherment         (2),
          dataEncipherment        (3),
          keyAgreement            (4),
          keyCertSign             (5),
          cRLSign                 (6),
          encipherOnly            (7),
          decipherOnly            (8) } 
  
@endcode
 */
@interface OrgSpongycastleAsn1X509BCKeyUsage : OrgSpongycastleAsn1ASN1Object

#pragma mark Public

/*!
 @brief Basic constructor.
 @param usage - the bitwise OR of the Key Usage flags giving the  allowed uses for the key.
   e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
 */
- (instancetype)initWithInt:(jint)usage;

+ (OrgSpongycastleAsn1X509BCKeyUsage *)fromExtensionsWithOrgSpongycastleAsn1X509Extensions:(OrgSpongycastleAsn1X509Extensions *)extensions;

- (IOSByteArray *)getBytes;

+ (OrgSpongycastleAsn1X509BCKeyUsage *)getInstanceWithId:(id)obj;

- (jint)getPadBits;

/*!
 @brief Return true if a given usage bit is set, false otherwise.
 @param usages combination of usage flags.
 @return true if all bits are set, false otherwise.
 */
- (jboolean)hasUsagesWithInt:(jint)usages;

- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1X509BCKeyUsage)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_digitalSignature(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_digitalSignature 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, digitalSignature, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_nonRepudiation(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_nonRepudiation 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, nonRepudiation, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_keyEncipherment(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_keyEncipherment 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, keyEncipherment, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_dataEncipherment(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_dataEncipherment 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, dataEncipherment, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_keyAgreement(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_keyAgreement 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, keyAgreement, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_keyCertSign(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_keyCertSign 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, keyCertSign, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_cRLSign(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_cRLSign 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, cRLSign, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_encipherOnly(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_encipherOnly 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, encipherOnly, jint)

inline jint OrgSpongycastleAsn1X509BCKeyUsage_get_decipherOnly(void);
#define OrgSpongycastleAsn1X509BCKeyUsage_decipherOnly 32768
J2OBJC_STATIC_FIELD_CONSTANT(OrgSpongycastleAsn1X509BCKeyUsage, decipherOnly, jint)

FOUNDATION_EXPORT OrgSpongycastleAsn1X509BCKeyUsage *OrgSpongycastleAsn1X509BCKeyUsage_getInstanceWithId_(id obj);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509BCKeyUsage *OrgSpongycastleAsn1X509BCKeyUsage_fromExtensionsWithOrgSpongycastleAsn1X509Extensions_(OrgSpongycastleAsn1X509Extensions *extensions);

FOUNDATION_EXPORT void OrgSpongycastleAsn1X509BCKeyUsage_initWithInt_(OrgSpongycastleAsn1X509BCKeyUsage *self, jint usage);

FOUNDATION_EXPORT OrgSpongycastleAsn1X509BCKeyUsage *new_OrgSpongycastleAsn1X509BCKeyUsage_initWithInt_(jint usage) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X509BCKeyUsage *create_OrgSpongycastleAsn1X509BCKeyUsage_initWithInt_(jint usage);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1X509BCKeyUsage)

#endif

#pragma pop_macro("INCLUDE_ALL_BCKeyUsage")
