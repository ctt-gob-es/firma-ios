//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x9/X9IntegerConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_X9IntegerConverter")
#ifdef RESTRICT_X9IntegerConverter
#define INCLUDE_ALL_X9IntegerConverter 0
#else
#define INCLUDE_ALL_X9IntegerConverter 1
#endif
#undef RESTRICT_X9IntegerConverter

#if !defined (OrgSpongycastleAsn1X9X9IntegerConverter_) && (INCLUDE_ALL_X9IntegerConverter || defined(INCLUDE_OrgSpongycastleAsn1X9X9IntegerConverter))
#define OrgSpongycastleAsn1X9X9IntegerConverter_

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECCurve;
@class OrgSpongycastleMathEcECFieldElement;

/*!
 @brief A class which converts integers to byte arrays, allowing padding and calculations
  to be done according the the filed size of the curve or field element involved.
 */
@interface OrgSpongycastleAsn1X9X9IntegerConverter : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return the curve's field size in bytes.
 @param c the curve of interest.
 @return the field size in bytes (rounded up).
 */
- (jint)getByteLengthWithOrgSpongycastleMathEcECCurve:(OrgSpongycastleMathEcECCurve *)c;

/*!
 @brief Return the field element's field size in bytes.
 @param fe the field element of interest.
 @return the field size in bytes (rounded up).
 */
- (jint)getByteLengthWithOrgSpongycastleMathEcECFieldElement:(OrgSpongycastleMathEcECFieldElement *)fe;

/*!
 @brief Convert an integer to a byte array, ensuring it is exactly qLength long.
 @param s the integer to be converted.
 @param qLength the length
 @return the resulting byte array.
 */
- (IOSByteArray *)integerToBytesWithJavaMathBigInteger:(JavaMathBigInteger *)s
                                               withInt:(jint)qLength;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleAsn1X9X9IntegerConverter)

FOUNDATION_EXPORT void OrgSpongycastleAsn1X9X9IntegerConverter_init(OrgSpongycastleAsn1X9X9IntegerConverter *self);

FOUNDATION_EXPORT OrgSpongycastleAsn1X9X9IntegerConverter *new_OrgSpongycastleAsn1X9X9IntegerConverter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleAsn1X9X9IntegerConverter *create_OrgSpongycastleAsn1X9X9IntegerConverter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleAsn1X9X9IntegerConverter)

#endif

#pragma pop_macro("INCLUDE_ALL_X9IntegerConverter")
