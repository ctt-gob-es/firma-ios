//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/util/DefaultJcaJceHelper.java
//

#include "DefaultJcaJceHelper.h"
#include "J2ObjC_source.h"
#include "java/security/AlgorithmParameterGenerator.h"
#include "java/security/AlgorithmParameters.h"
#include "java/security/KeyFactory.h"
#include "java/security/KeyPairGenerator.h"
#include "java/security/MessageDigest.h"
#include "java/security/SecureRandom.h"
#include "java/security/Signature.h"
#include "java/security/cert/CertificateFactory.h"
#include "javax/crypto/Cipher.h"
#include "javax/crypto/KeyAgreement.h"
#include "javax/crypto/KeyGenerator.h"
#include "javax/crypto/Mac.h"
#include "javax/crypto/SecretKeyFactory.h"

#if !__has_feature(objc_arc)
#error "DefaultJcaJceHelper must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/util/DefaultJcaJceHelper.java"


#line 25
@implementation OrgSpongycastleJcajceUtilDefaultJcaJceHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 25
- (instancetype)init {
  OrgSpongycastleJcajceUtilDefaultJcaJceHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 28
- (JavaxCryptoCipher *)createCipherWithNSString:(NSString *)algorithm {
  
#line 32
  return JavaxCryptoCipher_getInstanceWithNSString_(algorithm);
}


#line 35
- (JavaxCryptoMac *)createMacWithNSString:(NSString *)algorithm {
  
#line 38
  return JavaxCryptoMac_getInstanceWithNSString_(algorithm);
}

- (JavaxCryptoKeyAgreement *)createKeyAgreementWithNSString:(NSString *)algorithm {
  
#line 44
  return JavaxCryptoKeyAgreement_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityAlgorithmParameterGenerator *)createAlgorithmParameterGeneratorWithNSString:(NSString *)algorithm {
  
#line 50
  return JavaSecurityAlgorithmParameterGenerator_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityAlgorithmParameters *)createAlgorithmParametersWithNSString:(NSString *)algorithm {
  
#line 56
  return JavaSecurityAlgorithmParameters_getInstanceWithNSString_(algorithm);
}

- (JavaxCryptoKeyGenerator *)createKeyGeneratorWithNSString:(NSString *)algorithm {
  
#line 62
  return JavaxCryptoKeyGenerator_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityKeyFactory *)createKeyFactoryWithNSString:(NSString *)algorithm {
  
#line 68
  return JavaSecurityKeyFactory_getInstanceWithNSString_(algorithm);
}

- (JavaxCryptoSecretKeyFactory *)createSecretKeyFactoryWithNSString:(NSString *)algorithm {
  
#line 74
  return JavaxCryptoSecretKeyFactory_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityKeyPairGenerator *)createKeyPairGeneratorWithNSString:(NSString *)algorithm {
  
#line 80
  return JavaSecurityKeyPairGenerator_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityMessageDigest *)createDigestWithNSString:(NSString *)algorithm {
  
#line 86
  return JavaSecurityMessageDigest_getInstanceWithNSString_(algorithm);
}

- (JavaSecuritySignature *)createSignatureWithNSString:(NSString *)algorithm {
  
#line 92
  return JavaSecuritySignature_getInstanceWithNSString_(algorithm);
}

- (JavaSecurityCertCertificateFactory *)createCertificateFactoryWithNSString:(NSString *)algorithm {
  
#line 98
  return JavaSecurityCertCertificateFactory_getInstanceWithNSString_(algorithm);
}

- (JavaSecuritySecureRandom *)createSecureRandomWithNSString:(NSString *)algorithm {
  
#line 104
  return JavaSecuritySecureRandom_getInstanceWithNSString_(algorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoCipher;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaxCryptoMac;", 0x1, 3, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyAgreement;", 0x1, 5, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameterGenerator;", 0x1, 6, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityAlgorithmParameters;", 0x1, 7, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoKeyGenerator;", 0x1, 8, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyFactory;", 0x1, 9, 1, 4, -1, -1, -1 },
    { NULL, "LJavaxCryptoSecretKeyFactory;", 0x1, 10, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityKeyPairGenerator;", 0x1, 11, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityMessageDigest;", 0x1, 12, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecuritySignature;", 0x1, 13, 1, 4, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertificateFactory;", 0x1, 14, 1, 15, -1, -1, -1 },
    { NULL, "LJavaSecuritySecureRandom;", 0x1, 16, 1, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createCipherWithNSString:);
  methods[2].selector = @selector(createMacWithNSString:);
  methods[3].selector = @selector(createKeyAgreementWithNSString:);
  methods[4].selector = @selector(createAlgorithmParameterGeneratorWithNSString:);
  methods[5].selector = @selector(createAlgorithmParametersWithNSString:);
  methods[6].selector = @selector(createKeyGeneratorWithNSString:);
  methods[7].selector = @selector(createKeyFactoryWithNSString:);
  methods[8].selector = @selector(createSecretKeyFactoryWithNSString:);
  methods[9].selector = @selector(createKeyPairGeneratorWithNSString:);
  methods[10].selector = @selector(createDigestWithNSString:);
  methods[11].selector = @selector(createSignatureWithNSString:);
  methods[12].selector = @selector(createCertificateFactoryWithNSString:);
  methods[13].selector = @selector(createSecureRandomWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createCipher", "LNSString;", "LJavaSecurityNoSuchAlgorithmException;LJavaxCryptoNoSuchPaddingException;", "createMac", "LJavaSecurityNoSuchAlgorithmException;", "createKeyAgreement", "createAlgorithmParameterGenerator", "createAlgorithmParameters", "createKeyGenerator", "createKeyFactory", "createSecretKeyFactory", "createKeyPairGenerator", "createDigest", "createSignature", "createCertificateFactory", "LJavaSecurityCertCertificateException;", "createSecureRandom" };
  static const J2ObjcClassInfo _OrgSpongycastleJcajceUtilDefaultJcaJceHelper = { "DefaultJcaJceHelper", "org.spongycastle.jcajce.util", ptrTable, methods, NULL, 7, 0x1, 14, 0, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJcajceUtilDefaultJcaJceHelper;
}

@end


#line 25
void OrgSpongycastleJcajceUtilDefaultJcaJceHelper_init(OrgSpongycastleJcajceUtilDefaultJcaJceHelper *self) {
  NSObject_init(self);
}


#line 25
OrgSpongycastleJcajceUtilDefaultJcaJceHelper *new_OrgSpongycastleJcajceUtilDefaultJcaJceHelper_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJcajceUtilDefaultJcaJceHelper, init)
}


#line 25
OrgSpongycastleJcajceUtilDefaultJcaJceHelper *create_OrgSpongycastleJcajceUtilDefaultJcaJceHelper_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJcajceUtilDefaultJcaJceHelper, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJcajceUtilDefaultJcaJceHelper)
