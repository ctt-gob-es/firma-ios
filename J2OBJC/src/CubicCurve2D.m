//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/CubicCurve2D.java
//

#include "AWTRectangle.h"
#include "AffineTransform.h"
#include "Crossing.h"
#include "CubicCurve2D.h"
#include "FlatteningPathIterator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Line2D.h"
#include "Messages.h"
#include "PathIterator.h"
#include "Point2D.h"
#include "Rectangle2D.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"

#if !__has_feature(objc_arc)
#error "CubicCurve2D must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/CubicCurve2D.java"


#line 30
@implementation HarmonyJavaAwtGeomCubicCurve2D

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 347
- (instancetype)init {
  HarmonyJavaAwtGeomCubicCurve2D_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 350
- (jdouble)getX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 352
- (jdouble)getY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 354
- (HarmonyJavaAwtGeomPoint2D *)getP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 356
- (jdouble)getCtrlX1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 358
- (jdouble)getCtrlY1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 360
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 362
- (jdouble)getCtrlX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 364
- (jdouble)getCtrlY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 366
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 368
- (jdouble)getX2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 370
- (jdouble)getY2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 372
- (HarmonyJavaAwtGeomPoint2D *)getP2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 374
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 377
- (void)setCurveWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)cp1
                withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)cp2
                withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2 {
  
#line 378
  [self setCurveWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p1)) getX] withDouble:[p1 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(cp1)) getX] withDouble:[cp1 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(cp2)) getX] withDouble:[cp2 getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p2)) getX] withDouble:[p2 getY]];
}


#line 381
- (void)setCurveWithDoubleArray:(IOSDoubleArray *)coords
                        withInt:(jint)offset {
  
#line 382
  [self setCurveWithDouble:IOSDoubleArray_Get(nil_chk(coords), offset + 0) withDouble:IOSDoubleArray_Get(coords, offset + 1) withDouble:IOSDoubleArray_Get(coords, offset + 2) withDouble:IOSDoubleArray_Get(coords, offset + 3) withDouble:IOSDoubleArray_Get(coords, offset + 4) withDouble:IOSDoubleArray_Get(
#line 383
  coords, offset + 5) withDouble:IOSDoubleArray_Get(coords, offset + 6) withDouble:IOSDoubleArray_Get(coords, offset + 7)];
}


#line 386
- (void)setCurveWithHarmonyJavaAwtGeomPoint2DArray:(IOSObjectArray *)points
                                           withInt:(jint)offset {
  
#line 387
  [self setCurveWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(nil_chk(points), offset + 0))) getX] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 0))) getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getX] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 1))) getY] withDouble:
#line 388
  [((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getX] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 2))) getY] withDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 3))) getX] withDouble:
#line 389
  [((HarmonyJavaAwtGeomPoint2D *) nil_chk(IOSObjectArray_Get(points, offset + 3))) getY]];
}


#line 392
- (void)setCurveWithHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)curve {
  [self setCurveWithDouble:[((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(curve)) getX1] withDouble:[curve getY1] withDouble:[curve getCtrlX1] withDouble:[curve getCtrlY1] withDouble:[curve getCtrlX2] withDouble:[curve getCtrlY2] withDouble:
#line 394
  [curve getX2] withDouble:[curve getY2]];
}


#line 397
- (jdouble)getFlatnessSq {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_([self getX1], [self getY1], [self getCtrlX1], [self getCtrlY1], [self getCtrlX2], [self getCtrlY2], [self getX2], [self getY2]);
}

+ (jdouble)getFlatnessSqWithDouble:(jdouble)x1
                        withDouble:(jdouble)y1
                        withDouble:(jdouble)ctrlx1
                        withDouble:(jdouble)ctrly1
                        withDouble:(jdouble)ctrlx2
                        withDouble:(jdouble)ctrly2
                        withDouble:(jdouble)x2
                        withDouble:(jdouble)y2 {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
}


#line 407
+ (jdouble)getFlatnessSqWithDoubleArray:(IOSDoubleArray *)coords
                                withInt:(jint)offset {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDoubleArray_withInt_(coords, offset);
}

- (jdouble)getFlatness {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_([self getX1], [self getY1], [self getCtrlX1], [self getCtrlY1], [self getCtrlX2], [self getCtrlY2], [self getX2], [self getY2]);
}

+ (jdouble)getFlatnessWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)ctrlx1
                      withDouble:(jdouble)ctrly1
                      withDouble:(jdouble)ctrlx2
                      withDouble:(jdouble)ctrly2
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2 {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
}


#line 421
+ (jdouble)getFlatnessWithDoubleArray:(IOSDoubleArray *)coords
                              withInt:(jint)offset {
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDoubleArray_withInt_(coords, offset);
}

- (void)subdivideWithHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)left
                 withHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)right {
  
#line 427
  HarmonyJavaAwtGeomCubicCurve2D_subdivideWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_(self, left, right);
}


#line 430
+ (void)subdivideWithHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)src
                 withHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)left
                 withHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)right {
  HarmonyJavaAwtGeomCubicCurve2D_subdivideWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_(src, left, right);
}


#line 459
+ (void)subdivideWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                 withDoubleArray:(IOSDoubleArray *)left
                         withInt:(jint)leftOff
                 withDoubleArray:(IOSDoubleArray *)right
                         withInt:(jint)rightOff {
  HarmonyJavaAwtGeomCubicCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(src, srcOff, left, leftOff, right, rightOff);
}


#line 502
+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn {
  return HarmonyJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_(eqn);
}

+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res {
  return HarmonyJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
}


#line 510
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 511
  return ComCrossing_isInsideEvenOddWithInt_(ComCrossing_crossShapeWithHarmonyJavaAwtShape_withDouble_withDouble_(self, px, py));
}


#line 514
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 515
  jint cross = ComCrossing_intersectShapeWithHarmonyJavaAwtShape_withDouble_withDouble_withDouble_withDouble_(self, rx, ry, rw, rh);
  return cross != ComCrossing_CROSSING && ComCrossing_isInsideEvenOddWithInt_(cross);
}


#line 519
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 520
  jint cross = ComCrossing_intersectShapeWithHarmonyJavaAwtShape_withDouble_withDouble_withDouble_withDouble_(self, rx, ry, rw, rh);
  return cross == ComCrossing_CROSSING || ComCrossing_isInsideEvenOddWithInt_(cross);
}


#line 524
- (jboolean)containsWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p {
  return [self containsWithDouble:[((HarmonyJavaAwtGeomPoint2D *) nil_chk(p)) getX] withDouble:[p getY]];
}

- (jboolean)intersectsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  return [self intersectsWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (jboolean)containsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)r {
  return [self containsWithDouble:[((HarmonyJavaAwtGeomRectangle2D *) nil_chk(r)) getX] withDouble:[r getY] withDouble:[r getWidth] withDouble:[r getHeight]];
}

- (HarmonyJavaAwtAWTRectangle *)getBounds {
  return [((HarmonyJavaAwtGeomRectangle2D *) nil_chk([self getBounds2D])) getBounds];
}

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  return new_HarmonyJavaAwtGeomCubicCurve2D_Iterator_initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, t);
}

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at
                                                                                withDouble:(jdouble)flatness {
  
#line 545
  return new_HarmonyJavaAwtGeomFlatteningPathIterator_initWithHarmonyJavaAwtGeomPathIterator_withDouble_([self getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:at], flatness);
}


#line 548
- (id)java_clone {
  
#line 550
  @try {
    return [super java_clone];
  }
  @catch (
#line 552
  JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangInternalError_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 20, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtAWTRectangle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 21, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getX1);
  methods[2].selector = @selector(getY1);
  methods[3].selector = @selector(getP1);
  methods[4].selector = @selector(getCtrlX1);
  methods[5].selector = @selector(getCtrlY1);
  methods[6].selector = @selector(getCtrlP1);
  methods[7].selector = @selector(getCtrlX2);
  methods[8].selector = @selector(getCtrlY2);
  methods[9].selector = @selector(getCtrlP2);
  methods[10].selector = @selector(getX2);
  methods[11].selector = @selector(getY2);
  methods[12].selector = @selector(getP2);
  methods[13].selector = @selector(setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[14].selector = @selector(setCurveWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[15].selector = @selector(setCurveWithDoubleArray:withInt:);
  methods[16].selector = @selector(setCurveWithHarmonyJavaAwtGeomPoint2DArray:withInt:);
  methods[17].selector = @selector(setCurveWithHarmonyJavaAwtGeomCubicCurve2D:);
  methods[18].selector = @selector(getFlatnessSq);
  methods[19].selector = @selector(getFlatnessSqWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[20].selector = @selector(getFlatnessSqWithDoubleArray:withInt:);
  methods[21].selector = @selector(getFlatness);
  methods[22].selector = @selector(getFlatnessWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[23].selector = @selector(getFlatnessWithDoubleArray:withInt:);
  methods[24].selector = @selector(subdivideWithHarmonyJavaAwtGeomCubicCurve2D:withHarmonyJavaAwtGeomCubicCurve2D:);
  methods[25].selector = @selector(subdivideWithHarmonyJavaAwtGeomCubicCurve2D:withHarmonyJavaAwtGeomCubicCurve2D:withHarmonyJavaAwtGeomCubicCurve2D:);
  methods[26].selector = @selector(subdivideWithDoubleArray:withInt:withDoubleArray:withInt:withDoubleArray:withInt:);
  methods[27].selector = @selector(solveCubicWithDoubleArray:);
  methods[28].selector = @selector(solveCubicWithDoubleArray:withDoubleArray:);
  methods[29].selector = @selector(containsWithDouble:withDouble:);
  methods[30].selector = @selector(containsWithDouble:withDouble:withDouble:withDouble:);
  methods[31].selector = @selector(intersectsWithDouble:withDouble:withDouble:withDouble:);
  methods[32].selector = @selector(containsWithHarmonyJavaAwtGeomPoint2D:);
  methods[33].selector = @selector(intersectsWithHarmonyJavaAwtGeomRectangle2D:);
  methods[34].selector = @selector(containsWithHarmonyJavaAwtGeomRectangle2D:);
  methods[35].selector = @selector(getBounds);
  methods[36].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:);
  methods[37].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:withDouble:);
  methods[38].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setCurve", "DDDDDDDD", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;", "[DI", "[LHarmonyJavaAwtGeomPoint2D;I", "LHarmonyJavaAwtGeomCubicCurve2D;", "getFlatnessSq", "getFlatness", "subdivide", "LHarmonyJavaAwtGeomCubicCurve2D;LHarmonyJavaAwtGeomCubicCurve2D;", "LHarmonyJavaAwtGeomCubicCurve2D;LHarmonyJavaAwtGeomCubicCurve2D;LHarmonyJavaAwtGeomCubicCurve2D;", "[DI[DI[DI", "solveCubic", "[D", "[D[D", "contains", "DD", "DDDD", "intersects", "LHarmonyJavaAwtGeomPoint2D;", "LHarmonyJavaAwtGeomRectangle2D;", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;", "LHarmonyJavaAwtGeomAffineTransform;D", "clone", "LHarmonyJavaAwtGeomCubicCurve2D_Float;LHarmonyJavaAwtGeomCubicCurve2D_Double;LHarmonyJavaAwtGeomCubicCurve2D_Iterator;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomCubicCurve2D = { "CubicCurve2D", "harmony.java.awt.geom", ptrTable, methods, NULL, 7, 0x401, 39, 0, -1, 25, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomCubicCurve2D;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 347
void HarmonyJavaAwtGeomCubicCurve2D_init(HarmonyJavaAwtGeomCubicCurve2D *self) {
  NSObject_init(self);
}


#line 401
jdouble HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  return JavaLangMath_maxWithDouble_withDouble_(HarmonyJavaAwtGeomLine2D_ptSegDistSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, ctrlx1, ctrly1), HarmonyJavaAwtGeomLine2D_ptSegDistSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2, ctrlx2,
#line 404
  ctrly2));
}


#line 407
jdouble HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDoubleArray_withInt_(IOSDoubleArray *coords, jint offset) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 408
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(coords), offset + 0), IOSDoubleArray_Get(coords, offset + 1), IOSDoubleArray_Get(coords, offset + 2), IOSDoubleArray_Get(coords, offset + 3), IOSDoubleArray_Get(
#line 409
  coords, offset + 4), IOSDoubleArray_Get(coords, offset + 5), IOSDoubleArray_Get(coords, offset + 6), IOSDoubleArray_Get(coords, offset + 7));
}

jdouble HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  return JavaLangMath_sqrtWithDouble_(HarmonyJavaAwtGeomCubicCurve2D_getFlatnessSqWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2));
}

jdouble HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDoubleArray_withInt_(IOSDoubleArray *coords, jint offset) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 422
  return HarmonyJavaAwtGeomCubicCurve2D_getFlatnessWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(coords), offset + 0), IOSDoubleArray_Get(coords, offset + 1), IOSDoubleArray_Get(coords, offset + 2), IOSDoubleArray_Get(coords, offset + 3), IOSDoubleArray_Get(
#line 423
  coords, offset + 4), IOSDoubleArray_Get(coords, offset + 5), IOSDoubleArray_Get(coords, offset + 6), IOSDoubleArray_Get(coords, offset + 7));
}

void HarmonyJavaAwtGeomCubicCurve2D_subdivideWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_(HarmonyJavaAwtGeomCubicCurve2D *src, HarmonyJavaAwtGeomCubicCurve2D *left, HarmonyJavaAwtGeomCubicCurve2D *right) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 431
  jdouble x1 = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(src)) getX1];
  jdouble y1 = [src getY1];
  jdouble cx1 = [src getCtrlX1];
  jdouble cy1 = [src getCtrlY1];
  jdouble cx2 = [src getCtrlX2];
  jdouble cy2 = [src getCtrlY2];
  jdouble x2 = [src getX2];
  jdouble y2 = [src getY2];
  jdouble cx = (cx1 + cx2) / 2.0;
  jdouble cy = (cy1 + cy2) / 2.0;
  cx1 = (x1 + cx1) / 2.0;
  cy1 = (y1 + cy1) / 2.0;
  cx2 = (x2 + cx2) / 2.0;
  cy2 = (y2 + cy2) / 2.0;
  jdouble ax = (cx1 + cx) / 2.0;
  jdouble ay = (cy1 + cy) / 2.0;
  jdouble bx = (cx2 + cx) / 2.0;
  jdouble by = (cy2 + cy) / 2.0;
  cx = (ax + bx) / 2.0;
  cy = (ay + by) / 2.0;
  if (left != nil) {
    [left setCurveWithDouble:x1 withDouble:y1 withDouble:cx1 withDouble:cy1 withDouble:ax withDouble:ay withDouble:cx withDouble:cy];
  }
  if (right != nil) {
    [right setCurveWithDouble:cx withDouble:cy withDouble:bx withDouble:by withDouble:cx2 withDouble:cy2 withDouble:x2 withDouble:y2];
  }
}


#line 459
void HarmonyJavaAwtGeomCubicCurve2D_subdivideWithDoubleArray_withInt_withDoubleArray_withInt_withDoubleArray_withInt_(IOSDoubleArray *src, jint srcOff, IOSDoubleArray *left, jint leftOff, IOSDoubleArray *right, jint rightOff) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 460
  jdouble x1 = IOSDoubleArray_Get(nil_chk(src), srcOff + 0);
  jdouble y1 = IOSDoubleArray_Get(src, srcOff + 1);
  jdouble cx1 = IOSDoubleArray_Get(src, srcOff + 2);
  jdouble cy1 = IOSDoubleArray_Get(src, srcOff + 3);
  jdouble cx2 = IOSDoubleArray_Get(src, srcOff + 4);
  jdouble cy2 = IOSDoubleArray_Get(src, srcOff + 5);
  jdouble x2 = IOSDoubleArray_Get(src, srcOff + 6);
  jdouble y2 = IOSDoubleArray_Get(src, srcOff + 7);
  jdouble cx = (cx1 + cx2) / 2.0;
  jdouble cy = (cy1 + cy2) / 2.0;
  cx1 = (x1 + cx1) / 2.0;
  cy1 = (y1 + cy1) / 2.0;
  cx2 = (x2 + cx2) / 2.0;
  cy2 = (y2 + cy2) / 2.0;
  jdouble ax = (cx1 + cx) / 2.0;
  jdouble ay = (cy1 + cy) / 2.0;
  jdouble bx = (cx2 + cx) / 2.0;
  jdouble by = (cy2 + cy) / 2.0;
  cx = (ax + bx) / 2.0;
  cy = (ay + by) / 2.0;
  if (left != nil) {
    *IOSDoubleArray_GetRef(left, leftOff + 0) = x1;
    *IOSDoubleArray_GetRef(left, leftOff + 1) = y1;
    *IOSDoubleArray_GetRef(left, leftOff + 2) = cx1;
    *IOSDoubleArray_GetRef(left, leftOff + 3) = cy1;
    *IOSDoubleArray_GetRef(left, leftOff + 4) = ax;
    *IOSDoubleArray_GetRef(left, leftOff + 5) = ay;
    *IOSDoubleArray_GetRef(left, leftOff + 6) = cx;
    *IOSDoubleArray_GetRef(left, leftOff + 7) = cy;
  }
  if (right != nil) {
    *IOSDoubleArray_GetRef(right, rightOff + 0) = cx;
    *IOSDoubleArray_GetRef(right, rightOff + 1) = cy;
    *IOSDoubleArray_GetRef(right, rightOff + 2) = bx;
    *IOSDoubleArray_GetRef(right, rightOff + 3) = by;
    *IOSDoubleArray_GetRef(right, rightOff + 4) = cx2;
    *IOSDoubleArray_GetRef(right, rightOff + 5) = cy2;
    *IOSDoubleArray_GetRef(right, rightOff + 6) = x2;
    *IOSDoubleArray_GetRef(right, rightOff + 7) = y2;
  }
}


#line 502
jint HarmonyJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_(IOSDoubleArray *eqn) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 503
  return HarmonyJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(eqn, eqn);
}


#line 506
jint HarmonyJavaAwtGeomCubicCurve2D_solveCubicWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res) {
  HarmonyJavaAwtGeomCubicCurve2D_initialize();
  
#line 507
  return ComCrossing_solveCubicWithDoubleArray_withDoubleArray_(eqn, res);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomCubicCurve2D)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/CubicCurve2D.java"


#line 32
@implementation HarmonyJavaAwtGeomCubicCurve2D_Float

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 43
- (instancetype)init {
  HarmonyJavaAwtGeomCubicCurve2D_Float_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 46
- (instancetype)initWithFloat:(jfloat)x1
                    withFloat:(jfloat)y1
                    withFloat:(jfloat)ctrlx1
                    withFloat:(jfloat)ctrly1
                    withFloat:(jfloat)ctrlx2
                    withFloat:(jfloat)ctrly2
                    withFloat:(jfloat)x2
                    withFloat:(jfloat)y2 {
  HarmonyJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}


#line 50
- (jdouble)getX1 {
  
#line 52
  return x1_;
}


#line 55
- (jdouble)getY1 {
  
#line 57
  return y1_;
}


#line 60
- (jdouble)getCtrlX1 {
  
#line 62
  return ctrlx1_;
}


#line 65
- (jdouble)getCtrlY1 {
  
#line 67
  return ctrly1_;
}


#line 70
- (jdouble)getCtrlX2 {
  
#line 72
  return ctrlx2_;
}


#line 75
- (jdouble)getCtrlY2 {
  
#line 77
  return ctrly2_;
}


#line 80
- (jdouble)getX2 {
  
#line 82
  return x2_;
}


#line 85
- (jdouble)getY2 {
  
#line 87
  return y2_;
}


#line 90
- (HarmonyJavaAwtGeomPoint2D *)getP1 {
  
#line 92
  return new_HarmonyJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(x1_, y1_);
}


#line 95
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP1 {
  
#line 97
  return new_HarmonyJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(ctrlx1_, ctrly1_);
}


#line 100
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP2 {
  
#line 102
  return new_HarmonyJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(ctrlx2_, ctrly2_);
}


#line 105
- (HarmonyJavaAwtGeomPoint2D *)getP2 {
  
#line 107
  return new_HarmonyJavaAwtGeomPoint2D_Float_initWithFloat_withFloat_(x2_, y2_);
}


#line 110
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  
#line 113
  self->x1_ = (jfloat) x1;
  self->y1_ = (jfloat) y1;
  self->ctrlx1_ = (jfloat) ctrlx1;
  self->ctrly1_ = (jfloat) ctrly1;
  self->ctrlx2_ = (jfloat) ctrlx2;
  self->ctrly2_ = (jfloat) ctrly2;
  self->x2_ = (jfloat) x2;
  self->y2_ = (jfloat) y2;
}


#line 123
- (void)setCurveWithFloat:(jfloat)x1
                withFloat:(jfloat)y1
                withFloat:(jfloat)ctrlx1
                withFloat:(jfloat)ctrly1
                withFloat:(jfloat)ctrlx2
                withFloat:(jfloat)ctrly2
                withFloat:(jfloat)x2
                withFloat:(jfloat)y2 {
  
#line 125
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 135
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  jfloat rx1 = JavaLangMath_minWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(x1_, x2_), JavaLangMath_minWithFloat_withFloat_(ctrlx1_, ctrlx2_));
  jfloat ry1 = JavaLangMath_minWithFloat_withFloat_(JavaLangMath_minWithFloat_withFloat_(y1_, y2_), JavaLangMath_minWithFloat_withFloat_(ctrly1_, ctrly2_));
  jfloat rx2 = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_maxWithFloat_withFloat_(x1_, x2_), JavaLangMath_maxWithFloat_withFloat_(ctrlx1_, ctrlx2_));
  jfloat ry2 = JavaLangMath_maxWithFloat_withFloat_(JavaLangMath_maxWithFloat_withFloat_(y1_, y2_), JavaLangMath_maxWithFloat_withFloat_(ctrly1_, ctrly2_));
  return new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(rx1, ry1, rx2 - rx1, ry2 - ry1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(getX1);
  methods[3].selector = @selector(getY1);
  methods[4].selector = @selector(getCtrlX1);
  methods[5].selector = @selector(getCtrlY1);
  methods[6].selector = @selector(getCtrlX2);
  methods[7].selector = @selector(getCtrlY2);
  methods[8].selector = @selector(getX2);
  methods[9].selector = @selector(getY2);
  methods[10].selector = @selector(getP1);
  methods[11].selector = @selector(getCtrlP1);
  methods[12].selector = @selector(getCtrlP2);
  methods[13].selector = @selector(getP2);
  methods[14].selector = @selector(setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[15].selector = @selector(setCurveWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[16].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y1_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrlx1_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrly1_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrlx2_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrly2_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "x2_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y2_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFFFFFF", "setCurve", "DDDDDDDD", "LHarmonyJavaAwtGeomCubicCurve2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomCubicCurve2D_Float = { "Float", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 17, 8, 3, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomCubicCurve2D_Float;
}

@end


#line 43
void HarmonyJavaAwtGeomCubicCurve2D_Float_init(HarmonyJavaAwtGeomCubicCurve2D_Float *self) {
  HarmonyJavaAwtGeomCubicCurve2D_init(self);
}


#line 43
HarmonyJavaAwtGeomCubicCurve2D_Float *new_HarmonyJavaAwtGeomCubicCurve2D_Float_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Float, init)
}


#line 43
HarmonyJavaAwtGeomCubicCurve2D_Float *create_HarmonyJavaAwtGeomCubicCurve2D_Float_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Float, init)
}


#line 46
void HarmonyJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtGeomCubicCurve2D_Float *self, jfloat x1, jfloat y1, jfloat ctrlx1, jfloat ctrly1, jfloat ctrlx2, jfloat ctrly2, jfloat x2, jfloat y2) {
  HarmonyJavaAwtGeomCubicCurve2D_init(self);
  
#line 47
  [self setCurveWithFloat:x1 withFloat:y1 withFloat:ctrlx1 withFloat:ctrly1 withFloat:ctrlx2 withFloat:ctrly2 withFloat:x2 withFloat:y2];
}


#line 46
HarmonyJavaAwtGeomCubicCurve2D_Float *new_HarmonyJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x1, jfloat y1, jfloat ctrlx1, jfloat ctrly1, jfloat ctrlx2, jfloat ctrly2, jfloat x2, jfloat y2) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2)
}


#line 46
HarmonyJavaAwtGeomCubicCurve2D_Float *create_HarmonyJavaAwtGeomCubicCurve2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x1, jfloat y1, jfloat ctrlx1, jfloat ctrly1, jfloat ctrlx2, jfloat ctrly2, jfloat x2, jfloat y2) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Float, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomCubicCurve2D_Float)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/CubicCurve2D.java"


#line 144
@implementation HarmonyJavaAwtGeomCubicCurve2D_Double

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 155
- (instancetype)init {
  HarmonyJavaAwtGeomCubicCurve2D_Double_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 158
- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)ctrlx1
                    withDouble:(jdouble)ctrly1
                    withDouble:(jdouble)ctrlx2
                    withDouble:(jdouble)ctrly2
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  HarmonyJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2);
  return self;
}


#line 163
- (jdouble)getX1 {
  
#line 165
  return x1_;
}


#line 168
- (jdouble)getY1 {
  
#line 170
  return y1_;
}


#line 173
- (jdouble)getCtrlX1 {
  
#line 175
  return ctrlx1_;
}


#line 178
- (jdouble)getCtrlY1 {
  
#line 180
  return ctrly1_;
}


#line 183
- (jdouble)getCtrlX2 {
  
#line 185
  return ctrlx2_;
}


#line 188
- (jdouble)getCtrlY2 {
  
#line 190
  return ctrly2_;
}


#line 193
- (jdouble)getX2 {
  
#line 195
  return x2_;
}


#line 198
- (jdouble)getY2 {
  
#line 200
  return y2_;
}


#line 203
- (HarmonyJavaAwtGeomPoint2D *)getP1 {
  
#line 205
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x1_, y1_);
}


#line 208
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP1 {
  
#line 210
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(ctrlx1_, ctrly1_);
}


#line 213
- (HarmonyJavaAwtGeomPoint2D *)getCtrlP2 {
  
#line 215
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(ctrlx2_, ctrly2_);
}


#line 218
- (HarmonyJavaAwtGeomPoint2D *)getP2 {
  
#line 220
  return new_HarmonyJavaAwtGeomPoint2D_Double_initWithDouble_withDouble_(x2_, y2_);
}


#line 223
- (void)setCurveWithDouble:(jdouble)x1
                withDouble:(jdouble)y1
                withDouble:(jdouble)ctrlx1
                withDouble:(jdouble)ctrly1
                withDouble:(jdouble)ctrlx2
                withDouble:(jdouble)ctrly2
                withDouble:(jdouble)x2
                withDouble:(jdouble)y2 {
  
#line 226
  self->x1_ = x1;
  self->y1_ = y1;
  self->ctrlx1_ = ctrlx1;
  self->ctrly1_ = ctrly1;
  self->ctrlx2_ = ctrlx2;
  self->ctrly2_ = ctrly2;
  self->x2_ = x2;
  self->y2_ = y2;
}


#line 236
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  jdouble rx1 = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(x1_, x2_), JavaLangMath_minWithDouble_withDouble_(ctrlx1_, ctrlx2_));
  jdouble ry1 = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(y1_, y2_), JavaLangMath_minWithDouble_withDouble_(ctrly1_, ctrly2_));
  jdouble rx2 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(x1_, x2_), JavaLangMath_maxWithDouble_withDouble_(ctrlx1_, ctrlx2_));
  jdouble ry2 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(y1_, y2_), JavaLangMath_maxWithDouble_withDouble_(ctrly1_, ctrly2_));
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(rx1, ry1, rx2 - rx1, ry2 - ry1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(getX1);
  methods[3].selector = @selector(getY1);
  methods[4].selector = @selector(getCtrlX1);
  methods[5].selector = @selector(getCtrlY1);
  methods[6].selector = @selector(getCtrlX2);
  methods[7].selector = @selector(getCtrlY2);
  methods[8].selector = @selector(getX2);
  methods[9].selector = @selector(getY2);
  methods[10].selector = @selector(getP1);
  methods[11].selector = @selector(getCtrlP1);
  methods[12].selector = @selector(getCtrlP2);
  methods[13].selector = @selector(getP2);
  methods[14].selector = @selector(setCurveWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[15].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x1_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y1_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrlx1_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrly1_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrlx2_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ctrly2_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "x2_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y2_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDDDDDD", "setCurve", "LHarmonyJavaAwtGeomCubicCurve2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomCubicCurve2D_Double = { "Double", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 16, 8, 2, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomCubicCurve2D_Double;
}

@end


#line 155
void HarmonyJavaAwtGeomCubicCurve2D_Double_init(HarmonyJavaAwtGeomCubicCurve2D_Double *self) {
  HarmonyJavaAwtGeomCubicCurve2D_init(self);
}


#line 155
HarmonyJavaAwtGeomCubicCurve2D_Double *new_HarmonyJavaAwtGeomCubicCurve2D_Double_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Double, init)
}


#line 155
HarmonyJavaAwtGeomCubicCurve2D_Double *create_HarmonyJavaAwtGeomCubicCurve2D_Double_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Double, init)
}


#line 158
void HarmonyJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(HarmonyJavaAwtGeomCubicCurve2D_Double *self, jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  HarmonyJavaAwtGeomCubicCurve2D_init(self);
  [self setCurveWithDouble:x1 withDouble:y1 withDouble:ctrlx1 withDouble:ctrly1 withDouble:ctrlx2 withDouble:ctrly2 withDouble:x2 withDouble:y2];
}


#line 158
HarmonyJavaAwtGeomCubicCurve2D_Double *new_HarmonyJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2)
}


#line 158
HarmonyJavaAwtGeomCubicCurve2D_Double *create_HarmonyJavaAwtGeomCubicCurve2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble ctrlx1, jdouble ctrly1, jdouble ctrlx2, jdouble ctrly2, jdouble x2, jdouble y2) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Double, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, x1, y1, ctrlx1, ctrly1, ctrlx2, ctrly2, x2, y2)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomCubicCurve2D_Double)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/CubicCurve2D.java"


#line 248
@implementation HarmonyJavaAwtGeomCubicCurve2D_Iterator


#line 274
- (instancetype)initWithHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)outer$
                    withHarmonyJavaAwtGeomCubicCurve2D:(HarmonyJavaAwtGeomCubicCurve2D *)c
                 withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  HarmonyJavaAwtGeomCubicCurve2D_Iterator_initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_(self, outer$, c, t);
  return self;
}


#line 279
- (jint)getWindingRule {
  return HarmonyJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > 1;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getX1];
    *IOSDoubleArray_GetRef(coords, 1) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getY1];
    count = 1;
  }
  else {
    
#line 303
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX1];
    *IOSDoubleArray_GetRef(coords, 1) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlY1];
    *IOSDoubleArray_GetRef(coords, 2) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX2];
    *IOSDoubleArray_GetRef(coords, 3) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlY2];
    *IOSDoubleArray_GetRef(coords, 4) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getX2];
    *IOSDoubleArray_GetRef(coords, 5) = [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getY2];
    count = 3;
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}


#line 318
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getX1];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getY1];
    count = 1;
  }
  else {
    
#line 330
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX1];
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlY1];
    *IOSFloatArray_GetRef(coords, 2) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlX2];
    *IOSFloatArray_GetRef(coords, 3) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getCtrlY2];
    *IOSFloatArray_GetRef(coords, 4) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getX2];
    *IOSFloatArray_GetRef(coords, 5) = (jfloat) [((HarmonyJavaAwtGeomCubicCurve2D *) nil_chk(c_)) getY2];
    count = 3;
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count];
  }
  return type;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomCubicCurve2D:withHarmonyJavaAwtGeomCubicCurve2D:withHarmonyJavaAwtGeomAffineTransform:);
  methods[1].selector = @selector(getWindingRule);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(currentSegmentWithDoubleArray:);
  methods[5].selector = @selector(currentSegmentWithFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "LHarmonyJavaAwtGeomCubicCurve2D;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "t_", "LHarmonyJavaAwtGeomAffineTransform;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomCubicCurve2D;LHarmonyJavaAwtGeomCubicCurve2D;LHarmonyJavaAwtGeomAffineTransform;", "currentSegment", "[D", "[F", "LHarmonyJavaAwtGeomCubicCurve2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomCubicCurve2D_Iterator = { "Iterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x0, 6, 3, 4, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomCubicCurve2D_Iterator;
}

@end


#line 274
void HarmonyJavaAwtGeomCubicCurve2D_Iterator_initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomCubicCurve2D_Iterator *self, HarmonyJavaAwtGeomCubicCurve2D *outer$, HarmonyJavaAwtGeomCubicCurve2D *c, HarmonyJavaAwtGeomAffineTransform *t) {
  NSObject_init(self);
  
#line 275
  self->c_ = c;
  self->t_ = t;
}


#line 274
HarmonyJavaAwtGeomCubicCurve2D_Iterator *new_HarmonyJavaAwtGeomCubicCurve2D_Iterator_initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomCubicCurve2D *outer$, HarmonyJavaAwtGeomCubicCurve2D *c, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Iterator, initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, c, t)
}


#line 274
HarmonyJavaAwtGeomCubicCurve2D_Iterator *create_HarmonyJavaAwtGeomCubicCurve2D_Iterator_initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomCubicCurve2D *outer$, HarmonyJavaAwtGeomCubicCurve2D *c, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomCubicCurve2D_Iterator, initWithHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomCubicCurve2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, c, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomCubicCurve2D_Iterator)
