//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PRTokeniser.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PRTokeniser.h"
#include "RandomAccessFileOrArray.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"

#if !__has_feature(objc_arc)
#error "PRTokeniser must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPRTokeniser () {
 @public
  ComAowagieTextPdfRandomAccessFileOrArray *file_;
  jint type_;
  NSString *stringValue_;
  jint reference_;
  jint generation_;
  jboolean hexString_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPRTokeniser, file_, ComAowagieTextPdfRandomAccessFileOrArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPRTokeniser, stringValue_, NSString *)

inline IOSBooleanArray *ComAowagieTextPdfPRTokeniser_get_delims(void);
static IOSBooleanArray *ComAowagieTextPdfPRTokeniser_delims;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPRTokeniser, delims, IOSBooleanArray *)

inline NSString *ComAowagieTextPdfPRTokeniser_get_EMPTY(void);
static NSString *ComAowagieTextPdfPRTokeniser_EMPTY = @"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPRTokeniser, EMPTY, NSString *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PRTokeniser.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPRTokeniser)


#line 57
@implementation ComAowagieTextPdfPRTokeniser


#line 108
- (instancetype)initWithNSString:(NSString *)filename {
  ComAowagieTextPdfPRTokeniser_initWithNSString_(self, filename);
  return self;
}


#line 112
- (instancetype)initWithByteArray:(IOSByteArray *)pdfIn {
  ComAowagieTextPdfPRTokeniser_initWithByteArray_(self, pdfIn);
  return self;
}


#line 116
- (instancetype)initWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)file {
  ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(self, file);
  return self;
}


#line 120
- (void)seekWithInt:(jint)pos {
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) seekWithInt:pos];
}

- (jint)getFilePointer {
  return [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) getFilePointer];
}

- (void)close {
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) close];
}

- (jint)length {
  return [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) length];
}

- (jint)read {
  return [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) read];
}

- (ComAowagieTextPdfRandomAccessFileOrArray *)getSafeFile {
  return new_ComAowagieTextPdfRandomAccessFileOrArray_initWithComAowagieTextPdfRandomAccessFileOrArray_(self->file_);
}

- (ComAowagieTextPdfRandomAccessFileOrArray *)getFile {
  return self->file_;
}

- (NSString *)readStringWithInt:(jint)size {
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  jint ch;
  while (size-- > 0) {
    ch = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) read];
    if (ch == -1) {
      break;
    }
    (void) [buf appendWithChar:(jchar) ch];
  }
  return [buf description];
}

+ (jboolean)isWhitespaceWithInt:(jint)ch {
  return ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(ch);
}


#line 169
- (jint)getTokenType {
  return self->type_;
}

- (NSString *)getStringValue {
  return self->stringValue_;
}

- (jint)getReference {
  return self->reference_;
}

- (jint)getGeneration {
  return self->generation_;
}

- (void)backOnePositionWithInt:(jint)ch {
  if (ch != -1) {
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) pushBackWithByte:(jbyte) ch];
  }
}

- (void)throwErrorWithNSString:(NSString *)error {
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$I", error, @" at file pointer ", [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) getFilePointer]));
}

- (jchar)checkPdfHeader {
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) setStartOffsetWithInt:0];
  NSString *str = [self readStringWithInt:1024];
  jint idx = [((NSString *) nil_chk(str)) java_indexOfString:@"%PDF-"];
  if (idx < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"PDF header signature not found.");
  }
  [self->file_ setStartOffsetWithInt:idx];
  return [str charAtWithInt:idx + 7];
}

- (void)checkFdfHeader {
  [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) setStartOffsetWithInt:0];
  NSString *str = [self readStringWithInt:1024];
  jint idx = [((NSString *) nil_chk(str)) java_indexOfString:@"%FDF-1.2"];
  if (idx < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"FDF header signature not found.");
  }
  [self->file_ setStartOffsetWithInt:idx];
}

- (jint)getStartxref {
  jint size = JavaLangMath_minWithInt_withInt_(1024, [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) length]);
  jint pos = [self->file_ length] - size;
  [self->file_ seekWithInt:pos];
  NSString *str = [self readStringWithInt:1024];
  jint idx = [((NSString *) nil_chk(str)) java_lastIndexOfString:@"startxref"];
  if (idx < 0) {
    @throw new_JavaIoIOException_initWithNSString_(@"PDF startxref not found.");
  }
  return pos + idx;
}

+ (jint)getHexWithInt:(jint)v {
  return ComAowagieTextPdfPRTokeniser_getHexWithInt_(v);
}


#line 241
- (void)nextValidToken {
  jint level = 0;
  NSString *n1 = nil;
  NSString *n2 = nil;
  jint ptr = 0;
  while ([self nextToken]) {
    if (self->type_ == ComAowagieTextPdfPRTokeniser_TK_COMMENT) {
      continue;
    }
    switch (level) {
      case 0:
      {
        if (self->type_ != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
          return;
        }
        ptr = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) getFilePointer];
        n1 = self->stringValue_;
        ++level;
        break;
      }
      case 1:
      {
        if (self->type_ != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
          [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) seekWithInt:ptr];
          self->type_ = ComAowagieTextPdfPRTokeniser_TK_NUMBER;
          self->stringValue_ = n1;
          return;
        }
        n2 = self->stringValue_;
        ++level;
        break;
      }
      default:
      {
        if (self->type_ != ComAowagieTextPdfPRTokeniser_TK_OTHER || ![((NSString *) nil_chk(self->stringValue_)) isEqual:@"R"]) {
          [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) seekWithInt:ptr];
          self->type_ = ComAowagieTextPdfPRTokeniser_TK_NUMBER;
          self->stringValue_ = n1;
          return;
        }
        self->type_ = ComAowagieTextPdfPRTokeniser_TK_REF;
        self->reference_ = JavaLangInteger_parseIntWithNSString_(n1);
        self->generation_ = JavaLangInteger_parseIntWithNSString_(n2);
        return;
      }
    }
  }
  
#line 289
  if (level > 0) {
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_NUMBER;
    [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) seekWithInt:ptr];
    self->stringValue_ = n1;
    return;
  }
  
#line 302
  [self throwErrorWithNSString:@"Unexpected end of file"];
}


#line 308
- (jboolean)nextToken {
  jint ch = 0;
  do {
    ch = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(self->file_)) read];
  }
  while (
#line 312
  ch != -1 && ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(ch));
  if (ch == -1) {
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_ENDOFFILE;
    return false;
  }
  
#line 321
  JavaLangStringBuffer *outBuf = nil;
  self->stringValue_ = ComAowagieTextPdfPRTokeniser_EMPTY;
  
#line 324
  switch (ch) {
    case '[':
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_START_ARRAY;
    break;
    case ']':
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_END_ARRAY;
    break;
    case '/':
    {
      outBuf = new_JavaLangStringBuffer_init();
      self->type_ = ComAowagieTextPdfPRTokeniser_TK_NAME;
      while (true) {
        ch = [self->file_ read];
        if (IOSBooleanArray_Get(nil_chk(ComAowagieTextPdfPRTokeniser_delims), ch + 1)) {
          break;
        }
        if (ch == '#') {
          ch = (JreLShift32(ComAowagieTextPdfPRTokeniser_getHexWithInt_([self->file_ read]), 4)) + ComAowagieTextPdfPRTokeniser_getHexWithInt_([self->file_ read]);
        }
        (void) [outBuf appendWithChar:(jchar) ch];
      }
      [self backOnePositionWithInt:ch];
      break;
    }
    case '>':
    ch = [self->file_ read];
    if (ch != '>') {
      [self throwErrorWithNSString:@"'>' not expected"];
    }
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_END_DIC;
    break;
    case '<':
    {
      jint v1 = [self->file_ read];
      if (v1 == '<') {
        self->type_ = ComAowagieTextPdfPRTokeniser_TK_START_DIC;
        break;
      }
      outBuf = new_JavaLangStringBuffer_init();
      self->type_ = ComAowagieTextPdfPRTokeniser_TK_STRING;
      self->hexString_ = true;
      jint v2 = 0;
      while (true) {
        while (ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(v1)) {
          v1 = [self->file_ read];
        }
        if (v1 == '>') {
          break;
        }
        v1 = ComAowagieTextPdfPRTokeniser_getHexWithInt_(v1);
        if (v1 < 0) {
          break;
        }
        v2 = [self->file_ read];
        while (ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(v2)) {
          v2 = [self->file_ read];
        }
        if (v2 == '>') {
          ch = JreLShift32(v1, 4);
          (void) [outBuf appendWithChar:(jchar) ch];
          break;
        }
        v2 = ComAowagieTextPdfPRTokeniser_getHexWithInt_(v2);
        if (v2 < 0) {
          break;
        }
        ch = (JreLShift32(v1, 4)) + v2;
        (void) [outBuf appendWithChar:(jchar) ch];
        v1 = [self->file_ read];
      }
      if (v1 < 0 || v2 < 0) {
        [self throwErrorWithNSString:@"Error reading string"];
      }
      break;
    }
    case '%':
    self->type_ = ComAowagieTextPdfPRTokeniser_TK_COMMENT;
    do {
      ch = [self->file_ read];
    }
    while (
#line 403
    ch != -1 && ch != 0x000d && ch != 0x000a);
    break;
    case '(':
    {
      outBuf = new_JavaLangStringBuffer_init();
      self->type_ = ComAowagieTextPdfPRTokeniser_TK_STRING;
      self->hexString_ = false;
      jint nesting = 0;
      while (true) {
        ch = [self->file_ read];
        if (ch == -1) {
          break;
        }
        if (ch == '(') {
          ++nesting;
        }
        else if (ch == ')') {
          --nesting;
        }
        else if (ch == '\\') {
          jboolean lineBreak = false;
          ch = [self->file_ read];
          switch (ch) {
            case 'n':
            ch = 0x000a;
            break;
            case 'r':
            ch = 0x000d;
            break;
            case 't':
            ch = 0x0009;
            break;
            case 'b':
            ch = 0x0008;
            break;
            case 'f':
            ch = 0x000c;
            break;
            case '(':
            case ')':
            case '\\':
            break;
            case 0x000d:
            lineBreak = true;
            ch = [self->file_ read];
            if (ch != 0x000a) {
              [self backOnePositionWithInt:ch];
            }
            break;
            case 0x000a:
            lineBreak = true;
            break;
            default:
            {
              if (ch < '0' || ch > '7') {
                break;
              }
              jint octal = ch - '0';
              ch = [self->file_ read];
              if (ch < '0' || ch > '7') {
                [self backOnePositionWithInt:ch];
                ch = octal;
                break;
              }
              octal = (JreLShift32(octal, 3)) + ch - '0';
              ch = [self->file_ read];
              if (ch < '0' || ch > '7') {
                [self backOnePositionWithInt:ch];
                ch = octal;
                break;
              }
              octal = (JreLShift32(octal, 3)) + ch - '0';
              ch = octal & (jint) 0xff;
              break;
            }
          }
          if (lineBreak) {
            continue;
          }
          if (ch < 0) {
            break;
          }
        }
        else if (ch == 0x000d) {
          ch = [self->file_ read];
          if (ch < 0) {
            break;
          }
          if (ch != 0x000a) {
            [self backOnePositionWithInt:ch];
            ch = 0x000a;
          }
        }
        if (nesting == -1) {
          break;
        }
        (void) [outBuf appendWithChar:(jchar) ch];
      }
      if (ch == -1) {
        [self throwErrorWithNSString:@"Error reading string"];
      }
      break;
    }
    default:
    {
      outBuf = new_JavaLangStringBuffer_init();
      if (ch == '-' || ch == '+' || ch == '.' || (ch >= '0' && ch <= '9')) {
        self->type_ = ComAowagieTextPdfPRTokeniser_TK_NUMBER;
        do {
          (void) [outBuf appendWithChar:(jchar) ch];
          ch = [self->file_ read];
        }
        while (
#line 514
        ch != -1 && ((ch >= '0' && ch <= '9') || ch == '.'));
      }
      else {
        self->type_ = ComAowagieTextPdfPRTokeniser_TK_OTHER;
        do {
          (void) [outBuf appendWithChar:(jchar) ch];
          ch = [self->file_ read];
        }
        while (
#line 521
        !IOSBooleanArray_Get(nil_chk(ComAowagieTextPdfPRTokeniser_delims), ch + 1));
      }
      [self backOnePositionWithInt:ch];
      break;
    }
  }
  if (outBuf != nil) {
    self->stringValue_ = [outBuf description];
  }
  return true;
}


#line 533
- (jint)intValue {
  return JavaLangInteger_parseIntWithNSString_(self->stringValue_);
}

- (jboolean)readLineSegmentWithByteArray:(IOSByteArray *)input {
  jint c = -1;
  jboolean eol = false;
  jint ptr = 0;
  jint len = ((IOSByteArray *) nil_chk(input))->size_;
  
#line 545
  if (ptr < len) {
    while (ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(c = [self read])) {
    }
  }
  
#line 550
  while (!eol && ptr < len) {
    {
      
#line 558
      jint cur;
      
#line 551
      switch (c) {
        case -1:
        case 0x000a:
        eol = true;
        break;
        case 0x000d:
        eol = true;
        cur = [self getFilePointer];
        if ([self read] != 0x000a) {
          [self seekWithInt:cur];
        }
        break;
        default:
        *IOSByteArray_GetRef(input, ptr++) = (jbyte) c;
        break;
      }
    }
    
#line 569
    if (eol || len <= ptr) {
      break;
    }
    else {
      c = [self read];
    }
  }
  if (ptr >= len) {
    eol = false;
    while (!eol) {
      {
        
#line 586
        jint cur;
        
#line 579
        switch (c = [self read]) {
          case -1:
          case 0x000a:
          eol = true;
          break;
          case 0x000d:
          eol = true;
          cur = [self getFilePointer];
          if ([self read] != 0x000a) {
            [self seekWithInt:cur];
          }
          break;
        }
      }
    }
  }
  if (c == -1 && ptr == 0) {
    return false;
  }
  if (ptr + 2 <= len) {
    *IOSByteArray_GetRef(input, ptr++) = (jbyte) ' ';
    *IOSByteArray_GetRef(input, ptr) = (jbyte) 'X';
  }
  return true;
}


#line 605
+ (IOSIntArray *)checkObjectStartWithByteArray:(IOSByteArray *)line {
  return ComAowagieTextPdfPRTokeniser_checkObjectStartWithByteArray_(line);
}


#line 632
- (jboolean)isHexString {
  return self->hexString_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, 1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfRandomAccessFileOrArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfRandomAccessFileOrArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 6, 5, 1, -1, -1, -1 },
    { NULL, "Z", 0x18, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 0, 1, -1, -1, -1 },
    { NULL, "C", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 2, 1, -1, -1, -1 },
    { NULL, "[I", 0x8, 12, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithComAowagieTextPdfRandomAccessFileOrArray:);
  methods[3].selector = @selector(seekWithInt:);
  methods[4].selector = @selector(getFilePointer);
  methods[5].selector = @selector(close);
  methods[6].selector = @selector(length);
  methods[7].selector = @selector(read);
  methods[8].selector = @selector(getSafeFile);
  methods[9].selector = @selector(getFile);
  methods[10].selector = @selector(readStringWithInt:);
  methods[11].selector = @selector(isWhitespaceWithInt:);
  methods[12].selector = @selector(getTokenType);
  methods[13].selector = @selector(getStringValue);
  methods[14].selector = @selector(getReference);
  methods[15].selector = @selector(getGeneration);
  methods[16].selector = @selector(backOnePositionWithInt:);
  methods[17].selector = @selector(throwErrorWithNSString:);
  methods[18].selector = @selector(checkPdfHeader);
  methods[19].selector = @selector(checkFdfHeader);
  methods[20].selector = @selector(getStartxref);
  methods[21].selector = @selector(getHexWithInt:);
  methods[22].selector = @selector(nextValidToken);
  methods[23].selector = @selector(nextToken);
  methods[24].selector = @selector(intValue);
  methods[25].selector = @selector(readLineSegmentWithByteArray:);
  methods[26].selector = @selector(checkObjectStartWithByteArray:);
  methods[27].selector = @selector(isHexString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TK_NUMBER", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_NUMBER, 0x18, -1, -1, -1, -1 },
    { "TK_STRING", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_STRING, 0x18, -1, -1, -1, -1 },
    { "TK_NAME", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_NAME, 0x18, -1, -1, -1, -1 },
    { "TK_COMMENT", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_COMMENT, 0x18, -1, -1, -1, -1 },
    { "TK_START_ARRAY", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_START_ARRAY, 0x18, -1, -1, -1, -1 },
    { "TK_END_ARRAY", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_END_ARRAY, 0x18, -1, -1, -1, -1 },
    { "TK_START_DIC", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_START_DIC, 0x18, -1, -1, -1, -1 },
    { "TK_END_DIC", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_END_DIC, 0x18, -1, -1, -1, -1 },
    { "TK_REF", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_REF, 0x18, -1, -1, -1, -1 },
    { "TK_OTHER", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_OTHER, 0x18, -1, -1, -1, -1 },
    { "TK_ENDOFFILE", "I", .constantValue.asInt = ComAowagieTextPdfPRTokeniser_TK_ENDOFFILE, 0x19, -1, -1, -1, -1 },
    { "delims", "[Z", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "EMPTY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "file_", "LComAowagieTextPdfRandomAccessFileOrArray;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stringValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reference_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "generation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hexString_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoIOException;", "[B", "LComAowagieTextPdfRandomAccessFileOrArray;", "seek", "I", "readString", "isWhitespace", "backOnePosition", "throwError", "getHex", "readLineSegment", "checkObjectStart", &ComAowagieTextPdfPRTokeniser_delims, &ComAowagieTextPdfPRTokeniser_EMPTY };
  static const J2ObjcClassInfo _ComAowagieTextPdfPRTokeniser = { "PRTokeniser", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 28, 19, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPRTokeniser;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPRTokeniser class]) {
    ComAowagieTextPdfPRTokeniser_delims = [IOSBooleanArray newArrayWithBooleans:(jboolean[]){
#line 71
      true, true, false, false, false, false, false, false, false, false,
#line 72
      true, true, false, true, true, false, false, false, false, false,
#line 73
      false, false, false, false, false, false, false, false, false, false,
#line 74
      false, false, false, true, false, false, false, false, true, false,
#line 75
      false, true, true, false, false, false, false, false, true, false,
#line 76
      false, false, false, false, false, false, false, false, false, false,
#line 77
      false, true, false, true, false, false, false, false, false, false,
#line 78
      false, false, false, false, false, false, false, false, false, false,
#line 79
      false, false, false, false, false, false, false, false, false, false,
#line 80
      false, false, true, false, true, false, false, false, false, false,
#line 81
      false, false, false, false, false, false, false, false, false, false,
#line 82
      false, false, false, false, false, false, false, false, false, false,
#line 83
      false, false, false, false, false, false, false, false, false, false,
#line 84
      false, false, false, false, false, false, false, false, false, false,
#line 85
      false, false, false, false, false, false, false, false, false, false,
#line 86
      false, false, false, false, false, false, false, false, false, false,
#line 87
      false, false, false, false, false, false, false, false, false, false,
#line 88
      false, false, false, false, false, false, false, false, false, false,
#line 89
      false, false, false, false, false, false, false, false, false, false,
#line 90
      false, false, false, false, false, false, false, false, false, false,
#line 91
      false, false, false, false, false, false, false, false, false, false,
#line 92
      false, false, false, false, false, false, false, false, false, false,
#line 93
      false, false, false, false, false, false, false, false, false, false,
#line 94
      false, false, false, false, false, false, false, false, false, false,
#line 95
      false, false, false, false, false, false, false, false, false, false,
#line 96
      false, false, false, false, false, false, false } count:257];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPRTokeniser)
    }
  }

@end


#line 108
void ComAowagieTextPdfPRTokeniser_initWithNSString_(ComAowagieTextPdfPRTokeniser *self, NSString *filename) {
  NSObject_init(self);
  
#line 109
  self->file_ = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithNSString_(filename);
}


#line 108
ComAowagieTextPdfPRTokeniser *new_ComAowagieTextPdfPRTokeniser_initWithNSString_(NSString *filename) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRTokeniser, initWithNSString_, filename)
}


#line 108
ComAowagieTextPdfPRTokeniser *create_ComAowagieTextPdfPRTokeniser_initWithNSString_(NSString *filename) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRTokeniser, initWithNSString_, filename)
}

void ComAowagieTextPdfPRTokeniser_initWithByteArray_(ComAowagieTextPdfPRTokeniser *self, IOSByteArray *pdfIn) {
  NSObject_init(self);
  
#line 113
  self->file_ = new_ComAowagieTextPdfRandomAccessFileOrArray_initWithByteArray_(pdfIn);
}


#line 112
ComAowagieTextPdfPRTokeniser *new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(IOSByteArray *pdfIn) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRTokeniser, initWithByteArray_, pdfIn)
}


#line 112
ComAowagieTextPdfPRTokeniser *create_ComAowagieTextPdfPRTokeniser_initWithByteArray_(IOSByteArray *pdfIn) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRTokeniser, initWithByteArray_, pdfIn)
}

void ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfPRTokeniser *self, ComAowagieTextPdfRandomAccessFileOrArray *file) {
  NSObject_init(self);
  
#line 117
  self->file_ = file;
}


#line 116
ComAowagieTextPdfPRTokeniser *new_ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPRTokeniser, initWithComAowagieTextPdfRandomAccessFileOrArray_, file)
}


#line 116
ComAowagieTextPdfPRTokeniser *create_ComAowagieTextPdfPRTokeniser_initWithComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfRandomAccessFileOrArray *file) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPRTokeniser, initWithComAowagieTextPdfRandomAccessFileOrArray_, file)
}


#line 161
jboolean ComAowagieTextPdfPRTokeniser_isWhitespaceWithInt_(jint ch) {
  ComAowagieTextPdfPRTokeniser_initialize();
  
#line 162
  return ch == 0 || ch == 9 || ch == 10 || ch == 12 || ch == 13 || ch == 32;
}


#line 228
jint ComAowagieTextPdfPRTokeniser_getHexWithInt_(jint v) {
  ComAowagieTextPdfPRTokeniser_initialize();
  
#line 229
  if (v >= '0' && v <= '9') {
    return v - '0';
  }
  if (v >= 'A' && v <= 'F') {
    return v - 'A' + 10;
  }
  if (v >= 'a' && v <= 'f') {
    return v - 'a' + 10;
  }
  return -1;
}


#line 605
IOSIntArray *ComAowagieTextPdfPRTokeniser_checkObjectStartWithByteArray_(IOSByteArray *line) {
  ComAowagieTextPdfPRTokeniser_initialize();
  
#line 606
  @try {
    ComAowagieTextPdfPRTokeniser *tk = new_ComAowagieTextPdfPRTokeniser_initWithByteArray_(line);
    jint num = 0;
    jint gen = 0;
    if (![tk nextToken] || [tk getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      return nil;
    }
    num = [tk intValue];
    if (![tk nextToken] || [tk getTokenType] != ComAowagieTextPdfPRTokeniser_TK_NUMBER) {
      return nil;
    }
    gen = [tk intValue];
    if (![tk nextToken]) {
      return nil;
    }
    if (![((NSString *) nil_chk([tk getStringValue])) isEqual:@"obj"]) {
      return nil;
    }
    return [IOSIntArray newArrayWithInts:(jint[]){ num, gen } count:2];
  }
  @catch (JavaLangException *ioe) {
  }
  
#line 629
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPRTokeniser)
