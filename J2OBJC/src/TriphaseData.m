//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/TriphaseData.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LoggerUtil.h"
#include "SecureXmlBuilder.h"
#include "TriphaseData.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/UUID.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/logging/Logger.h"
#include "javax/xml/parsers/DocumentBuilder.h"
#include "org/w3c/dom/Document.h"
#include "org/w3c/dom/Element.h"
#include "org/w3c/dom/NamedNodeMap.h"
#include "org/w3c/dom/Node.h"
#include "org/w3c/dom/NodeList.h"

#if !__has_feature(objc_arc)
#error "TriphaseData must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersTriphaseData () {
 @public
  id<JavaUtilList> signs_;
  NSString *format_;
}

/*!
 @brief Analiza el nodo con el listado de firmas.
 @param signsNode Nodo con el listado de firmas.
 @return Listado con la informaci&oacute;n de cada operaci&oacute;n de firma.
 */
+ (id<JavaUtilList>)parseSignsNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)signsNode;

/*!
 @brief Obtiene una lista de par&aacute;metros del XML.
 @param paramsNode Nodo con la lista de par &aacute; metros.
 @return Mapa con los par&aacute;metro encontrados y sus valores.
 */
+ (id<JavaUtilMap>)parseParamsListNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)paramsNode;

/*!
 @brief Recupera el &iacute;ndice del siguiente nodo de la lista de tipo <code>Element</code>.
 Empieza a comprobar los nodos a partir del &iacute;ndice marcado. Si no encuentra un
  nodo de tipo <i>elemento</i> devuelve -1.
 @param nodes Listado de nodos.
 @param currentIndex &Iacute; ndice del listado a partir del cual se empieza la comprobaci &oacute; n.
 @return &Iacute;ndice del siguiente node de tipo Element o -1 si no se encontr&oacute;.
 */
+ (jint)nextNodeElementIndexWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)nodes
                                          withInt:(jint)currentIndex;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersTriphaseData, signs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersTriphaseData, format_, NSString *)

__attribute__((unused)) static id<JavaUtilList> EsGobAfirmaCoreSignersTriphaseData_parseSignsNodeWithOrgW3cDomNode_(id<OrgW3cDomNode> signsNode);

__attribute__((unused)) static id<JavaUtilMap> EsGobAfirmaCoreSignersTriphaseData_parseParamsListNodeWithOrgW3cDomNode_(id<OrgW3cDomNode> paramsNode);

__attribute__((unused)) static jint EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(id<OrgW3cDomNodeList> nodes, jint currentIndex);

@interface EsGobAfirmaCoreSignersTriphaseData_TriSign () {
 @public
  id<JavaUtilMap> dict_;
  NSString *id__;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersTriphaseData_TriSign, dict_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreSignersTriphaseData_TriSign, id__, NSString *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/TriphaseData.java"


#line 35
@implementation EsGobAfirmaCoreSignersTriphaseData


#line 115
- (NSString *)getFormat {
  return self->format_;
}


#line 121
- (void)setFormatWithNSString:(NSString *)fmt {
  self->format_ = fmt;
}


#line 130
- (EsGobAfirmaCoreSignersTriphaseData_TriSign *)getTriSignWithNSString:(NSString *)signId {
  if (signId == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 133
    @"El ID de la firma no puede ser nulo");
  }
  
#line 136
  for (EsGobAfirmaCoreSignersTriphaseData_TriSign * __strong ts in nil_chk(self->signs_)) {
    if ([signId isEqual:[((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(ts)) getId]]) {
      return ts;
    }
  }
  return nil;
}


#line 148
- (id<JavaUtilList>)getTriSignsWithNSString:(NSString *)signId {
  if (signId == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 151
    @"El ID de la firma no puede ser nulo");
  }
  
#line 154
  id<JavaUtilList> tsl = new_JavaUtilArrayList_init();
  for (EsGobAfirmaCoreSignersTriphaseData_TriSign * __strong ts in nil_chk(self->signs_)) {
    if ([signId isEqual:[((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(ts)) getId]]) {
      [tsl addWithId:new_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_(ts)];
    }
  }
  
#line 161
  if ([tsl size] == 0) {
    return nil;
  }
  
#line 165
  return tsl;
}


#line 170
- (id<JavaUtilList>)getTriSigns {
  return self->signs_;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  EsGobAfirmaCoreSignersTriphaseData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 183
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)signs {
  EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_(self, signs);
  return self;
}


#line 191
- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)signs
                        withNSString:(NSString *)fmt {
  EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(self, signs, fmt);
  return self;
}


#line 198
- (void)addSignOperationWithEsGobAfirmaCoreSignersTriphaseData_TriSign:(EsGobAfirmaCoreSignersTriphaseData_TriSign *)config {
  [((id<JavaUtilList>) nil_chk(self->signs_)) addWithId:config];
}


#line 205
- (EsGobAfirmaCoreSignersTriphaseData_TriSign *)getSignWithInt:(jint)idx {
  
#line 207
  return [((id<JavaUtilList>) nil_chk(self->signs_)) getWithInt:idx];
}


#line 212
- (jint)getSignsCount {
  return [((id<JavaUtilList>) nil_chk(self->signs_)) size];
}


#line 233
+ (EsGobAfirmaCoreSignersTriphaseData *)parserWithByteArray:(IOSByteArray *)xml {
  return EsGobAfirmaCoreSignersTriphaseData_parserWithByteArray_(xml);
}


#line 269
+ (EsGobAfirmaCoreSignersTriphaseData *)parserWithOrgW3cDomElement:(id<OrgW3cDomElement>)xml {
  return EsGobAfirmaCoreSignersTriphaseData_parserWithOrgW3cDomElement_(xml);
}


#line 301
+ (id<JavaUtilList>)parseSignsNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)signsNode {
  return EsGobAfirmaCoreSignersTriphaseData_parseSignsNodeWithOrgW3cDomNode_(signsNode);
}


#line 334
+ (id<JavaUtilMap>)parseParamsListNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)paramsNode {
  return EsGobAfirmaCoreSignersTriphaseData_parseParamsListNodeWithOrgW3cDomNode_(paramsNode);
}


#line 358
+ (jint)nextNodeElementIndexWithOrgW3cDomNodeList:(id<OrgW3cDomNodeList>)nodes
                                          withInt:(jint)currentIndex {
  return EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(nodes, currentIndex);
}


#line 373
- (NSString *)description {
  
#line 376
  JavaLangStringBuilder *builder = new_JavaLangStringBuilder_init();
  (void) [builder appendWithNSString:@"<xml>\n"];
  (void) [builder appendWithNSString:@" <firmas"];
  if (self->format_ != nil) {
    (void) [builder appendWithNSString:@" format=\""];
    (void) [builder appendWithNSString:self->format_];
    (void) [builder appendWithNSString:@"\""];
  }
  (void) [builder appendWithNSString:@">\n"];
  id<JavaUtilIterator> firmasIt = [((id<JavaUtilList>) nil_chk(self->signs_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(firmasIt)) hasNext]) {
    EsGobAfirmaCoreSignersTriphaseData_TriSign *signConfig = [firmasIt next];
    (void) [builder appendWithNSString:@"  <firma"];
    
#line 390
    if ([((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(signConfig)) getId] != nil) {
      (void) [builder appendWithNSString:@" Id=\""];
      (void) [builder appendWithNSString:[signConfig getId]];
      (void) [builder appendWithNSString:@"\""];
    }
    
#line 396
    (void) [builder appendWithNSString:@">\n"];
    id<JavaUtilIterator> firmaIt = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([signConfig getDict])) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(firmaIt)) hasNext]) {
      NSString *p = [firmaIt next];
      (void) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@"   <param n=\""])) appendWithNSString:
#line 401
      p])) appendWithNSString:
#line 402
      @"\">"])) appendWithNSString:
#line 403
      [signConfig getPropertyWithNSString:p]])) appendWithNSString:
#line 404
      @"</param>\n"];
    }
    (void) [builder appendWithNSString:@"  </firma>\n"];
  }
  (void) [builder appendWithNSString:@" </firmas>\n"];
  (void) [builder appendWithNSString:@"</xml>"];
  return [builder description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersTriphaseData_TriSign;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersTriphaseData_TriSign;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersTriphaseData;", 0x9, 14, 15, 16, -1, -1, -1 },
    { NULL, "LEsGobAfirmaCoreSignersTriphaseData;", 0x9, 14, 17, 16, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 18, 19, -1, 20, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 21, 19, -1, 22, -1, -1 },
    { NULL, "I", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 25, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getFormat);
  methods[1].selector = @selector(setFormatWithNSString:);
  methods[2].selector = @selector(getTriSignWithNSString:);
  methods[3].selector = @selector(getTriSignsWithNSString:);
  methods[4].selector = @selector(getTriSigns);
  methods[5].selector = @selector(init);
  methods[6].selector = @selector(initWithJavaUtilList:);
  methods[7].selector = @selector(initWithJavaUtilList:withNSString:);
  methods[8].selector = @selector(addSignOperationWithEsGobAfirmaCoreSignersTriphaseData_TriSign:);
  methods[9].selector = @selector(getSignWithInt:);
  methods[10].selector = @selector(getSignsCount);
  methods[11].selector = @selector(parserWithByteArray:);
  methods[12].selector = @selector(parserWithOrgW3cDomElement:);
  methods[13].selector = @selector(parseSignsNodeWithOrgW3cDomNode:);
  methods[14].selector = @selector(parseParamsListNodeWithOrgW3cDomNode:);
  methods[15].selector = @selector(nextNodeElementIndexWithOrgW3cDomNodeList:withInt:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "signs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "format_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFormat", "LNSString;", "getTriSign", "getTriSigns", "(Ljava/lang/String;)Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;", "()Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;", "LJavaUtilList;", "(Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;)V", "LJavaUtilList;LNSString;", "(Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;Ljava/lang/String;)V", "addSignOperation", "LEsGobAfirmaCoreSignersTriphaseData_TriSign;", "getSign", "I", "parser", "[B", "LJavaIoIOException;", "LOrgW3cDomElement;", "parseSignsNode", "LOrgW3cDomNode;", "(Lorg/w3c/dom/Node;)Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;", "parseParamsListNode", "(Lorg/w3c/dom/Node;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "nextNodeElementIndex", "LOrgW3cDomNodeList;I", "toString", "Ljava/util/List<Les/gob/afirma/core/signers/TriphaseData$TriSign;>;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersTriphaseData = { "TriphaseData", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x11, 17, 2, -1, 11, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersTriphaseData;
}

@end


#line 175
void EsGobAfirmaCoreSignersTriphaseData_init(EsGobAfirmaCoreSignersTriphaseData *self) {
  NSObject_init(self);
  
#line 176
  self->signs_ = new_JavaUtilArrayList_init();
  self->format_ = nil;
}


#line 175
EsGobAfirmaCoreSignersTriphaseData *new_EsGobAfirmaCoreSignersTriphaseData_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseData, init)
}


#line 175
EsGobAfirmaCoreSignersTriphaseData *create_EsGobAfirmaCoreSignersTriphaseData_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseData, init)
}


#line 183
void EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_(EsGobAfirmaCoreSignersTriphaseData *self, id<JavaUtilList> signs) {
  EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(self, signs, nil);
}


#line 183
EsGobAfirmaCoreSignersTriphaseData *new_EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_(id<JavaUtilList> signs) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseData, initWithJavaUtilList_, signs)
}


#line 183
EsGobAfirmaCoreSignersTriphaseData *create_EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_(id<JavaUtilList> signs) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseData, initWithJavaUtilList_, signs)
}


#line 191
void EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(EsGobAfirmaCoreSignersTriphaseData *self, id<JavaUtilList> signs, NSString *fmt) {
  NSObject_init(self);
  
#line 192
  self->signs_ = signs;
  self->format_ = fmt;
}


#line 191
EsGobAfirmaCoreSignersTriphaseData *new_EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(id<JavaUtilList> signs, NSString *fmt) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseData, initWithJavaUtilList_withNSString_, signs, fmt)
}


#line 191
EsGobAfirmaCoreSignersTriphaseData *create_EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(id<JavaUtilList> signs, NSString *fmt) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseData, initWithJavaUtilList_withNSString_, signs, fmt)
}


#line 233
EsGobAfirmaCoreSignersTriphaseData *EsGobAfirmaCoreSignersTriphaseData_parserWithByteArray_(IOSByteArray *xml) {
  EsGobAfirmaCoreSignersTriphaseData_initialize();
  if (xml == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El XML de entrada no puede ser nulo");
  }
  
#line 239
  id<OrgW3cDomDocument> doc;
  @try {
    JavaIoInputStream *is = new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 240
    xml);
    JavaLangThrowable *__primaryException1 = nil;
    @try {
      
#line 241
      doc = [((JavaxXmlParsersDocumentBuilder *) nil_chk(EsGobAfirmaCoreMiscSecureXmlBuilder_getSecureDocumentBuilder())) parseWithJavaIoInputStream:is];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (is != nil) {
        if (__primaryException1 != nil) {
          @try {
            [is close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [is close];
        }
      }
    }
  }
  @catch (
#line 243
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(JavaUtilLoggingLogger_getLoggerWithNSString_(@"es.gob.afirma"))) severeWithNSString:JreStrcat("$@C$", @"Error al cargar el fichero XML: ", e, 0x000a, EsGobAfirmaCoreMiscLoggerUtil_getTrimBytesWithByteArray_(xml))];
    @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al cargar el fichero XML: ", e), e);
  }
  
#line 248
  return EsGobAfirmaCoreSignersTriphaseData_parserWithOrgW3cDomElement_([((id<OrgW3cDomDocument>) nil_chk(doc)) getDocumentElement]);
}


#line 269
EsGobAfirmaCoreSignersTriphaseData *EsGobAfirmaCoreSignersTriphaseData_parserWithOrgW3cDomElement_(id<OrgW3cDomElement> xml) {
  EsGobAfirmaCoreSignersTriphaseData_initialize();
  if (xml == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El XML de entrada no puede ser nulo");
  }
  
#line 275
  id<OrgW3cDomNodeList> childNodes = [xml getChildNodes];
  
#line 277
  jint idx = EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(childNodes, 0);
  id<OrgW3cDomNode> rootSignsNode = [((id<OrgW3cDomNodeList>) nil_chk(childNodes)) itemWithInt:idx];
  
#line 280
  if (idx == -1 || ![@"firmas" java_equalsIgnoreCase:[((id<OrgW3cDomNode>) nil_chk(rootSignsNode)) getNodeName]]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"No se encontro el nodo 'firmas' en el XML proporcionado");
  }
  
#line 284
  NSString *format = nil;
  id<OrgW3cDomNamedNodeMap> nnm = [((id<OrgW3cDomNode>) nil_chk(rootSignsNode)) getAttributes];
  if (nnm != nil) {
    id<OrgW3cDomNode> tmpNode = [nnm getNamedItemWithNSString:@"format"];
    if (tmpNode != nil) {
      format = [tmpNode getNodeValue];
    }
  }
  
#line 293
  id<JavaUtilList> signsNodes = EsGobAfirmaCoreSignersTriphaseData_parseSignsNodeWithOrgW3cDomNode_(rootSignsNode);
  
#line 295
  return new_EsGobAfirmaCoreSignersTriphaseData_initWithJavaUtilList_withNSString_(signsNodes, format);
}


#line 301
id<JavaUtilList> EsGobAfirmaCoreSignersTriphaseData_parseSignsNodeWithOrgW3cDomNode_(id<OrgW3cDomNode> signsNode) {
  EsGobAfirmaCoreSignersTriphaseData_initialize();
  id<OrgW3cDomNodeList> childNodes = [((id<OrgW3cDomNode>) nil_chk(signsNode)) getChildNodes];
  
#line 305
  id<JavaUtilList> signs = new_JavaUtilArrayList_init();
  jint idx = EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(childNodes, 0);
  while (idx != -1) {
    id<OrgW3cDomNode> currentNode = [((id<OrgW3cDomNodeList>) nil_chk(childNodes)) itemWithInt:idx];
    
#line 310
    NSString *id_ = nil;
    
#line 312
    id<OrgW3cDomNamedNodeMap> nnm = [((id<OrgW3cDomNode>) nil_chk(currentNode)) getAttributes];
    if (nnm != nil) {
      id<OrgW3cDomNode> tmpNode = [nnm getNamedItemWithNSString:@"Id"];
      if (tmpNode != nil) {
        id_ = [tmpNode getNodeValue];
      }
    }
    [signs addWithId:new_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithJavaUtilMap_withNSString_(EsGobAfirmaCoreSignersTriphaseData_parseParamsListNodeWithOrgW3cDomNode_(
#line 321
    currentNode),
#line 322
    id_)];
    
#line 325
    idx = EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(childNodes, idx + 1);
  }
  
#line 328
  return signs;
}


#line 334
id<JavaUtilMap> EsGobAfirmaCoreSignersTriphaseData_parseParamsListNodeWithOrgW3cDomNode_(id<OrgW3cDomNode> paramsNode) {
  EsGobAfirmaCoreSignersTriphaseData_initialize();
  id<OrgW3cDomNodeList> childNodes = [((id<OrgW3cDomNode>) nil_chk(paramsNode)) getChildNodes];
  
#line 338
  id<JavaUtilMap> params = new_JavaUtilConcurrentConcurrentHashMap_init();
  jint idx = EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(childNodes, 0);
  while (idx != -1) {
    id<OrgW3cDomNode> paramNode = [((id<OrgW3cDomNodeList>) nil_chk(childNodes)) itemWithInt:idx];
    NSString *key = [((id<OrgW3cDomNode>) nil_chk([((id<OrgW3cDomNamedNodeMap>) nil_chk([((id<OrgW3cDomNode>) nil_chk(paramNode)) getAttributes])) getNamedItemWithNSString:@"n"])) getNodeValue];
    NSString *value = [((NSString *) nil_chk([paramNode getTextContent])) java_trim];
    (void) [params putWithId:key withId:value];
    
#line 346
    idx = EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(childNodes, idx + 1);
  }
  
#line 349
  return params;
}


#line 358
jint EsGobAfirmaCoreSignersTriphaseData_nextNodeElementIndexWithOrgW3cDomNodeList_withInt_(id<OrgW3cDomNodeList> nodes, jint currentIndex) {
  EsGobAfirmaCoreSignersTriphaseData_initialize();
  
#line 359
  id<OrgW3cDomNode> node;
  jint i = currentIndex;
  while (i < [((id<OrgW3cDomNodeList>) nil_chk(nodes)) getLength]) {
    node = [nodes itemWithInt:i];
    if ([((id<OrgW3cDomNode>) nil_chk(node)) getNodeType] == OrgW3cDomNode_ELEMENT_NODE) {
      return i;
    }
    i++;
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersTriphaseData)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/signers/TriphaseData.java"


#line 39
@implementation EsGobAfirmaCoreSignersTriphaseData_TriSign


#line 47
- (instancetype)initWithEsGobAfirmaCoreSignersTriphaseData_TriSign:(EsGobAfirmaCoreSignersTriphaseData_TriSign *)ts {
  EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_(self, ts);
  return self;
}


#line 59
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)d
                       withNSString:(NSString *)i {
  EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithJavaUtilMap_withNSString_(self, d, i);
  return self;
}


#line 69
- (NSString *)description {
  
#line 71
  return JreStrcat("$$", @"Firma trifasica individual con identificador ", [self getId]);
}


#line 76
- (NSString *)getId {
  return self->id__;
}


#line 84
- (NSString *)getPropertyWithNSString:(NSString *)key {
  return [((id<JavaUtilMap>) nil_chk(self->dict_)) getWithId:key];
}


#line 91
- (void)addPropertyWithNSString:(NSString *)key
                   withNSString:(NSString *)value {
  
#line 92
  (void) [((id<JavaUtilMap>) nil_chk(self->dict_)) putWithId:key withId:value];
}


#line 97
- (void)deletePropertyWithNSString:(NSString *)key {
  (void) [((id<JavaUtilMap>) nil_chk(self->dict_)) removeWithId:key];
}


#line 105
- (id<JavaUtilMap>)getDict {
  return new_JavaUtilConcurrentConcurrentHashMap_initWithJavaUtilMap_(self->dict_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithEsGobAfirmaCoreSignersTriphaseData_TriSign:);
  methods[1].selector = @selector(initWithJavaUtilMap:withNSString:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(getId);
  methods[4].selector = @selector(getPropertyWithNSString:);
  methods[5].selector = @selector(addPropertyWithNSString:withNSString:);
  methods[6].selector = @selector(deletePropertyWithNSString:);
  methods[7].selector = @selector(getDict);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "dict_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "id__", "LNSString;", .constantValue.asLong = 0, 0x12, 11, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LEsGobAfirmaCoreSignersTriphaseData_TriSign;", "LJavaUtilMap;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;Ljava/lang/String;)V", "toString", "getProperty", "LNSString;", "addProperty", "LNSString;LNSString;", "deleteProperty", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "id", "LEsGobAfirmaCoreSignersTriphaseData;" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersTriphaseData_TriSign = { "TriSign", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x19, 8, 2, 12, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersTriphaseData_TriSign;
}

@end


#line 47
void EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_(EsGobAfirmaCoreSignersTriphaseData_TriSign *self, EsGobAfirmaCoreSignersTriphaseData_TriSign *ts) {
  NSObject_init(self);
  
#line 48
  self->id__ = [((EsGobAfirmaCoreSignersTriphaseData_TriSign *) nil_chk(ts)) getId];
  self->dict_ = new_JavaUtilConcurrentConcurrentHashMap_initWithInt_([((id<JavaUtilMap>) nil_chk([ts getDict])) size]);
  id<JavaUtilSet> keys = [((id<JavaUtilMap>) nil_chk([ts getDict])) keySet];
  for (NSString * __strong key in nil_chk(keys)) {
    (void) [self->dict_ putWithId:key withId:[ts getPropertyWithNSString:key]];
  }
}


#line 47
EsGobAfirmaCoreSignersTriphaseData_TriSign *new_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_(EsGobAfirmaCoreSignersTriphaseData_TriSign *ts) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseData_TriSign, initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_, ts)
}


#line 47
EsGobAfirmaCoreSignersTriphaseData_TriSign *create_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_(EsGobAfirmaCoreSignersTriphaseData_TriSign *ts) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseData_TriSign, initWithEsGobAfirmaCoreSignersTriphaseData_TriSign_, ts)
}


#line 59
void EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithJavaUtilMap_withNSString_(EsGobAfirmaCoreSignersTriphaseData_TriSign *self, id<JavaUtilMap> d, NSString *i) {
  NSObject_init(self);
  
#line 60
  if (d == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 62
    @"El diccionario de propiedades de la firma no puede ser nulo");
  }
  
#line 65
  self->dict_ = d;
  self->id__ = i != nil ? i : [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
}


#line 59
EsGobAfirmaCoreSignersTriphaseData_TriSign *new_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> d, NSString *i) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersTriphaseData_TriSign, initWithJavaUtilMap_withNSString_, d, i)
}


#line 59
EsGobAfirmaCoreSignersTriphaseData_TriSign *create_EsGobAfirmaCoreSignersTriphaseData_TriSign_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> d, NSString *i) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersTriphaseData_TriSign, initWithJavaUtilMap_withNSString_, d, i)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersTriphaseData_TriSign)
