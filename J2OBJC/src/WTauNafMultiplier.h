//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/math/ec/WTauNafMultiplier.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WTauNafMultiplier")
#ifdef RESTRICT_WTauNafMultiplier
#define INCLUDE_ALL_WTauNafMultiplier 0
#else
#define INCLUDE_ALL_WTauNafMultiplier 1
#endif
#undef RESTRICT_WTauNafMultiplier

#if !defined (OrgSpongycastleMathEcWTauNafMultiplier_) && (INCLUDE_ALL_WTauNafMultiplier || defined(INCLUDE_OrgSpongycastleMathEcWTauNafMultiplier))
#define OrgSpongycastleMathEcWTauNafMultiplier_

#define RESTRICT_AbstractECMultiplier 1
#define INCLUDE_OrgSpongycastleMathEcAbstractECMultiplier 1
#include "AbstractECMultiplier.h"

@class JavaMathBigInteger;
@class OrgSpongycastleMathEcECPoint;

/*!
 @brief Class implementing the WTNAF (Window 
 <code>&tau;</code>-adic Non-Adjacent Form) algorithm.
 */
@interface OrgSpongycastleMathEcWTauNafMultiplier : OrgSpongycastleMathEcAbstractECMultiplier

#pragma mark Public

- (instancetype)init;

#pragma mark Protected

/*!
 @brief Multiplies a <code>ECPoint.AbstractF2m</code>
  by <code>k</code> using the reduced <code>&tau;</code>-adic NAF (RTNAF)
  method.
 @param point The ECPoint.AbstractF2m to multiply.
 @param k The integer by which to multiply  <code> k </code>
  .
 @return <code>p</code> multiplied by <code>k</code>.
 */
- (OrgSpongycastleMathEcECPoint *)multiplyPositiveWithOrgSpongycastleMathEcECPoint:(OrgSpongycastleMathEcECPoint *)point
                                                            withJavaMathBigInteger:(JavaMathBigInteger *)k;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleMathEcWTauNafMultiplier)

inline NSString *OrgSpongycastleMathEcWTauNafMultiplier_get_PRECOMP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgSpongycastleMathEcWTauNafMultiplier_PRECOMP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgSpongycastleMathEcWTauNafMultiplier, PRECOMP_NAME, NSString *)

FOUNDATION_EXPORT void OrgSpongycastleMathEcWTauNafMultiplier_init(OrgSpongycastleMathEcWTauNafMultiplier *self);

FOUNDATION_EXPORT OrgSpongycastleMathEcWTauNafMultiplier *new_OrgSpongycastleMathEcWTauNafMultiplier_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleMathEcWTauNafMultiplier *create_OrgSpongycastleMathEcWTauNafMultiplier_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleMathEcWTauNafMultiplier)

#endif

#pragma pop_macro("INCLUDE_ALL_WTauNafMultiplier")
