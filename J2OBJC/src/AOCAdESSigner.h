//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/cades/AOCAdESSigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AOCAdESSigner")
#ifdef RESTRICT_AOCAdESSigner
#define INCLUDE_ALL_AOCAdESSigner 0
#else
#define INCLUDE_ALL_AOCAdESSigner 1
#endif
#undef RESTRICT_AOCAdESSigner

#if !defined (EsGobAfirmaSignersCadesAOCAdESSigner_) && (INCLUDE_ALL_AOCAdESSigner || defined(INCLUDE_EsGobAfirmaSignersCadesAOCAdESSigner))
#define EsGobAfirmaSignersCadesAOCAdESSigner_

#define RESTRICT_AOSigner 1
#define INCLUDE_EsGobAfirmaCoreSignersAOSigner 1
#include "AOSigner.h"

@class EsGobAfirmaCoreSignersAOSignInfo;
@class EsGobAfirmaCoreSignersCounterSignTarget;
@class EsGobAfirmaCoreUtilTreeAOTreeModel;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaUtilProperties;
@protocol JavaSecurityPrivateKey;

/*!
 @brief Manejador de firmas binarias CADES.
 Soporta CAdES-BES, CAdES-EPES, CAdES-T y CAdES B-Level. Implementa los m&eacute;todos declarados
  en el interfaz <code>AOSigner</code>.
  <p>Un posible ejemplo de uso ser&iacute;a el siguiente:</p>
  @code

    // Establecemos los parametros adicionales
    final Properties extraParams = new Properties();
    extraParams.setProperty(CAdESExtraParams.MODE, AOSignConstants.SIGN_MODE_IMPLICIT);
    extraParams.setProperty(CAdESExtraParams.POLICY_IDENTIFIER, "urn:oid:2.16.724.1.3.1.1.2.1.8");
    extraParams.setProperty(CAdESExtraParams.POLICY_IDENTIFIER_HASH, "V8lVVNGDCPen6VELRD1Ja8HARFk=");
    extraParams.setProperty(CAdESExtraParams.POLIY_IDENTIFIER_HAS_HALGORITHM, "urn:oid:1.3.14.3.2.26");
    // Usamos un PKCS#12 / PFX para obtener el certificado y su clave privada
    final InputStream fis = new FileInputStream("cert.pfx");
    KeyStore ks = KeyStore.getInstance("PKCS12");
    ks.load(fis, "contrasena".toCharArray());
    final PrivateKeyEntry pke = (PrivateKeyEntry) ks.getEntry(CERT_ALIAS, new KeyStore.PasswordProtection("contrasena".toCharArray()));
    final X509Certificate cert = (X509Certificate) ks.getCertificate("alias");
    // Realizamos la firma CAdES
    final AOSigner signer = new AOCAdESSigner();
    final byte[] firma = signer.sign("Texto a firmar".getBytes(), "SHA256withRSA", pke, extraParams); 
  
@endcode
 @version 0.4
 */
@interface EsGobAfirmaSignersCadesAOCAdESSigner : NSObject < EsGobAfirmaCoreSignersAOSigner >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Cofirma datos en formato CAdES a&ntilde;adiendo la nueva firma a una CAdES o CMS ya existente.Para realizar la
  cofirma se necesitan los datos originales (que este m&eacute;todo
  firmar&aacute; normalmente) y la firma sobre la que se realiza la cofirma
  (a los que se agregar&aacute; el resultado de la nueva firma).
 <p>
   Nota sobre cofirmas cruzadas entre PKCS#7/CMS y CAdES:<br>
   Las cofirmas de un documento dan como resultado varias firmas a un mismo nivel sobre este mismo documento,
   es decir, que ninguna firma envuelve a la otra ni una prevalece sobre la otra.
   A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente,
   esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el
   resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas
   independientes, una en CAdES y otra en CMS.<br>
   Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma
   se adec&uacute;a al est&aacute;ndar mas amplio, CMS en este caso.
   Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos en un unico documento es la ruptura
   de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles
   con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES,
   se pierde la compatibilidad PKCS#7 en el global de la firma. 
 </p>
  <p><b>IMPORTANTE: Este m&eacute;todo requiere la presencia de <code>es.gob.afirma.signers.multi.cades.AOCAdESCoSigner</code> en el CLASSPATH</b></p>
 @param data Datos que deseamos a cofirmar.
 @param sign Firma CAdES o CMS de los datos que se quiere cofirmar.
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificaci &oacute; n del certificado de firma.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> ).
 @return Firma CAdES.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionSi hay problemas en el tratamiento de datos.
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams;

/*!
 @brief Cofirma una firma CAdES o CMS existente en formato CAdES.Para realizar la
  cofirma se necesita el documento en el que se encuentra la firma sobre la
  que se realiza la cofirma (a los que se agregar&aacute; el resultado de
  la nueva firma).
 <p>
   Nota sobre cofirmas cruzadas entre PKCS#7/CMS y CAdES:<br>
   Las cofirmas de un documento dan como resultado varias firmas a un mismo nivel sobre este mismo documento,
   es decir, que ninguna firma envuelve a la otra ni una prevalece sobre la otra.
   A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente,
   esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el
   resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas
   independientes, una en CAdES y otra en CMS.<br>
   Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma
   se adec&uacute;a al est&aacute;ndar mas amplio, CMS en este caso.
   Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos en un unico documento es la ruptura
   de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles
   con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES,
   se pierde la compatibilidad PKCS#7 en el global de la firma. 
 </p>
  <p><b>IMPORTANTE: Este m&eacute;todo requiere la presencia de <code>es.gob.afirma.signers.multi.cades.AOCAdESCoSigner</code> en el CLASSPATH</b></p>
 @param sign Firma CAdES o CMS de los datos que se quiere cofirmar.
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificaci &oacute; n del certificado de firma.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> )
 @return Firma CAdES
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)xParams;

/*!
 @brief Contrafirma nodos de firma concretos de una firma electr&oacute;nica.
 Los nodos que se deben firmar se indican en <code>targetType</code> y
  pueden ser: 
 <ul>
   <li>Todos los nodos del &aacute;rbol de firma (<code>CounterSignTarget.TREE</code>)</li>
   <li>Los nodos hoja del &aacute;rbol de firma (<code>CounterSignTarget.LEAFS</code>)</li>
   <li>Los nodos de firma cuyas posiciones se especifican en <code>target</code> (<code>CounterSignTarget.NODES</code>)</li>
   <li>Los nodos de firma realizados por los firmantes cuyo <i>Common Name</i> (CN X.500) se indica en <code>target</code> (<code>CounterSignTarget.SIGNERS</code>)</li>
  </ul>
  <p><b>IMPORTANTE: Este m&eacute;todo requiere la presencia de <code>es.gob.afirma.signers.multi.cades.AOCAdESCounterSigner</code> en el CLASSPATH</b></p>
 @param sign Firma CAdES o CMS con los nodos a contrafirmar
 @param algorithm Algoritmo a usar para la firma.
 @param targetType Tipo de objetivo de la contrafirma
 @param targets Informaci &oacute; n complementario seg &uacute; n el tipo de objetivo de la contrafirma
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificaci &oacute; n del certificado de firma.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> )
 @return Contrafirma CAdES
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso
 */
- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)xParams;

/*!
 @brief Recupera los datos originalmente firmados de la firma proporcionada.
 En caso de no contener la firma los datos firmados, se devuelve <code>null</code>.
 @param signData Firma CAdES o CMS.
 @return Datos originalmente firmados o null si la firma no contiene estos datos.
 @throw AOInvalidFormatExceptionSi no se ha introducido un fichero de firma v&aacute;lido o no
                                   ha podido leerse la firma.
 @throw IOExceptionSi ocurren problemas relacionados con la lectura de la firma.
 @throw IllegalArgumentExceptionSi la firma introducida es nula.
 */
- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)signData;

- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 @brief Devuelve el nombre de fichero de firma predeterminado que se recomienda usar para
  un fichero firmado en formato CAdES con nombre original igual al proporcionado.
 En este caso el resultado ser&aacute; siempre el nombre original con la extensi&oacute;n adicional <i>.csig</i>, m&aacute;s un
  sufijo adicional (opcional) previo a esta extensi&oacute;n.
 @param originalName Nombre del fichero original que se firma
 @param inText Sufijo a agregar al nombre de fichero devuelto, inmediatamente anterior a la extensi &oacute; n  <i> .csig </i>
 @return Nombre apropiado para el fichero de firma.
 */
- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText;

/*!
 @brief Recupera el &aacute;rbol de nodos de firma de una firma
  electr&oacute;nica CAdES.
 Los nodos del &aacute;rbol ser&aacute;n cadena de texto con el CommonName (CN X.500)
  del titular del certificado usado para cada firma u objetos de tipo <code>AOSimpleSignInfo</code> con la
  informaci&oacute;n b&aacute;sica de las firmas individuales, dependiendo del
  valor del par&aacute;metro <code>asSimpleSignInfo</code>. Los nodos se
  mostrar&aacute;n en el mismo orden y con la misma estructura con el que
  aparecen en la firma electr&oacute;nica.<br>
  Los propios datos se consideran el nodo ra&iacute;z, las firmas y cofirmas
  pender&aacute;n directamentede de este.
 @param sign Firma electr &oacute; nica de la que se desea obtener la estructura.
 @param asSimpleSignInfo Si es  <code> true </code>  se devuelve un  &aacute; rbol con la         informaci &oacute; n b &aacute; sica de cada firma individual         mediante objetos  <code> AOSimpleSignInfo </code> , si es  <code> false </code>  un  &aacute; rbol con los nombres comunes de los         titulares de los certificados usados para cada firma.
 @return &Aacute;rbol de nodos de firma o <code>null</code> en caso de
          error.
 @throw AOInvalidFormatExceptionCuando los datos introducidos no son una firma CAdES.
 @throw IOExceptionSi ocurren problemas relacionados con la lectura de la firma
 */
- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo;

- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo;

/*!
 @brief Obtiene la informaci&oacute;n general de un objeto de firma.
 En este caso la informaci&oacute;n devuelta se limita a un objeto <code>AOSignInfo</code> si se
  proporciona una firma CAdES.
  con el formato establecido a <code>AOSignConstants.SIGN_FORMAT_CADES</code>
 @param signData Firma sobre la que se desea obtener informaci &oacute; n.
 @return Informaci&oacute;n sobre la firma electr&oacute;nica proporcionada
 @throw AOInvalidFormatException
 Cuando la firma introducida no es un objeto de firma
          reconocido por este manejador.
 @throw AOInvalidFormatExceptionSi los datos proporcionados no se corresponden con una firma CAdES
 @throw IllegalArgumentExceptionSi La firma introducida es nula.
 */
- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)signData;

- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 @brief Indica si un dato es una firma compatible con los m&eacute;todos de firma, cofirma y contrafirma de esta clase.
 @param data Datos que deseamos comprobar.
 @return <code>true</code> si el dato es una firma reconocida por esta clase (&uacute;nicamente CAdES), <code>false</code> en caso contrario.
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)data;

/*!
 @brief Indica si un dato es una firma compatible con los m&eacute;todos de firma, cofirma y contrafirma de esta clase.
 @param data Datos que deseamos comprobar.
 @param params Par &aacute; metros de firma
 @return <code>true</code> si el dato es una firma reconocida por esta clase (&uacute;nicamente CAdES), <code>false</code> en caso contrario.
 */
- (jboolean)isSignWithByteArray:(IOSByteArray *)data
         withJavaUtilProperties:(JavaUtilProperties *)params;

/*!
 @brief Comprueba si unos datos sos susceptibles de ser firmados por esta clase.
 Dado que las firmas CAdES pueden firmar cualquier dato binario, el resultado siempre ser&aacute;
  <code>true</code> excepto si se proporciona <code>null</code>
 @param data Datos que deseamos comprobar.
 @return <code>true</code> si el dato es v&aacute;aacute;lido para
          firmar, <code>false</code> en caso contrario.
 */
- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data;

/*!
 @brief Firma datos en formato CAdES.
 @param data Datos que deseamos firmar.
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificaci &oacute; n.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams.html"> detalle </a> )
 @return Firma en formato CAdES
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso
 */
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaSignersCadesAOCAdESSigner)

FOUNDATION_EXPORT void EsGobAfirmaSignersCadesAOCAdESSigner_init(EsGobAfirmaSignersCadesAOCAdESSigner *self);

FOUNDATION_EXPORT EsGobAfirmaSignersCadesAOCAdESSigner *new_EsGobAfirmaSignersCadesAOCAdESSigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaSignersCadesAOCAdESSigner *create_EsGobAfirmaSignersCadesAOCAdESSigner_init(void);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaSignersCadesAOCAdESSigner)

#endif

#pragma pop_macro("INCLUDE_ALL_AOCAdESSigner")
