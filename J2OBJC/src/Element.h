//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Element.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Element")
#ifdef RESTRICT_Element
#define INCLUDE_ALL_Element 0
#else
#define INCLUDE_ALL_Element 1
#endif
#undef RESTRICT_Element

#if !defined (ComAowagieTextElement_) && (INCLUDE_ALL_Element || defined(INCLUDE_ComAowagieTextElement))
#define ComAowagieTextElement_

@class JavaUtilArrayList;

/*!
 @brief Interface for a text element.
 <P>
  Remark: I looked at the interface javax.swing.text.Element, but I decided to
  write my own text-classes for two reasons: 
 <OL>
  <LI>The javax.swing.text-classes may be very generic, I think they are
  overkill: they are to heavy for what they have to do. 
 <LI>A lot of people using iText (formerly known as rugPdf), still use
  JDK1.1.x. I try to keep the Java2 requirements limited to the Collection
  classes (I think they're really great). However, if I use the
  javax.swing.text classes, it will become very difficult to downgrade rugPdf. 
 </OL>
 - seealso: Anchor
 - seealso: Cell
 - seealso: Chapter
 - seealso: Chunk
 - seealso: Header
 - seealso: Image
 - seealso: Jpeg
 - seealso: List
 - seealso: ListItem
 - seealso: Meta
 - seealso: Paragraph
 - seealso: Phrase
 - seealso: Rectangle
 - seealso: Row
 - seealso: Section
 - seealso: Table
 */
@protocol ComAowagieTextElement < JavaObject >

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

/*!
 @brief Checks if this element is a content object.
 If not, it's a metadata object.
 @since iText 2.0.8
 @return true if this is a 'content' element; false if this is a 'metadata' element
 */
- (jboolean)isContent;

/*!
 @brief Checks if this element is nestable.
 @since iText 2.0.8
 @return true if this element can be nested inside other elements.
 */
- (jboolean)isNestable;

/*!
 @brief Gets all the chunks in this element.
 @return an <CODE>ArrayList</CODE>
 */
- (JavaUtilArrayList *)getChunks;

/*!
 @brief Gets the content of the text element.
 @return a type
 */
- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextElement)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_HEADER(void);
#define ComAowagieTextElement_HEADER 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, HEADER, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_TITLE(void);
#define ComAowagieTextElement_TITLE 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, TITLE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_SUBJECT(void);
#define ComAowagieTextElement_SUBJECT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, SUBJECT, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_KEYWORDS(void);
#define ComAowagieTextElement_KEYWORDS 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, KEYWORDS, jint)

/*!
 @brief This is a possible type of <CODE>Element </CODE>.
 */
inline jint ComAowagieTextElement_get_AUTHOR(void);
#define ComAowagieTextElement_AUTHOR 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, AUTHOR, jint)

/*!
 @brief This is a possible type of <CODE>Element </CODE>.
 */
inline jint ComAowagieTextElement_get_PRODUCER(void);
#define ComAowagieTextElement_PRODUCER 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, PRODUCER, jint)

/*!
 @brief This is a possible type of <CODE>Element </CODE>.
 */
inline jint ComAowagieTextElement_get_CREATIONDATE(void);
#define ComAowagieTextElement_CREATIONDATE 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CREATIONDATE, jint)

/*!
 @brief This is a possible type of <CODE>Element </CODE>.
 */
inline jint ComAowagieTextElement_get_CREATOR(void);
#define ComAowagieTextElement_CREATOR 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CREATOR, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_CHUNK(void);
#define ComAowagieTextElement_CHUNK 10
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CHUNK, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_PHRASE(void);
#define ComAowagieTextElement_PHRASE 11
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, PHRASE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_PARAGRAPH(void);
#define ComAowagieTextElement_PARAGRAPH 12
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, PARAGRAPH, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>
 */
inline jint ComAowagieTextElement_get_SECTION(void);
#define ComAowagieTextElement_SECTION 13
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, SECTION, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>
 */
inline jint ComAowagieTextElement_get_LIST(void);
#define ComAowagieTextElement_LIST 14
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, LIST, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>
 */
inline jint ComAowagieTextElement_get_LISTITEM(void);
#define ComAowagieTextElement_LISTITEM 15
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, LISTITEM, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>
 */
inline jint ComAowagieTextElement_get_CHAPTER(void);
#define ComAowagieTextElement_CHAPTER 16
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CHAPTER, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>
 */
inline jint ComAowagieTextElement_get_ANCHOR(void);
#define ComAowagieTextElement_ANCHOR 17
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ANCHOR, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_CELL(void);
#define ComAowagieTextElement_CELL 20
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CELL, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_ROW(void);
#define ComAowagieTextElement_ROW 21
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ROW, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_TABLE(void);
#define ComAowagieTextElement_TABLE 22
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, TABLE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_PTABLE(void);
#define ComAowagieTextElement_PTABLE 23
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, PTABLE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_ANNOTATION(void);
#define ComAowagieTextElement_ANNOTATION 29
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ANNOTATION, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_RECTANGLE(void);
#define ComAowagieTextElement_RECTANGLE 30
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, RECTANGLE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_JPEG(void);
#define ComAowagieTextElement_JPEG 32
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, JPEG, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_JPEG2000(void);
#define ComAowagieTextElement_JPEG2000 33
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, JPEG2000, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_IMGRAW(void);
#define ComAowagieTextElement_IMGRAW 34
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, IMGRAW, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_IMGTEMPLATE(void);
#define ComAowagieTextElement_IMGTEMPLATE 35
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, IMGTEMPLATE, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 @since 2.1.5
 */
inline jint ComAowagieTextElement_get_JBIG2(void);
#define ComAowagieTextElement_JBIG2 36
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, JBIG2, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_MULTI_COLUMN_TEXT(void);
#define ComAowagieTextElement_MULTI_COLUMN_TEXT 40
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, MULTI_COLUMN_TEXT, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 */
inline jint ComAowagieTextElement_get_MARKED(void);
#define ComAowagieTextElement_MARKED 50
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, MARKED, jint)

/*!
 @brief This is a possible type of <CODE>Element</CODE>.
 @since 2.1.2
 */
inline jint ComAowagieTextElement_get_YMARK(void);
#define ComAowagieTextElement_YMARK 55
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, YMARK, jint)

/*!
 @brief A possible value for paragraph alignment.This specifies that the text is
  aligned to the left indent and extra whitespace should be placed on the
  right.
 */
inline jint ComAowagieTextElement_get_ALIGN_UNDEFINED(void);
#define ComAowagieTextElement_ALIGN_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_UNDEFINED, jint)

/*!
 @brief A possible value for paragraph alignment.This specifies that the text is
  aligned to the left indent and extra whitespace should be placed on the
  right.
 */
inline jint ComAowagieTextElement_get_ALIGN_LEFT(void);
#define ComAowagieTextElement_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_LEFT, jint)

/*!
 @brief A possible value for paragraph alignment.This specifies that the text is
  aligned to the center and extra whitespace should be placed equally on
  the left and right.
 */
inline jint ComAowagieTextElement_get_ALIGN_CENTER(void);
#define ComAowagieTextElement_ALIGN_CENTER 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_CENTER, jint)

/*!
 @brief A possible value for paragraph alignment.This specifies that the text is
  aligned to the right indent and extra whitespace should be placed on the
  left.
 */
inline jint ComAowagieTextElement_get_ALIGN_RIGHT(void);
#define ComAowagieTextElement_ALIGN_RIGHT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_RIGHT, jint)

/*!
 @brief A possible value for paragraph alignment.This specifies that extra
  whitespace should be spread out through the rows of the paragraph with
  the text lined up with the left and right indent except on the last line
  which should be aligned to the left.
 */
inline jint ComAowagieTextElement_get_ALIGN_JUSTIFIED(void);
#define ComAowagieTextElement_ALIGN_JUSTIFIED 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_JUSTIFIED, jint)

/*!
 @brief A possible value for vertical alignment.
 */
inline jint ComAowagieTextElement_get_ALIGN_TOP(void);
#define ComAowagieTextElement_ALIGN_TOP 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_TOP, jint)

/*!
 @brief A possible value for vertical alignment.
 */
inline jint ComAowagieTextElement_get_ALIGN_MIDDLE(void);
#define ComAowagieTextElement_ALIGN_MIDDLE 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_MIDDLE, jint)

/*!
 @brief A possible value for vertical alignment.
 */
inline jint ComAowagieTextElement_get_ALIGN_BOTTOM(void);
#define ComAowagieTextElement_ALIGN_BOTTOM 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_BOTTOM, jint)

/*!
 @brief A possible value for vertical alignment.
 */
inline jint ComAowagieTextElement_get_ALIGN_BASELINE(void);
#define ComAowagieTextElement_ALIGN_BASELINE 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_BASELINE, jint)

/*!
 @brief Does the same as ALIGN_JUSTIFIED but the last line is also spread out.
 */
inline jint ComAowagieTextElement_get_ALIGN_JUSTIFIED_ALL(void);
#define ComAowagieTextElement_ALIGN_JUSTIFIED_ALL 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, ALIGN_JUSTIFIED_ALL, jint)

/*!
 @brief Pure two-dimensional encoding (Group 4)
 */
inline jint ComAowagieTextElement_get_CCITTG4(void);
#define ComAowagieTextElement_CCITTG4 256
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITTG4, jint)

/*!
 @brief Pure one-dimensional encoding (Group 3, 1-D)
 */
inline jint ComAowagieTextElement_get_CCITTG3_1D(void);
#define ComAowagieTextElement_CCITTG3_1D 257
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITTG3_1D, jint)

/*!
 @brief Mixed one- and two-dimensional encoding (Group 3, 2-D)
 */
inline jint ComAowagieTextElement_get_CCITTG3_2D(void);
#define ComAowagieTextElement_CCITTG3_2D 258
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITTG3_2D, jint)

/*!
 @brief A flag indicating whether 1-bits are to be interpreted as black pixels
  and 0-bits as white pixels,
 */
inline jint ComAowagieTextElement_get_CCITT_BLACKIS1(void);
#define ComAowagieTextElement_CCITT_BLACKIS1 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITT_BLACKIS1, jint)

/*!
 @brief A flag indicating whether the filter expects extra 0-bits before each
  encoded line so that the line begins on a byte boundary.
 */
inline jint ComAowagieTextElement_get_CCITT_ENCODEDBYTEALIGN(void);
#define ComAowagieTextElement_CCITT_ENCODEDBYTEALIGN 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITT_ENCODEDBYTEALIGN, jint)

/*!
 @brief A flag indicating whether end-of-line bit patterns are required to be
  present in the encoding.
 */
inline jint ComAowagieTextElement_get_CCITT_ENDOFLINE(void);
#define ComAowagieTextElement_CCITT_ENDOFLINE 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITT_ENDOFLINE, jint)

/*!
 @brief A flag indicating whether the filter expects the encoded data to be
  terminated by an end-of-block pattern, overriding the Rows parameter.The
  use of this flag will set the key /EndOfBlock to false.
 */
inline jint ComAowagieTextElement_get_CCITT_ENDOFBLOCK(void);
#define ComAowagieTextElement_CCITT_ENDOFBLOCK 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextElement, CCITT_ENDOFBLOCK, jint)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextElement)

#endif

#pragma pop_macro("INCLUDE_ALL_Element")
