//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/MultiX509TrustManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MultiX509TrustManager.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "javax/net/ssl/X509TrustManager.h"

#if !__has_feature(objc_arc)
#error "MultiX509TrustManager must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpMultiX509TrustManager () {
 @public
  IOSObjectArray *tms_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpMultiX509TrustManager, tms_, IOSObjectArray *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/MultiX509TrustManager.java"


#line 11
@implementation EsGobAfirmaCoreMiscHttpMultiX509TrustManager


#line 15
- (instancetype)initWithJavaxNetSslX509TrustManagerArray:(IOSObjectArray *)tms {
  EsGobAfirmaCoreMiscHttpMultiX509TrustManager_initWithJavaxNetSslX509TrustManagerArray_(self, tms);
  return self;
}


#line 19
- (void)checkClientTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  jboolean trusted = false;
  JavaSecurityCertCertificateException *ex = nil;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->tms_))->size_ && !trusted; i++) {
    @try {
      [((id<JavaxNetSslX509TrustManager>) nil_chk(IOSObjectArray_Get(self->tms_, i))) checkClientTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
      trusted = true;
    }
    @catch (JavaSecurityCertCertificateException *e) {
      ex = e;
    }
  }
  if (!trusted && ex != nil) {
    @throw ex;
  }
}

- (void)checkServerTrustedWithJavaSecurityCertX509CertificateArray:(IOSObjectArray *)chain
                                                      withNSString:(NSString *)authType {
  
#line 40
  jboolean trusted = false;
  JavaSecurityCertCertificateException *ex = nil;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->tms_))->size_ && !trusted; i++) {
    @try {
      [((id<JavaxNetSslX509TrustManager>) nil_chk(IOSObjectArray_Get(self->tms_, i))) checkServerTrustedWithJavaSecurityCertX509CertificateArray:chain withNSString:authType];
      trusted = true;
    }
    @catch (JavaSecurityCertCertificateException *e) {
      ex = e;
    }
  }
  if (!trusted && ex != nil) {
    @throw ex;
  }
}


#line 56
- (IOSObjectArray *)getAcceptedIssuers {
  
#line 58
  id<JavaUtilList> acceptedIssuers = new_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ =
#line 59
    self->tms_;
    id<JavaxNetSslX509TrustManager> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaxNetSslX509TrustManager> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaxNetSslX509TrustManager> tm = *b__++;
      
#line 60
      [acceptedIssuers addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((id<JavaxNetSslX509TrustManager>) nil_chk(tm)) getAcceptedIssuers])];
    }
  }
  
#line 62
  return [acceptedIssuers toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:JavaSecurityCertX509Certificate_class_()]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, 3, -1, -1, -1 },
    { NULL, "[LJavaSecurityCertX509Certificate;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaxNetSslX509TrustManagerArray:);
  methods[1].selector = @selector(checkClientTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[2].selector = @selector(checkServerTrustedWithJavaSecurityCertX509CertificateArray:withNSString:);
  methods[3].selector = @selector(getAcceptedIssuers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tms_", "[LJavaxNetSslX509TrustManager;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LJavaxNetSslX509TrustManager;", "checkClientTrusted", "[LJavaSecurityCertX509Certificate;LNSString;", "LJavaSecurityCertCertificateException;", "checkServerTrusted" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpMultiX509TrustManager = { "MultiX509TrustManager", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpMultiX509TrustManager;
}

@end


#line 15
void EsGobAfirmaCoreMiscHttpMultiX509TrustManager_initWithJavaxNetSslX509TrustManagerArray_(EsGobAfirmaCoreMiscHttpMultiX509TrustManager *self, IOSObjectArray *tms) {
  NSObject_init(self);
  
#line 16
  self->tms_ = tms;
}


#line 15
EsGobAfirmaCoreMiscHttpMultiX509TrustManager *new_EsGobAfirmaCoreMiscHttpMultiX509TrustManager_initWithJavaxNetSslX509TrustManagerArray_(IOSObjectArray *tms) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpMultiX509TrustManager, initWithJavaxNetSslX509TrustManagerArray_, tms)
}


#line 15
EsGobAfirmaCoreMiscHttpMultiX509TrustManager *create_EsGobAfirmaCoreMiscHttpMultiX509TrustManager_initWithJavaxNetSslX509TrustManagerArray_(IOSObjectArray *tms) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpMultiX509TrustManager, initWithJavaxNetSslX509TrustManagerArray_, tms)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpMultiX509TrustManager)
