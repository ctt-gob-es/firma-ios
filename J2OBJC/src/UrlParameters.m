//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/protocol/UrlParameters.java
//

#include "Base64.h"
#include "DataDownloader.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ParameterException.h"
#include "ParameterLocalAccessRequestedException.h"
#include "UrlParameters.h"
#include "java/io/File.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/net/URL.h"
#include "java/net/URLDecoder.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/Arrays.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "UrlParameters must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscProtocolUrlParameters () {
 @public
  NSString *fileId_;
  IOSByteArray *desKey_;
  JavaNetURL *retrieveServletUrl_;
  JavaNetURL *storageServerUrl_;
  NSString *id__;
  NSString *minimumClientVersion_;
  jboolean activeWaiting_;
  NSString *defaultKeyStore_;
  NSString *defaultKeyStoreLib_;
  JavaUtilProperties *extraParams_;
  NSString *filename_;
}

/*!
 @brief Establece la clave DES de cifrado de los datos a subir al servidor intermedio.
 @param key Clave DES de cifrado de los datos a subir al servidor intermedio
 */
- (void)setDesKeyWithByteArray:(IOSByteArray *)key;

/*!
 @brief Extrae y verifica la clave de cifrado de los par&aacute;metros de entrada.
 @param params Par &aacute; metros extra &iacute; dos de la URI.
 @return Clave de cifrado o <code>null</code> si no se declar&oacute; un valor en los par&aacute;metros.
 @throw ParameterExceptionCuando la clave de cifrado es err&oacute;nea.
 */
+ (IOSByteArray *)verifyCipherKeyWithJavaUtilMap:(id<JavaUtilMap>)params;

/*!
 @brief Sanea una ruta de archivo.
 @param path Ruta de archivo.
 @return Ruta de archivo limpia.
 */
+ (NSString *)cleanupPathWithNSString:(NSString *)path;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, fileId_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, desKey_, IOSByteArray *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, retrieveServletUrl_, JavaNetURL *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, storageServerUrl_, JavaNetURL *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, id__, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, minimumClientVersion_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, defaultKeyStore_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, defaultKeyStoreLib_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, extraParams_, JavaUtilProperties *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscProtocolUrlParameters, filename_, NSString *)

/*!
 @brief Longitud permitida para la clave de cifrado.
 */
inline jint EsGobAfirmaCoreMiscProtocolUrlParameters_get_CIPHER_KEY_LENGTH(void);
#define EsGobAfirmaCoreMiscProtocolUrlParameters_CIPHER_KEY_LENGTH 8
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscProtocolUrlParameters, CIPHER_KEY_LENGTH, jint)

/*!
 @brief Codificaci&oacute;n por defecto.
 */
inline NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_get_DEFAULT_ENCODING(void);
static NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_DEFAULT_ENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscProtocolUrlParameters, DEFAULT_ENCODING, NSString *)

__attribute__((unused)) static void EsGobAfirmaCoreMiscProtocolUrlParameters_setDesKeyWithByteArray_(EsGobAfirmaCoreMiscProtocolUrlParameters *self, IOSByteArray *key);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscProtocolUrlParameters_verifyCipherKeyWithJavaUtilMap_(id<JavaUtilMap> params);

__attribute__((unused)) static NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_cleanupPathWithNSString_(NSString *path);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/protocol/UrlParameters.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscProtocolUrlParameters)

JavaUtilLoggingLogger *EsGobAfirmaCoreMiscProtocolUrlParameters_LOGGER;
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM = @"properties";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_DATA_PARAM = @"dat";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_GZIPPED_DATA_PARAM = @"gzip";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_RETRIEVE_SERVLET_PARAM = @"rtservlet";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM = @"stservlet";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_KEY_PARAM = @"key";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM = @"fileid";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM = @"keystore";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM = @"ksb64";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_ACTIVE_WAITING_PARAM = @"aw";
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_MINIMUM_CLIENT_VERSION_PARAM = @"mcv";


#line 26
@implementation EsGobAfirmaCoreMiscProtocolUrlParameters

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 26
- (instancetype)init {
  EsGobAfirmaCoreMiscProtocolUrlParameters_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 98
- (JavaUtilProperties *)getExtraParams {
  if (self->extraParams_ == nil) {
    self->extraParams_ = new_JavaUtilProperties_init();
  }
  return self->extraParams_;
}


#line 108
- (void)setExtraParamsWithJavaUtilProperties:(JavaUtilProperties *)properties {
  self->extraParams_ = properties != nil ? properties : new_JavaUtilProperties_init();
}


#line 114
- (NSString *)getFileName {
  return self->filename_;
}


#line 120
- (void)setFilenameWithNSString:(NSString *)filename {
  self->filename_ = filename;
}


#line 126
- (NSString *)getDefaultKeyStore {
  return self->defaultKeyStore_;
}


#line 132
- (void)setDefaultKeyStoreWithNSString:(NSString *)storeName {
  self->defaultKeyStore_ = storeName;
}


#line 138
- (NSString *)getDefaultKeyStoreLib {
  return self->defaultKeyStoreLib_;
}


#line 144
- (void)setDefaultKeyStoreLibWithNSString:(NSString *)storeLib {
  self->defaultKeyStoreLib_ = storeLib;
}


#line 150
- (void)setDataWithByteArray:(IOSByteArray *)dat {
  self->data_ = dat != nil ? JavaUtilArrays_copyOfWithByteArray_withInt_(dat, dat->size_) : nil;
}


#line 156
- (void)setFileIdWithNSString:(NSString *)fileId {
  self->fileId_ = fileId;
}


#line 162
- (void)setDesKeyWithByteArray:(IOSByteArray *)key {
  EsGobAfirmaCoreMiscProtocolUrlParameters_setDesKeyWithByteArray_(self, key);
}


#line 168
- (void)setRetrieveServletUrlWithJavaNetURL:(JavaNetURL *)retrieveServletUrl {
  self->retrieveServletUrl_ = retrieveServletUrl;
}


#line 174
- (IOSByteArray *)getData {
  return self->data_ != nil ? JavaUtilArrays_copyOfWithByteArray_withInt_(self->data_, self->data_->size_) : nil;
}


#line 180
- (NSString *)getFileId {
  return self->fileId_;
}


#line 186
- (IOSByteArray *)getDesKey {
  return self->desKey_ != nil ? JavaUtilArrays_copyOfWithByteArray_withInt_(self->desKey_, self->desKey_->size_) : nil;
}


#line 192
- (JavaNetURL *)getRetrieveServletUrl {
  return self->retrieveServletUrl_;
}


#line 198
- (JavaNetURL *)getStorageServletUrl {
  return self->storageServerUrl_;
}

- (void)setStorageServletUrlWithJavaNetURL:(JavaNetURL *)url {
  self->storageServerUrl_ = url;
}


#line 210
- (jboolean)isActiveWaiting {
  return self->activeWaiting_;
}


#line 219
- (void)setActiveWaitingWithBoolean:(jboolean)activeWaiting {
  self->activeWaiting_ = activeWaiting;
}


#line 227
- (NSString *)getMinimumClientVersion {
  return self->minimumClientVersion_;
}


#line 236
- (void)setMinimumClientVersionWithNSString:(NSString *)minimumClientVersion {
  self->minimumClientVersion_ = minimumClientVersion;
}


#line 242
- (NSString *)getId {
  return self->id__;
}

- (void)setSessionIdWithNSString:(NSString *)sessionId {
  self->id__ = sessionId;
}

- (void)setCommonParametersWithJavaUtilMap:(id<JavaUtilMap>)params {
  
#line 252
  EsGobAfirmaCoreMiscProtocolUrlParameters_setDesKeyWithByteArray_(self, EsGobAfirmaCoreMiscProtocolUrlParameters_verifyCipherKeyWithJavaUtilMap_(params));
  
#line 254
  [self setActiveWaitingWithBoolean:[((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_ACTIVE_WAITING_PARAM] && JavaLangBoolean_parseBooleanWithNSString_(
#line 255
  [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_ACTIVE_WAITING_PARAM])];
  
#line 257
  if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_MINIMUM_CLIENT_VERSION_PARAM]) {
    [self setMinimumClientVersionWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_MINIMUM_CLIENT_VERSION_PARAM]];
  }
  
#line 264
  if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_DATA_PARAM]) {
    
#line 266
    if ([params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM]) {
      
#line 268
      [self setFileIdWithNSString:[params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM]];
      
#line 270
      if (![params containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_RETRIEVE_SERVLET_PARAM]) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(
#line 272
        @"No se ha recibido la direccion del servlet para la recuperacion de los datos a firmar");
      }
      
#line 276
      @try {
        [self setRetrieveServletUrlWithJavaNetURL:EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_(
#line 279
        [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_RETRIEVE_SERVLET_PARAM])];
      }
      @catch (
#line 283
      EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException_initWithNSString_withJavaLangThrowable_(
#line 285
        @"La URL del servicio de recuperacion de datos no puede ser local", e);
      }
      @catch (
#line 288
      EsGobAfirmaCoreMiscProtocolParameterException *e) {
        @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"Error al validar la URL del servlet de recuperacion: ",
#line 290
        e), e);
      }
    }
  }
  else {
    
#line 296
    NSString *dataPrm = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_DATA_PARAM];
    if ([((NSString *) nil_chk(dataPrm)) java_hasPrefix:@"file:/"]) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$$", @"No se permite la lectura de ficheros locales: ",
#line 299
      dataPrm));
    }
    
#line 302
    @try {
      [self setDataWithByteArray:EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_(
#line 305
      dataPrm, JavaLangBoolean_parseBooleanWithNSString_(
#line 308
      [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_GZIPPED_DATA_PARAM]))];
    }
    @catch (
#line 312
    JavaLangException *e) {
      @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"No se han podido obtener los datos: ",
#line 314
      e), e);
    }
  }
}


#line 324
+ (IOSByteArray *)verifyCipherKeyWithJavaUtilMap:(id<JavaUtilMap>)params {
  return EsGobAfirmaCoreMiscProtocolUrlParameters_verifyCipherKeyWithJavaUtilMap_(params);
}


#line 348
+ (JavaNetURL *)validateURLWithNSString:(NSString *)url {
  return EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_(url);
}


#line 379
+ (NSString *)getKeyStoreNameWithJavaUtilMap:(id<JavaUtilMap>)params {
  return EsGobAfirmaCoreMiscProtocolUrlParameters_getKeyStoreNameWithJavaUtilMap_(params);
}


#line 412
+ (NSString *)getDefaultKeyStoreLibWithJavaUtilMap:(id<JavaUtilMap>)params {
  return EsGobAfirmaCoreMiscProtocolUrlParameters_getDefaultKeyStoreLibWithJavaUtilMap_(params);
}


#line 444
+ (NSString *)cleanupPathWithNSString:(NSString *)path {
  return EsGobAfirmaCoreMiscProtocolUrlParameters_cleanupPathWithNSString_(path);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 15, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 19, 20, -1, -1 },
    { NULL, "[B", 0xa, 21, 18, 19, 22, -1, -1 },
    { NULL, "LJavaNetURL;", 0xc, 23, 3, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 24, 18, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0xc, 26, 18, -1, 25, -1, -1 },
    { NULL, "LNSString;", 0xa, 27, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExtraParams);
  methods[2].selector = @selector(setExtraParamsWithJavaUtilProperties:);
  methods[3].selector = @selector(getFileName);
  methods[4].selector = @selector(setFilenameWithNSString:);
  methods[5].selector = @selector(getDefaultKeyStore);
  methods[6].selector = @selector(setDefaultKeyStoreWithNSString:);
  methods[7].selector = @selector(getDefaultKeyStoreLib);
  methods[8].selector = @selector(setDefaultKeyStoreLibWithNSString:);
  methods[9].selector = @selector(setDataWithByteArray:);
  methods[10].selector = @selector(setFileIdWithNSString:);
  methods[11].selector = @selector(setDesKeyWithByteArray:);
  methods[12].selector = @selector(setRetrieveServletUrlWithJavaNetURL:);
  methods[13].selector = @selector(getData);
  methods[14].selector = @selector(getFileId);
  methods[15].selector = @selector(getDesKey);
  methods[16].selector = @selector(getRetrieveServletUrl);
  methods[17].selector = @selector(getStorageServletUrl);
  methods[18].selector = @selector(setStorageServletUrlWithJavaNetURL:);
  methods[19].selector = @selector(isActiveWaiting);
  methods[20].selector = @selector(setActiveWaitingWithBoolean:);
  methods[21].selector = @selector(getMinimumClientVersion);
  methods[22].selector = @selector(setMinimumClientVersionWithNSString:);
  methods[23].selector = @selector(getId);
  methods[24].selector = @selector(setSessionIdWithNSString:);
  methods[25].selector = @selector(setCommonParametersWithJavaUtilMap:);
  methods[26].selector = @selector(verifyCipherKeyWithJavaUtilMap:);
  methods[27].selector = @selector(validateURLWithNSString:);
  methods[28].selector = @selector(getKeyStoreNameWithJavaUtilMap:);
  methods[29].selector = @selector(getDefaultKeyStoreLibWithJavaUtilMap:);
  methods[30].selector = @selector(cleanupPathWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1c, -1, 28, -1, -1 },
    { "PROPERTIES_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 29, -1, -1 },
    { "DATA_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 30, -1, -1 },
    { "GZIPPED_DATA_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 31, -1, -1 },
    { "RETRIEVE_SERVLET_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 32, -1, -1 },
    { "STORAGE_SERVLET_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 33, -1, -1 },
    { "MAX_ID_LENGTH", "I", .constantValue.asInt = EsGobAfirmaCoreMiscProtocolUrlParameters_MAX_ID_LENGTH, 0x1c, -1, -1, -1, -1 },
    { "CIPHER_KEY_LENGTH", "I", .constantValue.asInt = EsGobAfirmaCoreMiscProtocolUrlParameters_CIPHER_KEY_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "KEY_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 34, -1, -1 },
    { "FILE_ID_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 35, -1, -1 },
    { "KEYSTORE_OLD_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 36, -1, -1 },
    { "KEYSTORE_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 37, -1, -1 },
    { "ACTIVE_WAITING_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 38, -1, -1 },
    { "MINIMUM_CLIENT_VERSION_PARAM", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 39, -1, -1 },
    { "DEFAULT_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "data_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fileId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "desKey_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "retrieveServletUrl_", "LJavaNetURL;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "storageServerUrl_", "LJavaNetURL;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "id__", "LNSString;", .constantValue.asLong = 0, 0x2, 41, -1, -1, -1 },
    { "minimumClientVersion_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "activeWaiting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultKeyStore_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultKeyStoreLib_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraParams_", "LJavaUtilProperties;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filename_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setExtraParams", "LJavaUtilProperties;", "setFilename", "LNSString;", "setDefaultKeyStore", "setDefaultKeyStoreLib", "setData", "[B", "setFileId", "setDesKey", "setRetrieveServletUrl", "LJavaNetURL;", "setStorageServletUrl", "setActiveWaiting", "Z", "setMinimumClientVersion", "setSessionId", "setCommonParameters", "LJavaUtilMap;", "LEsGobAfirmaCoreMiscProtocolParameterException;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "verifyCipherKey", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)[B", "validateURL", "getKeyStoreName", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)Ljava/lang/String;", "getDefaultKeyStoreLib", "cleanupPath", &EsGobAfirmaCoreMiscProtocolUrlParameters_LOGGER, &EsGobAfirmaCoreMiscProtocolUrlParameters_PROPERTIES_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_DATA_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_GZIPPED_DATA_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_RETRIEVE_SERVLET_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_STORAGE_SERVLET_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_KEY_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_FILE_ID_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_ACTIVE_WAITING_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_MINIMUM_CLIENT_VERSION_PARAM, &EsGobAfirmaCoreMiscProtocolUrlParameters_DEFAULT_ENCODING, "id" };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscProtocolUrlParameters = { "UrlParameters", "es.gob.afirma.core.misc.protocol", ptrTable, methods, fields, 7, 0x401, 31, 27, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscProtocolUrlParameters;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscProtocolUrlParameters class]) {
    EsGobAfirmaCoreMiscProtocolUrlParameters_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 28
    @"es.gob.afirma");
    EsGobAfirmaCoreMiscProtocolUrlParameters_DEFAULT_ENCODING =
#line 76
    [((JavaNioCharsetCharset *) nil_chk(JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8))) name];
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscProtocolUrlParameters)
  }
}

@end


#line 26
void EsGobAfirmaCoreMiscProtocolUrlParameters_init(EsGobAfirmaCoreMiscProtocolUrlParameters *self) {
  NSObject_init(self);
  self->data_ =
#line 78
  nil;
  self->fileId_ = nil;
  self->desKey_ = nil;
  self->retrieveServletUrl_ = nil;
  self->storageServerUrl_ = nil;
  self->id__ = nil;
  self->minimumClientVersion_ = nil;
  self->activeWaiting_ = false;
  self->defaultKeyStore_ =
#line 87
  nil;
  self->defaultKeyStoreLib_ = nil;
  self->extraParams_ = nil;
  self->filename_ = nil;
}


#line 162
void EsGobAfirmaCoreMiscProtocolUrlParameters_setDesKeyWithByteArray_(EsGobAfirmaCoreMiscProtocolUrlParameters *self, IOSByteArray *key) {
  self->desKey_ = key != nil ? JavaUtilArrays_copyOfWithByteArray_withInt_(key, key->size_) : nil;
}


#line 324
IOSByteArray *EsGobAfirmaCoreMiscProtocolUrlParameters_verifyCipherKeyWithJavaUtilMap_(id<JavaUtilMap> params) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_initialize();
  
#line 327
  if (![((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEY_PARAM]) {
    return nil;
  }
  
#line 332
  NSString *key = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEY_PARAM];
  if (key == nil || [key java_length] == 0) {
    return nil;
  }
  
#line 338
  if ([key java_length] != EsGobAfirmaCoreMiscProtocolUrlParameters_CIPHER_KEY_LENGTH) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"La longitud de la clave de cifrado no es correcta");
  }
  return [key java_getBytes];
}


#line 348
JavaNetURL *EsGobAfirmaCoreMiscProtocolUrlParameters_validateURLWithNSString_(NSString *url) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_initialize();
  
#line 351
  JavaNetURL *servletUrl;
  @try {
    servletUrl = new_JavaNetURL_initWithNSString_(JavaNetURLDecoder_decodeWithNSString_withNSString_(url, EsGobAfirmaCoreMiscProtocolUrlParameters_DEFAULT_ENCODING));
  }
  @catch (JavaLangException *e) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$$$@", @"La URL proporcionada para el servlet no es valida (",
#line 357
    url, @"): ", e));
  }
  
#line 361
  if (![@"http" isEqual:[((JavaNetURL *) nil_chk(servletUrl)) getProtocol]] && ![@"https" isEqual:[servletUrl getProtocol]]) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(JreStrcat("$$", @"El protocolo de la URL proporcionada para el servlet no esta soportado: ",
#line 363
    [servletUrl getProtocol]));
  }
  
#line 367
  if ([@"localhost" isEqual:[servletUrl getHost]] || [@"127.0.0.1" isEqual:[servletUrl getHost]]) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterLocalAccessRequestedException_initWithNSString_(
#line 369
    @"El host de la URL proporcionada para el Servlet es local");
  }
  
#line 373
  if ([((NSString *) nil_chk([servletUrl description])) java_indexOf:'?'] != -1 || [((NSString *) nil_chk([servletUrl description])) java_indexOf:'='] != -1) {
    @throw new_EsGobAfirmaCoreMiscProtocolParameterException_initWithNSString_(@"Se han encontrado parametros en la URL del servlet");
  }
  return servletUrl;
}


#line 379
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_getKeyStoreNameWithJavaUtilMap_(id<JavaUtilMap> params) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_initialize();
  
#line 382
  NSString *ksValue = nil;
  if ([((id<JavaUtilMap>) nil_chk(params)) getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM] != nil) {
    ksValue = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM];
  }
  else if ([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM] != nil) {
    @try {
      ksValue = [NSString java_stringWithBytes:EsGobAfirmaCoreMiscBase64_decodeWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM])];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 395
  if (ksValue != nil) {
    jint separatorPos = [ksValue java_indexOf:':'];
    if (separatorPos == -1) {
      return ksValue;
    }
    if ([ksValue java_length] > 1) {
      return [((NSString *) nil_chk([ksValue java_substring:0 endIndex:separatorPos])) java_trim];
    }
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscProtocolUrlParameters_LOGGER)) infoWithNSString:JreStrcat("$$$", @"El almacen indicado no es valido ('",
#line 404
    ksValue, @"'), se usara el por defecto del sistema operativo")];
  }
  
#line 408
  return nil;
}


#line 412
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_getDefaultKeyStoreLibWithJavaUtilMap_(id<JavaUtilMap> params) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_initialize();
  
#line 415
  NSString *ksValue = nil;
  if ([((id<JavaUtilMap>) nil_chk(params)) getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM] != nil) {
    ksValue = [params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_OLD_PARAM];
  }
  else if ([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM] != nil) {
    @try {
      ksValue = [NSString java_stringWithBytes:EsGobAfirmaCoreMiscBase64_decodeWithNSString_([params getWithId:EsGobAfirmaCoreMiscProtocolUrlParameters_KEYSTORE_PARAM])];
    }
    @catch (JavaLangException *e) {
    }
  }
  
#line 428
  if (ksValue == nil) {
    return nil;
  }
  
#line 432
  jint separatorPos = [ksValue java_indexOf:':'];
  if (separatorPos != -1 && separatorPos < [ksValue java_length] - 1) {
    return EsGobAfirmaCoreMiscProtocolUrlParameters_cleanupPathWithNSString_([ksValue java_substring:separatorPos + 1]);
  }
  return nil;
}


#line 444
NSString *EsGobAfirmaCoreMiscProtocolUrlParameters_cleanupPathWithNSString_(NSString *path) {
  EsGobAfirmaCoreMiscProtocolUrlParameters_initialize();
  
#line 445
  NSString *cleanedpath = [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(path)) java_trim])) java_replace:@"\"" withSequence:@""])) java_replace:@"'" withSequence:@""];
  @try {
    cleanedpath = [new_JavaIoFile_initWithNSString_(cleanedpath) getCanonicalPath];
  }
  @catch (
#line 448
  JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscProtocolUrlParameters_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Ruta de fichero no valida" withJavaLangThrowable:e];
    cleanedpath = nil;
  }
  return cleanedpath;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscProtocolUrlParameters)
