//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/TrueTypeFont.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TrueTypeFont")
#ifdef RESTRICT_TrueTypeFont
#define INCLUDE_ALL_TrueTypeFont 0
#else
#define INCLUDE_ALL_TrueTypeFont 1
#endif
#undef RESTRICT_TrueTypeFont

#if !defined (ComAowagieTextPdfTrueTypeFont_) && (INCLUDE_ALL_TrueTypeFont || defined(INCLUDE_ComAowagieTextPdfTrueTypeFont))
#define ComAowagieTextPdfTrueTypeFont_

#define RESTRICT_BaseFont 1
#define INCLUDE_ComAowagieTextPdfBaseFont 1
#include "BaseFont.h"

@class ComAowagieTextPdfIntHashtable;
@class ComAowagieTextPdfPdfDictionary;
@class ComAowagieTextPdfPdfIndirectReference;
@class ComAowagieTextPdfPdfStream;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextPdfRandomAccessFileOrArray;
@class ComAowagieTextPdfTrueTypeFont_FontHeader;
@class ComAowagieTextPdfTrueTypeFont_HorizontalHeader;
@class ComAowagieTextPdfTrueTypeFont_WindowsMetrics;
@class IOSByteArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilHashMap;

/*!
 @brief Reads a Truetype font
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfTrueTypeFont : ComAowagieTextPdfBaseFont {
 @public
  jboolean justNames_;
  /*!
   @brief Contains the location of the several tables.The key is the name of
  the table and the value is an <CODE>int[2]</CODE> where position 0
  is the offset from the start of the file and position 1 is the length
  of the table.
   */
  JavaUtilHashMap *tables_;
  /*!
   @brief The file in use.
   */
  ComAowagieTextPdfRandomAccessFileOrArray *rf_;
  /*!
   @brief The file name.
   */
  NSString *fileName_;
  jboolean cff_;
  jint cffOffset_;
  jint cffLength_;
  /*!
   @brief The offset from the start of the file to the table directory.
   It is 0 for TTF and may vary for TTC depending on the chosen font.
   */
  jint directoryOffset_;
  /*!
   @brief The index for the TTC font.It is an empty <CODE>String</CODE> for a
  TTF file.
   */
  NSString *ttcIndex_;
  /*!
   @brief The style modifier
   */
  NSString *style_;
  /*!
   @brief The content of table 'head'.
   */
  ComAowagieTextPdfTrueTypeFont_FontHeader *head_;
  /*!
   @brief The content of table 'hhea'.
   */
  ComAowagieTextPdfTrueTypeFont_HorizontalHeader *hhea_;
  /*!
   @brief The content of table 'OS/2'.
   */
  ComAowagieTextPdfTrueTypeFont_WindowsMetrics *os_2_;
  /*!
   @brief The width of the glyphs.This is essentially the content of table
  'hmtx' normalized to 1000 units.
   */
  IOSIntArray *GlyphWidths_;
  IOSObjectArray *bboxes_;
  /*!
   @brief The map containing the code information for the table 'cmap', encoding 1.0.
   The key is the code and the value is an <CODE>int[2]</CODE> where position 0
  is the glyph number and position 1 is the glyph width normalized to 1000
  units.
   */
  JavaUtilHashMap *cmap10_;
  /*!
   @brief The map containing the code information for the table 'cmap', encoding 3.1
  in Unicode.
   <P>
  The key is the code and the value is an <CODE>int</CODE>[2] where position 0
  is the glyph number and position 1 is the glyph width normalized to 1000
  units.
   */
  JavaUtilHashMap *cmap31_;
  JavaUtilHashMap *cmapExt_;
  /*!
   @brief The map containing the kerning information.It represents the content of
  table 'kern'.
   The key is an <CODE>Integer</CODE> where the top 16 bits
  are the glyph number for the first character and the lower 16 bits are the
  glyph number for the second character. The value is the amount of kerning in
  normalized 1000 units as an <CODE>Integer</CODE>. This value is usually negative.
   */
  ComAowagieTextPdfIntHashtable *kerning_;
  /*!
   @brief The font name.
   This name is usually extracted from the table 'name' with
  the 'Name ID' 6.
   */
  NSString *fontName_;
  /*!
   @brief The full name of the font
   */
  IOSObjectArray *fullName_;
  /*!
   @brief All the names of the Names-Table
   */
  IOSObjectArray *allNameEntries_;
  /*!
   @brief The family name of the font
   */
  IOSObjectArray *familyName_;
  /*!
   @brief The italic angle.It is usually extracted from the 'post' table or in it's
  absence with the code: 
 @code

  -Math.atan2(hhea.caretSlopeRun, hhea.caretSlopeRise) * 180 / Math.PI 
  
@endcode
   */
  jdouble italicAngle_;
  /*!
   @brief <CODE>true</CODE> if all the glyphs have the same width.
   */
  jboolean isFixedPitch_;
  jint underlinePosition_;
  jint underlineThickness_;
}

#pragma mark Public

/*!
 @brief Gets all the entries of the Names-Table.If it is a True Type font
  each array element will have {Name ID, Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getAllNameEntries;

/*!
 @brief Gets the code pages supported by the font.
 @return the code pages supported by the font
 */
- (IOSObjectArray *)getCodePagesSupported;

/*!
 @brief Gets the family name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the family name of the font
 */
- (IOSObjectArray *)getFamilyFontName;

/*!
 @brief Gets the font parameter identified by <CODE>key</CODE>.Valid values
  for <CODE>key</CODE> are <CODE>ASCENT</CODE>, <CODE>CAPHEIGHT</CODE>, <CODE>DESCENT</CODE>
  and <CODE>ITALICANGLE</CODE>.
 @param key the parameter to be extracted
 @param fontSize the font size in points
 @return the parameter in points
 */
- (jfloat)getFontDescriptorWithInt:(jint)key
                         withFloat:(jfloat)fontSize;

/*!
 @brief Gets the full name of the font.If it is a True Type font
  each array element will have {Platform ID, Platform Encoding ID,
  Language ID, font name}.
 The interpretation of this values can be
  found in the Open Type specification, chapter 2, in the 'name' table.<br>
  For the other fonts the array has a single element with {"", "", "",
  font name}.
 @return the full name of the font
 */
- (IOSObjectArray *)getFullFontName;

/*!
 @brief Returns a PdfStream object with the full font program.
 @return a PdfStream with the font program
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @since 2.1.3
 */
- (ComAowagieTextPdfPdfStream *)getFullFontStream;

/*!
 @brief Gets the kerning between two Unicode chars.
 @param char1 the first char
 @param char2 the second char
 @return the kerning to be applied
 */
- (jint)getKerningWithInt:(jint)char1
                  withInt:(jint)char2;

/*!
 @brief Gets the glyph index and metrics for a character.
 @param c the character
 @return an <CODE>int</CODE> array with {glyph index, width}
 */
- (IOSIntArray *)getMetricsTTWithInt:(jint)c;

/*!
 @brief Gets the postscript font name.
 @return the postscript font name
 */
- (NSString *)getPostscriptFontName;

/*!
 @brief Checks if the font has any kerning pairs.
 @return <CODE>true</CODE> if the font has any kerning pairs
 */
- (jboolean)hasKernPairs;

/*!
 @brief Sets the kerning between two Unicode chars.
 @param char1 the first char
 @param char2 the second char
 @param kern the kerning to apply in normalized 1000 units
 @return <code>true</code> if the kerning was applied, <code>false</code> otherwise
 */
- (jboolean)setKerningWithInt:(jint)char1
                      withInt:(jint)char2
                      withInt:(jint)kern;

/*!
 @brief Sets the font name that will appear in the pdf font dictionary.
 Use with care as it can easily make a font unreadable if not embedded.
 @param name the new font name
 */
- (void)setPostscriptFontNameWithNSString:(NSString *)name;

#pragma mark Protected

/*!
 @brief This constructor is present to allow extending the class.
 */
- (instancetype)initPackagePrivate;

- (void)addRangeUniWithJavaUtilHashMap:(JavaUtilHashMap *)longTag
                           withBoolean:(jboolean)includeMetrics
                           withBoolean:(jboolean)subsetp;

+ (IOSIntArray *)compactRangesWithJavaUtilArrayList:(JavaUtilArrayList *)ranges;

/*!
 @brief Generates the font dictionary for this font.
 @return the PdfDictionary containing the font dictionary
 @param subsetPrefix the subset prefix
 @param firstChar the first valid character
 @param lastChar the last valid character
 @param shortTag a 256 bytes long  <CODE> byte </CODE>  array where each unused byte is represented by 0
 @param fontDescriptor the indirect reference to a PdfDictionary containing the font descriptor or  <CODE> null </CODE>
 */
- (ComAowagieTextPdfPdfDictionary *)getFontBaseTypeWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontDescriptor
                                                                                withNSString:(NSString *)subsetPrefix
                                                                                     withInt:(jint)firstChar
                                                                                     withInt:(jint)lastChar
                                                                               withByteArray:(IOSByteArray *)shortTag;

/*!
 @brief Generates the font descriptor for this font.
 @return the PdfDictionary containing the font descriptor or <CODE>null</CODE>
 @param subsetPrefix the subset prefix
 @param fontStream the indirect reference to a PdfStream containing the font or  <CODE> null </CODE>
 @param cidset CID set
 */
- (ComAowagieTextPdfPdfDictionary *)getFontDescriptorWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)fontStream
                                                                                  withNSString:(NSString *)subsetPrefix
                                                     withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)cidset;

- (IOSByteArray *)getFullFont;

/*!
 @brief Gets a glyph width.
 @param glyph the glyph to get the width of
 @return the width of the glyph in normalized 1000 units
 */
- (jint)getGlyphWidthWithInt:(jint)glyph;

- (IOSIntArray *)getRawCharBBoxWithInt:(jint)c
                          withNSString:(NSString *)name;

/*!
 @brief Gets the name from a composed TTC file name.
 If I have for input "myfont.ttc,2" the return will
  be "myfont.ttc".
 @param name the full name
 @return the simple file name
 */
+ (NSString *)getTTCNameWithNSString:(NSString *)name;

/*!
 @brief If this font file is using the Compact Font File Format, then this method
  will return the raw bytes needed for the font stream.If this method is
  ever made public: make sure to add a test if (cff == true).
 @return a byte array
 @throw IOExceptionon error
 @since 2.1.3
 */
- (IOSByteArray *)readCffFont;

/*!
 @brief Reads the glyphs widths.The widths are extracted from the table 'hmtx'.
 The glyphs are normalized to 1000 units.
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 */
- (void)readGlyphWidths;

/*!
 @brief Reads a <CODE>String</CODE> from the font file as bytes using the Cp1252
   encoding.
 @param length the length of bytes to read
 @return the <CODE>String</CODE> read
 @throw IOExceptionthe font file could not be read
 */
- (NSString *)readStandardStringWithInt:(jint)length;

/*!
 @brief Reads a Unicode <CODE>String</CODE> from the font file.Each character is
   represented by two bytes.
 @param length the length of bytes to read. The  <CODE> String </CODE>  will have  <CODE> length </CODE>
  /2  characters
 @return the <CODE>String</CODE> read
 @throw IOExceptionthe font file could not be read
 */
- (NSString *)readUnicodeStringWithInt:(jint)length;

#pragma mark Package-Private

/*!
 @brief Creates a new TrueType font.
 @param ttFile the location of the font on file. The file must end in '.ttf' or  '.ttc' but can have modifiers after the name
 @param enc the encoding to be applied to this font
 @param emb true if the font is to be embedded in the PDF
 @param ttfAfm the font as a  <CODE> byte </CODE>  array
 @param justNames Just names
 @param forceRead Force read
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 @since 2.1.5
 */
- (instancetype)initPackagePrivateWithNSString:(NSString *)ttFile
                                  withNSString:(NSString *)enc
                                   withBoolean:(jboolean)emb
                                 withByteArray:(IOSByteArray *)ttfAfm
                                   withBoolean:(jboolean)justNames
                                   withBoolean:(jboolean)forceRead;

- (void)checkCff;

/*!
 @brief Reads the tables 'head', 'hhea', 'OS/2' and 'post' filling several variables.
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 */
- (void)fillTables;

/*!
 @brief Extracts all the names of the names-Table
 @return Names
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
- (IOSObjectArray *)getAllNames;

/*!
 @brief Gets the Postscript font name.
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 @return the Postscript font name
 */
- (NSString *)getBaseFont;

/*!
 @brief Extracts the names of the font in all the languages available.
 @param id_ the name id to retrieve
 @return Names
 @throw DocumentExceptionon error
 @throw IOExceptionon error
 */
- (IOSObjectArray *)getNamesWithInt:(jint)id_;

/*!
 @brief Gets the width from the font according to the unicode char <CODE>c</CODE>.
 If the <CODE>name</CODE> is null it's a symbolic font.
 @param c the unicode char
 @param name the glyph name
 @return the width of the char
 */
- (jint)getRawWidthWithInt:(jint)c
              withNSString:(NSString *)name;

/*!
 @brief Reads the font data.
 @param ttfAfm the font as a  <CODE> byte </CODE>  array, possibly  <CODE> null </CODE>
 @param preload Preload
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 @since 2.1.5
 */
- (void)processWithByteArray:(IOSByteArray *)ttfAfm
                 withBoolean:(jboolean)preload;

/*!
 @brief Reads the several maps from the table 'cmap'.The maps of interest are 1.0 for symbolic
   fonts and 3.1 for all others.
 A symbolic font is defined as having the map 3.0.
 @throw DocumentExceptionthe font is invalid
 @throw IOExceptionthe font file could not be read
 */
- (void)readCMaps;

/*!
 @brief The information in the maps of the table 'cmap' is coded in several formats.
 Format 0 is the Apple standard character to glyph index mapping table.
 @return a <CODE>HashMap</CODE> representing this map
 @throw IOExceptionthe font file could not be read
 */
- (JavaUtilHashMap *)readFormat0;

- (JavaUtilHashMap *)readFormat12;

/*!
 @brief The information in the maps of the table 'cmap' is coded in several formats.
 Format 4 is the Microsoft standard character to glyph index mapping table.
 @return a <CODE>HashMap</CODE> representing this map
 @throw IOExceptionthe font file could not be read
 */
- (JavaUtilHashMap *)readFormat4;

/*!
 @brief The information in the maps of the table 'cmap' is coded in several formats.
 Format 6 is a trimmed table mapping. It is similar to format 0 but can have
   less than 256 entries.
 @return a <CODE>HashMap</CODE> representing this map
 @throw IOExceptionthe font file could not be read
 */
- (JavaUtilHashMap *)readFormat6;

/*!
 @brief Reads the kerning information from the 'kern' table.
 @throw IOExceptionthe font file could not be read
 */
- (void)readKerning;

/*!
 @brief Outputs to the writer the font dictionaries and streams.
 @param writer the writer for this document
 @param ref the font indirect reference
 @param params several parameters that depend on the font type
 @throw IOExceptionon error
 @throw DocumentExceptionerror in generating the object
 */
- (void)writeFontWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
      withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)ref
                              withNSObjectArray:(IOSObjectArray *)params;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfTrueTypeFont)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, tables_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, rf_, ComAowagieTextPdfRandomAccessFileOrArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, fileName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, ttcIndex_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, style_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, head_, ComAowagieTextPdfTrueTypeFont_FontHeader *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, hhea_, ComAowagieTextPdfTrueTypeFont_HorizontalHeader *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, os_2_, ComAowagieTextPdfTrueTypeFont_WindowsMetrics *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, GlyphWidths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, bboxes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, cmap10_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, cmap31_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, cmapExt_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, kerning_, ComAowagieTextPdfIntHashtable *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, fontName_, NSString *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, fullName_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, allNameEntries_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont, familyName_, IOSObjectArray *)

/*!
 @brief The code pages possible for a True Type font.
 */
inline IOSObjectArray *ComAowagieTextPdfTrueTypeFont_get_codePages(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ComAowagieTextPdfTrueTypeFont_codePages;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfTrueTypeFont, codePages, IOSObjectArray *)

FOUNDATION_EXPORT void ComAowagieTextPdfTrueTypeFont_initPackagePrivate(ComAowagieTextPdfTrueTypeFont *self);

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont *new_ComAowagieTextPdfTrueTypeFont_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont *create_ComAowagieTextPdfTrueTypeFont_initPackagePrivate(void);

FOUNDATION_EXPORT void ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(ComAowagieTextPdfTrueTypeFont *self, NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead);

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont *new_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont *create_ComAowagieTextPdfTrueTypeFont_initPackagePrivateWithNSString_withNSString_withBoolean_withByteArray_withBoolean_withBoolean_(NSString *ttFile, NSString *enc, jboolean emb, IOSByteArray *ttfAfm, jboolean justNames, jboolean forceRead);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfTrueTypeFont_getTTCNameWithNSString_(NSString *name);

FOUNDATION_EXPORT IOSIntArray *ComAowagieTextPdfTrueTypeFont_compactRangesWithJavaUtilArrayList_(JavaUtilArrayList *ranges);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfTrueTypeFont)

#endif

#if !defined (ComAowagieTextPdfTrueTypeFont_FontHeader_) && (INCLUDE_ALL_TrueTypeFont || defined(INCLUDE_ComAowagieTextPdfTrueTypeFont_FontHeader))
#define ComAowagieTextPdfTrueTypeFont_FontHeader_

/*!
 @brief The components of table 'head'.
 */
@interface ComAowagieTextPdfTrueTypeFont_FontHeader : NSObject {
 @public
  /*!
   @brief A variable.
   */
  jint flags_;
  /*!
   @brief A variable.
   */
  jint unitsPerEm_;
  /*!
   @brief A variable.
   */
  jshort xMin_;
  /*!
   @brief A variable.
   */
  jshort yMin_;
  /*!
   @brief A variable.
   */
  jshort xMax_;
  /*!
   @brief A variable.
   */
  jshort yMax_;
  /*!
   @brief A variable.
   */
  jint macStyle_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfTrueTypeFont_FontHeader)

FOUNDATION_EXPORT void ComAowagieTextPdfTrueTypeFont_FontHeader_init(ComAowagieTextPdfTrueTypeFont_FontHeader *self);

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_FontHeader *new_ComAowagieTextPdfTrueTypeFont_FontHeader_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_FontHeader *create_ComAowagieTextPdfTrueTypeFont_FontHeader_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfTrueTypeFont_FontHeader)

#endif

#if !defined (ComAowagieTextPdfTrueTypeFont_HorizontalHeader_) && (INCLUDE_ALL_TrueTypeFont || defined(INCLUDE_ComAowagieTextPdfTrueTypeFont_HorizontalHeader))
#define ComAowagieTextPdfTrueTypeFont_HorizontalHeader_

/*!
 @brief The components of table 'hhea'.
 */
@interface ComAowagieTextPdfTrueTypeFont_HorizontalHeader : NSObject {
 @public
  /*!
   @brief A variable.
   */
  jshort Ascender_;
  /*!
   @brief A variable.
   */
  jshort Descender_;
  /*!
   @brief A variable.
   */
  jshort LineGap_;
  /*!
   @brief A variable.
   */
  jint advanceWidthMax_;
  /*!
   @brief A variable.
   */
  jshort minLeftSideBearing_;
  /*!
   @brief A variable.
   */
  jshort minRightSideBearing_;
  /*!
   @brief A variable.
   */
  jshort xMaxExtent_;
  /*!
   @brief A variable.
   */
  jshort caretSlopeRise_;
  /*!
   @brief A variable.
   */
  jshort caretSlopeRun_;
  /*!
   @brief A variable.
   */
  jint numberOfHMetrics_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfTrueTypeFont_HorizontalHeader)

FOUNDATION_EXPORT void ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init(ComAowagieTextPdfTrueTypeFont_HorizontalHeader *self);

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_HorizontalHeader *new_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_HorizontalHeader *create_ComAowagieTextPdfTrueTypeFont_HorizontalHeader_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfTrueTypeFont_HorizontalHeader)

#endif

#if !defined (ComAowagieTextPdfTrueTypeFont_WindowsMetrics_) && (INCLUDE_ALL_TrueTypeFont || defined(INCLUDE_ComAowagieTextPdfTrueTypeFont_WindowsMetrics))
#define ComAowagieTextPdfTrueTypeFont_WindowsMetrics_

@class IOSByteArray;

/*!
 @brief The components of table 'OS/2'.
 */
@interface ComAowagieTextPdfTrueTypeFont_WindowsMetrics : NSObject {
 @public
  /*!
   @brief A variable.
   */
  jshort xAvgCharWidth_;
  /*!
   @brief A variable.
   */
  jint usWeightClass_;
  /*!
   @brief A variable.
   */
  jint usWidthClass_;
  /*!
   @brief A variable.
   */
  jshort fsType_;
  /*!
   @brief A variable.
   */
  jshort ySubscriptXSize_;
  /*!
   @brief A variable.
   */
  jshort ySubscriptYSize_;
  /*!
   @brief A variable.
   */
  jshort ySubscriptXOffset_;
  /*!
   @brief A variable.
   */
  jshort ySubscriptYOffset_;
  /*!
   @brief A variable.
   */
  jshort ySuperscriptXSize_;
  /*!
   @brief A variable.
   */
  jshort ySuperscriptYSize_;
  /*!
   @brief A variable.
   */
  jshort ySuperscriptXOffset_;
  /*!
   @brief A variable.
   */
  jshort ySuperscriptYOffset_;
  /*!
   @brief A variable.
   */
  jshort yStrikeoutSize_;
  /*!
   @brief A variable.
   */
  jshort yStrikeoutPosition_;
  /*!
   @brief A variable.
   */
  jshort sFamilyClass_;
  /*!
   @brief A variable.
   */
  IOSByteArray *panose_;
  /*!
   @brief A variable.
   */
  IOSByteArray *achVendID_;
  /*!
   @brief A variable.
   */
  jint fsSelection_;
  /*!
   @brief A variable.
   */
  jint usFirstCharIndex_;
  /*!
   @brief A variable.
   */
  jint usLastCharIndex_;
  /*!
   @brief A variable.
   */
  jshort sTypoAscender_;
  /*!
   @brief A variable.
   */
  jshort sTypoDescender_;
  /*!
   @brief A variable.
   */
  jshort sTypoLineGap_;
  /*!
   @brief A variable.
   */
  jint usWinAscent_;
  /*!
   @brief A variable.
   */
  jint usWinDescent_;
  /*!
   @brief A variable.
   */
  jint ulCodePageRange1_;
  /*!
   @brief A variable.
   */
  jint ulCodePageRange2_;
  /*!
   @brief A variable.
   */
  jint sCapHeight_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfTrueTypeFont_WindowsMetrics)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont_WindowsMetrics, panose_, IOSByteArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfTrueTypeFont_WindowsMetrics, achVendID_, IOSByteArray *)

FOUNDATION_EXPORT void ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init(ComAowagieTextPdfTrueTypeFont_WindowsMetrics *self);

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_WindowsMetrics *new_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfTrueTypeFont_WindowsMetrics *create_ComAowagieTextPdfTrueTypeFont_WindowsMetrics_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfTrueTypeFont_WindowsMetrics)

#endif

#pragma pop_macro("INCLUDE_ALL_TrueTypeFont")
