//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfPCell.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfPCell")
#ifdef RESTRICT_PdfPCell
#define INCLUDE_ALL_PdfPCell 0
#else
#define INCLUDE_ALL_PdfPCell 1
#endif
#undef RESTRICT_PdfPCell

#if !defined (ComAowagieTextPdfPdfPCell_) && (INCLUDE_ALL_PdfPCell || defined(INCLUDE_ComAowagieTextPdfPdfPCell))
#define ComAowagieTextPdfPdfPCell_

#define RESTRICT_Rectangle 1
#define INCLUDE_ComAowagieTextRectangle 1
#include "Rectangle.h"

@class ComAowagieTextImage;
@class ComAowagieTextPdfColumnText;
@class ComAowagieTextPdfPdfPTable;
@class ComAowagieTextPhrase;
@protocol ComAowagieTextElement;
@protocol ComAowagieTextPdfPdfPCellEvent;
@protocol JavaUtilList;

/*!
 @brief A cell in a PdfPTable.
 */
@interface ComAowagieTextPdfPdfPCell : ComAowagieTextRectangle

#pragma mark Public

/*!
 @brief Constructs an empty <CODE>PdfPCell</CODE>.
 The default padding is 2.
 */
- (instancetype)init;

/*!
 @brief Constructs a <CODE>PdfPCell</CODE> with a <CODE>PdfPtable</CODE>.
 This constructor allows nested tables.
  The default padding is 0.
 @param table The  <CODE> PdfPTable </CODE>
 */
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table;

/*!
 @brief Adds an iText element to the cell.
 @param element Element
 */
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

/*!
 @brief Gets the arabic shaping options.
 @return the arabic shaping options
 */
- (jint)getArabicOptions;

/*!
 @brief Gets the cell event for this cell.
 @return the cell event
 */
- (id<ComAowagieTextPdfPdfPCellEvent>)getCellEvent;

/*!
 @brief Getter for property colspan.
 @return Value of property colspan.
 */
- (jint)getColspan;

/*!
 @brief Gets the ColumnText with the content of the cell.
 @return a columntext object
 */
- (ComAowagieTextPdfColumnText *)getColumn;

/*!
 @brief Returns the list of composite elements of the column.
 @return a List object.
 @since 2.1.1
 */
- (id<JavaUtilList>)getCompositeElements;

/*!
 @brief Gets the effective bottom padding.
 This will include  the bottom border width if 
 <code>isUseBorderPadding()</code> is true.
 @return effective value of property paddingBottom.
 */
- (jfloat)getEffectivePaddingBottom;

/*!
 @brief Gets the effective left padding.
 This will include the left border width if 
 <code>isUseBorderPadding()</code> is true.
 @return effective value of property paddingLeft.
 */
- (jfloat)getEffectivePaddingLeft;

/*!
 @brief Gets the effective right padding.This will include
  the right border width if <code>isUseBorderPadding()</code> is true.
 @return effective value of property paddingRight.
 */
- (jfloat)getEffectivePaddingRight;

/*!
 @brief Gets the effective top padding.This will include
  the top border width if <code>isUseBorderPadding()</code> is true.
 @return effective value of property paddingTop.
 */
- (jfloat)getEffectivePaddingTop;

/*!
 @brief Gets the extra space between paragraphs.
 @return the extra space between paragraphs
 */
- (jfloat)getExtraParagraphSpace;

/*!
 @brief Get the fixed height of the cell.
 @return Value of property fixedHeight.
 */
- (jfloat)getFixedHeight;

/*!
 @brief Gets the following paragraph lines indent.
 @return the indent
 */
- (jfloat)getFollowingIndent;

/*!
 @brief Gets the horizontal alignment for the cell.
 @return the horizontal alignment for the cell
 */
- (jint)getHorizontalAlignment;

/*!
 @brief Getter for property image.
 @return Value of property image.
 */
- (ComAowagieTextImage *)getImage;

/*!
 @brief Gets the first paragraph line indent.
 @return the indent
 */
- (jfloat)getIndent;

/*!
 @brief Gets the fixed leading.
 @return the leading
 */
- (jfloat)getLeading;

/*!
 @brief Returns the height of the cell.
 @return the height of the cell
 @since 3.0.0
 */
- (jfloat)getMaxHeight;

/*!
 @brief Get the minimum height of the cell.
 @return Value of property minimumHeight.
 */
- (jfloat)getMinimumHeight;

/*!
 @brief Gets the variable leading.
 @return the leading
 */
- (jfloat)getMultipliedLeading;

/*!
 @brief Getter for property paddingBottom.
 @return Value of property paddingBottom.
 */
- (jfloat)getPaddingBottom;

/*!
 @return Value of property paddingLeft.
 */
- (jfloat)getPaddingLeft;

/*!
 @brief Getter for property paddingRight.
 @return Value of property paddingRight.
 */
- (jfloat)getPaddingRight;

/*!
 @brief Getter for property paddingTop.
 @return Value of property paddingTop.
 */
- (jfloat)getPaddingTop;

/*!
 @brief Gets the <CODE>Phrase</CODE> from this cell.
 @return the <CODE>Phrase</CODE>
 */
- (ComAowagieTextPhrase *)getPhrase;

/*!
 @brief Gets the right paragraph lines indent.
 @return the indent
 */
- (jfloat)getRightIndent;

/*!
 @brief Gets the rotation of the cell.
 @return the rotation of the cell.
 */
- (jint)getRotation;

/*!
 @brief Getter for property rowspan.
 @return Value of property rowspan.
 @since 2.1.6
 */
- (jint)getRowspan;

/*!
 @brief Gets the run direction of the text content in the cell
 @return One of the following values:
  PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI,
  PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
 */
- (jint)getRunDirection;

/*!
 @brief Gets the space/character extra spacing ratio for fully justified text.
 @return the space/character extra spacing ratio
 */
- (jfloat)getSpaceCharRatio;

/*!
 @brief Getter for property table.
 @return Value of property table.
 @since 2.x
 */
- (ComAowagieTextPdfPdfPTable *)getTable;

/*!
 @brief Gets the vertical alignment for the cell.
 @return the vertical alignment for the cell
 */
- (jint)getVerticalAlignment;

/*!
 @brief Getter for property noWrap.
 @return Value of property noWrap.
 */
- (jboolean)isNoWrap;

/*!
 @brief Gets state of first line height based on max ascender
 @return true if an ascender is to be used.
 */
- (jboolean)isUseAscender;

/*!
 @brief If true, then effective padding will include border widths
 @return true if effective padding includes border widths
 */
- (jboolean)isUseBorderPadding;

/*!
 @brief Getter for property useDescender.
 @return Value of property useDescender.
 */
- (jboolean)isUseDescender;

/*!
 @brief Sets the arabic shaping options.
 The option can be AR_NOVOWEL, AR_COMPOSEDTASHKEEL and AR_LIG.
 @param arabicOptions the arabic shaping options
 */
- (void)setArabicOptionsWithInt:(jint)arabicOptions;

/*!
 @brief Sets the cell event for this cell.
 @param cellEvent the cell event
 */
- (void)setCellEventWithComAowagieTextPdfPdfPCellEvent:(id<ComAowagieTextPdfPdfPCellEvent>)cellEvent;

/*!
 @brief Setter for property colspan.
 @param colspan New value of property colspan.
 */
- (void)setColspanWithInt:(jint)colspan;

/*!
 @brief Sets the columntext in the cell.
 @param column Column
 */
- (void)setColumnWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)column;

/*!
 @brief Sets the extra space between paragraphs.
 @param extraParagraphSpace the extra space between paragraphs
 */
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace;

/*!
 @brief Set a fixed height for the cell.
 This will automatically unset minimumHeight, if set.
 @param fixedHeight New value of property fixedHeight.
 */
- (void)setFixedHeightWithFloat:(jfloat)fixedHeight;

/*!
 @brief Sets the following paragraph lines indent.
 @param indent the indent
 */
- (void)setFollowingIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the horizontal alignment for the cell.It could be 
 <CODE>Element.ALIGN_CENTER</CODE> for example.
 @param horizontalAlignment The horizontal alignment
 */
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment;

/*!
 @brief Setter for property image.
 @param image New value of property image.
 */
- (void)setImageWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Sets the first paragraph line indent.
 @param indent the indent
 */
- (void)setIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the leading fixed and variable.
 The resultant leading will be:
  fixedLeading+multipliedLeading*maxFontSize
  where maxFontSize is the size of the biggest font in the line.
 @param fixedLeading the fixed leading
 @param multipliedLeading the variable leading
 */
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading;

/*!
 @brief Set a minimum height for the cell.
 This will automatically unset fixedHeight, if set.
 @param minimumHeight New value of property minimumHeight.
 */
- (void)setMinimumHeightWithFloat:(jfloat)minimumHeight;

/*!
 @brief Setter for property noWrap.
 @param noWrap New value of property noWrap.
 */
- (void)setNoWrapWithBoolean:(jboolean)noWrap;

/*!
 @brief Sets the padding of the contents in the cell (space between content and border).
 @param padding Padding
 */
- (void)setPaddingWithFloat:(jfloat)padding;

/*!
 @brief Setter for property paddingBottom.
 @param paddingBottom New value of property paddingBottom.
 */
- (void)setPaddingBottomWithFloat:(jfloat)paddingBottom;

/*!
 @brief Setter for property paddingLeft.
 @param paddingLeft New value of property paddingLeft.
 */
- (void)setPaddingLeftWithFloat:(jfloat)paddingLeft;

/*!
 @brief Setter for property paddingRight.
 @param paddingRight New value of property paddingRight.
 */
- (void)setPaddingRightWithFloat:(jfloat)paddingRight;

/*!
 @brief Setter for property paddingTop.
 @param paddingTop New value of property paddingTop.
 */
- (void)setPaddingTopWithFloat:(jfloat)paddingTop;

/*!
 @brief Sets the <CODE>Phrase</CODE> for this cell.
 @param phrase the  <CODE> Phrase </CODE>
 */
- (void)setPhraseWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Sets the right paragraph lines indent.
 @param indent the indent
 */
- (void)setRightIndentWithFloat:(jfloat)indent;

/*!
 @brief Sets the rotation of the cell.
 Possible values are 0, 90, 180 and 270.
 @param rotation the rotation of the cell
 */
- (void)setRotationWithInt:(jint)rotation;

/*!
 @brief Setter for property rowspan.
 @param rowspan New value of property rowspan.
 @since 2.1.6
 */
- (void)setRowspanWithInt:(jint)rowspan;

/*!
 @brief Sets the run direction of the text content in the cell.
 May be either of:
  PdfWriter.RUN_DIRECTION_DEFAULT, PdfWriter.RUN_DIRECTION_NO_BIDI,
  PdfWriter.RUN_DIRECTION_LTR or PdfWriter.RUN_DIRECTION_RTL.
 @param runDirection Run direction
 */
- (void)setRunDirectionWithInt:(jint)runDirection;

/*!
 @brief Sets the ratio between the extra word spacing and the
  extra character spacing when the text is fully justified.
 Extra word spacing will grow <CODE>spaceCharRatio</CODE> times more
  than extra character spacing.
  If the ratio is <CODE>PdfWriter.NO_SPACE_CHAR_RATIO</CODE> then the
  extra character spacing will be zero.
 @param spaceCharRatio the ratio between the extra word spacing and the extra character spacing
 */
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio;

/*!
 @brief Enables/ Disables adjustment of first line height based on max ascender.
 @param useAscender adjust height if true
 */
- (void)setUseAscenderWithBoolean:(jboolean)useAscender;

/*!
 @brief Adjusts effective padding to include border widths.
 @param use adjust effective padding if true
 */
- (void)setUseBorderPaddingWithBoolean:(jboolean)use;

/*!
 @brief Setter for property useDescender.
 @param useDescender New value of property useDescender.
 */
- (void)setUseDescenderWithBoolean:(jboolean)useDescender;

/*!
 @brief Sets the vertical alignment for the cell.It could be 
 <CODE>Element.ALIGN_MIDDLE</CODE> for example.
 @param verticalAlignment The vertical alignment
 */
- (void)setVerticalAlignmentWithInt:(jint)verticalAlignment;

#pragma mark Package-Private

/*!
 @brief Constructs a <CODE>PdfPCell</CODE> with an <CODE>Image</CODE>.
 The default padding is 0.25 for a border width of 0.5.
 @param image the  <CODE> Image </CODE>
 @param fit <CODE> true </CODE>  to fit the image to the cell
 */
- (instancetype)initWithComAowagieTextImage:(ComAowagieTextImage *)image
                                withBoolean:(jboolean)fit;

/*!
 @brief Constructs a deep copy of a <CODE>PdfPCell</CODE>.
 @param cell the  <CODE> PdfPCell </CODE>  to duplicate
 */
- (instancetype)initWithComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell;

/*!
 @brief Constructs a <CODE>PdfPCell</CODE> with a <CODE>Phrase</CODE>.
 The default padding is 2.
 @param phrase the text
 */
- (instancetype)initWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Consumes part of the content of the cell.
 @param height the hight of the part that has to be consumed
 @since 2.1.6
 */
- (void)consumeHeightWithFloat:(jfloat)height;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithComAowagieTextRectangle:(ComAowagieTextRectangle *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1 NS_UNAVAILABLE;

- (instancetype)initWithFloat:(jfloat)arg0
                    withFloat:(jfloat)arg1
                    withFloat:(jfloat)arg2
                    withFloat:(jfloat)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfPCell)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPCell_init(ComAowagieTextPdfPdfPCell *self);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_init(void);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPhrase *phrase);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextImage *image, jboolean fit);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextImage *image, jboolean fit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(ComAowagieTextImage *image, jboolean fit);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPTable *table);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *self, ComAowagieTextPdfPdfPCell *cell);

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *cell) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPdfPCell *create_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(ComAowagieTextPdfPdfPCell *cell);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfPCell)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfPCell")
