//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/AffineTransform.java
//

#include "AffineTransform.h"
#include "GeneralPath.h"
#include "HashCode.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Messages.h"
#include "NoninvertibleTransformException.h"
#include "PathIterator.h"
#include "Point2D.h"
#include "Shape.h"
#include "java/io/ObjectInputStream.h"
#include "java/io/ObjectOutputStream.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/InternalError.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "AffineTransform must be compiled with ARC (-fobjc-arc)"
#endif

@interface HarmonyJavaAwtGeomAffineTransform ()

/*!
 @brief Write AffineTrasform object to the output steam.
 @param stream - the output stream
 @throw IOException
 - if there are I/O errors while writing to the output strem
 */
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream;

/*!
 @brief Read AffineTransform object from the input stream
 @param stream - the input steam
 @throw IOException
 - if there are I/O errors while reading from the input strem
 @throw ClassNotFoundException
 - if class could not be found
 */
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream;

@end

inline jlong HarmonyJavaAwtGeomAffineTransform_get_serialVersionUID(void);
#define HarmonyJavaAwtGeomAffineTransform_serialVersionUID 1330973210523860834LL
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomAffineTransform, serialVersionUID, jlong)

__attribute__((unused)) static void HarmonyJavaAwtGeomAffineTransform_writeObjectWithJavaIoObjectOutputStream_(HarmonyJavaAwtGeomAffineTransform *self, JavaIoObjectOutputStream *stream);

__attribute__((unused)) static void HarmonyJavaAwtGeomAffineTransform_readObjectWithJavaIoObjectInputStream_(HarmonyJavaAwtGeomAffineTransform *self, JavaIoObjectInputStream *stream);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/harmony/java/awt/geom/AffineTransform.java"


#line 31
@implementation HarmonyJavaAwtGeomAffineTransform

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 72
- (instancetype)init {
  HarmonyJavaAwtGeomAffineTransform_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  HarmonyJavaAwtGeomAffineTransform_initWithHarmonyJavaAwtGeomAffineTransform_(self, t);
  return self;
}


#line 88
- (instancetype)initWithFloat:(jfloat)m00
                    withFloat:(jfloat)m10
                    withFloat:(jfloat)m01
                    withFloat:(jfloat)m11
                    withFloat:(jfloat)m02
                    withFloat:(jfloat)m12 {
  HarmonyJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

- (instancetype)initWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, m00, m10, m01, m11, m02, m12);
  return self;
}

- (instancetype)initWithFloatArray:(IOSFloatArray *)matrix {
  HarmonyJavaAwtGeomAffineTransform_initWithFloatArray_(self, matrix);
  return self;
}


#line 120
- (instancetype)initWithDoubleArray:(IOSDoubleArray *)matrix {
  HarmonyJavaAwtGeomAffineTransform_initWithDoubleArray_(self, matrix);
  return self;
}


#line 148
- (jint)getType {
  if (type_ != HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN) {
    return type_;
  }
  
#line 153
  jint type = 0;
  
#line 155
  if (m00_ * m01_ + m10_ * m11_ != 0.0) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM;
    return type;
  }
  
#line 160
  if (m02_ != 0.0 || m12_ != 0.0) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
  else
#line 162
  if (m00_ == 1.0 && m11_ == 1.0 && m01_ == 0.0 && m10_ == 0.0) {
    type = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
    return type;
  }
  
#line 167
  if (m00_ * m11_ - m01_ * m10_ < 0.0) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_FLIP;
  }
  
#line 171
  jdouble dx = m00_ * m00_ + m10_ * m10_;
  jdouble dy = m01_ * m01_ + m11_ * m11_;
  if (dx != dy) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE;
  }
  else
#line 175
  if (dx != 1.0) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE;
  }
  
#line 179
  if ((m00_ == 0.0 && m11_ == 0.0) || (m10_ == 0.0 && m01_ == 0.0 && (m00_ < 0.0 || m11_ < 0.0))) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION;
  }
  else
#line 181
  if (m01_ != 0.0 || m10_ != 0.0) {
    type |= HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION;
  }
  
#line 185
  return type;
}


#line 188
- (jdouble)getScaleX {
  return m00_;
}

- (jdouble)getScaleY {
  return m11_;
}

- (jdouble)getShearX {
  return m01_;
}

- (jdouble)getShearY {
  return m10_;
}

- (jdouble)getTranslateX {
  return m02_;
}

- (jdouble)getTranslateY {
  return m12_;
}

- (jboolean)isIdentity {
  return [self getType] == HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
}

- (void)getMatrixWithDoubleArray:(IOSDoubleArray *)matrix {
  *IOSDoubleArray_GetRef(nil_chk(matrix), 0) = m00_;
  *IOSDoubleArray_GetRef(matrix, 1) = m10_;
  *IOSDoubleArray_GetRef(matrix, 2) = m01_;
  *IOSDoubleArray_GetRef(matrix, 3) = m11_;
  if (matrix->size_ > 4) {
    *IOSDoubleArray_GetRef(matrix, 4) = m02_;
    *IOSDoubleArray_GetRef(matrix, 5) = m12_;
  }
}

- (jdouble)getDeterminant {
  return m00_ * m11_ - m01_ * m10_;
}

- (void)setTransformWithDouble:(jdouble)m00
                    withDouble:(jdouble)m10
                    withDouble:(jdouble)m01
                    withDouble:(jdouble)m11
                    withDouble:(jdouble)m02
                    withDouble:(jdouble)m12 {
  
#line 232
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
}


#line 241
- (void)setTransformWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  type_ = ((HarmonyJavaAwtGeomAffineTransform *) nil_chk(t))->type_;
  [self setTransformWithDouble:t->m00_ withDouble:t->m10_ withDouble:t->m01_ withDouble:t->m11_ withDouble:t->m02_ withDouble:t->m12_];
}

- (void)setToIdentity {
  type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  m00_ = m11_ = 1.0;
  m10_ = m01_ = m02_ = m12_ = 0.0;
}

- (void)setToTranslationWithDouble:(jdouble)mx
                        withDouble:(jdouble)my {
  
#line 253
  m00_ = m11_ = 1.0;
  m01_ = m10_ = 0.0;
  m02_ = mx;
  m12_ = my;
  if (mx == 0.0 && my == 0.0) {
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
  else {
    
#line 260
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_TRANSLATION;
  }
}


#line 264
- (void)setToScaleWithDouble:(jdouble)scx
                  withDouble:(jdouble)scy {
  
#line 265
  m00_ = scx;
  m11_ = scy;
  m10_ = m01_ = m02_ = m12_ = 0.0;
  if (scx != 1.0 || scy != 1.0) {
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    
#line 271
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}


#line 275
- (void)setToShearWithDouble:(jdouble)shx
                  withDouble:(jdouble)shy {
  
#line 276
  m00_ = m11_ = 1.0;
  m02_ = m12_ = 0.0;
  m01_ = shx;
  m10_ = shy;
  if (shx != 0.0 || shy != 0.0) {
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  }
  else {
    
#line 283
    type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  }
}


#line 287
- (void)setToRotationWithDouble:(jdouble)angle {
  jdouble sin = JavaLangMath_sinWithDouble_(angle);
  jdouble cos = JavaLangMath_cosWithDouble_(angle);
  if (JavaLangMath_absWithDouble_(cos) < HarmonyJavaAwtGeomAffineTransform_ZERO) {
    cos = 0.0;
    sin = sin > 0.0 ? 1.0 : -1.0;
  }
  else
#line 293
  if (JavaLangMath_absWithDouble_(sin) < HarmonyJavaAwtGeomAffineTransform_ZERO) {
    sin = 0.0;
    cos = cos > 0.0 ? 1.0 : -1.0;
  }
  m00_ = m11_ = cos;
  m01_ = -sin;
  m10_ = sin;
  m02_ = m12_ = 0.0;
  type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
}


#line 304
- (void)setToRotationWithDouble:(jdouble)angle
                     withDouble:(jdouble)px
                     withDouble:(jdouble)py {
  
#line 305
  [self setToRotationWithDouble:angle];
  m02_ = px * (1.0 - m00_) + py * m10_;
  m12_ = py * (1.0 - m00_) - px * m10_;
  type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
}


#line 311
+ (HarmonyJavaAwtGeomAffineTransform *)getTranslateInstanceWithDouble:(jdouble)mx
                                                           withDouble:(jdouble)my {
  return HarmonyJavaAwtGeomAffineTransform_getTranslateInstanceWithDouble_withDouble_(mx, my);
}


#line 317
+ (HarmonyJavaAwtGeomAffineTransform *)getScaleInstanceWithDouble:(jdouble)scx
                                                       withDouble:(jdouble)scY {
  return HarmonyJavaAwtGeomAffineTransform_getScaleInstanceWithDouble_withDouble_(scx, scY);
}


#line 323
+ (HarmonyJavaAwtGeomAffineTransform *)getShearInstanceWithDouble:(jdouble)shx
                                                       withDouble:(jdouble)shy {
  return HarmonyJavaAwtGeomAffineTransform_getShearInstanceWithDouble_withDouble_(shx, shy);
}


#line 329
+ (HarmonyJavaAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)angle {
  return HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_(angle);
}


#line 335
+ (HarmonyJavaAwtGeomAffineTransform *)getRotateInstanceWithDouble:(jdouble)angle
                                                        withDouble:(jdouble)x
                                                        withDouble:(jdouble)y {
  return HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_withDouble_withDouble_(angle, x, y);
}

- (void)translateWithDouble:(jdouble)mx
                 withDouble:(jdouble)my {
  
#line 342
  [self concatenateWithHarmonyJavaAwtGeomAffineTransform:HarmonyJavaAwtGeomAffineTransform_getTranslateInstanceWithDouble_withDouble_(mx, my)];
}


#line 345
- (void)scale__WithDouble:(jdouble)scx
               withDouble:(jdouble)scy {
  
#line 346
  [self concatenateWithHarmonyJavaAwtGeomAffineTransform:HarmonyJavaAwtGeomAffineTransform_getScaleInstanceWithDouble_withDouble_(scx, scy)];
}


#line 349
- (void)shearWithDouble:(jdouble)shx
             withDouble:(jdouble)shy {
  
#line 350
  [self concatenateWithHarmonyJavaAwtGeomAffineTransform:HarmonyJavaAwtGeomAffineTransform_getShearInstanceWithDouble_withDouble_(shx, shy)];
}


#line 353
- (void)rotateWithDouble:(jdouble)angle {
  [self concatenateWithHarmonyJavaAwtGeomAffineTransform:HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_(angle)];
}

- (void)rotateWithDouble:(jdouble)angle
              withDouble:(jdouble)px
              withDouble:(jdouble)py {
  
#line 358
  [self concatenateWithHarmonyJavaAwtGeomAffineTransform:HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_withDouble_withDouble_(angle, px, py)];
}


#line 371
- (HarmonyJavaAwtGeomAffineTransform *)multiplyWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t1
                                               withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t2 {
  
#line 372
  return new_HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(((HarmonyJavaAwtGeomAffineTransform *) nil_chk(t1))->m00_ * ((HarmonyJavaAwtGeomAffineTransform *) nil_chk(t2))->m00_ + t1->m10_ * t2->m01_,
#line 373
  t1->m00_ * t2->m10_ + t1->m10_ * t2->m11_,
#line 374
  t1->m01_ * t2->m00_ + t1->m11_ * t2->m01_,
#line 375
  t1->m01_ * t2->m10_ + t1->m11_ * t2->m11_,
#line 376
  t1->m02_ * t2->m00_ + t1->m12_ * t2->m01_ + t2->m02_,
#line 377
  t1->m02_ * t2->m10_ + t1->m12_ * t2->m11_ + t2->m12_);
}


#line 380
- (void)concatenateWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  [self setTransformWithHarmonyJavaAwtGeomAffineTransform:[self multiplyWithHarmonyJavaAwtGeomAffineTransform:t withHarmonyJavaAwtGeomAffineTransform:self]];
}

- (void)preConcatenateWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  [self setTransformWithHarmonyJavaAwtGeomAffineTransform:[self multiplyWithHarmonyJavaAwtGeomAffineTransform:self withHarmonyJavaAwtGeomAffineTransform:t]];
}

- (HarmonyJavaAwtGeomAffineTransform *)createInverse {
  jdouble det = [self getDeterminant];
  if (JavaLangMath_absWithDouble_(det) < HarmonyJavaAwtGeomAffineTransform_ZERO) {
    
#line 392
    @throw new_HarmonyJavaAwtGeomNoninvertibleTransformException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.204"));
  }
  return new_HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11_ / det,
#line 395
  -m10_ / det,
#line 396
  -m01_ / det,
#line 397
  m00_ / det,
#line 398
  (m01_ * m12_ - m11_ * m02_) / det,
#line 399
  (m10_ * m02_ - m00_ * m12_) / det);
}


#line 403
- (HarmonyJavaAwtGeomPoint2D *)transformWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)src
                                        withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)dst {
  
#line 404
  if (dst == nil) {
    if ([src isKindOfClass:[HarmonyJavaAwtGeomPoint2D_Double class]]) {
      dst = new_HarmonyJavaAwtGeomPoint2D_Double_init();
    }
    else {
      
#line 408
      dst = new_HarmonyJavaAwtGeomPoint2D_Float_init();
    }
  }
  
#line 412
  jdouble x = [((HarmonyJavaAwtGeomPoint2D *) nil_chk(src)) getX];
  jdouble y = [src getY];
  
#line 415
  [dst setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
  return dst;
}


#line 419
- (void)transformWithHarmonyJavaAwtGeomPoint2DArray:(IOSObjectArray *)src
                                            withInt:(jint)srcOff
                 withHarmonyJavaAwtGeomPoint2DArray:(IOSObjectArray *)dst
                                            withInt:(jint)dstOff
                                            withInt:(jint)length {
  
#line 420
  while (--length >= 0) {
    HarmonyJavaAwtGeomPoint2D *srcPoint = IOSObjectArray_Get(nil_chk(src), srcOff++);
    jdouble x = [((HarmonyJavaAwtGeomPoint2D *) nil_chk(srcPoint)) getX];
    jdouble y = [srcPoint getY];
    HarmonyJavaAwtGeomPoint2D *dstPoint = IOSObjectArray_Get(nil_chk(dst), dstOff);
    if (dstPoint == nil) {
      if ([srcPoint isKindOfClass:[HarmonyJavaAwtGeomPoint2D_Double class]]) {
        dstPoint = new_HarmonyJavaAwtGeomPoint2D_Double_init();
      }
      else {
        
#line 429
        dstPoint = new_HarmonyJavaAwtGeomPoint2D_Float_init();
      }
    }
    [dstPoint setLocationWithDouble:x * m00_ + y * m01_ + m02_ withDouble:x * m10_ + y * m11_ + m12_];
    (void) IOSObjectArray_Set(dst, dstOff++, dstPoint);
  }
}


#line 437
- (void)transformWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                 withDoubleArray:(IOSDoubleArray *)dst
                         withInt:(jint)dstOff
                         withInt:(jint)length {
  
#line 438
  jint step = 2;
  if (JreObjectEqualsEquals(src, dst) && srcOff < dstOff && dstOff < srcOff + length * 2) {
    srcOff = srcOff + length * 2 - 2;
    dstOff = dstOff + length * 2 - 2;
    step = -2;
  }
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff + 0);
    jdouble y = IOSDoubleArray_Get(src, srcOff + 1);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff + 0) = x * m00_ + y * m01_ + m02_;
    *IOSDoubleArray_GetRef(dst, dstOff + 1) = x * m10_ + y * m11_ + m12_;
    srcOff += step;
    dstOff += step;
  }
}


#line 454
- (void)transformWithFloatArray:(IOSFloatArray *)src
                        withInt:(jint)srcOff
                 withFloatArray:(IOSFloatArray *)dst
                        withInt:(jint)dstOff
                        withInt:(jint)length {
  
#line 455
  jint step = 2;
  if (JreObjectEqualsEquals(src, dst) && srcOff < dstOff && dstOff < srcOff + length * 2) {
    srcOff = srcOff + length * 2 - 2;
    dstOff = dstOff + length * 2 - 2;
    step = -2;
  }
  while (--length >= 0) {
    jfloat x = IOSFloatArray_Get(nil_chk(src), srcOff + 0);
    jfloat y = IOSFloatArray_Get(src, srcOff + 1);
    *IOSFloatArray_GetRef(nil_chk(dst), dstOff + 0) = (jfloat) (x * m00_ + y * m01_ + m02_);
    *IOSFloatArray_GetRef(dst, dstOff + 1) = (jfloat) (x * m10_ + y * m11_ + m12_);
    srcOff += step;
    dstOff += step;
  }
}


#line 471
- (void)transformWithFloatArray:(IOSFloatArray *)src
                        withInt:(jint)srcOff
                withDoubleArray:(IOSDoubleArray *)dst
                        withInt:(jint)dstOff
                        withInt:(jint)length {
  
#line 472
  while (--length >= 0) {
    jfloat x = IOSFloatArray_Get(nil_chk(src), srcOff++);
    jfloat y = IOSFloatArray_Get(src, srcOff++);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = x * m00_ + y * m01_ + m02_;
    *IOSDoubleArray_GetRef(dst, dstOff++) = x * m10_ + y * m11_ + m12_;
  }
}


#line 480
- (void)transformWithDoubleArray:(IOSDoubleArray *)src
                         withInt:(jint)srcOff
                  withFloatArray:(IOSFloatArray *)dst
                         withInt:(jint)dstOff
                         withInt:(jint)length {
  
#line 481
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++);
    jdouble y = IOSDoubleArray_Get(src, srcOff++);
    *IOSFloatArray_GetRef(nil_chk(dst), dstOff++) = (jfloat) (x * m00_ + y * m01_ + m02_);
    *IOSFloatArray_GetRef(dst, dstOff++) = (jfloat) (x * m10_ + y * m11_ + m12_);
  }
}


#line 489
- (HarmonyJavaAwtGeomPoint2D *)deltaTransformWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)src
                                             withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)dst {
  
#line 490
  if (dst == nil) {
    if ([src isKindOfClass:[HarmonyJavaAwtGeomPoint2D_Double class]]) {
      dst = new_HarmonyJavaAwtGeomPoint2D_Double_init();
    }
    else {
      
#line 494
      dst = new_HarmonyJavaAwtGeomPoint2D_Float_init();
    }
  }
  
#line 498
  jdouble x = [((HarmonyJavaAwtGeomPoint2D *) nil_chk(src)) getX];
  jdouble y = [src getY];
  
#line 501
  [dst setLocationWithDouble:x * m00_ + y * m01_ withDouble:x * m10_ + y * m11_];
  return dst;
}


#line 505
- (void)deltaTransformWithDoubleArray:(IOSDoubleArray *)src
                              withInt:(jint)srcOff
                      withDoubleArray:(IOSDoubleArray *)dst
                              withInt:(jint)dstOff
                              withInt:(jint)length {
  
#line 506
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++);
    jdouble y = IOSDoubleArray_Get(src, srcOff++);
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = x * m00_ + y * m01_;
    *IOSDoubleArray_GetRef(dst, dstOff++) = x * m10_ + y * m11_;
  }
}


#line 514
- (HarmonyJavaAwtGeomPoint2D *)inverseTransformWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)src
                                               withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)dst {
  
#line 515
  jdouble det = [self getDeterminant];
  if (JavaLangMath_absWithDouble_(det) < HarmonyJavaAwtGeomAffineTransform_ZERO) {
    
#line 518
    @throw new_HarmonyJavaAwtGeomNoninvertibleTransformException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.204"));
  }
  
#line 521
  if (dst == nil) {
    if ([src isKindOfClass:[HarmonyJavaAwtGeomPoint2D_Double class]]) {
      dst = new_HarmonyJavaAwtGeomPoint2D_Double_init();
    }
    else {
      
#line 525
      dst = new_HarmonyJavaAwtGeomPoint2D_Float_init();
    }
  }
  
#line 529
  jdouble x = [((HarmonyJavaAwtGeomPoint2D *) nil_chk(src)) getX] - m02_;
  jdouble y = [src getY] - m12_;
  
#line 532
  [dst setLocationWithDouble:(x * m11_ - y * m01_) / det withDouble:(y * m00_ - x * m10_) / det];
  return dst;
}


#line 536
- (void)inverseTransformWithDoubleArray:(IOSDoubleArray *)src
                                withInt:(jint)srcOff
                        withDoubleArray:(IOSDoubleArray *)dst
                                withInt:(jint)dstOff
                                withInt:(jint)length {
  
#line 538
  jdouble det = [self getDeterminant];
  if (JavaLangMath_absWithDouble_(det) < HarmonyJavaAwtGeomAffineTransform_ZERO) {
    
#line 541
    @throw new_HarmonyJavaAwtGeomNoninvertibleTransformException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.204"));
  }
  
#line 544
  while (--length >= 0) {
    jdouble x = IOSDoubleArray_Get(nil_chk(src), srcOff++) - m02_;
    jdouble y = IOSDoubleArray_Get(src, srcOff++) - m12_;
    *IOSDoubleArray_GetRef(nil_chk(dst), dstOff++) = (x * m11_ - y * m01_) / det;
    *IOSDoubleArray_GetRef(dst, dstOff++) = (y * m00_ - x * m10_) / det;
  }
}


#line 552
- (id<HarmonyJavaAwtShape>)createTransformedShapeWithHarmonyJavaAwtShape:(id<HarmonyJavaAwtShape>)src {
  if (src == nil) {
    return nil;
  }
  if ([src isKindOfClass:[HarmonyJavaAwtGeomGeneralPath class]]) {
    return [((HarmonyJavaAwtGeomGeneralPath *) src) createTransformedShapeWithHarmonyJavaAwtGeomAffineTransform:self];
  }
  id<HarmonyJavaAwtGeomPathIterator> path = [src getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:self];
  HarmonyJavaAwtGeomGeneralPath *dst = new_HarmonyJavaAwtGeomGeneralPath_initWithInt_([((id<HarmonyJavaAwtGeomPathIterator>) nil_chk(path)) getWindingRule]);
  [dst appendWithHarmonyJavaAwtGeomPathIterator:path withBoolean:false];
  return dst;
}

- (NSString *)description {
  
#line 567
  return JreStrcat("$$D$D$D$D$D$D$", [[self java_getClass] getName], @"[[", m00_, @", ", m01_, @", ", m02_, @"], [",
#line 568
  m10_, @", ", m11_, @", ", m12_, @"]]");
}


#line 571
- (id)java_clone {
  
#line 573
  @try {
    return [super java_clone];
  }
  @catch (
#line 575
  JavaLangCloneNotSupportedException *e) {
    @throw new_JavaLangInternalError_init();
  }
}


#line 580
- (NSUInteger)hash {
  
#line 582
  ComHashCode *hash_ = new_ComHashCode_init();
  (void) [hash_ appendWithDouble:m00_];
  (void) [hash_ appendWithDouble:m01_];
  (void) [hash_ appendWithDouble:m02_];
  (void) [hash_ appendWithDouble:m10_];
  (void) [hash_ appendWithDouble:m11_];
  (void) [hash_ appendWithDouble:m12_];
  return ((jint) [hash_ hash]);
}


#line 592
- (jboolean)isEqual:(id)obj {
  
#line 594
  if (JreObjectEqualsEquals(obj, self)) {
    return true;
  }
  if ([obj isKindOfClass:[HarmonyJavaAwtGeomAffineTransform class]]) {
    HarmonyJavaAwtGeomAffineTransform *t = (HarmonyJavaAwtGeomAffineTransform *) obj;
    return m00_ == ((HarmonyJavaAwtGeomAffineTransform *) nil_chk(t))->m00_ && m01_ == t->m01_ && m02_ == t->m02_ && m10_ == t->m10_ && m11_ == t->m11_ && m12_ == t->m12_;
  }
  return false;
}


#line 612
- (void)writeObjectWithJavaIoObjectOutputStream:(JavaIoObjectOutputStream *)stream {
  HarmonyJavaAwtGeomAffineTransform_writeObjectWithJavaIoObjectOutputStream_(self, stream);
}


#line 626
- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)stream {
  HarmonyJavaAwtGeomAffineTransform_readObjectWithJavaIoObjectInputStream_(self, stream);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x9, 14, 8, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x9, 15, 8, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x9, 16, 8, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x9, 17, 12, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x9, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomAffineTransform;", 0x1, -1, -1, 26, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 33, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, 34, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPoint2D;", 0x1, 35, 28, 26, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 30, 26, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtShape;", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 38, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 39, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 40, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, 45, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, 48, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithHarmonyJavaAwtGeomAffineTransform:);
  methods[2].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[3].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[4].selector = @selector(initWithFloatArray:);
  methods[5].selector = @selector(initWithDoubleArray:);
  methods[6].selector = @selector(getType);
  methods[7].selector = @selector(getScaleX);
  methods[8].selector = @selector(getScaleY);
  methods[9].selector = @selector(getShearX);
  methods[10].selector = @selector(getShearY);
  methods[11].selector = @selector(getTranslateX);
  methods[12].selector = @selector(getTranslateY);
  methods[13].selector = @selector(isIdentity);
  methods[14].selector = @selector(getMatrixWithDoubleArray:);
  methods[15].selector = @selector(getDeterminant);
  methods[16].selector = @selector(setTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[17].selector = @selector(setTransformWithHarmonyJavaAwtGeomAffineTransform:);
  methods[18].selector = @selector(setToIdentity);
  methods[19].selector = @selector(setToTranslationWithDouble:withDouble:);
  methods[20].selector = @selector(setToScaleWithDouble:withDouble:);
  methods[21].selector = @selector(setToShearWithDouble:withDouble:);
  methods[22].selector = @selector(setToRotationWithDouble:);
  methods[23].selector = @selector(setToRotationWithDouble:withDouble:withDouble:);
  methods[24].selector = @selector(getTranslateInstanceWithDouble:withDouble:);
  methods[25].selector = @selector(getScaleInstanceWithDouble:withDouble:);
  methods[26].selector = @selector(getShearInstanceWithDouble:withDouble:);
  methods[27].selector = @selector(getRotateInstanceWithDouble:);
  methods[28].selector = @selector(getRotateInstanceWithDouble:withDouble:withDouble:);
  methods[29].selector = @selector(translateWithDouble:withDouble:);
  methods[30].selector = @selector(scale__WithDouble:withDouble:);
  methods[31].selector = @selector(shearWithDouble:withDouble:);
  methods[32].selector = @selector(rotateWithDouble:);
  methods[33].selector = @selector(rotateWithDouble:withDouble:withDouble:);
  methods[34].selector = @selector(multiplyWithHarmonyJavaAwtGeomAffineTransform:withHarmonyJavaAwtGeomAffineTransform:);
  methods[35].selector = @selector(concatenateWithHarmonyJavaAwtGeomAffineTransform:);
  methods[36].selector = @selector(preConcatenateWithHarmonyJavaAwtGeomAffineTransform:);
  methods[37].selector = @selector(createInverse);
  methods[38].selector = @selector(transformWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[39].selector = @selector(transformWithHarmonyJavaAwtGeomPoint2DArray:withInt:withHarmonyJavaAwtGeomPoint2DArray:withInt:withInt:);
  methods[40].selector = @selector(transformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:);
  methods[41].selector = @selector(transformWithFloatArray:withInt:withFloatArray:withInt:withInt:);
  methods[42].selector = @selector(transformWithFloatArray:withInt:withDoubleArray:withInt:withInt:);
  methods[43].selector = @selector(transformWithDoubleArray:withInt:withFloatArray:withInt:withInt:);
  methods[44].selector = @selector(deltaTransformWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[45].selector = @selector(deltaTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:);
  methods[46].selector = @selector(inverseTransformWithHarmonyJavaAwtGeomPoint2D:withHarmonyJavaAwtGeomPoint2D:);
  methods[47].selector = @selector(inverseTransformWithDoubleArray:withInt:withDoubleArray:withInt:withInt:);
  methods[48].selector = @selector(createTransformedShapeWithHarmonyJavaAwtShape:);
  methods[49].selector = @selector(description);
  methods[50].selector = @selector(java_clone);
  methods[51].selector = @selector(hash);
  methods[52].selector = @selector(isEqual:);
  methods[53].selector = @selector(writeObjectWithJavaIoObjectOutputStream:);
  methods[54].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = HarmonyJavaAwtGeomAffineTransform_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "TYPE_IDENTITY", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY, 0x19, -1, -1, -1, -1 },
    { "TYPE_TRANSLATION", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_TRANSLATION, 0x19, -1, -1, -1, -1 },
    { "TYPE_UNIFORM_SCALE", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_UNIFORM_SCALE, 0x19, -1, -1, -1, -1 },
    { "TYPE_GENERAL_SCALE", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_SCALE, 0x19, -1, -1, -1, -1 },
    { "TYPE_QUADRANT_ROTATION", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_QUADRANT_ROTATION, 0x19, -1, -1, -1, -1 },
    { "TYPE_GENERAL_ROTATION", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_ROTATION, 0x19, -1, -1, -1, -1 },
    { "TYPE_GENERAL_TRANSFORM", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_GENERAL_TRANSFORM, 0x19, -1, -1, -1, -1 },
    { "TYPE_FLIP", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_FLIP, 0x19, -1, -1, -1, -1 },
    { "TYPE_MASK_SCALE", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_MASK_SCALE, 0x19, -1, -1, -1, -1 },
    { "TYPE_MASK_ROTATION", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_MASK_ROTATION, 0x19, -1, -1, -1, -1 },
    { "TYPE_UNKNOWN", "I", .constantValue.asInt = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN, 0x18, -1, -1, -1, -1 },
    { "ZERO", "D", .constantValue.asDouble = HarmonyJavaAwtGeomAffineTransform_ZERO, 0x18, -1, -1, -1, -1 },
    { "m00_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m10_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m01_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m11_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m02_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "m12_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x80, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomAffineTransform;", "FFFFFF", "DDDDDD", "[F", "[D", "getMatrix", "setTransform", "setToTranslation", "DD", "setToScale", "setToShear", "setToRotation", "D", "DDD", "getTranslateInstance", "getScaleInstance", "getShearInstance", "getRotateInstance", "translate", "scale", "shear", "rotate", "multiply", "LHarmonyJavaAwtGeomAffineTransform;LHarmonyJavaAwtGeomAffineTransform;", "concatenate", "preConcatenate", "LHarmonyJavaAwtGeomNoninvertibleTransformException;", "transform", "LHarmonyJavaAwtGeomPoint2D;LHarmonyJavaAwtGeomPoint2D;", "[LHarmonyJavaAwtGeomPoint2D;I[LHarmonyJavaAwtGeomPoint2D;II", "[DI[DII", "[FI[FII", "[FI[DII", "[DI[FII", "deltaTransform", "inverseTransform", "createTransformedShape", "LHarmonyJavaAwtShape;", "toString", "clone", "hashCode", "equals", "LNSObject;", "writeObject", "LJavaIoObjectOutputStream;", "LJavaIoIOException;", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomAffineTransform = { "AffineTransform", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x1, 55, 20, -1, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomAffineTransform;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self java_clone];
}

@end


#line 72
void HarmonyJavaAwtGeomAffineTransform_init(HarmonyJavaAwtGeomAffineTransform *self) {
  NSObject_init(self);
  
#line 73
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_IDENTITY;
  self->m00_ = self->m11_ = 1.0;
  self->m10_ = self->m01_ = self->m02_ = self->m12_ = 0.0;
}


#line 72
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, init)
}


#line 72
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, init)
}


#line 78
void HarmonyJavaAwtGeomAffineTransform_initWithHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomAffineTransform *self, HarmonyJavaAwtGeomAffineTransform *t) {
  NSObject_init(self);
  
#line 79
  self->type_ = ((HarmonyJavaAwtGeomAffineTransform *) nil_chk(t))->type_;
  self->m00_ = t->m00_;
  self->m10_ = t->m10_;
  self->m01_ = t->m01_;
  self->m11_ = t->m11_;
  self->m02_ = t->m02_;
  self->m12_ = t->m12_;
}


#line 78
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_initWithHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithHarmonyJavaAwtGeomAffineTransform_, t)
}


#line 78
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_initWithHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithHarmonyJavaAwtGeomAffineTransform_, t)
}


#line 88
void HarmonyJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtGeomAffineTransform *self, jfloat m00, jfloat m10, jfloat m01, jfloat m11, jfloat m02, jfloat m12) {
  NSObject_init(self);
  
#line 89
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
}


#line 88
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat m00, jfloat m10, jfloat m01, jfloat m11, jfloat m02, jfloat m12) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, m00, m10, m01, m11, m02, m12)
}


#line 88
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat m00, jfloat m10, jfloat m01, jfloat m11, jfloat m02, jfloat m12) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_, m00, m10, m01, m11, m02, m12)
}


#line 98
void HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(HarmonyJavaAwtGeomAffineTransform *self, jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12) {
  NSObject_init(self);
  
#line 99
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = m00;
  self->m10_ = m10;
  self->m01_ = m01;
  self->m11_ = m11;
  self->m02_ = m02;
  self->m12_ = m12;
}


#line 98
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, m00, m10, m01, m11, m02, m12)
}


#line 98
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble m00, jdouble m10, jdouble m01, jdouble m11, jdouble m02, jdouble m12) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, m00, m10, m01, m11, m02, m12)
}


#line 108
void HarmonyJavaAwtGeomAffineTransform_initWithFloatArray_(HarmonyJavaAwtGeomAffineTransform *self, IOSFloatArray *matrix) {
  NSObject_init(self);
  
#line 109
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = IOSFloatArray_Get(nil_chk(matrix), 0);
  self->m10_ = IOSFloatArray_Get(matrix, 1);
  self->m01_ = IOSFloatArray_Get(matrix, 2);
  self->m11_ = IOSFloatArray_Get(matrix, 3);
  if (matrix->size_ > 4) {
    self->m02_ = IOSFloatArray_Get(matrix, 4);
    self->m12_ = IOSFloatArray_Get(matrix, 5);
  }
}


#line 108
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_initWithFloatArray_(IOSFloatArray *matrix) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithFloatArray_, matrix)
}


#line 108
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_initWithFloatArray_(IOSFloatArray *matrix) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithFloatArray_, matrix)
}


#line 120
void HarmonyJavaAwtGeomAffineTransform_initWithDoubleArray_(HarmonyJavaAwtGeomAffineTransform *self, IOSDoubleArray *matrix) {
  NSObject_init(self);
  
#line 121
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
  self->m00_ = IOSDoubleArray_Get(nil_chk(matrix), 0);
  self->m10_ = IOSDoubleArray_Get(matrix, 1);
  self->m01_ = IOSDoubleArray_Get(matrix, 2);
  self->m11_ = IOSDoubleArray_Get(matrix, 3);
  if (matrix->size_ > 4) {
    self->m02_ = IOSDoubleArray_Get(matrix, 4);
    self->m12_ = IOSDoubleArray_Get(matrix, 5);
  }
}


#line 120
HarmonyJavaAwtGeomAffineTransform *new_HarmonyJavaAwtGeomAffineTransform_initWithDoubleArray_(IOSDoubleArray *matrix) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithDoubleArray_, matrix)
}


#line 120
HarmonyJavaAwtGeomAffineTransform *create_HarmonyJavaAwtGeomAffineTransform_initWithDoubleArray_(IOSDoubleArray *matrix) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomAffineTransform, initWithDoubleArray_, matrix)
}


#line 311
HarmonyJavaAwtGeomAffineTransform *HarmonyJavaAwtGeomAffineTransform_getTranslateInstanceWithDouble_withDouble_(jdouble mx, jdouble my) {
  HarmonyJavaAwtGeomAffineTransform_initialize();
  
#line 312
  HarmonyJavaAwtGeomAffineTransform *t = new_HarmonyJavaAwtGeomAffineTransform_init();
  [t setToTranslationWithDouble:mx withDouble:my];
  return t;
}


#line 317
HarmonyJavaAwtGeomAffineTransform *HarmonyJavaAwtGeomAffineTransform_getScaleInstanceWithDouble_withDouble_(jdouble scx, jdouble scY) {
  HarmonyJavaAwtGeomAffineTransform_initialize();
  
#line 318
  HarmonyJavaAwtGeomAffineTransform *t = new_HarmonyJavaAwtGeomAffineTransform_init();
  [t setToScaleWithDouble:scx withDouble:scY];
  return t;
}


#line 323
HarmonyJavaAwtGeomAffineTransform *HarmonyJavaAwtGeomAffineTransform_getShearInstanceWithDouble_withDouble_(jdouble shx, jdouble shy) {
  HarmonyJavaAwtGeomAffineTransform_initialize();
  
#line 324
  HarmonyJavaAwtGeomAffineTransform *m = new_HarmonyJavaAwtGeomAffineTransform_init();
  [m setToShearWithDouble:shx withDouble:shy];
  return m;
}


#line 329
HarmonyJavaAwtGeomAffineTransform *HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_(jdouble angle) {
  HarmonyJavaAwtGeomAffineTransform_initialize();
  
#line 330
  HarmonyJavaAwtGeomAffineTransform *t = new_HarmonyJavaAwtGeomAffineTransform_init();
  [t setToRotationWithDouble:angle];
  return t;
}


#line 335
HarmonyJavaAwtGeomAffineTransform *HarmonyJavaAwtGeomAffineTransform_getRotateInstanceWithDouble_withDouble_withDouble_(jdouble angle, jdouble x, jdouble y) {
  HarmonyJavaAwtGeomAffineTransform_initialize();
  
#line 336
  HarmonyJavaAwtGeomAffineTransform *t = new_HarmonyJavaAwtGeomAffineTransform_init();
  [t setToRotationWithDouble:angle withDouble:x withDouble:y];
  return t;
}


#line 612
void HarmonyJavaAwtGeomAffineTransform_writeObjectWithJavaIoObjectOutputStream_(HarmonyJavaAwtGeomAffineTransform *self, JavaIoObjectOutputStream *stream) {
  [((JavaIoObjectOutputStream *) nil_chk(stream)) defaultWriteObject];
}


#line 626
void HarmonyJavaAwtGeomAffineTransform_readObjectWithJavaIoObjectInputStream_(HarmonyJavaAwtGeomAffineTransform *self, JavaIoObjectInputStream *stream) {
  [((JavaIoObjectInputStream *) nil_chk(stream)) defaultReadObject];
  self->type_ = HarmonyJavaAwtGeomAffineTransform_TYPE_UNKNOWN;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomAffineTransform)
