//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x509/TBSCertificate.java
//

#include "ASN1Encodable.h"
#include "ASN1Integer.h"
#include "ASN1Object.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "AlgorithmIdentifier.h"
#include "BCTime.h"
#include "DERBitString.h"
#include "Extensions.h"
#include "J2ObjC_source.h"
#include "SubjectPublicKeyInfo.h"
#include "TBSCertificate.h"
#include "X500Name.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/math/BigInteger.h"

#if !__has_feature(objc_arc)
#error "TBSCertificate must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleAsn1X509TBSCertificate ()

- (instancetype)initWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)seq;

@end

__attribute__((unused)) static void OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X509TBSCertificate *self, OrgSpongycastleAsn1ASN1Sequence *seq);

__attribute__((unused)) static OrgSpongycastleAsn1X509TBSCertificate *new_OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgSpongycastleAsn1X509TBSCertificate *create_OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/asn1/x509/TBSCertificate.java"


#line 34
@implementation OrgSpongycastleAsn1X509TBSCertificate


#line 50
+ (OrgSpongycastleAsn1X509TBSCertificate *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)obj
                                                                                  withBoolean:(jboolean)explicit_ {
  return OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_);
}


#line 57
+ (OrgSpongycastleAsn1X509TBSCertificate *)getInstanceWithId:(id)obj {
  return OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithId_(obj);
}


#line 72
- (instancetype)initWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)seq {
  OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(self, seq);
  return self;
}


#line 157
- (jint)getVersionNumber {
  
#line 159
  return [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(version__)) getValue])) intValue] + 1;
}


#line 162
- (OrgSpongycastleAsn1ASN1Integer *)getVersion {
  
#line 164
  return version__;
}


#line 167
- (OrgSpongycastleAsn1ASN1Integer *)getSerialNumber {
  
#line 169
  return serialNumber_;
}


#line 172
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSignature {
  
#line 174
  return signature_;
}


#line 177
- (OrgSpongycastleAsn1X500X500Name *)getIssuer {
  
#line 179
  return issuer_;
}


#line 182
- (OrgSpongycastleAsn1X509BCTime *)getStartDate {
  
#line 184
  return startDate_;
}


#line 187
- (OrgSpongycastleAsn1X509BCTime *)getEndDate {
  
#line 189
  return endDate_;
}


#line 192
- (OrgSpongycastleAsn1X500X500Name *)getSubject {
  
#line 194
  return subject_;
}


#line 197
- (OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo {
  
#line 199
  return subjectPublicKeyInfo_;
}


#line 202
- (OrgSpongycastleAsn1DERBitString *)getIssuerUniqueId {
  
#line 204
  return issuerUniqueId_;
}


#line 207
- (OrgSpongycastleAsn1DERBitString *)getSubjectUniqueId {
  
#line 209
  return subjectUniqueId_;
}


#line 212
- (OrgSpongycastleAsn1X509Extensions *)getExtensions {
  
#line 214
  return extensions_;
}


#line 217
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 219
  return seq_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgSpongycastleAsn1X509TBSCertificate;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509TBSCertificate;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Integer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509BCTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509BCTime;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X500X500Name;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1DERBitString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509Extensions;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[1].selector = @selector(getInstanceWithId:);
  methods[2].selector = @selector(initWithOrgSpongycastleAsn1ASN1Sequence:);
  methods[3].selector = @selector(getVersionNumber);
  methods[4].selector = @selector(getVersion);
  methods[5].selector = @selector(getSerialNumber);
  methods[6].selector = @selector(getSignature);
  methods[7].selector = @selector(getIssuer);
  methods[8].selector = @selector(getStartDate);
  methods[9].selector = @selector(getEndDate);
  methods[10].selector = @selector(getSubject);
  methods[11].selector = @selector(getSubjectPublicKeyInfo);
  methods[12].selector = @selector(getIssuerUniqueId);
  methods[13].selector = @selector(getSubjectUniqueId);
  methods[14].selector = @selector(getExtensions);
  methods[15].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "seq_", "LOrgSpongycastleAsn1ASN1Sequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "version__", "LOrgSpongycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x0, 4, -1, -1, -1 },
    { "serialNumber_", "LOrgSpongycastleAsn1ASN1Integer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "signature_", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "issuer_", "LOrgSpongycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startDate_", "LOrgSpongycastleAsn1X509BCTime;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "endDate_", "LOrgSpongycastleAsn1X509BCTime;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subject_", "LOrgSpongycastleAsn1X500X500Name;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subjectPublicKeyInfo_", "LOrgSpongycastleAsn1X509SubjectPublicKeyInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "issuerUniqueId_", "LOrgSpongycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "subjectUniqueId_", "LOrgSpongycastleAsn1DERBitString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "extensions_", "LOrgSpongycastleAsn1X509Extensions;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInstance", "LOrgSpongycastleAsn1ASN1TaggedObject;Z", "LNSObject;", "LOrgSpongycastleAsn1ASN1Sequence;", "version" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1X509TBSCertificate = { "TBSCertificate", "org.spongycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 16, 12, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1X509TBSCertificate;
}

@end


#line 50
OrgSpongycastleAsn1X509TBSCertificate *OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *obj, jboolean explicit_) {
  OrgSpongycastleAsn1X509TBSCertificate_initialize();
  
#line 54
  return OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithId_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(obj, explicit_));
}

OrgSpongycastleAsn1X509TBSCertificate *OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithId_(id obj) {
  OrgSpongycastleAsn1X509TBSCertificate_initialize();
  
#line 60
  if ([obj isKindOfClass:[OrgSpongycastleAsn1X509TBSCertificate class]]) {
    
#line 62
    return (OrgSpongycastleAsn1X509TBSCertificate *) obj;
  }
  else if (obj != nil) {
    
#line 66
    return new_OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(obj));
  }
  
#line 69
  return nil;
}


#line 72
void OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1X509TBSCertificate *self, OrgSpongycastleAsn1ASN1Sequence *seq) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  
#line 75
  jint seqStart = 0;
  
#line 77
  self->seq_ = seq;
  
#line 82
  if ([[((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) getObjectAtWithInt:0] isKindOfClass:[OrgSpongycastleAsn1ASN1TaggedObject class]]) {
    
#line 84
    self->version__ = OrgSpongycastleAsn1ASN1Integer_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_((OrgSpongycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:0], [OrgSpongycastleAsn1ASN1TaggedObject class]), true);
  }
  else {
    
#line 88
    seqStart = -1;
    self->version__ = new_OrgSpongycastleAsn1ASN1Integer_initWithLong_(0);
  }
  
#line 92
  jboolean isV1 = false;
  jboolean isV2 = false;
  
#line 95
  if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(self->version__)) getValue])) isEqual:JavaMathBigInteger_valueOfWithLong_(0)]) {
    
#line 97
    isV1 = true;
  }
  else if ([((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(self->version__)) getValue])) isEqual:JavaMathBigInteger_valueOfWithLong_(1)]) {
    
#line 101
    isV2 = true;
  }
  else if (![((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1ASN1Integer *) nil_chk(self->version__)) getValue])) isEqual:JavaMathBigInteger_valueOfWithLong_(2)]) {
    
#line 105
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version number not recognised");
  }
  
#line 108
  self->serialNumber_ = OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 1]);
  
#line 110
  self->signature_ = OrgSpongycastleAsn1X509AlgorithmIdentifier_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 2]);
  self->issuer_ = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 3]);
  
#line 116
  OrgSpongycastleAsn1ASN1Sequence *dates = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([seq getObjectAtWithInt:seqStart + 4], [OrgSpongycastleAsn1ASN1Sequence class]);
  
#line 118
  self->startDate_ = OrgSpongycastleAsn1X509BCTime_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(dates)) getObjectAtWithInt:0]);
  self->endDate_ = OrgSpongycastleAsn1X509BCTime_getInstanceWithId_([dates getObjectAtWithInt:1]);
  
#line 121
  self->subject_ = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 5]);
  
#line 126
  self->subjectPublicKeyInfo_ = OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([seq getObjectAtWithInt:seqStart + 6]);
  
#line 128
  jint extras = [seq size] - (seqStart + 6) - 1;
  if (extras != 0 && isV1) {
    
#line 131
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version 1 certificate contains extra data");
  }
  
#line 134
  while (extras > 0) {
    
#line 136
    OrgSpongycastleAsn1ASN1TaggedObject *extra = (OrgSpongycastleAsn1ASN1TaggedObject *) cast_chk([seq getObjectAtWithInt:seqStart + 6 + extras], [OrgSpongycastleAsn1ASN1TaggedObject class]);
    
#line 138
    switch ([((OrgSpongycastleAsn1ASN1TaggedObject *) nil_chk(extra)) getTagNo]) {
      
#line 140
      case 1:
      self->issuerUniqueId_ = OrgSpongycastleAsn1DERBitString_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(extra, false);
      break;
      case 2:
      self->subjectUniqueId_ = OrgSpongycastleAsn1DERBitString_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(extra, false);
      break;
      case 3:
      if (isV2) {
        
#line 149
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"version 2 certificate cannot contain extensions");
      }
      self->extensions_ = OrgSpongycastleAsn1X509Extensions_getInstanceWithId_(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(extra, true));
    }
    extras--;
  }
}


#line 72
OrgSpongycastleAsn1X509TBSCertificate *new_OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509TBSCertificate, initWithOrgSpongycastleAsn1ASN1Sequence_, seq)
}


#line 72
OrgSpongycastleAsn1X509TBSCertificate *create_OrgSpongycastleAsn1X509TBSCertificate_initWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *seq) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509TBSCertificate, initWithOrgSpongycastleAsn1ASN1Sequence_, seq)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1X509TBSCertificate)
