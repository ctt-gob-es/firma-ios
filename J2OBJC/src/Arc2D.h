//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Arc2D.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Arc2D")
#ifdef RESTRICT_Arc2D
#define INCLUDE_ALL_Arc2D 0
#else
#define INCLUDE_ALL_Arc2D 1
#endif
#undef RESTRICT_Arc2D
#ifdef INCLUDE_HarmonyJavaAwtGeomArc2D_Double
#define INCLUDE_HarmonyJavaAwtGeomArc2D 1
#endif
#ifdef INCLUDE_HarmonyJavaAwtGeomArc2D_Float
#define INCLUDE_HarmonyJavaAwtGeomArc2D 1
#endif

#if !defined (HarmonyJavaAwtGeomArc2D_) && (INCLUDE_ALL_Arc2D || defined(INCLUDE_HarmonyJavaAwtGeomArc2D))
#define HarmonyJavaAwtGeomArc2D_

#define RESTRICT_RectangularShape 1
#define INCLUDE_HarmonyJavaAwtGeomRectangularShape 1
#include "RectangularShape.h"

@class HarmonyJavaAwtGeomAffineTransform;
@class HarmonyJavaAwtGeomDimension2D;
@class HarmonyJavaAwtGeomPoint2D;
@class HarmonyJavaAwtGeomRectangle2D;
@protocol HarmonyJavaAwtGeomPathIterator;

@interface HarmonyJavaAwtGeomArc2D : HarmonyJavaAwtGeomRectangularShape

#pragma mark Public

- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py;

- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh;

- (jboolean)containsWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect;

- (jboolean)containsAngleWithDouble:(jdouble)angle;

- (jdouble)getAngleExtent;

- (jdouble)getAngleStart;

- (jint)getArcType;

- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D;

- (HarmonyJavaAwtGeomPoint2D *)getEndPoint;

- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at;

- (HarmonyJavaAwtGeomPoint2D *)getStartPoint;

- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh;

- (void)setAngleExtentWithDouble:(jdouble)extent;

- (void)setAnglesWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2;

- (void)setAnglesWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                 withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2;

- (void)setAngleStartWithDouble:(jdouble)start;

- (void)setAngleStartWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)point;

- (void)setArcWithHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)arc;

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type;

- (void)setArcWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)point
          withHarmonyJavaAwtGeomDimension2D:(HarmonyJavaAwtGeomDimension2D *)size
                                 withDouble:(jdouble)start
                                 withDouble:(jdouble)extent
                                    withInt:(jint)type;

- (void)setArcWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)rect
                                     withDouble:(jdouble)start
                                     withDouble:(jdouble)extent
                                        withInt:(jint)type;

- (void)setArcByCenterWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)radius
                      withDouble:(jdouble)start
                      withDouble:(jdouble)extent
                         withInt:(jint)type;

- (void)setArcByTangentWithHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p1
                       withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p2
                       withHarmonyJavaAwtGeomPoint2D:(HarmonyJavaAwtGeomPoint2D *)p3
                                          withDouble:(jdouble)radius;

- (void)setArcTypeWithInt:(jint)type;

- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height;

#pragma mark Protected

- (instancetype)initWithInt:(jint)type;

- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height;

#pragma mark Package-Private

/*!
 @brief Normalizes angle
 @param angle - the source angle in degrees
 @return a normalized angle
 */
- (jdouble)getNormAngleWithDouble:(jdouble)angle;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(HarmonyJavaAwtGeomArc2D)

inline jint HarmonyJavaAwtGeomArc2D_get_OPEN(void);
#define HarmonyJavaAwtGeomArc2D_OPEN 0
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomArc2D, OPEN, jint)

inline jint HarmonyJavaAwtGeomArc2D_get_CHORD(void);
#define HarmonyJavaAwtGeomArc2D_CHORD 1
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomArc2D, CHORD, jint)

inline jint HarmonyJavaAwtGeomArc2D_get_PIE(void);
#define HarmonyJavaAwtGeomArc2D_PIE 2
J2OBJC_STATIC_FIELD_CONSTANT(HarmonyJavaAwtGeomArc2D, PIE, jint)

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_initWithInt_(HarmonyJavaAwtGeomArc2D *self, jint type);

J2OBJC_TYPE_LITERAL_HEADER(HarmonyJavaAwtGeomArc2D)

#endif

#if !defined (HarmonyJavaAwtGeomArc2D_Float_) && (INCLUDE_ALL_Arc2D || defined(INCLUDE_HarmonyJavaAwtGeomArc2D_Float))
#define HarmonyJavaAwtGeomArc2D_Float_

@class HarmonyJavaAwtGeomRectangle2D;

@interface HarmonyJavaAwtGeomArc2D_Float : HarmonyJavaAwtGeomArc2D {
 @public
  jfloat x_;
  jfloat y_;
  jfloat width_;
  jfloat height_;
  jfloat start_;
  jfloat extent_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height
                    withFloat:(jfloat)start
                    withFloat:(jfloat)extent
                      withInt:(jint)type;

- (instancetype)initWithInt:(jint)type;

- (instancetype)initWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)bounds
                                            withFloat:(jfloat)start
                                            withFloat:(jfloat)extent
                                              withInt:(jint)type;

- (jdouble)getAngleExtent;

- (jdouble)getAngleStart;

- (jdouble)getHeight;

- (jdouble)getWidth;

- (jdouble)getX;

- (jdouble)getY;

- (jboolean)isEmpty;

- (void)setAngleExtentWithDouble:(jdouble)extent;

- (void)setAngleStartWithDouble:(jdouble)start;

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type;

#pragma mark Protected

- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height;

@end

J2OBJC_EMPTY_STATIC_INIT(HarmonyJavaAwtGeomArc2D_Float)

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Float_init(HarmonyJavaAwtGeomArc2D_Float *self);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_init(void);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Float_initWithInt_(HarmonyJavaAwtGeomArc2D_Float *self, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithInt_(jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithInt_(jint type);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomArc2D_Float *self, jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withInt_(jfloat x, jfloat y, jfloat width, jfloat height, jfloat start, jfloat extent, jint type);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomArc2D_Float *self, HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *new_HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Float *create_HarmonyJavaAwtGeomArc2D_Float_initWithHarmonyJavaAwtGeomRectangle2D_withFloat_withFloat_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jfloat start, jfloat extent, jint type);

J2OBJC_TYPE_LITERAL_HEADER(HarmonyJavaAwtGeomArc2D_Float)

#endif

#if !defined (HarmonyJavaAwtGeomArc2D_Double_) && (INCLUDE_ALL_Arc2D || defined(INCLUDE_HarmonyJavaAwtGeomArc2D_Double))
#define HarmonyJavaAwtGeomArc2D_Double_

@class HarmonyJavaAwtGeomRectangle2D;

@interface HarmonyJavaAwtGeomArc2D_Double : HarmonyJavaAwtGeomArc2D {
 @public
  jdouble x_;
  jdouble y_;
  jdouble width_;
  jdouble height_;
  jdouble start_;
  jdouble extent_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height
                    withDouble:(jdouble)start
                    withDouble:(jdouble)extent
                       withInt:(jint)type;

- (instancetype)initWithInt:(jint)type;

- (instancetype)initWithHarmonyJavaAwtGeomRectangle2D:(HarmonyJavaAwtGeomRectangle2D *)bounds
                                           withDouble:(jdouble)start
                                           withDouble:(jdouble)extent
                                              withInt:(jint)type;

- (jdouble)getAngleExtent;

- (jdouble)getAngleStart;

- (jdouble)getHeight;

- (jdouble)getWidth;

- (jdouble)getX;

- (jdouble)getY;

- (jboolean)isEmpty;

- (void)setAngleExtentWithDouble:(jdouble)extent;

- (void)setAngleStartWithDouble:(jdouble)start;

- (void)setArcWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)width
              withDouble:(jdouble)height
              withDouble:(jdouble)start
              withDouble:(jdouble)extent
                 withInt:(jint)type;

#pragma mark Protected

- (HarmonyJavaAwtGeomRectangle2D *)makeBoundsWithDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)width
                                             withDouble:(jdouble)height;

@end

J2OBJC_EMPTY_STATIC_INIT(HarmonyJavaAwtGeomArc2D_Double)

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Double_init(HarmonyJavaAwtGeomArc2D_Double *self);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_init(void);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Double_initWithInt_(HarmonyJavaAwtGeomArc2D_Double *self, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithInt_(jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithInt_(jint type);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomArc2D_Double *self, jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withInt_(jdouble x, jdouble y, jdouble width, jdouble height, jdouble start, jdouble extent, jint type);

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomArc2D_Double *self, HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *new_HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Double *create_HarmonyJavaAwtGeomArc2D_Double_initWithHarmonyJavaAwtGeomRectangle2D_withDouble_withDouble_withInt_(HarmonyJavaAwtGeomRectangle2D *bounds, jdouble start, jdouble extent, jint type);

J2OBJC_TYPE_LITERAL_HEADER(HarmonyJavaAwtGeomArc2D_Double)

#endif

#if !defined (HarmonyJavaAwtGeomArc2D_Iterator_) && (INCLUDE_ALL_Arc2D || defined(INCLUDE_HarmonyJavaAwtGeomArc2D_Iterator))
#define HarmonyJavaAwtGeomArc2D_Iterator_

#define RESTRICT_PathIterator 1
#define INCLUDE_HarmonyJavaAwtGeomPathIterator 1
#include "PathIterator.h"

@class HarmonyJavaAwtGeomAffineTransform;
@class HarmonyJavaAwtGeomArc2D;
@class IOSDoubleArray;
@class IOSFloatArray;

@interface HarmonyJavaAwtGeomArc2D_Iterator : NSObject < HarmonyJavaAwtGeomPathIterator > {
 @public
  /*!
   @brief The x coordinate of left-upper corner of the arc rectangle bounds
   */
  jdouble x_;
  /*!
   @brief The y coordinate of left-upper corner of the arc rectangle bounds
   */
  jdouble y_;
  /*!
   @brief The width of the arc rectangle bounds
   */
  jdouble width_;
  /*!
   @brief The height of the arc rectangle bounds
   */
  jdouble height_;
  /*!
   @brief The start angle of the arc in degrees
   */
  jdouble angle_;
  /*!
   @brief The angle extent in degrees
   */
  jdouble extent_;
  /*!
   @brief The closure type of the arc
   */
  jint type_;
  /*!
   @brief The path iterator transformation
   */
  HarmonyJavaAwtGeomAffineTransform *t_;
  /*!
   @brief The current segmenet index
   */
  jint index_;
  /*!
   @brief The number of arc segments the source arc subdivided to be
  approximated by Bezier curves.Depends on extent value.
   */
  jint arcCount_;
  /*!
   @brief The number of line segments.Depends on closure type.
   */
  jint lineCount_;
  /*!
   @brief The step to calculate next arc subdivision point
   */
  jdouble step_;
  /*!
   @brief The tempopary value of cosinus of the current angle
   */
  jdouble cos_;
  /*!
   @brief The tempopary value of sinus of the current angle
   */
  jdouble sin_;
  /*!
   @brief The coefficient to calculate control points of Bezier curves
   */
  jdouble k_;
  /*!
   @brief The tempopary value of x coordinate of the Bezier curve control
  vector
   */
  jdouble kx_;
  /*!
   @brief The tempopary value of y coordinate of the Bezier curve control
  vector
   */
  jdouble ky_;
  /*!
   @brief The x coordinate of the first path point (MOVE_TO)
   */
  jdouble mx_;
  /*!
   @brief The y coordinate of the first path point (MOVE_TO)
   */
  jdouble my_;
}

#pragma mark Public

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords;

- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords;

- (jint)getWindingRule;

- (jboolean)isDone;

- (void)next;

#pragma mark Package-Private

/*!
 @brief Constructs a new Arc2D.Iterator for given line and transformation
 @param a - the source Arc2D object
 @param at - the AffineTransform object to apply rectangle path
 */
- (instancetype)initWithHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)outer$
                    withHarmonyJavaAwtGeomArc2D:(HarmonyJavaAwtGeomArc2D *)a
          withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(HarmonyJavaAwtGeomArc2D_Iterator)

J2OBJC_FIELD_SETTER(HarmonyJavaAwtGeomArc2D_Iterator, t_, HarmonyJavaAwtGeomAffineTransform *)

FOUNDATION_EXPORT void HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D_Iterator *self, HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t);

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Iterator *new_HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT HarmonyJavaAwtGeomArc2D_Iterator *create_HarmonyJavaAwtGeomArc2D_Iterator_initWithHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomArc2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomArc2D *outer$, HarmonyJavaAwtGeomArc2D *a, HarmonyJavaAwtGeomAffineTransform *t);

J2OBJC_TYPE_LITERAL_HEADER(HarmonyJavaAwtGeomArc2D_Iterator)

#endif

#pragma pop_macro("INCLUDE_ALL_Arc2D")
