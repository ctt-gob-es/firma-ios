//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/CurveCrossingHelper.java
//

#include "CurveCrossingHelper.h"
#include "GeometryUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntersectPoint.h"
#include "J2ObjC_source.h"
#include "PathIterator.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

#if !__has_feature(objc_arc)
#error "CurveCrossingHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComCurveCrossingHelper () {
 @public
  IOSObjectArray *coords_;
  IOSObjectArray *rules_;
  IOSIntArray *sizes_;
  IOSIntArray *rulesSizes_;
  IOSObjectArray *offsets_;
  id<JavaUtilList> isectPoints_;
}

- (jint)getCurrentEdgeWithInt:(jint)areaIndex
                      withInt:(jint)index
              withDoubleArray:(IOSDoubleArray *)c
              withDoubleArray:(IOSDoubleArray *)mp
              withDoubleArray:(IOSDoubleArray *)cp;

- (jboolean)containsPointWithDouble:(jdouble)x
                         withDouble:(jdouble)y;

@end

J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, coords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, rules_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, sizes_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, rulesSizes_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, offsets_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComCurveCrossingHelper, isectPoints_, id<JavaUtilList>)

__attribute__((unused)) static jint ComCurveCrossingHelper_getCurrentEdgeWithInt_withInt_withDoubleArray_withDoubleArray_withDoubleArray_(ComCurveCrossingHelper *self, jint areaIndex, jint index, IOSDoubleArray *c, IOSDoubleArray *mp, IOSDoubleArray *cp);

__attribute__((unused)) static jboolean ComCurveCrossingHelper_containsPointWithDouble_withDouble_(ComCurveCrossingHelper *self, jdouble x, jdouble y);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/CurveCrossingHelper.java"


#line 25
@implementation ComCurveCrossingHelper


#line 33
- (instancetype)initWithDoubleArray2:(IOSObjectArray *)coords
                        withIntArray:(IOSIntArray *)sizes
                       withIntArray2:(IOSObjectArray *)rules
                        withIntArray:(IOSIntArray *)rulesSizes
                       withIntArray2:(IOSObjectArray *)offsets {
  ComCurveCrossingHelper_initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_(self, coords, sizes, rules, rulesSizes, offsets);
  return self;
}


#line 41
- (IOSObjectArray *)findCrossing {
  IOSDoubleArray *edge1 = [IOSDoubleArray newArrayWithLength:8];
  IOSDoubleArray *edge2 = [IOSDoubleArray newArrayWithLength:8];
  IOSDoubleArray *points = [IOSDoubleArray newArrayWithLength:6];
  IOSDoubleArray *params = [IOSDoubleArray newArrayWithLength:6];
  IOSDoubleArray *mp1 = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *cp1 = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *mp2 = [IOSDoubleArray newArrayWithLength:2];
  IOSDoubleArray *cp2 = [IOSDoubleArray newArrayWithLength:2];
  jint rule1;
  
#line 50
  jint rule2;
  
#line 50
  jint endIndex1;
  
#line 50
  jint endIndex2;
  jint ipCount = 0;
  
#line 53
  for (jint i = 0; i < IOSIntArray_Get(nil_chk(rulesSizes_), 0); i++) {
    rule1 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(rules_), 0)), i);
    endIndex1 = ComCurveCrossingHelper_getCurrentEdgeWithInt_withInt_withDoubleArray_withDoubleArray_withDoubleArray_(self, 0, i, edge1, mp1, cp1);
    for (jint j = 0; j < IOSIntArray_Get(nil_chk(rulesSizes_), 1); j++) {
      ipCount = 0;
      rule2 = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(rules_), 1)), j);
      endIndex2 = ComCurveCrossingHelper_getCurrentEdgeWithInt_withInt_withDoubleArray_withDoubleArray_withDoubleArray_(self, 1, j, edge2, mp2, cp2);
      if (((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO) || (rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE)) &&
#line 61
      ((rule2 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO) || (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE))) {
        
#line 63
        ipCount = ComGeometryUtil_intersectLinesWithParamsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(
#line 64
        edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), params);
        
#line 66
        if (ipCount != 0) {
          *IOSDoubleArray_GetRef(points, 0) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 0), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2));
          *IOSDoubleArray_GetRef(points, 1) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3));
        }
      }
      else
#line 70
      if (((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO) || (rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE)) &&
#line 71
      (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO)) {
        ipCount = ComGeometryUtil_intersectLineAndQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(
#line 73
        edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(edge2, 5), params);
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3));
        }
      }
      else
#line 78
      if (rule1 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO &&
#line 79
      (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO || rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE)) {
        ipCount = ComGeometryUtil_intersectLineAndQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(
#line 81
        edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(edge1, 5), params);
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 2));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 3));
        }
      }
      else
#line 86
      if ((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO) &&
#line 87
      ((rule2 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO) || (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE))) {
        ipCount = ComGeometryUtil_intersectLineAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(
#line 89
        edge1, 5), IOSDoubleArray_Get(edge1, 6), IOSDoubleArray_Get(edge1, 7), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), params);
        
#line 91
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 2));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 3));
        }
      }
      else
#line 95
      if (((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_LINETO) || (rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE)) &&
#line 96
      (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO)) {
        ipCount = ComGeometryUtil_intersectLineAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(
#line 98
        edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(edge2, 5), IOSDoubleArray_Get(edge2, 6), IOSDoubleArray_Get(edge2, 7), params);
        
#line 100
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_lineWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3));
        }
      }
      else
#line 104
      if ((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO) && (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO)) {
        ipCount = ComGeometryUtil_intersectQuadsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(edge1, 5), IOSDoubleArray_Get(
#line 106
        edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(edge2, 5), params);
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 4));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 5));
        }
      }
      else
#line 111
      if ((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO) && (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO)) {
        ipCount = ComGeometryUtil_intersectQuadAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(
#line 113
        edge1, 5), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(edge2, 5), IOSDoubleArray_Get(edge2, 6), IOSDoubleArray_Get(edge2, 7),
#line 114
        params);
        
#line 116
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 4));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 5));
        }
      }
      else
#line 120
      if ((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO) && (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_QUADTO)) {
        ipCount = ComGeometryUtil_intersectQuadAndCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(
#line 122
        edge2, 5), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(edge1, 5), IOSDoubleArray_Get(edge2, 6), IOSDoubleArray_Get(edge2, 7),
#line 123
        params);
        
#line 125
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 4));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_quadWithDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k + 1), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 5));
        }
      }
      else
#line 129
      if ((rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO) && (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO)) {
        ipCount = ComGeometryUtil_intersectCubicsWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(edge1, 5), IOSDoubleArray_Get(
#line 131
        edge1, 6), IOSDoubleArray_Get(edge1, 7), IOSDoubleArray_Get(edge2, 0), IOSDoubleArray_Get(edge2, 1), IOSDoubleArray_Get(edge2, 2), IOSDoubleArray_Get(edge2, 3), IOSDoubleArray_Get(edge2, 4), IOSDoubleArray_Get(edge2, 5), IOSDoubleArray_Get(edge2, 6), IOSDoubleArray_Get(
#line 132
        edge2, 7), params);
        
#line 134
        for (jint k = 0; k < ipCount; k++) {
          *IOSDoubleArray_GetRef(points, 2 * k) = ComGeometryUtil_cubicWithDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 0), IOSDoubleArray_Get(edge1, 2), IOSDoubleArray_Get(edge1, 4), IOSDoubleArray_Get(edge1, 6));
          *IOSDoubleArray_GetRef(points, 2 * k + 1) = ComGeometryUtil_cubicWithDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(edge1, 1), IOSDoubleArray_Get(edge1, 3), IOSDoubleArray_Get(edge1, 5), IOSDoubleArray_Get(edge1, 7));
        }
      }
      
#line 140
      endIndex1 = i;
      endIndex2 = j;
      jint begIndex1 = i - 1;
      jint begIndex2 = j - 1;
      
#line 145
      for (jint k = 0; k < ipCount; k++) {
        ComIntersectPoint *ip = nil;
        if (!ComCurveCrossingHelper_containsPointWithDouble_withDouble_(self, IOSDoubleArray_Get(points, 2 * k), IOSDoubleArray_Get(points, 2 * k + 1))) {
          for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
            ip = [iter next];
            if ((begIndex1 == [((ComIntersectPoint *) nil_chk(ip)) getBegIndexWithBoolean:true]) && (endIndex1 == [ip getEndIndexWithBoolean:true])) {
              
#line 152
              if ([ip getParamWithBoolean:true] > IOSDoubleArray_Get(params, 2 * k)) {
                endIndex1 = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
                [ip setBegIndex1WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
              }
              else {
                
#line 156
                begIndex1 = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
                [ip setEndIndex1WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
              }
            }
            
#line 161
            if ((begIndex2 == [ip getBegIndexWithBoolean:false]) && (endIndex2 == [ip getEndIndexWithBoolean:false])) {
              
#line 163
              if ([ip getParamWithBoolean:false] > IOSDoubleArray_Get(params, 2 * k + 1)) {
                endIndex2 = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
                [ip setBegIndex2WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
              }
              else {
                
#line 167
                begIndex2 = -([((id<JavaUtilList>) nil_chk(isectPoints_)) indexOfWithId:ip] + 1);
                [ip setEndIndex2WithInt:-([((id<JavaUtilList>) nil_chk(isectPoints_)) size] + 1)];
              }
            }
          }
          
#line 173
          if (rule1 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE) {
            rule1 = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
          }
          
#line 177
          if (rule2 == HarmonyJavaAwtGeomPathIterator_SEG_CLOSE) {
            rule2 = HarmonyJavaAwtGeomPathIterator_SEG_LINETO;
          }
          
#line 181
          [((id<JavaUtilList>) nil_chk(isectPoints_)) addWithId:new_ComIntersectPoint_initWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withDouble_withDouble_withDouble_withDouble_(begIndex1, endIndex1, rule1, i, begIndex2, endIndex2, rule2,
#line 182
          j, IOSDoubleArray_Get(points, 2 * k), IOSDoubleArray_Get(points, 2 * k + 1), IOSDoubleArray_Get(params, 2 * k), IOSDoubleArray_Get(params, 2 * k + 1))];
        }
      }
    }
  }
  return [((id<JavaUtilList>) nil_chk(isectPoints_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[isectPoints_ size] type:ComIntersectPoint_class_()]];
}


#line 190
- (jint)getCurrentEdgeWithInt:(jint)areaIndex
                      withInt:(jint)index
              withDoubleArray:(IOSDoubleArray *)c
              withDoubleArray:(IOSDoubleArray *)mp
              withDoubleArray:(IOSDoubleArray *)cp {
  return ComCurveCrossingHelper_getCurrentEdgeWithInt_withInt_withDoubleArray_withDoubleArray_withDoubleArray_(self, areaIndex, index, c, mp, cp);
}


#line 240
- (jboolean)containsPointWithDouble:(jdouble)x
                         withDouble:(jdouble)y {
  return ComCurveCrossingHelper_containsPointWithDouble_withDouble_(self, x, y);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LComIntersectPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDoubleArray2:withIntArray:withIntArray2:withIntArray:withIntArray2:);
  methods[1].selector = @selector(findCrossing);
  methods[2].selector = @selector(getCurrentEdgeWithInt:withInt:withDoubleArray:withDoubleArray:withDoubleArray:);
  methods[3].selector = @selector(containsPointWithDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "coords_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rules_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sizes_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rulesSizes_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsets_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isectPoints_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "[[D[I[[I[I[[I", "getCurrentEdge", "II[D[D[D", "containsPoint", "DD", "Ljava/util/List<Lcom/IntersectPoint;>;" };
  static const J2ObjcClassInfo _ComCurveCrossingHelper = { "CurveCrossingHelper", "com", ptrTable, methods, fields, 7, 0x1, 4, 6, -1, -1, -1, -1, -1 };
  return &_ComCurveCrossingHelper;
}

@end


#line 33
void ComCurveCrossingHelper_initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_(ComCurveCrossingHelper *self, IOSObjectArray *coords, IOSIntArray *sizes, IOSObjectArray *rules, IOSIntArray *rulesSizes, IOSObjectArray *offsets) {
  NSObject_init(self);
  self->isectPoints_ = new_JavaUtilArrayList_init();
  
#line 34
  self->coords_ = coords;
  self->rules_ = rules;
  self->sizes_ = sizes;
  self->rulesSizes_ = rulesSizes;
  self->offsets_ = offsets;
}


#line 33
ComCurveCrossingHelper *new_ComCurveCrossingHelper_initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_(IOSObjectArray *coords, IOSIntArray *sizes, IOSObjectArray *rules, IOSIntArray *rulesSizes, IOSObjectArray *offsets) {
  J2OBJC_NEW_IMPL(ComCurveCrossingHelper, initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_, coords, sizes, rules, rulesSizes, offsets)
}


#line 33
ComCurveCrossingHelper *create_ComCurveCrossingHelper_initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_(IOSObjectArray *coords, IOSIntArray *sizes, IOSObjectArray *rules, IOSIntArray *rulesSizes, IOSObjectArray *offsets) {
  J2OBJC_CREATE_IMPL(ComCurveCrossingHelper, initWithDoubleArray2_withIntArray_withIntArray2_withIntArray_withIntArray2_, coords, sizes, rules, rulesSizes, offsets)
}


#line 190
jint ComCurveCrossingHelper_getCurrentEdgeWithInt_withInt_withDoubleArray_withDoubleArray_withDoubleArray_(ComCurveCrossingHelper *self, jint areaIndex, jint index, IOSDoubleArray *c, IOSDoubleArray *mp, IOSDoubleArray *cp) {
  jint endIndex = 0;
  
#line 193
  switch (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->rules_), areaIndex)), index)) {
    case HarmonyJavaAwtGeomPathIterator_SEG_MOVETO:
    *IOSDoubleArray_GetRef(nil_chk(cp), 0) = *IOSDoubleArray_GetRef(nil_chk(mp), 0) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coords_), areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index));
    *IOSDoubleArray_GetRef(cp, 1) = *IOSDoubleArray_GetRef(mp, 1) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 1);
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_LINETO:
    *IOSDoubleArray_GetRef(nil_chk(c), 0) = IOSDoubleArray_Get(nil_chk(cp), 0);
    *IOSDoubleArray_GetRef(c, 1) = IOSDoubleArray_Get(cp, 1);
    *IOSDoubleArray_GetRef(cp, 0) = *IOSDoubleArray_GetRef(c, 2) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coords_), areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index));
    *IOSDoubleArray_GetRef(cp, 1) = *IOSDoubleArray_GetRef(c, 3) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 1);
    endIndex = 0;
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_QUADTO:
    *IOSDoubleArray_GetRef(nil_chk(c), 0) = IOSDoubleArray_Get(nil_chk(cp), 0);
    *IOSDoubleArray_GetRef(c, 1) = IOSDoubleArray_Get(cp, 1);
    *IOSDoubleArray_GetRef(c, 2) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coords_), areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index));
    *IOSDoubleArray_GetRef(c, 3) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 1);
    *IOSDoubleArray_GetRef(cp, 0) = *IOSDoubleArray_GetRef(c, 4) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 2);
    *IOSDoubleArray_GetRef(cp, 1) = *IOSDoubleArray_GetRef(c, 5) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 3);
    endIndex = 2;
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO:
    *IOSDoubleArray_GetRef(nil_chk(c), 0) = IOSDoubleArray_Get(nil_chk(cp), 0);
    *IOSDoubleArray_GetRef(c, 1) = IOSDoubleArray_Get(cp, 1);
    *IOSDoubleArray_GetRef(c, 2) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coords_), areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index));
    *IOSDoubleArray_GetRef(c, 3) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 1);
    *IOSDoubleArray_GetRef(c, 4) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 2);
    *IOSDoubleArray_GetRef(c, 5) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 3);
    *IOSDoubleArray_GetRef(cp, 0) = *IOSDoubleArray_GetRef(c, 6) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 4);
    *IOSDoubleArray_GetRef(cp, 1) = *IOSDoubleArray_GetRef(c, 7) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->coords_, areaIndex)), IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->offsets_, areaIndex)), index) + 5);
    endIndex = 4;
    break;
    case HarmonyJavaAwtGeomPathIterator_SEG_CLOSE:
    *IOSDoubleArray_GetRef(nil_chk(c), 0) = IOSDoubleArray_Get(nil_chk(cp), 0);
    *IOSDoubleArray_GetRef(c, 1) = IOSDoubleArray_Get(cp, 1);
    *IOSDoubleArray_GetRef(cp, 0) = *IOSDoubleArray_GetRef(c, 2) = IOSDoubleArray_Get(nil_chk(mp), 0);
    *IOSDoubleArray_GetRef(cp, 1) = *IOSDoubleArray_GetRef(c, 3) = IOSDoubleArray_Get(mp, 1);
    if (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index) >= IOSIntArray_Get(nil_chk(self->sizes_), areaIndex)) {
      endIndex = -IOSIntArray_Get(self->sizes_, areaIndex);
    }
    else {
      
#line 233
      endIndex = 0;
    }
    break;
  }
  return IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->offsets_), areaIndex)), index) + endIndex;
}


#line 240
jboolean ComCurveCrossingHelper_containsPointWithDouble_withDouble_(ComCurveCrossingHelper *self, jdouble x, jdouble y) {
  ComIntersectPoint *ipoint;
  
#line 243
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ipoint = [i next];
    
#line 246
    if ((JavaLangMath_absWithDouble_([((ComIntersectPoint *) nil_chk(ipoint)) getX] - x) < JavaLangMath_powWithDouble_withDouble_(10, -6)) && (JavaLangMath_absWithDouble_([ipoint getY] - y) < JavaLangMath_powWithDouble_withDouble_(10, -6))) {
      return true;
    }
  }
  
#line 251
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComCurveCrossingHelper)
