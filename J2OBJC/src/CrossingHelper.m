//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/CrossingHelper.java
//

#include "CrossingHelper.h"
#include "GeometryUtil.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IntersectPoint.h"
#include "J2ObjC_source.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@class ComCrossingHelper_Edge;

#if !__has_feature(objc_arc)
#error "CrossingHelper must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComCrossingHelper () {
 @public
  IOSObjectArray *coords_;
  IOSIntArray *sizes_;
  id<JavaUtilList> isectPoints_;
}

- (jboolean)removeEdgeWithJavaUtilList:(id<JavaUtilList>)edges
                               withInt:(jint)begIndex
                               withInt:(jint)endIndex;

- (void)intersectShapeWithJavaUtilList:(id<JavaUtilList>)edges
                       withDoubleArray:(IOSDoubleArray *)coords1
                               withInt:(jint)length1
                       withDoubleArray:(IOSDoubleArray *)coords2
                               withInt:(jint)length2
            withComCrossingHelper_Edge:(ComCrossingHelper_Edge *)initEdge;

+ (void)sortWithDoubleArray:(IOSDoubleArray *)coords1
                    withInt:(jint)length1
            withDoubleArray:(IOSDoubleArray *)coords2
                    withInt:(jint)length2
               withIntArray:(IOSIntArray *)array;

@end

J2OBJC_FIELD_SETTER(ComCrossingHelper, coords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComCrossingHelper, sizes_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ComCrossingHelper, isectPoints_, id<JavaUtilList>)

__attribute__((unused)) static jboolean ComCrossingHelper_removeEdgeWithJavaUtilList_withInt_withInt_(ComCrossingHelper *self, id<JavaUtilList> edges, jint begIndex, jint endIndex);

__attribute__((unused)) static void ComCrossingHelper_intersectShapeWithJavaUtilList_withDoubleArray_withInt_withDoubleArray_withInt_withComCrossingHelper_Edge_(ComCrossingHelper *self, id<JavaUtilList> edges, IOSDoubleArray *coords1, jint length1, IOSDoubleArray *coords2, jint length2, ComCrossingHelper_Edge *initEdge);

__attribute__((unused)) static void ComCrossingHelper_sortWithDoubleArray_withInt_withDoubleArray_withInt_withIntArray_(IOSDoubleArray *coords1, jint length1, IOSDoubleArray *coords2, jint length2, IOSIntArray *array);

@interface ComCrossingHelper_Edge : NSObject {
 @public
  jint begIndex_;
  jint endIndex_;
  jint areaNumber_;
}

- (instancetype)initWithInt:(jint)begIndex
                    withInt:(jint)endIndex
                    withInt:(jint)areaNumber;

- (jboolean)reverseCompareWithInt:(jint)begIndex
                          withInt:(jint)endIndex;

@end

J2OBJC_EMPTY_STATIC_INIT(ComCrossingHelper_Edge)

__attribute__((unused)) static void ComCrossingHelper_Edge_initWithInt_withInt_withInt_(ComCrossingHelper_Edge *self, jint begIndex, jint endIndex, jint areaNumber);

__attribute__((unused)) static ComCrossingHelper_Edge *new_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(jint begIndex, jint endIndex, jint areaNumber) NS_RETURNS_RETAINED;

__attribute__((unused)) static ComCrossingHelper_Edge *create_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(jint begIndex, jint endIndex, jint areaNumber);

J2OBJC_TYPE_LITERAL_HEADER(ComCrossingHelper_Edge)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/CrossingHelper.java"


#line 23
@implementation ComCrossingHelper


#line 29
- (instancetype)initWithDoubleArray2:(IOSObjectArray *)coords
                        withIntArray:(IOSIntArray *)sizes {
  ComCrossingHelper_initWithDoubleArray2_withIntArray_(self, coords, sizes);
  return self;
}


#line 34
- (IOSObjectArray *)findCrossing {
  jint pointCount1 = JreIntDiv(IOSIntArray_Get(nil_chk(sizes_), 0), 2);
  jint pointCount2 = JreIntDiv(IOSIntArray_Get(sizes_, 1), 2);
  IOSIntArray *indices = [IOSIntArray newArrayWithLength:pointCount1 + pointCount2];
  
#line 39
  for (jint i = 0; i < pointCount1 + pointCount2; i++) {
    *IOSIntArray_GetRef(indices, i) = i;
  }
  
#line 43
  ComCrossingHelper_sortWithDoubleArray_withInt_withDoubleArray_withInt_withIntArray_(IOSObjectArray_Get(nil_chk(coords_), 0), pointCount1, IOSObjectArray_Get(coords_, 1), pointCount2, indices);
  
#line 45
  id<JavaUtilList> edges = new_JavaUtilArrayList_init();
  ComCrossingHelper_Edge *edge;
  jint begIndex;
  
#line 47
  jint endIndex;
  jint areaNumber;
  
#line 50
  for (jint i = 0; i < indices->size_; i++) {
    if (IOSIntArray_Get(indices, i) < pointCount1) {
      begIndex = IOSIntArray_Get(indices, i);
      endIndex = IOSIntArray_Get(indices, i) - 1;
      
#line 55
      if (endIndex < 0) {
        endIndex = pointCount1 - 1;
      }
      
#line 59
      areaNumber = 0;
    }
    else
#line 60
    if (IOSIntArray_Get(indices, i) < pointCount1 + pointCount2) {
      begIndex = IOSIntArray_Get(indices, i) - pointCount1;
      endIndex = IOSIntArray_Get(indices, i) - 1 - pointCount1;
      
#line 64
      if (endIndex < 0) {
        endIndex = pointCount2 - 1;
      }
      
#line 68
      areaNumber = 1;
    }
    else {
      
#line 70
      @throw new_JavaLangIndexOutOfBoundsException_init();
    }
    
#line 73
    if (!ComCrossingHelper_removeEdgeWithJavaUtilList_withInt_withInt_(self, edges, begIndex, endIndex)) {
      edge = new_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(begIndex, endIndex, areaNumber);
      ComCrossingHelper_intersectShapeWithJavaUtilList_withDoubleArray_withInt_withDoubleArray_withInt_withComCrossingHelper_Edge_(self, edges, IOSObjectArray_Get(nil_chk(coords_), 0), pointCount1, IOSObjectArray_Get(coords_, 1), pointCount2, edge);
      [edges addWithId:edge];
    }
    
#line 79
    begIndex = IOSIntArray_Get(indices, i);
    endIndex = IOSIntArray_Get(indices, i) + 1;
    
#line 82
    if ((begIndex < pointCount1) && (endIndex == pointCount1)) {
      endIndex = 0;
    }
    else
#line 84
    if ((begIndex >= pointCount1) && (endIndex == (pointCount2 + pointCount1))) {
      endIndex = pointCount1;
    }
    
#line 88
    if (endIndex < pointCount1) {
      areaNumber = 0;
    }
    else {
      
#line 91
      areaNumber = 1;
      endIndex -= pointCount1;
      begIndex -= pointCount1;
    }
    
#line 96
    if (!ComCrossingHelper_removeEdgeWithJavaUtilList_withInt_withInt_(self, edges, begIndex, endIndex)) {
      edge = new_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(begIndex, endIndex, areaNumber);
      ComCrossingHelper_intersectShapeWithJavaUtilList_withDoubleArray_withInt_withDoubleArray_withInt_withComCrossingHelper_Edge_(self, edges, IOSObjectArray_Get(nil_chk(coords_), 0), pointCount1, IOSObjectArray_Get(coords_, 1), pointCount2, edge);
      [edges addWithId:edge];
    }
  }
  
#line 103
  return [((id<JavaUtilList>) nil_chk(isectPoints_)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[isectPoints_ size] type:ComIntersectPoint_class_()]];
}


#line 106
- (jboolean)removeEdgeWithJavaUtilList:(id<JavaUtilList>)edges
                               withInt:(jint)begIndex
                               withInt:(jint)endIndex {
  return ComCrossingHelper_removeEdgeWithJavaUtilList_withInt_withInt_(self, edges, begIndex, endIndex);
}


#line 119
- (void)intersectShapeWithJavaUtilList:(id<JavaUtilList>)edges
                       withDoubleArray:(IOSDoubleArray *)coords1
                               withInt:(jint)length1
                       withDoubleArray:(IOSDoubleArray *)coords2
                               withInt:(jint)length2
            withComCrossingHelper_Edge:(ComCrossingHelper_Edge *)initEdge {
  ComCrossingHelper_intersectShapeWithJavaUtilList_withDoubleArray_withInt_withDoubleArray_withInt_withComCrossingHelper_Edge_(self, edges, coords1, length1, coords2, length2, initEdge);
}


#line 226
+ (void)sortWithDoubleArray:(IOSDoubleArray *)coords1
                    withInt:(jint)length1
            withDoubleArray:(IOSDoubleArray *)coords2
                    withInt:(jint)length2
               withIntArray:(IOSIntArray *)array {
  ComCrossingHelper_sortWithDoubleArray_withInt_withDoubleArray_withInt_withIntArray_(coords1, length1, coords2, length2, array);
}


#line 272
- (jboolean)containsPointWithDoubleArray:(IOSDoubleArray *)point {
  ComIntersectPoint *ipoint;
  
#line 275
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ipoint = [i next];
    
#line 278
    if ([((ComIntersectPoint *) nil_chk(ipoint)) getX] == IOSDoubleArray_Get(nil_chk(point), 0) && [ipoint getY] == IOSDoubleArray_Get(point, 1)) {
      return true;
    }
  }
  
#line 283
  return false;
}


#line 286
+ (jint)compareWithDouble:(jdouble)x1
               withDouble:(jdouble)y1
               withDouble:(jdouble)x2
               withDouble:(jdouble)y2 {
  return ComCrossingHelper_compareWithDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LComIntersectPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDoubleArray2:withIntArray:);
  methods[1].selector = @selector(findCrossing);
  methods[2].selector = @selector(removeEdgeWithJavaUtilList:withInt:withInt:);
  methods[3].selector = @selector(intersectShapeWithJavaUtilList:withDoubleArray:withInt:withDoubleArray:withInt:withComCrossingHelper_Edge:);
  methods[4].selector = @selector(sortWithDoubleArray:withInt:withDoubleArray:withInt:withIntArray:);
  methods[5].selector = @selector(containsPointWithDoubleArray:);
  methods[6].selector = @selector(compareWithDouble:withDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "coords_", "[[D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sizes_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isectPoints_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "[[D[I", "removeEdge", "LJavaUtilList;II", "(Ljava/util/List<Lcom/CrossingHelper$Edge;>;II)Z", "intersectShape", "LJavaUtilList;[DI[DILComCrossingHelper_Edge;", "(Ljava/util/List<Lcom/CrossingHelper$Edge;>;[DI[DILcom/CrossingHelper$Edge;)V", "sort", "[DI[DI[I", "containsPoint", "[D", "compare", "DDDD", "Ljava/util/List<Lcom/IntersectPoint;>;", "LComCrossingHelper_Edge;" };
  static const J2ObjcClassInfo _ComCrossingHelper = { "CrossingHelper", "com", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 14, -1, -1, -1 };
  return &_ComCrossingHelper;
}

@end


#line 29
void ComCrossingHelper_initWithDoubleArray2_withIntArray_(ComCrossingHelper *self, IOSObjectArray *coords, IOSIntArray *sizes) {
  NSObject_init(self);
  self->isectPoints_ = new_JavaUtilArrayList_init();
  
#line 30
  self->coords_ = coords;
  self->sizes_ = sizes;
}


#line 29
ComCrossingHelper *new_ComCrossingHelper_initWithDoubleArray2_withIntArray_(IOSObjectArray *coords, IOSIntArray *sizes) {
  J2OBJC_NEW_IMPL(ComCrossingHelper, initWithDoubleArray2_withIntArray_, coords, sizes)
}


#line 29
ComCrossingHelper *create_ComCrossingHelper_initWithDoubleArray2_withIntArray_(IOSObjectArray *coords, IOSIntArray *sizes) {
  J2OBJC_CREATE_IMPL(ComCrossingHelper, initWithDoubleArray2_withIntArray_, coords, sizes)
}


#line 106
jboolean ComCrossingHelper_removeEdgeWithJavaUtilList_withInt_withInt_(ComCrossingHelper *self, id<JavaUtilList> edges, jint begIndex, jint endIndex) {
  
#line 108
  for (ComCrossingHelper_Edge * __strong edge in nil_chk(edges)) {
    if ([((ComCrossingHelper_Edge *) nil_chk(edge)) reverseCompareWithInt:begIndex withInt:endIndex]) {
      [edges removeWithId:edge];
      return true;
    }
  }
  
#line 115
  return false;
}


#line 119
void ComCrossingHelper_intersectShapeWithJavaUtilList_withDoubleArray_withInt_withDoubleArray_withInt_withComCrossingHelper_Edge_(ComCrossingHelper *self, id<JavaUtilList> edges, IOSDoubleArray *coords1, jint length1, IOSDoubleArray *coords2, jint length2, ComCrossingHelper_Edge *initEdge) {
  
#line 121
  jint areaOfEdge1;
  
#line 121
  jint areaOfEdge2;
  jint initBegin;
  
#line 122
  jint initEnd;
  jint addBegin;
  
#line 123
  jint addEnd;
  jdouble x1;
  
#line 124
  jdouble y1;
  
#line 124
  jdouble x2;
  
#line 124
  jdouble y2;
  
#line 124
  jdouble x3;
  
#line 124
  jdouble y3;
  
#line 124
  jdouble x4;
  
#line 124
  jdouble y4;
  IOSDoubleArray *point = [IOSDoubleArray newArrayWithLength:2];
  ComCrossingHelper_Edge *edge;
  
#line 128
  if (((ComCrossingHelper_Edge *) nil_chk(initEdge))->areaNumber_ == 0) {
    x1 = IOSDoubleArray_Get(nil_chk(coords1), 2 * initEdge->begIndex_);
    y1 = IOSDoubleArray_Get(coords1, 2 * initEdge->begIndex_ + 1);
    x2 = IOSDoubleArray_Get(coords1, 2 * initEdge->endIndex_);
    y2 = IOSDoubleArray_Get(coords1, 2 * initEdge->endIndex_ + 1);
    areaOfEdge1 = 0;
  }
  else {
    
#line 135
    x1 = IOSDoubleArray_Get(nil_chk(coords2), 2 * initEdge->begIndex_);
    y1 = IOSDoubleArray_Get(coords2, 2 * initEdge->begIndex_ + 1);
    x2 = IOSDoubleArray_Get(coords2, 2 * initEdge->endIndex_);
    y2 = IOSDoubleArray_Get(coords2, 2 * initEdge->endIndex_ + 1);
    areaOfEdge1 = 1;
  }
  
#line 142
  for (id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(edges)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    edge = [iter next];
    
#line 145
    if (((ComCrossingHelper_Edge *) nil_chk(edge))->areaNumber_ == 0) {
      x3 = IOSDoubleArray_Get(nil_chk(coords1), 2 * edge->begIndex_);
      y3 = IOSDoubleArray_Get(coords1, 2 * edge->begIndex_ + 1);
      x4 = IOSDoubleArray_Get(coords1, 2 * edge->endIndex_);
      y4 = IOSDoubleArray_Get(coords1, 2 * edge->endIndex_ + 1);
      areaOfEdge2 = 0;
    }
    else {
      
#line 152
      x3 = IOSDoubleArray_Get(nil_chk(coords2), 2 * edge->begIndex_);
      y3 = IOSDoubleArray_Get(coords2, 2 * edge->begIndex_ + 1);
      x4 = IOSDoubleArray_Get(coords2, 2 * edge->endIndex_);
      y4 = IOSDoubleArray_Get(coords2, 2 * edge->endIndex_ + 1);
      areaOfEdge2 = 1;
    }
    
#line 159
    if ((areaOfEdge1 != areaOfEdge2) &&
#line 160
    (ComGeometryUtil_intersectLinesWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDoubleArray_(x1, y1, x2, y2, x3, y3, x4, y4, point) == 1) &&
#line 161
    (![self containsPointWithDoubleArray:point])) {
      
#line 163
      if (initEdge->areaNumber_ == 0) {
        initBegin = initEdge->begIndex_;
        initEnd = initEdge->endIndex_;
        addBegin = edge->begIndex_;
        addEnd = edge->endIndex_;
      }
      else {
        
#line 169
        initBegin = edge->begIndex_;
        initEnd = edge->endIndex_;
        addBegin = initEdge->begIndex_;
        addEnd = initEdge->endIndex_;
      }
      
#line 175
      if (((initEnd == length1 - 1) && (initBegin == 0 && initEnd > initBegin)) ||
#line 176
      (((initEnd != length1 - 1) || (initBegin != 0)) &&
#line 177
      ((initBegin != length1 - 1) || (initEnd != 0)) && (initBegin > initEnd))) {
        
#line 179
        jint temp = initBegin;
        initBegin = initEnd;
        initEnd = temp;
      }
      
#line 184
      if (((addEnd == length2 - 1) && (addBegin == 0) && (addEnd > addBegin)) ||
#line 185
      (((addEnd != length2 - 1) || (addBegin != 0)) &&
#line 186
      ((addBegin != length2 - 1) || (addEnd != 0)) && (addBegin > addEnd))) {
        
#line 188
        jint temp = addBegin;
        addBegin = addEnd;
        addEnd = temp;
      }
      
#line 193
      ComIntersectPoint *ip;
      for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->isectPoints_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
        ip = [i next];
        
#line 197
        if ((initBegin == [((ComIntersectPoint *) nil_chk(ip)) getBegIndexWithBoolean:true]) && (initEnd == [ip getEndIndexWithBoolean:true])) {
          
#line 199
          if (ComCrossingHelper_compareWithDouble_withDouble_withDouble_withDouble_([ip getX], [ip getY], IOSDoubleArray_Get(point, 0), IOSDoubleArray_Get(point, 1)) > 0) {
            initEnd = -([((id<JavaUtilList>) nil_chk(self->isectPoints_)) indexOfWithId:ip] + 1);
            [ip setBegIndex1WithInt:-([((id<JavaUtilList>) nil_chk(self->isectPoints_)) size] + 1)];
          }
          else {
            
#line 203
            initBegin = -([((id<JavaUtilList>) nil_chk(self->isectPoints_)) indexOfWithId:ip] + 1);
            [ip setEndIndex1WithInt:-([((id<JavaUtilList>) nil_chk(self->isectPoints_)) size] + 1)];
          }
        }
        
#line 208
        if ((addBegin == [ip getBegIndexWithBoolean:false]) && (addEnd == [ip getEndIndexWithBoolean:false])) {
          
#line 210
          if (ComCrossingHelper_compareWithDouble_withDouble_withDouble_withDouble_([ip getX], [ip getY], IOSDoubleArray_Get(point, 0), IOSDoubleArray_Get(point, 1)) > 0) {
            addEnd = -([((id<JavaUtilList>) nil_chk(self->isectPoints_)) indexOfWithId:ip] + 1);
            [ip setBegIndex2WithInt:-([((id<JavaUtilList>) nil_chk(self->isectPoints_)) size] + 1)];
          }
          else {
            
#line 214
            addBegin = -([((id<JavaUtilList>) nil_chk(self->isectPoints_)) indexOfWithId:ip] + 1);
            [ip setEndIndex2WithInt:-([((id<JavaUtilList>) nil_chk(self->isectPoints_)) size] + 1)];
          }
        }
      }
      
#line 220
      [((id<JavaUtilList>) nil_chk(self->isectPoints_)) addWithId:new_ComIntersectPoint_initWithInt_withInt_withInt_withInt_withDouble_withDouble_(initBegin, initEnd, addBegin, addEnd, IOSDoubleArray_Get(point, 0), IOSDoubleArray_Get(point, 1))];
    }
  }
}


#line 226
void ComCrossingHelper_sortWithDoubleArray_withInt_withDoubleArray_withInt_withIntArray_(IOSDoubleArray *coords1, jint length1, IOSDoubleArray *coords2, jint length2, IOSIntArray *array) {
  ComCrossingHelper_initialize();
  
#line 227
  jint temp;
  jint length = length1 + length2;
  jdouble x1;
  
#line 229
  jdouble y1;
  
#line 229
  jdouble x2;
  
#line 229
  jdouble y2;
  
#line 231
  for (jint i = 1; i < length; i++) {
    if (IOSIntArray_Get(nil_chk(array), i - 1) < length1) {
      x1 = IOSDoubleArray_Get(nil_chk(coords1), 2 * IOSIntArray_Get(array, i - 1));
      y1 = IOSDoubleArray_Get(coords1, 2 * IOSIntArray_Get(array, i - 1) + 1);
    }
    else {
      
#line 236
      x1 = IOSDoubleArray_Get(nil_chk(coords2), 2 * (IOSIntArray_Get(array, i - 1) - length1));
      y1 = IOSDoubleArray_Get(coords2, 2 * (IOSIntArray_Get(array, i - 1) - length1) + 1);
    }
    if (IOSIntArray_Get(array, i) < length1) {
      x2 = IOSDoubleArray_Get(nil_chk(coords1), 2 * IOSIntArray_Get(array, i));
      y2 = IOSDoubleArray_Get(coords1, 2 * IOSIntArray_Get(array, i) + 1);
    }
    else {
      
#line 243
      x2 = IOSDoubleArray_Get(nil_chk(coords2), 2 * (IOSIntArray_Get(array, i) - length1));
      y2 = IOSDoubleArray_Get(coords2, 2 * (IOSIntArray_Get(array, i) - length1) + 1);
    }
    jint j = i;
    while (j > 0 && ComCrossingHelper_compareWithDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2) <= 0) {
      temp = IOSIntArray_Get(array, j);
      *IOSIntArray_GetRef(array, j) = IOSIntArray_Get(array, j - 1);
      *IOSIntArray_GetRef(array, j - 1) = temp;
      j--;
      if (j > 0) {
        if (IOSIntArray_Get(array, j - 1) < length1) {
          x1 = IOSDoubleArray_Get(nil_chk(coords1), 2 * IOSIntArray_Get(array, j - 1));
          y1 = IOSDoubleArray_Get(coords1, 2 * IOSIntArray_Get(array, j - 1) + 1);
        }
        else {
          
#line 257
          x1 = IOSDoubleArray_Get(nil_chk(coords2), 2 * (IOSIntArray_Get(array, j - 1) - length1));
          y1 = IOSDoubleArray_Get(coords2, 2 * (IOSIntArray_Get(array, j - 1) - length1) + 1);
        }
        if (IOSIntArray_Get(array, j) < length1) {
          x2 = IOSDoubleArray_Get(nil_chk(coords1), 2 * IOSIntArray_Get(array, j));
          y2 = IOSDoubleArray_Get(coords1, 2 * IOSIntArray_Get(array, j) + 1);
        }
        else {
          
#line 264
          x2 = IOSDoubleArray_Get(nil_chk(coords2), 2 * (IOSIntArray_Get(array, j) - length1));
          y2 = IOSDoubleArray_Get(coords2, 2 * (IOSIntArray_Get(array, j) - length1) + 1);
        }
      }
    }
  }
}


#line 286
jint ComCrossingHelper_compareWithDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  ComCrossingHelper_initialize();
  if ((x1 < x2) || (x1 == x2 && y1 < y2)) {
    return 1;
  }
  else
#line 290
  if (x1 == x2 && y1 == y2) {
    return 0;
  }
  
#line 294
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComCrossingHelper)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/CrossingHelper.java"


#line 297
@implementation ComCrossingHelper_Edge


#line 302
- (instancetype)initWithInt:(jint)begIndex
                    withInt:(jint)endIndex
                    withInt:(jint)areaNumber {
  ComCrossingHelper_Edge_initWithInt_withInt_withInt_(self, begIndex, endIndex, areaNumber);
  return self;
}


#line 308
- (jboolean)reverseCompareWithInt:(jint)begIndex
                          withInt:(jint)endIndex {
  
#line 309
  return self->begIndex_ == endIndex && self->endIndex_ == begIndex;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(reverseCompareWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "begIndex_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "endIndex_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "areaNumber_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "reverseCompare", "II", "LComCrossingHelper;" };
  static const J2ObjcClassInfo _ComCrossingHelper_Edge = { "Edge", "com", ptrTable, methods, fields, 7, 0x1a, 2, 3, 3, -1, -1, -1, -1 };
  return &_ComCrossingHelper_Edge;
}

@end


#line 302
void ComCrossingHelper_Edge_initWithInt_withInt_withInt_(ComCrossingHelper_Edge *self, jint begIndex, jint endIndex, jint areaNumber) {
  NSObject_init(self);
  
#line 303
  self->begIndex_ = begIndex;
  self->endIndex_ = endIndex;
  self->areaNumber_ = areaNumber;
}


#line 302
ComCrossingHelper_Edge *new_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(jint begIndex, jint endIndex, jint areaNumber) {
  J2OBJC_NEW_IMPL(ComCrossingHelper_Edge, initWithInt_withInt_withInt_, begIndex, endIndex, areaNumber)
}


#line 302
ComCrossingHelper_Edge *create_ComCrossingHelper_Edge_initWithInt_withInt_withInt_(jint begIndex, jint endIndex, jint areaNumber) {
  J2OBJC_CREATE_IMPL(ComCrossingHelper_Edge, initWithInt_withInt_withInt_, begIndex, endIndex, areaNumber)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComCrossingHelper_Edge)
