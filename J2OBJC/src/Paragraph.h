//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/Paragraph.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Paragraph")
#ifdef RESTRICT_Paragraph
#define INCLUDE_ALL_Paragraph 0
#else
#define INCLUDE_ALL_Paragraph 1
#endif
#undef RESTRICT_Paragraph

#if !defined (ComAowagieTextParagraph_) && (INCLUDE_ALL_Paragraph || defined(INCLUDE_ComAowagieTextParagraph))
#define ComAowagieTextParagraph_

#define RESTRICT_Phrase 1
#define INCLUDE_ComAowagieTextPhrase 1
#include "Phrase.h"

@class ComAowagieTextChunk;
@class ComAowagieTextFont;

/*!
 @brief A <CODE>Paragraph</CODE> is a series of <CODE>Chunk</CODE>s and/or <CODE>Phrases</CODE>.
 <P>
  A <CODE>Paragraph</CODE> has the same qualities of a <CODE>Phrase</CODE>, but also
  some additional layout-parameters: 
 <UL>
  <LI>the indentation 
 <LI>the alignment of the text 
 </UL>
  Example: 
 <BLOCKQUOTE>@code

   <STRONG>Paragraph p = new Paragraph("This is a paragraph",
                FontFactory.getFont(FontFactory.HELVETICA, 18, Font.BOLDITALIC, new Color(0, 0, 255)));</STRONG>
   
@endcode</BLOCKQUOTE>
 - seealso: Element
 - seealso: Phrase
 - seealso: ListItem
 */
@interface ComAowagieTextParagraph : ComAowagieTextPhrase

#pragma mark Public

/*!
 @brief Constructs a <CODE>Paragraph</CODE>.
 */
- (instancetype)init;

/*!
 @brief Constructs a <CODE>Paragraph</CODE> with a certain <CODE>Chunk</CODE>.
 @param chunk a  <CODE> Chunk </CODE>
 */
- (instancetype)initWithComAowagieTextChunk:(ComAowagieTextChunk *)chunk;

/*!
 @brief Constructs a <CODE>Paragraph</CODE> with a certain <CODE>Phrase</CODE>.
 @param phrase a  <CODE> Phrase </CODE>
 */
- (instancetype)initWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Constructs a <CODE>Paragraph</CODE> with a certain <CODE>String</CODE>
  and a certain <CODE>Font</CODE>.
 @param string a  <CODE> String </CODE>
 @param font a  <CODE> Font </CODE>
 */
- (instancetype)initWithNSString:(NSString *)string
          withComAowagieTextFont:(ComAowagieTextFont *)font;

/*!
 @brief Adds an <CODE>Object</CODE> to the <CODE>Paragraph</CODE>.
 @param o object		the object to add.
 @return true is adding the object succeeded
 */
- (jboolean)addWithId:(id)o;

/*!
 @brief Gets the alignment of this paragraph.
 @return alignment
 */
- (jint)getAlignment;

/*!
 @brief Getter for property extraParagraphSpace.
 @return Value of property extraParagraphSpace.
 */
- (jfloat)getExtraParagraphSpace;

/*!
 @brief Getter for property firstLineIndent.
 @return Value of property firstLineIndent.
 */
- (jfloat)getFirstLineIndent;

/*!
 @brief Gets the indentation of this paragraph on the left side.
 @return the indentation
 */
- (jfloat)getIndentationLeft;

/*!
 @brief Gets the indentation of this paragraph on the right side.
 @return the indentation
 */
- (jfloat)getIndentationRight;

/*!
 @brief Checks if this paragraph has to be kept together on one page.
 @return true if the paragraph may not be split over 2 pages.
 */
- (jboolean)getKeepTogether;

/*!
 @brief Gets the variable leading
 @return the leading
 */
- (jfloat)getMultipliedLeading;

/*!
 @brief Gets the spacing after this paragraph.
 @return the spacing
 @since 2.1.5
 */
- (jfloat)getSpacingAfter;

/*!
 @brief Gets the spacing before this paragraph.
 @return the spacing
 @since 2.1.5
 */
- (jfloat)getSpacingBefore;

/*!
 @brief Gets the total leading.
 This method is based on the assumption that the
  font of the Paragraph is the font of all the elements
  that make part of the paragraph. This isn't necessarily
  true.
 @return the total leading (fixed and multiplied)
 */
- (jfloat)getTotalLeading;

/*!
 @brief Sets the alignment of this paragraph.
 @param alignment the new alignment
 */
- (void)setAlignmentWithInt:(jint)alignment;

/*!
 @brief Sets the alignment of this paragraph.
 @param alignment the new alignment as a  <CODE> String </CODE>
 */
- (void)setAlignmentWithNSString:(NSString *)alignment;

/*!
 @brief Setter for property extraParagraphSpace.
 @param extraParagraphSpace New value of property extraParagraphSpace.
 */
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace;

/*!
 @brief Setter for property firstLineIndent.
 @param firstLineIndent New value of property firstLineIndent.
 */
- (void)setFirstLineIndentWithFloat:(jfloat)firstLineIndent;

/*!
 @brief Sets the indentation of this paragraph on the left side.
 @param indentation the new indentation
 */
- (void)setIndentationLeftWithFloat:(jfloat)indentation;

/*!
 @brief Sets the indentation of this paragraph on the right side.
 @param indentation the new indentation
 */
- (void)setIndentationRightWithFloat:(jfloat)indentation;

/*!
 @brief Indicates that the paragraph has to be kept together on one page.
 @param keeptogether true of the paragraph may not be split over 2 pages
 */
- (void)setKeepTogetherWithBoolean:(jboolean)keeptogether;

/*!
 - seealso: com.aowagie.text.Phrase#setLeading(float)
 */
- (void)setLeadingWithFloat:(jfloat)fixedLeading;

/*!
 @brief Sets the variable leading.The resultant leading will be
  multipliedLeading*maxFontSize where maxFontSize is the
  size of the biggest font in the line.
 @param multipliedLeading the variable leading
 */
- (void)setMultipliedLeadingWithFloat:(jfloat)multipliedLeading;

/*!
 @brief Sets the spacing after this paragraph.
 @param spacing the new spacing
 */
- (void)setSpacingAfterWithFloat:(jfloat)spacing;

/*!
 @brief Sets the spacing before this paragraph.
 @param spacing the new spacing
 */
- (void)setSpacingBeforeWithFloat:(jfloat)spacing;

/*!
 @brief Gets the type of the text element.
 @return a type
 */
- (jint)type;

#pragma mark Package-Private

/*!
 @brief Constructs a <CODE>Paragraph</CODE> with a certain leading.
 @param leading the leading
 */
- (instancetype)initWithFloat:(jfloat)leading;

/*!
 @brief Constructs a <CODE>Paragraph</CODE> with a certain <CODE>String</CODE>.
 @param string a  <CODE> String </CODE>
 */
- (instancetype)initWithNSString:(NSString *)string;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithFloat:(jfloat)arg0
                 withNSString:(NSString *)arg1
       withComAowagieTextFont:(ComAowagieTextFont *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextParagraph)

FOUNDATION_EXPORT void ComAowagieTextParagraph_init(ComAowagieTextParagraph *self);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_init(void);

FOUNDATION_EXPORT void ComAowagieTextParagraph_initWithFloat_(ComAowagieTextParagraph *self, jfloat leading);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_initWithFloat_(jfloat leading) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_initWithFloat_(jfloat leading);

FOUNDATION_EXPORT void ComAowagieTextParagraph_initWithComAowagieTextChunk_(ComAowagieTextParagraph *self, ComAowagieTextChunk *chunk);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_initWithComAowagieTextChunk_(ComAowagieTextChunk *chunk);

FOUNDATION_EXPORT void ComAowagieTextParagraph_initWithNSString_(ComAowagieTextParagraph *self, NSString *string);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_initWithNSString_(NSString *string) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_initWithNSString_(NSString *string);

FOUNDATION_EXPORT void ComAowagieTextParagraph_initWithNSString_withComAowagieTextFont_(ComAowagieTextParagraph *self, NSString *string, ComAowagieTextFont *font);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_initWithNSString_withComAowagieTextFont_(NSString *string, ComAowagieTextFont *font);

FOUNDATION_EXPORT void ComAowagieTextParagraph_initWithComAowagieTextPhrase_(ComAowagieTextParagraph *self, ComAowagieTextPhrase *phrase);

FOUNDATION_EXPORT ComAowagieTextParagraph *new_ComAowagieTextParagraph_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextParagraph *create_ComAowagieTextParagraph_initWithComAowagieTextPhrase_(ComAowagieTextPhrase *phrase);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextParagraph)

#endif

#pragma pop_macro("INCLUDE_ALL_Paragraph")
