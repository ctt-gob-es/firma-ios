//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/AOUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AOUtil")
#ifdef RESTRICT_AOUtil
#define INCLUDE_ALL_AOUtil 0
#else
#define INCLUDE_ALL_AOUtil 1
#endif
#undef RESTRICT_AOUtil

#if !defined (EsGobAfirmaCoreMiscAOUtil_) && (INCLUDE_ALL_AOUtil || defined(INCLUDE_EsGobAfirmaCoreMiscAOUtil))
#define EsGobAfirmaCoreMiscAOUtil_

@class IOSByteArray;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@class JavaNetURI;
@class JavaSecurityCertX509Certificate;
@class JavaUtilProperties;

/*!
 @brief M&eacute;todos generales de utilidad para toda la aplicaci&oacute;n.
 @version 0.3
 */
@interface EsGobAfirmaCoreMiscAOUtil : NSObject

#pragma mark Public

/*!
 @brief Convierte una cadena Base64 en un objeto de propiedades.
 @param base64 Base64 que descodificado es un fichero de propiedades en texto plano.
 @return Objeto de propiedades.
 @throw IOExceptionSi hay problemas en el proceso.
 */
+ (JavaUtilProperties *)base642PropertiesWithNSString:(NSString *)base64;

/*!
 @brief Copia un fichero.
 @param source Fichero origen con el contenido que queremos copiar.
 @param dest Fichero destino de los datos.
 @throw IOExceptionSI ocurre algun problema durante la copia
 */
+ (void)copyFileWithJavaIoFile:(JavaIoFile *)source
                withJavaIoFile:(JavaIoFile *)dest OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Crea una URI a partir de un nombre de fichero local o una URL.
 @param file Nombre del fichero local o URL
 @return URI (<code>file://</code>) del fichero local o URL
 @throw URISyntaxExceptionSi no se puede crear una URI soportada a partir de la cadena de entrada
 */
+ (JavaNetURI *)createURIWithNSString:(NSString *)file;

/*!
 @brief Obtiene el nombre com&uacute;n (Common Name, CN) de un <i>Principal</i>
  X&#46;400.Si no se encuentra el CN, se devuelve la unidad organizativa
  (Organization Unit, OU).
 @param principal <i> Principal </i>  del cual queremos obtener el nombre
          com &uacute; n
 @return Nombre com&uacute;n (Common Name, CN) de un <i>Principal</i>
          X&#46;400
 */
+ (NSString *)getCNWithNSString:(NSString *)principal;

/*!
 @brief Obtiene el nombre com&uacute;n (Common Name, CN) del titular de un
  certificado X&#46;509.Si no se encuentra el CN, se devuelve la unidad organizativa
  (Organization Unit, OU).
 @param c Certificado X &#46; 509 del cual queremos obtener el nombre         com &uacute; n.
 @return Nombre com&uacute;n (Common Name, CN) del titular de un
          certificado X&#46;509.
 */
+ (NSString *)getCNWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)c;

/*!
 @brief Lee un flujo de datos de entrada y los recupera en forma de array de
  bytes.Este m&eacute;todo consume, pero no cierra el flujo de datos de
  entrada.
 @param input Flujo de donde se toman los datos.
 @return Los datos obtenidos del flujo.
 @throw IOExceptionCuando ocurre un problema durante la lectura.
 */
+ (IOSByteArray *)getDataFromInputStreamWithJavaIoInputStream:(JavaIoInputStream *)input;

/*!
 @brief Recupera el valor de un RDN (<i>Relative Distinguished Name</i>) de un principal.El valor de retorno no incluye
  el nombre del RDN, el igual, ni las posibles comillas que envuelvan el valor.
 La funci&oacute;n no es sensible a la capitalizaci&oacute;n del RDN. Si no se
  encuentra, se devuelve <code>null</code>.
 @param rdn RDN que deseamos encontrar.
 @param principal Principal del que extraer el RDN (seg &uacute; n la  <a href="http://www.ietf.org/rfc/rfc4514.txt"> RFC 4514 </a> ).
 @return Valor del RDN indicado o <code>null</code> si no se encuentra.
 */
+ (NSString *)getRDNvalueFromLdapNameWithNSString:(NSString *)rdn
                                     withNSString:(NSString *)principal;

/*!
 @brief Convierte un vector de octetos en una cadena de caracteres que contiene
  la representaci&oacute;n hexadecimal.Copiado directamente de
  opencard.core.util.HexString
 @param abyte0 Vector de octetos que deseamos representar textualmente
 @param separator Indica si han o no de separarse los octetos con un
          gui &oacute; n y en l &iacute; neas de 16
 @return Representaci&oacute;n textual del vector de octetos de entrada
 */
+ (NSString *)hexifyWithByteArray:(IOSByteArray *)abyte0
                      withBoolean:(jboolean)separator;

/*!
 @brief Convierte un vector de octetos en una cadena de caracteres que contiene
  la representaci&oacute;n hexadecimal.Copiado directamente de
  opencard.core.util.HexString
 @param abyte0 Vector de octetos que deseamos representar textualmente
 @param separator Indica si han o no de separarse los octetos con un
          gui &oacute; n y en l &iacute; neas de 16
 @return Representaci&oacute;n textual del vector de octetos de entrada
 */
+ (NSString *)hexifyWithByteArray:(IOSByteArray *)abyte0
                     withNSString:(NSString *)separator;

/*!
 @brief Indica si el JRE actual es Java 9 o superior.
 @return <code>true</code> si el JRE actual es Java 9 o superior,
          <code>false</code> si es Java 8 o inferior.
 */
+ (jboolean)isJava9orNewer;

/*!
 @brief Comprueba si el texto es un n&uacute;mero.
 @param value Texto a comprobar.
 @return <code>true</code> si el texto es un n&uacute;mero, <code>false</code>
          en caso contrario.
 */
+ (jboolean)isOnlyNumberWithNSString:(NSString *)value;

/*!
 @brief Identifica si un certificado es de seud&oacute;nimo.
 @param cert Certificado que hay que comprobar.
 @return Devuelve <code>true</code> si es un certificado de seud&oacute;nimo, <code>false</code> en caso contrario.
 */
+ (jboolean)isPseudonymCertWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert;

/*!
 @brief Obtiene el flujo de entrada de un fichero (para su lectura) a partir de su URI.
 @param uri URI del fichero a leer
 @return Flujo de entrada hacia el contenido del fichero
 @throw IOExceptionCuando no se ha podido abrir el fichero de datos.
 */
+ (JavaIoInputStream *)loadFileWithJavaNetURI:(JavaNetURI *)uri;

/*!
 @brief Carga una librer&iacute;a nativa del sistema.
 @param path Ruta a la libreria de sistema.
 @throw IOExceptionSi ocurre alg&uacute;n problema durante la carga
 */
+ (void)loadNativeLibraryWithNSString:(NSString *)path;

/*!
 @brief Convierte un objeto de propiedades en una cadena Base64 URL SAFE.
 @param p Objeto de propiedades a convertir.
 @return Base64 URL SAFE que descodificado es un fichero de propiedades en texto plano.
 @throw IOExceptionSi hay problemas en la conversi&oacute;n a Base64.
 */
+ (NSString *)properties2Base64WithJavaUtilProperties:(JavaUtilProperties *)p;

/*!
 @brief Convierte un objeto de propiedades en una cadena Base64 URL SAFE.
 @param p Objeto de propiedades a convertir.
 @return Base64 URL SAFE que descodificado es un fichero de propiedades en texto plano.
 @throw IOExceptionSi hay problemas en la conversi&oacute;n a Base64.
 */
+ (NSString *)propertiesAsStringWithJavaUtilProperties:(JavaUtilProperties *)p;

/*!
 @brief Genera una lista de cadenas compuesta por los fragmentos de texto
  separados por la cadena de separaci&oacute;n indicada.No soporta
  expresiones regulares.
 Por ejemplo:<br>
  <ul>
  <li><b>Texto:</b> foo$bar$foo$$bar$</li>
  <li><b>Separado:</b> $</li>
  <li><b>Resultado:</b> "foo", "bar", "foo", "", "bar", ""</li>
  </ul>
 @param text Texto que deseamos dividir.
 @param sp Separador entre los fragmentos de texto.
 @return Listado de fragmentos de texto entre separadores.
 @throw NullPointerException
 Cuando alguno de los par&aacute;metros de entrada es <code>null</code>.
 */
+ (IOSObjectArray *)splitWithNSString:(NSString *)text
                         withNSString:(NSString *)sp;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreMiscAOUtil)

FOUNDATION_EXPORT JavaNetURI *EsGobAfirmaCoreMiscAOUtil_createURIWithNSString_(NSString *file);

FOUNDATION_EXPORT JavaIoInputStream *EsGobAfirmaCoreMiscAOUtil_loadFileWithJavaNetURI_(JavaNetURI *uri);

FOUNDATION_EXPORT IOSByteArray *EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(JavaIoInputStream *input);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_getCNWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *c);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_getCNWithNSString_(NSString *principal);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_getRDNvalueFromLdapNameWithNSString_withNSString_(NSString *rdn, NSString *principal);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreMiscAOUtil_isPseudonymCertWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withBoolean_(IOSByteArray *abyte0, jboolean separator);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_hexifyWithByteArray_withNSString_(IOSByteArray *abyte0, NSString *separator);

FOUNDATION_EXPORT void EsGobAfirmaCoreMiscAOUtil_loadNativeLibraryWithNSString_(NSString *path);

FOUNDATION_EXPORT void EsGobAfirmaCoreMiscAOUtil_copyFileWithJavaIoFile_withJavaIoFile_(JavaIoFile *source, JavaIoFile *dest);

FOUNDATION_EXPORT IOSObjectArray *EsGobAfirmaCoreMiscAOUtil_splitWithNSString_withNSString_(NSString *text, NSString *sp);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_properties2Base64WithJavaUtilProperties_(JavaUtilProperties *p);

FOUNDATION_EXPORT JavaUtilProperties *EsGobAfirmaCoreMiscAOUtil_base642PropertiesWithNSString_(NSString *base64);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscAOUtil_propertiesAsStringWithJavaUtilProperties_(JavaUtilProperties *p);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreMiscAOUtil_isJava9orNewer(void);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreMiscAOUtil_isOnlyNumberWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreMiscAOUtil)

#endif

#pragma pop_macro("INCLUDE_ALL_AOUtil")
