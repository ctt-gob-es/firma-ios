//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfUtil.java
//

#include "AOException.h"
#include "AcroFields.h"
#include "BadPasswordException.h"
#include "BadPdfPasswordException.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IncorrectPageException.h"
#include "InvalidPdfException.h"
#include "InvalidSignaturePositionException.h"
#include "J2ObjC_source.h"
#include "PdfArray.h"
#include "PdfDeveloperExtension.h"
#include "PdfDictionary.h"
#include "PdfExtraParams.h"
#include "PdfIsCertifiedException.h"
#include "PdfIsPasswordProtectedException.h"
#include "PdfName.h"
#include "PdfObject.h"
#include "PdfReader.h"
#include "PdfSignatureAppearance.h"
#include "PdfStamper.h"
#include "PdfString.h"
#include "PdfUtil.h"
#include "PdfWriter.h"
#include "Rectangle.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/X509Certificate.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "PdfUtil must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesPdfUtil ()

- (instancetype)init;

/*!
 @brief Traduce un texto a n&uacute;mero de p&aacute;gina.Las p&aacute;ginas se enumeran
  desde 1 y se pueden referenciar desde el final mediante n&uacute;meros negativos, donde la 
 &uacute;ltima p&aacute;gina ser&iacute;a -1.
 Cualquier n&uacute;mero que exceda el
  n&uacute;mero de p&aacute;ginas ser&aacute; se interpretar&aacute; como la &uacute;ltima
  p&aacute;gina si era positivo o la primera si era negativo o cero.
 @param pageStr P &aacute; gina a normalizar.
 @param totalPages N &uacute; mero total de p &aacute; ginas del documento.
 @return N&uacute;mero de p&aacute;gina normalizada (n&uacute;mero positivo).
 @throw NumberFormatExceptionCuando la cadena no sea un n&uacute;mero.
 */
+ (jint)normalizePageWithNSString:(NSString *)pageStr
                          withInt:(jint)totalPages;

/*!
 @brief Agrega una p&aacute;gina al listado de p&aacute;ginas resultantes siempre y cuando sea un
  n&uacute;mero de p&aacute;gina v&aacute;lido y no est&eacute; ya incluida en &eacute;l.
 @param page P &aacute; gina que se quiere agregar al resultado.
 @param totalPages N &uacute; mero p &aacute; ginas del documento.
 @param pagesList Listado de p &aacute; ginas resultante.
 */
+ (void)addPageToResultWithInt:(jint)page
                       withInt:(jint)totalPages
              withJavaUtilList:(id<JavaUtilList>)pagesList;

/*!
 @brief Agrega un rango de p&aacute;ginas al resultado.
 @param range Cadena con el rango de p &aacute; ginas.
 @param totalPages N &uacute; mero total de p &aacute; ginas del documento.
 @param pagesList Listado de p &aacute; ginas de resultado.
 */
+ (void)addRangeToResultWithNSString:(NSString *)range
                             withInt:(jint)totalPages
                    withJavaUtilList:(id<JavaUtilList>)pagesList;

@end

inline JavaUtilLoggingLogger *EsGobAfirmaSignersPadesPdfUtil_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaSignersPadesPdfUtil_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, LOGGER, JavaUtilLoggingLogger *)

inline NSString *EsGobAfirmaSignersPadesPdfUtil_get_FILTER_ADOBE_PKCS7_DETACHED(void);
static NSString *EsGobAfirmaSignersPadesPdfUtil_FILTER_ADOBE_PKCS7_DETACHED = @"/adbe.pkcs7.detached";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, FILTER_ADOBE_PKCS7_DETACHED, NSString *)

inline NSString *EsGobAfirmaSignersPadesPdfUtil_get_RANGE_INDICATOR(void);
static NSString *EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR = @"-";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, RANGE_INDICATOR, NSString *)

inline NSString *EsGobAfirmaSignersPadesPdfUtil_get_RANGE_SEPARATOR(void);
static NSString *EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR = @",";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, RANGE_SEPARATOR, NSString *)

/*!
 @brief Valor en el par&aacute;metro signaturePage o signaturePages que
  indica una nueva p&aacute;gina para agregar al final del documento
 */
inline NSString *EsGobAfirmaSignersPadesPdfUtil_get_APPEND_PAGE(void);
static NSString *EsGobAfirmaSignersPadesPdfUtil_APPEND_PAGE = @"append";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, APPEND_PAGE, NSString *)

/*!
 @brief N&uacute;mero que indica una p&aacute;gina nueva.
 */
inline jint EsGobAfirmaSignersPadesPdfUtil_get_NEW_PAGE(void);
#define EsGobAfirmaSignersPadesPdfUtil_NEW_PAGE 0
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaSignersPadesPdfUtil, NEW_PAGE, jint)

/*!
 @brief Valor en el par&aacute;metro signaturePage o signaturePages que
  indica que se estampar&aacute; la firma visible en todas las paginas
 */
inline NSString *EsGobAfirmaSignersPadesPdfUtil_get_ALL_PAGES(void);
static NSString *EsGobAfirmaSignersPadesPdfUtil_ALL_PAGES = @"all";
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, ALL_PAGES, NSString *)

inline id<JavaUtilSet> EsGobAfirmaSignersPadesPdfUtil_get_SUPPORTED_SUBFILTERS(void);
static id<JavaUtilSet> EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaSignersPadesPdfUtil, SUPPORTED_SUBFILTERS, id<JavaUtilSet>)

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfUtil_init(EsGobAfirmaSignersPadesPdfUtil *self);

__attribute__((unused)) static EsGobAfirmaSignersPadesPdfUtil *new_EsGobAfirmaSignersPadesPdfUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaSignersPadesPdfUtil *create_EsGobAfirmaSignersPadesPdfUtil_init(void);

__attribute__((unused)) static jint EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_(NSString *pageStr, jint totalPages);

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfUtil_addPageToResultWithInt_withInt_withJavaUtilList_(jint page, jint totalPages, id<JavaUtilList> pagesList);

__attribute__((unused)) static void EsGobAfirmaSignersPadesPdfUtil_addRangeToResultWithNSString_withInt_withJavaUtilList_(NSString *range, jint totalPages, id<JavaUtilList> pagesList);

@interface EsGobAfirmaSignersPadesPdfUtil_SignatureField () {
 @public
  jint signaturePositionOnPageLowerLeftX_;
  jint signaturePositionOnPageLowerLeftY_;
  jint signaturePositionOnPageUpperRightX_;
  jint signaturePositionOnPageUpperRightY_;
  jint page_;
  NSString *name_;
}

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaSignersPadesPdfUtil_SignatureField, name_, NSString *)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfUtil.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaSignersPadesPdfUtil)


#line 50
@implementation EsGobAfirmaSignersPadesPdfUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 80
- (instancetype)init {
  EsGobAfirmaSignersPadesPdfUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 88
+ (jboolean)isPdfA1WithByteArray:(IOSByteArray *)metadata {
  return EsGobAfirmaSignersPadesPdfUtil_isPdfA1WithByteArray_(metadata);
}


#line 100
+ (jboolean)isPdfAxWithByteArray:(IOSByteArray *)metadata {
  return EsGobAfirmaSignersPadesPdfUtil_isPdfAxWithByteArray_(metadata);
}


#line 112
+ (JavaUtilGregorianCalendar *)getSignTimeWithNSString:(NSString *)stStr {
  return EsGobAfirmaSignersPadesPdfUtil_getSignTimeWithNSString_(stStr);
}


#line 149
+ (ComAowagieTextPdfPdfReader *)getPdfReaderWithByteArray:(IOSByteArray *)inPDF
                                   withJavaUtilProperties:(JavaUtilProperties *)xParams
                                              withBoolean:(jboolean)headless {
  return EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(inPDF, xParams, headless);
}


#line 198
+ (void)checkPdfCertificationWithInt:(jint)pdfCertificationLevel
              withJavaUtilProperties:(JavaUtilProperties *)extraParams {
  EsGobAfirmaSignersPadesPdfUtil_checkPdfCertificationWithInt_withJavaUtilProperties_(pdfCertificationLevel, extraParams);
}


#line 213
+ (void)enableLtvWithComAowagieTextPdfPdfStamper:(ComAowagieTextPdfPdfStamper *)stp {
  EsGobAfirmaSignersPadesPdfUtil_enableLtvWithComAowagieTextPdfPdfStamper_(stp);
}


#line 224
+ (jboolean)getAppendModeWithJavaUtilProperties:(JavaUtilProperties *)extraParams
                 withComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)pdfReader {
  return EsGobAfirmaSignersPadesPdfUtil_getAppendModeWithJavaUtilProperties_withComAowagieTextPdfPdfReader_(extraParams, pdfReader);
}


#line 232
+ (jboolean)pdfHasUnregisteredSignaturesWithByteArray:(IOSByteArray *)pdf
                               withJavaUtilProperties:(JavaUtilProperties *)xParams {
  return EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithByteArray_withJavaUtilProperties_(pdf, xParams);
}


#line 251
+ (NSString *)getFirstSupportedSignSubFilterWithByteArray:(IOSByteArray *)pdf
                                   withJavaUtilProperties:(JavaUtilProperties *)xParams {
  return EsGobAfirmaSignersPadesPdfUtil_getFirstSupportedSignSubFilterWithByteArray_withJavaUtilProperties_(pdf, xParams);
}


#line 287
+ (jboolean)pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)pdfReader {
  return EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader_(pdfReader);
}


#line 407
+ (id<JavaUtilList>)getPdfEmptySignatureFieldsWithByteArray:(IOSByteArray *)pdf {
  return EsGobAfirmaSignersPadesPdfUtil_getPdfEmptySignatureFieldsWithByteArray_(pdf);
}


#line 454
+ (ComAowagieTextRectangle *)getPositionOnPageWithJavaUtilProperties:(JavaUtilProperties *)extraParams
                                                        withNSString:(NSString *)prefix {
  return EsGobAfirmaSignersPadesPdfUtil_getPositionOnPageWithJavaUtilProperties_withNSString_(extraParams, prefix);
}


#line 495
+ (void)getPagesRangeWithNSString:(NSString *)pageStr
                          withInt:(jint)totalPages
                 withJavaUtilList:(id<JavaUtilList>)pagesList {
  EsGobAfirmaSignersPadesPdfUtil_getPagesRangeWithNSString_withInt_withJavaUtilList_(pageStr, totalPages, pagesList);
}


#line 528
+ (jint)normalizePageWithNSString:(NSString *)pageStr
                          withInt:(jint)totalPages {
  return EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_(pageStr, totalPages);
}


#line 552
+ (void)addPageToResultWithInt:(jint)page
                       withInt:(jint)totalPages
              withJavaUtilList:(id<JavaUtilList>)pagesList {
  EsGobAfirmaSignersPadesPdfUtil_addPageToResultWithInt_withInt_withJavaUtilList_(page, totalPages, pagesList);
}


#line 564
+ (void)addRangeToResultWithNSString:(NSString *)range
                             withInt:(jint)totalPages
                    withJavaUtilList:(id<JavaUtilList>)pagesList {
  EsGobAfirmaSignersPadesPdfUtil_addRangeToResultWithNSString_withInt_withJavaUtilList_(range, totalPages, pagesList);
}


#line 599
+ (void)correctPositionSignatureWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)pdfReader
                                              withJavaUtilList:(id<JavaUtilList>)pagesList
                                   withComAowagieTextRectangle:(ComAowagieTextRectangle *)signaturePosition {
  EsGobAfirmaSignersPadesPdfUtil_correctPositionSignatureWithComAowagieTextPdfPdfReader_withJavaUtilList_withComAowagieTextRectangle_(pdfReader, pagesList, signaturePosition);
}


#line 632
+ (jboolean)checkPagesRangeInputFormatWithNSString:(NSString *)rangeInput {
  return EsGobAfirmaSignersPadesPdfUtil_checkPagesRangeInputFormatWithNSString_(rangeInput);
}


#line 688
+ (id<JavaUtilList>)getPagesWithJavaUtilProperties:(JavaUtilProperties *)extraParams
                                           withInt:(jint)totalPages {
  return EsGobAfirmaSignersPadesPdfUtil_getPagesWithJavaUtilProperties_withInt_(extraParams, totalPages);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilGregorianCalendar;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfReader;", 0x9, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x8, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 15, 16, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 18, 16, 19, -1, -1, -1 },
    { NULL, "Z", 0x8, 15, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 21, 1, -1, 22, -1, -1 },
    { NULL, "LComAowagieTextRectangle;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 25, 26, 27, 28, -1, -1 },
    { NULL, "I", 0xa, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, -1, 33, -1, -1 },
    { NULL, "V", 0xa, 34, 26, -1, 28, -1, -1 },
    { NULL, "V", 0x9, 35, 36, -1, 37, -1, -1 },
    { NULL, "Z", 0x9, 38, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 39, 40, -1, 41, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isPdfA1WithByteArray:);
  methods[2].selector = @selector(isPdfAxWithByteArray:);
  methods[3].selector = @selector(getSignTimeWithNSString:);
  methods[4].selector = @selector(getPdfReaderWithByteArray:withJavaUtilProperties:withBoolean:);
  methods[5].selector = @selector(checkPdfCertificationWithInt:withJavaUtilProperties:);
  methods[6].selector = @selector(enableLtvWithComAowagieTextPdfPdfStamper:);
  methods[7].selector = @selector(getAppendModeWithJavaUtilProperties:withComAowagieTextPdfPdfReader:);
  methods[8].selector = @selector(pdfHasUnregisteredSignaturesWithByteArray:withJavaUtilProperties:);
  methods[9].selector = @selector(getFirstSupportedSignSubFilterWithByteArray:withJavaUtilProperties:);
  methods[10].selector = @selector(pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader:);
  methods[11].selector = @selector(getPdfEmptySignatureFieldsWithByteArray:);
  methods[12].selector = @selector(getPositionOnPageWithJavaUtilProperties:withNSString:);
  methods[13].selector = @selector(getPagesRangeWithNSString:withInt:withJavaUtilList:);
  methods[14].selector = @selector(normalizePageWithNSString:withInt:);
  methods[15].selector = @selector(addPageToResultWithInt:withInt:withJavaUtilList:);
  methods[16].selector = @selector(addRangeToResultWithNSString:withInt:withJavaUtilList:);
  methods[17].selector = @selector(correctPositionSignatureWithComAowagieTextPdfPdfReader:withJavaUtilList:withComAowagieTextRectangle:);
  methods[18].selector = @selector(checkPagesRangeInputFormatWithNSString:);
  methods[19].selector = @selector(getPagesWithJavaUtilProperties:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "FILTER_ADOBE_PKCS7_DETACHED", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "RANGE_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "RANGE_SEPARATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "APPEND_PAGE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "NEW_PAGE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPdfUtil_NEW_PAGE, 0x1a, -1, -1, -1, -1 },
    { "ALL_PAGES", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "SUPPORTED_SUBFILTERS", "LJavaUtilSet;", .constantValue.asLong = 0, 0x1a, -1, 48, 49, -1 },
  };
  static const void *ptrTable[] = { "isPdfA1", "[B", "isPdfAx", "getSignTime", "LNSString;", "getPdfReader", "[BLJavaUtilProperties;Z", "LEsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException;LEsGobAfirmaSignersPadesCommonBadPdfPasswordException;LEsGobAfirmaSignersPadesInvalidPdfException;LJavaIoIOException;", "checkPdfCertification", "ILJavaUtilProperties;", "LEsGobAfirmaSignersPadesCommonPdfIsCertifiedException;LEsGobAfirmaCoreAOException;", "enableLtv", "LComAowagieTextPdfPdfStamper;", "getAppendMode", "LJavaUtilProperties;LComAowagieTextPdfPdfReader;", "pdfHasUnregisteredSignatures", "[BLJavaUtilProperties;", "LEsGobAfirmaSignersPadesInvalidPdfException;LEsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException;LEsGobAfirmaSignersPadesCommonBadPdfPasswordException;LJavaIoIOException;", "getFirstSupportedSignSubFilter", "LJavaIoIOException;LEsGobAfirmaSignersPadesInvalidPdfException;LEsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException;LEsGobAfirmaSignersPadesCommonBadPdfPasswordException;", "LComAowagieTextPdfPdfReader;", "getPdfEmptySignatureFields", "([B)Ljava/util/List<Les/gob/afirma/signers/pades/PdfUtil$SignatureField;>;", "getPositionOnPage", "LJavaUtilProperties;LNSString;", "getPagesRange", "LNSString;ILJavaUtilList;", "LEsGobAfirmaSignersPadesIncorrectPageException;", "(Ljava/lang/String;ILjava/util/List<Ljava/lang/Integer;>;)V", "normalizePage", "LNSString;I", "addPageToResult", "IILJavaUtilList;", "(IILjava/util/List<Ljava/lang/Integer;>;)V", "addRangeToResult", "correctPositionSignature", "LComAowagieTextPdfPdfReader;LJavaUtilList;LComAowagieTextRectangle;", "(Lcom/aowagie/text/pdf/PdfReader;Ljava/util/List<Ljava/lang/Integer;>;Lcom/aowagie/text/Rectangle;)V", "checkPagesRangeInputFormat", "getPages", "LJavaUtilProperties;I", "(Ljava/util/Properties;I)Ljava/util/List<Ljava/lang/Integer;>;", &EsGobAfirmaSignersPadesPdfUtil_LOGGER, &EsGobAfirmaSignersPadesPdfUtil_FILTER_ADOBE_PKCS7_DETACHED, &EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR, &EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR, &EsGobAfirmaSignersPadesPdfUtil_APPEND_PAGE, &EsGobAfirmaSignersPadesPdfUtil_ALL_PAGES, &EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS, "Ljava/util/Set<Ljava/lang/String;>;", "LEsGobAfirmaSignersPadesPdfUtil_SignatureField;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPdfUtil = { "PdfUtil", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x11, 20, 8, -1, 50, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPdfUtil;
}

+ (void)initialize {
  if (self == [EsGobAfirmaSignersPadesPdfUtil class]) {
    EsGobAfirmaSignersPadesPdfUtil_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 52
    @"es.gob.afirma");
    {
      
#line 73
      EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS = new_JavaUtilHashSet_init();
      [EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS addWithId:@"/ETSI.RFC3161"];
      [EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS addWithId:EsGobAfirmaSignersPadesPdfUtil_FILTER_ADOBE_PKCS7_DETACHED];
      [EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS addWithId:@"/ETSI.CAdES.detached"];
      [EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS addWithId:@"/adbe.pkcs7.sha1"];
    }
    J2OBJC_SET_INITIALIZED(EsGobAfirmaSignersPadesPdfUtil)
  }
}

@end


#line 80
void EsGobAfirmaSignersPadesPdfUtil_init(EsGobAfirmaSignersPadesPdfUtil *self) {
  NSObject_init(self);
}


#line 80
EsGobAfirmaSignersPadesPdfUtil *new_EsGobAfirmaSignersPadesPdfUtil_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfUtil, init)
}


#line 80
EsGobAfirmaSignersPadesPdfUtil *create_EsGobAfirmaSignersPadesPdfUtil_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfUtil, init)
}


#line 88
jboolean EsGobAfirmaSignersPadesPdfUtil_isPdfA1WithByteArray_(IOSByteArray *metadata) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 89
  if (metadata == nil) {
    return false;
  }
  NSString *rdf = [NSString java_stringWithBytes:metadata];
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([rdf java_replace:@"\n" withSequence:@""])) java_replace:
#line 94
  @"\x0d" withSequence:@""])) java_replace:
#line 95
  @"\t" withSequence:@""])) java_replace:
#line 96
  @" " withSequence:@""])) java_contains:
#line 97
  @"<pdfaid:part>1</pdfaid:part>"];
}


#line 100
jboolean EsGobAfirmaSignersPadesPdfUtil_isPdfAxWithByteArray_(IOSByteArray *metadata) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 101
  if (metadata == nil) {
    return false;
  }
  NSString *rdf = [NSString java_stringWithBytes:metadata];
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([rdf java_replace:@"\n" withSequence:@""])) java_replace:
#line 106
  @"\x0d" withSequence:@""])) java_replace:
#line 107
  @"\t" withSequence:@""])) java_replace:
#line 108
  @" " withSequence:@""])) java_contains:
#line 109
  @"<pdfaid:part>"];
}


#line 112
JavaUtilGregorianCalendar *EsGobAfirmaSignersPadesPdfUtil_getSignTimeWithNSString_(NSString *stStr) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 113
  if (stStr == nil) {
    return new_JavaUtilGregorianCalendar_init();
  }
  
#line 117
  JavaUtilDate *date;
  JavaTextSimpleDateFormat *formatter = new_JavaTextSimpleDateFormat_initWithNSString_(@"yyyy:MM:dd:HH:mm:ss");
  @try {
    date = [formatter parseWithNSString:stStr];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) severeWithNSString:JreStrcat("$$$@", @"La fecha indicada ('",
#line 124
    stStr, @"') como momento de firma para PAdES no sigue el patron 'yyyy:MM:dd:HH:mm:ss': ", e)];
    
#line 126
    return new_JavaUtilGregorianCalendar_init();
  }
  
#line 130
  JavaUtilGregorianCalendar *calendar = new_JavaUtilGregorianCalendar_init();
  [calendar setTimeWithJavaUtilDate:date];
  
#line 133
  return calendar;
}


#line 149
ComAowagieTextPdfPdfReader *EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(IOSByteArray *inPDF, JavaUtilProperties *xParams, jboolean headless) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 156
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  
#line 159
  NSString *ownerPassword = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_OWNER_PASSWORD_STRING];
  
#line 162
  NSString *userPassword = [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_USER_PASSWORD_STRING];
  
#line 164
  ComAowagieTextPdfPdfReader *pdfReader;
  @try {
    if (ownerPassword != nil) {
      pdfReader = new_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(inPDF, [ownerPassword java_getBytes]);
    }
    else if (userPassword != nil) {
      pdfReader = new_ComAowagieTextPdfPdfReader_initWithByteArray_withByteArray_(inPDF, [userPassword java_getBytes]);
    }
    else {
      pdfReader = new_ComAowagieTextPdfPdfReader_initWithByteArray_(inPDF);
    }
  }
  @catch (ComAowagieTextExceptionsBadPasswordException *e) {
    
#line 179
    if (ownerPassword != nil || userPassword != nil) {
      @throw new_EsGobAfirmaSignersPadesCommonBadPdfPasswordException_initWithNSString_withJavaLangThrowable_(@"Se ha indicado una contrasena incorrecta para el PDF", e);
    }
    @throw new_EsGobAfirmaSignersPadesCommonPdfIsPasswordProtectedException_initWithNSString_withJavaLangThrowable_(@"El PDF esta protegido por contrasena para lectura", e);
  }
  @catch (JavaIoIOException *e) {
    @throw new_EsGobAfirmaSignersPadesInvalidPdfException_initWithJavaLangThrowable_(e);
  }
  return pdfReader;
}


#line 198
void EsGobAfirmaSignersPadesPdfUtil_checkPdfCertificationWithInt_withJavaUtilProperties_(jint pdfCertificationLevel, JavaUtilProperties *extraParams) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 202
  if (pdfCertificationLevel != ComAowagieTextPdfPdfSignatureAppearance_NOT_CERTIFIED) {
    NSString *allow = [((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_ALLOW_SIGNING_CERTIFIED_PDFS];
    if (allow == nil || [((NSString *) nil_chk([allow java_trim])) java_isEmpty]) {
      @throw new_EsGobAfirmaSignersPadesCommonPdfIsCertifiedException_initWithNSString_(@"El PDF esta certificado");
    }
    if (!JavaLangBoolean_parseBooleanWithNSString_(allow)) {
      @throw new_EsGobAfirmaCoreAOException_initWithNSString_(@"El PDF esta certificado y se configuro que no se admitia su firma");
    }
  }
}

void EsGobAfirmaSignersPadesPdfUtil_enableLtvWithComAowagieTextPdfPdfStamper_(ComAowagieTextPdfPdfStamper *stp) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  [((ComAowagieTextPdfPdfWriter *) nil_chk([((ComAowagieTextPdfPdfStamper *) nil_chk(stp)) getWriter])) addDeveloperExtensionWithComAowagieTextPdfPdfDeveloperExtension:new_ComAowagieTextPdfPdfDeveloperExtension_initWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfName_withInt_(new_ComAowagieTextPdfPdfName_initWithNSString_(
#line 217
  @"ESIC"), JreLoadStatic(ComAowagieTextPdfPdfWriter, PDF_VERSION_1_7),
#line 219
  1)];
}


#line 224
jboolean EsGobAfirmaSignersPadesPdfUtil_getAppendModeWithJavaUtilProperties_withComAowagieTextPdfPdfReader_(JavaUtilProperties *extraParams, ComAowagieTextPdfPdfReader *pdfReader) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 225
  if ([((JavaUtilProperties *) nil_chk(extraParams)) getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_OWNER_PASSWORD_STRING] != nil ||
#line 226
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_USER_PASSWORD_STRING] != nil) {
    return true;
  }
  return JavaLangBoolean_parseBooleanWithNSString_([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_ALWAYS_CREATE_REVISION]) || [((id<JavaUtilList>) nil_chk([((ComAowagieTextPdfAcroFields *) nil_chk([((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getAcroFields])) getSignatureNames])) size] > 0;
}


#line 232
jboolean EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithByteArray_withJavaUtilProperties_(IOSByteArray *pdf, JavaUtilProperties *xParams) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  ComAowagieTextPdfPdfReader *pdfReader = EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(
#line 236
  pdf,
#line 237
  extraParams, JavaLangBoolean_parseBooleanWithNSString_(
#line 238
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_HEADLESS]));
  
#line 240
  return EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader_(pdfReader);
}


#line 251
NSString *EsGobAfirmaSignersPadesPdfUtil_getFirstSupportedSignSubFilterWithByteArray_withJavaUtilProperties_(IOSByteArray *pdf, JavaUtilProperties *xParams) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 255
  if (pdf == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"El PDF de entrada no puede ser nulo");
  }
  
#line 259
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  
#line 261
  ComAowagieTextPdfPdfReader *pdfReader = EsGobAfirmaSignersPadesPdfUtil_getPdfReaderWithByteArray_withJavaUtilProperties_withBoolean_(
#line 262
  pdf,
#line 263
  extraParams, JavaLangBoolean_parseBooleanWithNSString_(
#line 264
  [extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_HEADLESS]));
  
#line 267
  for (jint i = 0; i < [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getXrefSize]; i++) {
    ComAowagieTextPdfPdfObject *pdfobj = [pdfReader getPdfObjectWithInt:i];
    if (pdfobj != nil && [pdfobj isDictionary]) {
      ComAowagieTextPdfPdfDictionary *d = (ComAowagieTextPdfPdfDictionary *) cast_chk(pdfobj, [ComAowagieTextPdfPdfDictionary class]);
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)]]) {
        
#line 273
        NSString *subFilter = [d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)] != nil ?
#line 274
        [((ComAowagieTextPdfPdfObject *) nil_chk([d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)])) description] : nil;
        
#line 276
        if ([((id<JavaUtilSet>) nil_chk(EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS)) containsWithId:subFilter]) {
          return subFilter;
        }
      }
    }
  }
  
#line 283
  [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) infoWithNSString:@"No se ha encontrado ningun filtro de firma soportado, se devolvera null"];
  return nil;
}


#line 287
jboolean EsGobAfirmaSignersPadesPdfUtil_pdfHasUnregisteredSignaturesWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *pdfReader) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  jboolean ret = false;
  for (jint i = 0; i < [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getXrefSize]; i++) {
    ComAowagieTextPdfPdfObject *pdfobj = [pdfReader getPdfObjectWithInt:i];
    if (pdfobj != nil && [pdfobj isDictionary]) {
      ComAowagieTextPdfPdfDictionary *d = (ComAowagieTextPdfPdfDictionary *) cast_chk(pdfobj, [ComAowagieTextPdfPdfDictionary class]);
      if ([((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, SIG))) isEqual:[d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, TYPE)]]) {
        
#line 296
        NSString *subFilter = [d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)] != nil ?
#line 297
        [((ComAowagieTextPdfPdfObject *) nil_chk([d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, SUBFILTER)])) description] : nil;
        
#line 299
        if (subFilter == nil || ![((id<JavaUtilSet>) nil_chk(EsGobAfirmaSignersPadesPdfUtil_SUPPORTED_SUBFILTERS)) containsWithId:subFilter]) {
          ret = true;
          @try {
            ComAowagieTextPdfPdfObject *o = [d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CERT)];
            IOSByteArray *data;
            if ([o isKindOfClass:[ComAowagieTextPdfPdfString class]]) {
              data = [((ComAowagieTextPdfPdfString *) nil_chk(((ComAowagieTextPdfPdfString *) o))) getOriginalBytes];
            }
            else {
              data = [((ComAowagieTextPdfPdfString *) nil_chk(((ComAowagieTextPdfPdfString *) cast_chk([((JavaUtilArrayList *) nil_chk([((ComAowagieTextPdfPdfArray *) nil_chk(((ComAowagieTextPdfPdfArray *) cast_chk([d getWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CERT)], [ComAowagieTextPdfPdfArray class])))) getArrayList])) getWithInt:0], [ComAowagieTextPdfPdfString class])))) getOriginalBytes];
            }
            
#line 311
            JavaSecurityCertX509Certificate *cert = (JavaSecurityCertX509Certificate *) cast_chk([((JavaSecurityCertCertificateFactory *) nil_chk(JavaSecurityCertCertificateFactory_getInstanceWithNSString_(@"X.509"))) generateCertificateWithJavaIoInputStream:new_JavaIoByteArrayInputStream_initWithByteArray_(
#line 313
            data)], [JavaSecurityCertX509Certificate class]);
            
#line 316
            [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) infoWithNSString:JreStrcat("$$", @"Encontrada firma no registrada, hecha con certificado emitido por: ",
#line 317
            [((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getIssuerX500Principal])) description])];
          }
          @catch (
#line 320
          JavaLangException *e) {
            [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"No se ha podido comprobar la identidad de una firma no registrada con el subfiltro: ", subFilter, @": ", e)];
          }
        }
      }
    }
  }
  return ret;
}


#line 407
id<JavaUtilList> EsGobAfirmaSignersPadesPdfUtil_getPdfEmptySignatureFieldsWithByteArray_(IOSByteArray *pdf) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 408
  if (pdf == nil) {
    return new_JavaUtilArrayList_initWithInt_(0);
  }
  ComAowagieTextPdfPdfReader *reader;
  @try {
    reader = new_ComAowagieTextPdfPdfReader_initWithByteArray_(pdf);
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error leyendo el PDF de entrada: ",
#line 417
    e)];
    
#line 419
    return new_JavaUtilArrayList_initWithInt_(0);
  }
  ComAowagieTextPdfAcroFields *fields = [((ComAowagieTextPdfPdfReader *) nil_chk(reader)) getAcroFields];
  if (fields != nil) {
    id<JavaUtilList> emptySignatureFields = [fields getBlankSignatureNames];
    id<JavaUtilList> ret = new_JavaUtilArrayList_init();
    if (emptySignatureFields != nil) {
      for (NSString * __strong signame in emptySignatureFields) {
        IOSFloatArray *positions = [fields getFieldPositionsWithNSString:signame];
        if (positions == nil || positions->size_ < 5) {
          continue;
        }
        [ret addWithId:new_EsGobAfirmaSignersPadesPdfUtil_SignatureField_initWithInt_withInt_withInt_withInt_withInt_withNSString_(JavaLangMath_roundWithFloat_(IOSFloatArray_Get(
#line 433
        positions, 0)), JavaLangMath_roundWithFloat_(IOSFloatArray_Get(
#line 434
        positions, 1)), JavaLangMath_roundWithFloat_(IOSFloatArray_Get(
#line 435
        positions, 2)), JavaLangMath_roundWithFloat_(IOSFloatArray_Get(
#line 436
        positions, 3)), JavaLangMath_roundWithFloat_(IOSFloatArray_Get(
#line 437
        positions, 4)),
#line 438
        signame)];
      }
      
#line 442
      return ret;
    }
  }
  return new_JavaUtilArrayList_initWithInt_(0);
}


#line 454
ComAowagieTextRectangle *EsGobAfirmaSignersPadesPdfUtil_getPositionOnPageWithJavaUtilProperties_withNSString_(JavaUtilProperties *extraParams, NSString *prefix) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 455
  if (extraParams == nil || prefix == nil) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) severeWithNSString:@"Se ha pedido una posicion para un elemento grafico nulo"];
    return nil;
  }
  if ([extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageLowerLeftX")] != nil &&
#line 460
  [extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageLowerLeftY")] != nil &&
#line 461
  [extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageUpperRightX")] != nil &&
#line 462
  [extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageUpperRightY")] != nil) {
    @try {
      return new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(JavaLangInteger_parseIntWithNSString_(
#line 465
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageLowerLeftX")])) java_trim]), JavaLangInteger_parseIntWithNSString_(
#line 466
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageLowerLeftY")])) java_trim]), JavaLangInteger_parseIntWithNSString_(
#line 467
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageUpperRightX")])) java_trim]), JavaLangInteger_parseIntWithNSString_(
#line 468
      [((NSString *) nil_chk([extraParams getPropertyWithNSString:JreStrcat("$$", prefix, @"PositionOnPageUpperRightY")])) java_trim]));
    }
    @catch (
#line 471
    JavaLangException *e) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) severeWithNSString:JreStrcat("$$$@", @"Se ha indicado una posicion invalida para el elemento grafico '",
#line 473
      prefix, @"': ", e)];
    }
  }
  
#line 477
  return nil;
}


#line 495
void EsGobAfirmaSignersPadesPdfUtil_getPagesRangeWithNSString_withInt_withJavaUtilList_(NSString *pageStr, jint totalPages, id<JavaUtilList> pagesList) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 498
  NSString *range = [((NSString *) nil_chk([((NSString *) nil_chk(pageStr)) java_trim])) java_replace:@" " withSequence:@""];
  
#line 502
  jint page;
  @try {
    page = EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_(range, totalPages);
  }
  @catch (
#line 505
  JavaLangNumberFormatException *nfe) {
    page = -1;
  }
  
#line 509
  if (page > 0) {
    EsGobAfirmaSignersPadesPdfUtil_addPageToResultWithInt_withInt_withJavaUtilList_(page, totalPages, pagesList);
  }
  else {
    EsGobAfirmaSignersPadesPdfUtil_addRangeToResultWithNSString_withInt_withJavaUtilList_(range, totalPages, pagesList);
  }
}


#line 528
jint EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_(NSString *pageStr, jint totalPages) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 529
  jint page = JavaLangInteger_parseIntWithNSString_(pageStr);
  
#line 531
  if (page < 0) {
    page = page + totalPages + 1;
  }
  
#line 535
  if (page <= 0) {
    page = 1;
  }
  
#line 539
  if (page > totalPages) {
    page = totalPages;
  }
  return page;
}


#line 552
void EsGobAfirmaSignersPadesPdfUtil_addPageToResultWithInt_withInt_withJavaUtilList_(jint page, jint totalPages, id<JavaUtilList> pagesList) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 553
  if (page <= totalPages && ![((id<JavaUtilList>) nil_chk(pagesList)) containsWithId:JavaLangInteger_valueOfWithInt_(page)]) {
    [((id<JavaUtilList>) nil_chk(pagesList)) addWithId:JavaLangInteger_valueOfWithInt_(page)];
  }
}


#line 564
void EsGobAfirmaSignersPadesPdfUtil_addRangeToResultWithNSString_withInt_withJavaUtilList_(NSString *range, jint totalPages, id<JavaUtilList> pagesList) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  jint firstNumber;
  jint limitNumber;
  @try {
    
#line 571
    jint sepIdx = [((NSString *) nil_chk(range)) java_hasPrefix:EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR] ?
#line 572
    [range java_indexOfString:EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR fromIndex:1] : [range java_indexOfString:EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR];
    firstNumber = EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_([range java_substring:0 endIndex:sepIdx], totalPages);
    limitNumber = EsGobAfirmaSignersPadesPdfUtil_normalizePageWithNSString_withInt_([range java_substring:sepIdx + [((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR)) java_length]], totalPages);
  }
  @catch (JavaLangException *e) {
    NSString *cleanedText = [range java_length] > 12 ? JreStrcat("$$", [range java_substring:0 endIndex:12], @"...") : range;
    @throw new_EsGobAfirmaSignersPadesIncorrectPageException_initWithNSString_(JreStrcat("$$", @"La cadena introducida no se corresponde con un rango de paginas: ", cleanedText));
  }
  
#line 581
  if (limitNumber < firstNumber) {
    NSString *cleanedText = [range java_length] > 12 ? JreStrcat("$$", [range java_substring:0 endIndex:12], @"...") : range;
    @throw new_EsGobAfirmaSignersPadesIncorrectPageException_initWithNSString_(JreStrcat("$$", @"Se ha indicado un rango incorrecto: ", cleanedText));
  }
  
#line 586
  for (jint i = firstNumber; i <= limitNumber; i++) {
    EsGobAfirmaSignersPadesPdfUtil_addPageToResultWithInt_withInt_withJavaUtilList_(i, totalPages, pagesList);
  }
}


#line 599
void EsGobAfirmaSignersPadesPdfUtil_correctPositionSignatureWithComAowagieTextPdfPdfReader_withJavaUtilList_withComAowagieTextRectangle_(ComAowagieTextPdfPdfReader *pdfReader, id<JavaUtilList> pagesList, ComAowagieTextRectangle *signaturePosition) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 602
  IOSObjectArray *pages = [((id<JavaUtilList>) nil_chk(pagesList)) toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:JavaLangInteger_class_()]];
  {
    IOSObjectArray *a__ =
#line 603
    pages;
    JavaLangInteger * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangInteger * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangInteger *page = *b__++;
      
#line 605
      ComAowagieTextRectangle *pageSize = [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getPageSizeWithRotationWithInt:[((JavaLangInteger *) nil_chk(page)) intValue]];
      if ([((ComAowagieTextRectangle *) nil_chk(pageSize)) getWidth] <= [((ComAowagieTextRectangle *) nil_chk(signaturePosition)) getLeft] || [pageSize getHeight] <= [signaturePosition getBottom]) {
        [pagesList removeWithId:page];
      }
    }
  }
  if ([pagesList isEmpty]) {
    @throw new_EsGobAfirmaSignersPadesInvalidSignaturePositionException_initWithNSString_(
#line 613
    @"La posicion proporcionada no se encuentra en el rango de ninguna de las paginas a estampar del documento");
  }
  
#line 617
  jint firstPage = [((JavaLangInteger *) nil_chk([pagesList getWithInt:0])) intValue];
  ComAowagieTextRectangle *firstPageSize = [((ComAowagieTextPdfPdfReader *) nil_chk(pdfReader)) getPageSizeWithRotationWithInt:firstPage];
  if ([((ComAowagieTextRectangle *) nil_chk(signaturePosition)) getTop] > [((ComAowagieTextRectangle *) nil_chk(firstPageSize)) getTop]) {
    [signaturePosition setTopWithFloat:[firstPageSize getTop]];
  }
  if ([signaturePosition getRight] > [firstPageSize getRight]) {
    [signaturePosition setRightWithFloat:[firstPageSize getRight]];
  }
}


#line 632
jboolean EsGobAfirmaSignersPadesPdfUtil_checkPagesRangeInputFormatWithNSString_(NSString *rangeInput) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 633
  if (![((NSString *) nil_chk(rangeInput)) java_isEmpty]) {
    
#line 635
    NSString *rangeChars = @"0123456789-,";
    
#line 637
    if ([((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR)) isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:[rangeInput java_length] - 1])] || (
#line 638
    [rangeInput java_length] == 1 && [EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR isEqual:rangeInput])) {
      return false;
    }
    
#line 642
    for (jint i = 0; i < [rangeInput java_length]; i++) {
      
#line 644
      if (![rangeChars java_contains:NSString_java_valueOfChar_([rangeInput charAtWithInt:i])] || (
#line 646
      i + 2 < [rangeInput java_length] &&
#line 647
      [((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR)) isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:i])] &&
#line 648
      [EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:i + 1])] &&
#line 649
      [EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:i + 2])]) || (
#line 651
      i + 1 < [rangeInput java_length] &&
#line 652
      [EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:i])] &&
#line 653
      [EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR isEqual:NSString_java_valueOfChar_([rangeInput charAtWithInt:i + 1])])) {
        return false;
      }
    }
    
#line 658
    IOSObjectArray *rangesArray = [rangeInput java_split:EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR];
    {
      IOSObjectArray *a__ =
#line 659
      rangesArray;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *range = *b__++;
        
#line 661
        if ([((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR)) isEqual:NSString_java_valueOfChar_([((NSString *) nil_chk(range)) charAtWithInt:[range java_length] - 1])] || (
#line 663
        [range java_length] >= 2 &&
#line 664
        [EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR isEqual:NSString_java_valueOfChar_([range charAtWithInt:0])] &&
#line 665
        [EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR isEqual:NSString_java_valueOfChar_([range charAtWithInt:1])]) || (
#line 667
        [range java_length] == 1 && [EsGobAfirmaSignersPadesPdfUtil_RANGE_INDICATOR isEqual:range])) {
          return false;
        }
      }
    }
  }
  else {
    
#line 672
    return false;
  }
  return true;
}


#line 688
id<JavaUtilList> EsGobAfirmaSignersPadesPdfUtil_getPagesWithJavaUtilProperties_withInt_(JavaUtilProperties *extraParams, jint totalPages) {
  EsGobAfirmaSignersPadesPdfUtil_initialize();
  
#line 691
  IOSObjectArray *pagesStr = [((JavaUtilProperties *) nil_chk(extraParams)) containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_PAGES] ?
#line 692
  [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_PAGES])) java_split:EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR] :
#line 693
  [extraParams containsKeyWithId:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_PAGE] ?
#line 694
  [((NSString *) nil_chk([extraParams getPropertyWithNSString:EsGobAfirmaSignersPadesCommonPdfExtraParams_SIGNATURE_PAGE])) java_split:EsGobAfirmaSignersPadesPdfUtil_RANGE_SEPARATOR] : [IOSObjectArray newArrayWithLength:
#line 695
  0 type:NSString_class_()];
  
#line 697
  id<JavaUtilList> pages = new_JavaUtilArrayList_init();
  
#line 700
  if (pagesStr->size_ == 0) {
    [pages addWithId:JavaLangInteger_valueOfWithInt_(totalPages)];
  }
  else
#line 704
  if ([((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_APPEND_PAGE)) java_equalsIgnoreCase:[((NSString *) nil_chk(IOSObjectArray_Get(pagesStr, 0))) java_trim]]) {
    [pages addWithId:JavaLangInteger_valueOfWithInt_(EsGobAfirmaSignersPadesPdfUtil_NEW_PAGE)];
  }
  else if ([((NSString *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_ALL_PAGES)) java_equalsIgnoreCase:[((NSString *) nil_chk(IOSObjectArray_Get(pagesStr, 0))) java_trim]]) {
    for (jint page = 1; page <= totalPages; page++) {
      [pages addWithId:JavaLangInteger_valueOfWithInt_(page)];
    }
  }
  else {
    {
      IOSObjectArray *a__ = pagesStr;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *pageStr = *b__++;
        
#line 715
        @try {
          EsGobAfirmaSignersPadesPdfUtil_getPagesRangeWithNSString_withInt_withJavaUtilList_(pageStr, totalPages, pages);
        }
        @catch (
#line 717
        EsGobAfirmaSignersPadesIncorrectPageException *e) {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaSignersPadesPdfUtil_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"Se ha indicado un numero o rango de paginas invalido. Se ignorara." withJavaLangThrowable:e];
        }
      }
    }
  }
  
#line 724
  JavaUtilCollections_sortWithJavaUtilList_(pages);
  
#line 728
  if ([pages isEmpty]) {
    [pages addWithId:JavaLangInteger_valueOfWithInt_(totalPages)];
  }
  
#line 732
  return pages;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPdfUtil)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/pades/PdfUtil.java"


#line 331
@implementation EsGobAfirmaSignersPadesPdfUtil_SignatureField


#line 347
- (instancetype)initWithInt:(jint)pg
                    withInt:(jint)llx
                    withInt:(jint)lly
                    withInt:(jint)urx
                    withInt:(jint)ury
               withNSString:(NSString *)n {
  EsGobAfirmaSignersPadesPdfUtil_SignatureField_initWithInt_withInt_withInt_withInt_withInt_withNSString_(self, pg, llx, lly, urx, ury, n);
  return self;
}


#line 361
- (NSString *)description {
  
#line 363
  return self->name_;
}


#line 368
- (NSString *)getName {
  return self->name_;
}


#line 374
- (jint)getPage {
  return self->page_;
}


#line 380
- (jint)getSignaturePositionOnPageUpperRightX {
  return self->signaturePositionOnPageUpperRightX_;
}


#line 386
- (jint)getSignaturePositionOnPageUpperRightY {
  return self->signaturePositionOnPageUpperRightY_;
}


#line 392
- (jint)getSignaturePositionOnPageLowerLeftY {
  return self->signaturePositionOnPageLowerLeftY_;
}


#line 398
- (jint)getSignaturePositionOnPageLowerLeftX {
  return self->signaturePositionOnPageLowerLeftX_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withNSString:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(getPage);
  methods[4].selector = @selector(getSignaturePositionOnPageUpperRightX);
  methods[5].selector = @selector(getSignaturePositionOnPageUpperRightY);
  methods[6].selector = @selector(getSignaturePositionOnPageLowerLeftY);
  methods[7].selector = @selector(getSignaturePositionOnPageLowerLeftX);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "signaturePositionOnPageLowerLeftX_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signaturePositionOnPageLowerLeftY_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signaturePositionOnPageUpperRightX_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "signaturePositionOnPageUpperRightY_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "page_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIILNSString;", "toString", "LEsGobAfirmaSignersPadesPdfUtil;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPdfUtil_SignatureField = { "SignatureField", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x19, 8, 6, 2, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPdfUtil_SignatureField;
}

@end


#line 347
void EsGobAfirmaSignersPadesPdfUtil_SignatureField_initWithInt_withInt_withInt_withInt_withInt_withNSString_(EsGobAfirmaSignersPadesPdfUtil_SignatureField *self, jint pg, jint llx, jint lly, jint urx, jint ury, NSString *n) {
  NSObject_init(self);
  
#line 348
  if (n == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 350
    @"El campo de firma debe tener un nombre no nulo");
  }
  
#line 353
  self->signaturePositionOnPageLowerLeftX_ = llx;
  self->signaturePositionOnPageLowerLeftY_ = lly;
  self->signaturePositionOnPageUpperRightX_ = urx;
  self->signaturePositionOnPageUpperRightY_ = ury;
  self->page_ = pg;
  self->name_ = n;
}


#line 347
EsGobAfirmaSignersPadesPdfUtil_SignatureField *new_EsGobAfirmaSignersPadesPdfUtil_SignatureField_initWithInt_withInt_withInt_withInt_withInt_withNSString_(jint pg, jint llx, jint lly, jint urx, jint ury, NSString *n) {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPdfUtil_SignatureField, initWithInt_withInt_withInt_withInt_withInt_withNSString_, pg, llx, lly, urx, ury, n)
}


#line 347
EsGobAfirmaSignersPadesPdfUtil_SignatureField *create_EsGobAfirmaSignersPadesPdfUtil_SignatureField_initWithInt_withInt_withInt_withInt_withInt_withNSString_(jint pg, jint llx, jint lly, jint urx, jint ury, NSString *n) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPdfUtil_SignatureField, initWithInt_withInt_withInt_withInt_withInt_withNSString_, pg, llx, lly, urx, ury, n)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPdfUtil_SignatureField)
