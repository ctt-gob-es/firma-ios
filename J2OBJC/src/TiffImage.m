//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/TiffImage.java
//

#include "CCITTG4Encoder.h"
#include "Element.h"
#include "ExceptionConverter.h"
#include "ICC_Profile.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "Jpeg.h"
#include "PdfArray.h"
#include "PdfDictionary.h"
#include "PdfName.h"
#include "PdfNumber.h"
#include "PdfString.h"
#include "RandomAccessFileOrArray.h"
#include "TIFFConstants.h"
#include "TIFFDirectory.h"
#include "TIFFFaxDecoder.h"
#include "TIFFField.h"
#include "TIFFLZWDecoder.h"
#include "TiffImage.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/zip/DataFormatException.h"
#include "java/util/zip/DeflaterOutputStream.h"
#include "java/util/zip/Inflater.h"

#if !__has_feature(objc_arc)
#error "TiffImage must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfCodecTiffImage ()

+ (jint)getDpiWithComAowagieTextPdfCodecTIFFField:(ComAowagieTextPdfCodecTIFFField *)fd
                                          withInt:(jint)resolutionUnit;

/*!
 @brief Reads a page from a TIFF image.
 @param s the file source
 @param page the page to get. The first page is 1
 @param direct for single strip, CCITT images, generate the image  by direct byte copying. It's faster but may not work
   every time
 @return the <CODE>Image</CODE>
 */
+ (ComAowagieTextImage *)getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)s
                                                                          withInt:(jint)page
                                                                      withBoolean:(jboolean)direct;

+ (ComAowagieTextImage *)getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory:(ComAowagieTextPdfCodecTIFFDirectory *)dir
                                     withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)s;

+ (IOSLongArray *)getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory:(ComAowagieTextPdfCodecTIFFDirectory *)dir
                                                                   withInt:(jint)tag;

+ (void)decodePackbitsWithByteArray:(IOSByteArray *)data
                      withByteArray:(IOSByteArray *)dst;

+ (void)inflateWithByteArray:(IOSByteArray *)deflated
               withByteArray:(IOSByteArray *)inflated;

@end

__attribute__((unused)) static jint ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_(ComAowagieTextPdfCodecTIFFField *fd, jint resolutionUnit);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withBoolean_(ComAowagieTextPdfRandomAccessFileOrArray *s, jint page, jboolean direct);

__attribute__((unused)) static ComAowagieTextImage *ComAowagieTextPdfCodecTiffImage_getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfCodecTIFFDirectory *dir, ComAowagieTextPdfRandomAccessFileOrArray *s);

__attribute__((unused)) static IOSLongArray *ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(ComAowagieTextPdfCodecTIFFDirectory *dir, jint tag);

__attribute__((unused)) static void ComAowagieTextPdfCodecTiffImage_decodePackbitsWithByteArray_withByteArray_(IOSByteArray *data, IOSByteArray *dst);

__attribute__((unused)) static void ComAowagieTextPdfCodecTiffImage_inflateWithByteArray_withByteArray_(IOSByteArray *deflated, IOSByteArray *inflated);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/codec/TiffImage.java"


#line 69
@implementation ComAowagieTextPdfCodecTiffImage

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 69
- (instancetype)init {
  ComAowagieTextPdfCodecTiffImage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 73
+ (jint)getDpiWithComAowagieTextPdfCodecTIFFField:(ComAowagieTextPdfCodecTIFFField *)fd
                                          withInt:(jint)resolutionUnit {
  return ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_(fd, resolutionUnit);
}


#line 97
+ (ComAowagieTextImage *)getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)s
                                                                          withInt:(jint)page {
  return ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(s, page);
}


#line 109
+ (ComAowagieTextImage *)getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)s
                                                                          withInt:(jint)page
                                                                      withBoolean:(jboolean)direct {
  return ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withBoolean_(s, page, direct);
}


#line 290
+ (ComAowagieTextImage *)getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory:(ComAowagieTextPdfCodecTIFFDirectory *)dir
                                     withComAowagieTextPdfRandomAccessFileOrArray:(ComAowagieTextPdfRandomAccessFileOrArray *)s {
  return ComAowagieTextPdfCodecTiffImage_getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory_withComAowagieTextPdfRandomAccessFileOrArray_(dir, s);
}


#line 541
+ (IOSLongArray *)getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory:(ComAowagieTextPdfCodecTIFFDirectory *)dir
                                                                   withInt:(jint)tag {
  return ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(dir, tag);
}


#line 560
+ (void)decodePackbitsWithByteArray:(IOSByteArray *)data
                      withByteArray:(IOSByteArray *)dst {
  ComAowagieTextPdfCodecTiffImage_decodePackbitsWithByteArray_withByteArray_(data, dst);
}


#line 590
+ (void)inflateWithByteArray:(IOSByteArray *)deflated
               withByteArray:(IOSByteArray *)inflated {
  ComAowagieTextPdfCodecTiffImage_inflateWithByteArray_withByteArray_(deflated, inflated);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0xa, 2, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextImage;", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "[J", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDpiWithComAowagieTextPdfCodecTIFFField:withInt:);
  methods[2].selector = @selector(getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray:withInt:);
  methods[3].selector = @selector(getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray:withInt:withBoolean:);
  methods[4].selector = @selector(getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory:withComAowagieTextPdfRandomAccessFileOrArray:);
  methods[5].selector = @selector(getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory:withInt:);
  methods[6].selector = @selector(decodePackbitsWithByteArray:withByteArray:);
  methods[7].selector = @selector(inflateWithByteArray:withByteArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getDpi", "LComAowagieTextPdfCodecTIFFField;I", "getTiffImage", "LComAowagieTextPdfRandomAccessFileOrArray;I", "LComAowagieTextPdfRandomAccessFileOrArray;IZ", "getTiffImageColor", "LComAowagieTextPdfCodecTIFFDirectory;LComAowagieTextPdfRandomAccessFileOrArray;", "getArrayLongShort", "LComAowagieTextPdfCodecTIFFDirectory;I", "decodePackbits", "[B[B", "inflate" };
  static const J2ObjcClassInfo _ComAowagieTextPdfCodecTiffImage = { "TiffImage", "com.aowagie.text.pdf.codec", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfCodecTiffImage;
}

@end


#line 69
void ComAowagieTextPdfCodecTiffImage_init(ComAowagieTextPdfCodecTiffImage *self) {
  NSObject_init(self);
}


#line 69
ComAowagieTextPdfCodecTiffImage *new_ComAowagieTextPdfCodecTiffImage_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfCodecTiffImage, init)
}


#line 69
ComAowagieTextPdfCodecTiffImage *create_ComAowagieTextPdfCodecTiffImage_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfCodecTiffImage, init)
}

jint ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_(ComAowagieTextPdfCodecTIFFField *fd, jint resolutionUnit) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 74
  if (fd == nil) {
    return 0;
  }
  IOSLongArray *res = [fd getAsRationalWithInt:0];
  jfloat frac = (jfloat) IOSLongArray_Get(nil_chk(res), 0) / (jfloat) IOSLongArray_Get(res, 1);
  jint dpi = 0;
  switch (resolutionUnit) {
    case ComAowagieTextPdfCodecTIFFConstants_RESUNIT_INCH:
    case ComAowagieTextPdfCodecTIFFConstants_RESUNIT_NONE:
    dpi = JreFpToInt((frac + 0.5));
    break;
    case ComAowagieTextPdfCodecTIFFConstants_RESUNIT_CENTIMETER:
    dpi = JreFpToInt((frac * 2.54 + 0.5));
    break;
  }
  return dpi;
}


#line 97
ComAowagieTextImage *ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(ComAowagieTextPdfRandomAccessFileOrArray *s, jint page) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 98
  return ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withBoolean_(s, page, false);
}


#line 109
ComAowagieTextImage *ComAowagieTextPdfCodecTiffImage_getTiffImageWithComAowagieTextPdfRandomAccessFileOrArray_withInt_withBoolean_(ComAowagieTextPdfRandomAccessFileOrArray *s, jint page, jboolean direct) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 110
  if (page < 1) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The page number must be >= 1.");
  }
  @try {
    ComAowagieTextPdfCodecTIFFDirectory *dir = new_ComAowagieTextPdfCodecTIFFDirectory_initPackagePrivateWithComAowagieTextPdfRandomAccessFileOrArray_withInt_(s, page - 1);
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_TILEWIDTH]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Tiles are not supported.");
    }
    jint compression = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_COMPRESSION];
    switch (compression) {
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
      break;
      default:
      return ComAowagieTextPdfCodecTiffImage_getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory_withComAowagieTextPdfRandomAccessFileOrArray_(dir, s);
    }
    jfloat rotation = 0;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION]) {
      jint rot = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION];
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_BOTRIGHT || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_BOTLEFT) {
        rotation = (jfloat) JavaLangMath_PI;
      }
      else
#line 133
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_LEFTTOP || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_LEFTBOT) {
        rotation = (jfloat) (JavaLangMath_PI / 2.0);
      }
      else
#line 135
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_RIGHTTOP || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_RIGHTBOT) {
        rotation = -(jfloat) (JavaLangMath_PI / 2.0);
      }
    }
    
#line 140
    ComAowagieTextImage *img = nil;
    jlong tiffT4Options = 0;
    jlong tiffT6Options = 0;
    jint fillOrder = 1;
    jint h = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_IMAGELENGTH];
    jint w = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_IMAGEWIDTH];
    jint dpiX = 0;
    jint dpiY = 0;
    jfloat XYRatio = 0;
    jint resolutionUnit = ComAowagieTextPdfCodecTIFFConstants_RESUNIT_INCH;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT]) {
      resolutionUnit = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT];
    }
    dpiX = ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_([dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_XRESOLUTION], resolutionUnit);
    dpiY = ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_([dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_YRESOLUTION], resolutionUnit);
    if (resolutionUnit == ComAowagieTextPdfCodecTIFFConstants_RESUNIT_NONE) {
      if (dpiY != 0) {
        XYRatio = (jfloat) dpiX / (jfloat) dpiY;
      }
      dpiX = 0;
      dpiY = 0;
    }
    jint rowsStrip = h;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP]) {
      rowsStrip = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP];
    }
    if (rowsStrip <= 0 || rowsStrip > h) {
      rowsStrip = h;
    }
    IOSLongArray *offset = ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(dir, ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_STRIPOFFSETS);
    IOSLongArray *size = ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(dir, ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_STRIPBYTECOUNTS);
    if ((size == nil || (size->size_ == 1 && (IOSLongArray_Get(size, 0) == 0 || IOSLongArray_Get(size, 0) + IOSLongArray_Get(nil_chk(offset), 0) > [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) length]))) && h == rowsStrip) {
      size = [IOSLongArray newArrayWithLongs:(jlong[]){ [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - (jint) IOSLongArray_Get(nil_chk(offset), 0) } count:1];
    }
    jboolean reverse = false;
    ComAowagieTextPdfCodecTIFFField *fillOrderField = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_FILLORDER];
    if (fillOrderField != nil) {
      fillOrder = [fillOrderField getAsIntWithInt:0];
    }
    reverse = (fillOrder == ComAowagieTextPdfCodecTIFFConstants_FILLORDER_LSB2MSB);
    jint params = 0;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC]) {
      jlong photo = [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC];
      if (photo == ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK) {
        params |= ComAowagieTextElement_CCITT_BLACKIS1;
      }
    }
    jint imagecomp = 0;
    {
      
#line 197
      ComAowagieTextPdfCodecTIFFField *t4OptionsField;
      
#line 210
      ComAowagieTextPdfCodecTIFFField *t6OptionsField;
      
#line 188
      switch (compression) {
        case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
        case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
        imagecomp = ComAowagieTextElement_CCITTG3_1D;
        params |= ComAowagieTextElement_CCITT_ENCODEDBYTEALIGN | ComAowagieTextElement_CCITT_ENDOFBLOCK;
        break;
        case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
        imagecomp = ComAowagieTextElement_CCITTG3_1D;
        params |= ComAowagieTextElement_CCITT_ENDOFLINE | ComAowagieTextElement_CCITT_ENDOFBLOCK;
        t4OptionsField = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_GROUP3OPTIONS];
        if (t4OptionsField != nil) {
          tiffT4Options = [t4OptionsField getAsLongWithInt:0];
          if ((tiffT4Options & ComAowagieTextPdfCodecTIFFConstants_GROUP3OPT_2DENCODING) != 0) {
            imagecomp = ComAowagieTextElement_CCITTG3_2D;
          }
          if ((tiffT4Options & ComAowagieTextPdfCodecTIFFConstants_GROUP3OPT_FILLBITS) != 0) {
            params |= ComAowagieTextElement_CCITT_ENCODEDBYTEALIGN;
          }
        }
        break;
        case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
        imagecomp = ComAowagieTextElement_CCITTG4;
        t6OptionsField = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_GROUP4OPTIONS];
        if (t6OptionsField != nil) {
          tiffT6Options = [t6OptionsField getAsLongWithInt:0];
        }
        break;
      }
    }
    
#line 216
    if (direct && rowsStrip == h) {
      IOSByteArray *im = [IOSByteArray newArrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), 0)];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(nil_chk(offset), 0)];
      [s readFullyWithByteArray:im];
      img = ComAowagieTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_(w, h, false, imagecomp, params, im);
      [((ComAowagieTextImage *) nil_chk(img)) setInvertedWithBoolean:true];
    }
    else {
      jint rowsLeft = h;
      ComAowagieTextPdfCodecCCITTG4Encoder *g4 = new_ComAowagieTextPdfCodecCCITTG4Encoder_initWithInt_(w);
      for (jint k = 0; k < ((IOSLongArray *) nil_chk(offset))->size_; ++k) {
        IOSByteArray *im = [IOSByteArray newArrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), k)];
        [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(offset, k)];
        [s readFullyWithByteArray:im];
        jint height = JavaLangMath_minWithInt_withInt_(rowsStrip, rowsLeft);
        ComAowagieTextPdfCodecTIFFFaxDecoder *decoder = new_ComAowagieTextPdfCodecTIFFFaxDecoder_initWithInt_withInt_withInt_(fillOrder, w, height);
        IOSByteArray *outBuf = [IOSByteArray newArrayWithLength:JreIntDiv((w + 7), 8) * height];
        switch (compression) {
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLEW:
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTRLE:
          [decoder decode1DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height];
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX3:
          @try {
            [decoder decode2DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT4Options];
          }
          @catch (JavaLangRuntimeException *e) {
            
#line 245
            tiffT4Options ^= ComAowagieTextPdfCodecTIFFConstants_GROUP3OPT_FILLBITS;
            @try {
              [decoder decode2DWithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT4Options];
            }
            @catch (JavaLangRuntimeException *e2) {
              @throw e;
            }
          }
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_CCITTFAX4:
          [decoder decodeT6WithByteArray:outBuf withByteArray:im withInt:0 withInt:height withLong:tiffT6Options];
          [g4 fax4EncodeWithByteArray:outBuf withInt:height];
          break;
        }
        rowsLeft -= rowsStrip;
      }
      IOSByteArray *g4pic = [g4 close];
      img = ComAowagieTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_(w, h, false, ComAowagieTextElement_CCITTG4, params & ComAowagieTextElement_CCITT_BLACKIS1, g4pic);
    }
    [((ComAowagieTextImage *) nil_chk(img)) setDpiWithInt:dpiX withInt:dpiY];
    [img setXYRatioWithFloat:XYRatio];
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE]) {
      @try {
        ComAowagieTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE];
        HarmonyJavaAwtColorICC_Profile *icc_prof = HarmonyJavaAwtColorICC_Profile_getInstanceWithByteArray_([((ComAowagieTextPdfCodecTIFFField *) nil_chk(fd)) getAsBytes]);
        if ([((HarmonyJavaAwtColorICC_Profile *) nil_chk(icc_prof)) getNumComponents] == 1) {
          [img tagICCWithHarmonyJavaAwtColorICC_Profile:icc_prof];
        }
      }
      @catch (JavaLangRuntimeException *e) {
      }
    }
    
#line 279
    [img setOriginalTypeWithInt:ComAowagieTextImage_ORIGINAL_TIFF];
    if (rotation != 0) {
      [img setInitialRotationWithFloat:rotation];
    }
    return img;
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 290
ComAowagieTextImage *ComAowagieTextPdfCodecTiffImage_getTiffImageColorWithComAowagieTextPdfCodecTIFFDirectory_withComAowagieTextPdfRandomAccessFileOrArray_(ComAowagieTextPdfCodecTIFFDirectory *dir, ComAowagieTextPdfRandomAccessFileOrArray *s) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 291
  @try {
    jint compression = (jint) [((ComAowagieTextPdfCodecTIFFDirectory *) nil_chk(dir)) getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_COMPRESSION];
    jint predictor = 1;
    ComAowagieTextPdfCodecTIFFLZWDecoder *lzwDecoder = nil;
    switch (compression) {
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_NONE:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_LZW:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_PACKBITS:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_DEFLATE:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_ADOBE_DEFLATE:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_OJPEG:
      case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_JPEG:
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The compression ", compression, @" is not supported."));
    }
    jint photometric = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PHOTOMETRIC];
    switch (photometric) {
      case ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISWHITE:
      case ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK:
      case ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_RGB:
      case ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_SEPARATED:
      case ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_PALETTE:
      break;
      default:
      if (compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
        @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"The photometric ", photometric, @" is not supported."));
      }
    }
    jfloat rotation = 0;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION]) {
      jint rot = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ORIENTATION];
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_BOTRIGHT || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_BOTLEFT) {
        rotation = (jfloat) JavaLangMath_PI;
      }
      else
#line 325
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_LEFTTOP || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_LEFTBOT) {
        rotation = (jfloat) (JavaLangMath_PI / 2.0);
      }
      else
#line 327
      if (rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_RIGHTTOP || rot == ComAowagieTextPdfCodecTIFFConstants_ORIENTATION_RIGHTBOT) {
        rotation = -(jfloat) (JavaLangMath_PI / 2.0);
      }
    }
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PLANARCONFIG] &&
#line 332
    [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PLANARCONFIG] == ComAowagieTextPdfCodecTIFFConstants_PLANARCONFIG_SEPARATE) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Planar images are not supported.");
    }
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_EXTRASAMPLES]) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Extra samples are not supported.");
    }
    jint samplePerPixel = 1;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_SAMPLESPERPIXEL]) {
      samplePerPixel = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_SAMPLESPERPIXEL];
    }
    jint bitsPerSample = 1;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_BITSPERSAMPLE]) {
      bitsPerSample = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_BITSPERSAMPLE];
    }
    switch (bitsPerSample) {
      case 1:
      case 2:
      case 4:
      case 8:
      break;
      default:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Bits per sample ", bitsPerSample, @" is not supported."));
    }
    ComAowagieTextImage *img = nil;
    
#line 357
    jint h = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_IMAGELENGTH];
    jint w = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_IMAGEWIDTH];
    jint dpiX = 0;
    jint dpiY = 0;
    jint resolutionUnit = ComAowagieTextPdfCodecTIFFConstants_RESUNIT_INCH;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT]) {
      resolutionUnit = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_RESOLUTIONUNIT];
    }
    dpiX = ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_([dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_XRESOLUTION], resolutionUnit);
    dpiY = ComAowagieTextPdfCodecTiffImage_getDpiWithComAowagieTextPdfCodecTIFFField_withInt_([dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_YRESOLUTION], resolutionUnit);
    jint fillOrder = 1;
    jboolean reverse = false;
    ComAowagieTextPdfCodecTIFFField *fillOrderField = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_FILLORDER];
    if (fillOrderField != nil) {
      fillOrder = [fillOrderField getAsIntWithInt:0];
    }
    reverse = (fillOrder == ComAowagieTextPdfCodecTIFFConstants_FILLORDER_LSB2MSB);
    jint rowsStrip = h;
    if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP]) {
      rowsStrip = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ROWSPERSTRIP];
    }
    if (rowsStrip <= 0 || rowsStrip > h) {
      rowsStrip = h;
    }
    IOSLongArray *offset = ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(dir, ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_STRIPOFFSETS);
    IOSLongArray *size = ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(dir, ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_STRIPBYTECOUNTS);
    if ((size == nil || (size->size_ == 1 && (IOSLongArray_Get(size, 0) == 0 || IOSLongArray_Get(size, 0) + IOSLongArray_Get(nil_chk(offset), 0) > [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) length]))) && h == rowsStrip) {
      size = [IOSLongArray newArrayWithLongs:(jlong[]){ [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - (jint) IOSLongArray_Get(nil_chk(offset), 0) } count:1];
    }
    if (compression == ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_LZW) {
      ComAowagieTextPdfCodecTIFFField *predictorField = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_PREDICTOR];
      if (predictorField != nil) {
        predictor = [predictorField getAsIntWithInt:0];
        if (predictor != 1 && predictor != 2) {
          @throw new_JavaLangRuntimeException_initWithNSString_(@"Illegal value for Predictor in TIFF file.");
        }
        if (predictor == 2 && bitsPerSample != 8) {
          @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("I$", bitsPerSample, @"-bit samples are not supported for Horizontal differencing Predictor."));
        }
      }
      lzwDecoder = new_ComAowagieTextPdfCodecTIFFLZWDecoder_initPackagePrivateWithInt_withInt_withInt_(w, predictor,
#line 398
      samplePerPixel);
    }
    jint rowsLeft = h;
    JavaIoByteArrayOutputStream *stream = nil;
    JavaUtilZipDeflaterOutputStream *zip = nil;
    ComAowagieTextPdfCodecCCITTG4Encoder *g4 = nil;
    if (bitsPerSample == 1 && samplePerPixel == 1) {
      g4 = new_ComAowagieTextPdfCodecCCITTG4Encoder_initWithInt_(w);
    }
    else {
      stream = new_JavaIoByteArrayOutputStream_init();
      if (compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
        zip = new_JavaUtilZipDeflaterOutputStream_initWithJavaIoOutputStream_(stream);
      }
    }
    if (compression == ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_OJPEG) {
      
#line 418
      if (![dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFOFFSET]) {
        @throw new_JavaIoIOException_initWithNSString_(@"Missing tag(s) for OJPEG compression.");
      }
      jint jpegOffset = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFOFFSET];
      jint jpegLength = [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) length] - jpegOffset;
      
#line 424
      if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFBYTECOUNT]) {
        jpegLength = (jint) [dir getFieldAsLongWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_JPEGIFBYTECOUNT] +
#line 426
        (jint) IOSLongArray_Get(nil_chk(size), 0);
      }
      
#line 429
      IOSByteArray *jpeg = [IOSByteArray newArrayWithLength:JavaLangMath_minWithInt_withInt_(jpegLength, [s length] - jpegOffset)];
      
#line 431
      jint posFilePointer = [s getFilePointer];
      posFilePointer += jpegOffset;
      [s seekWithInt:posFilePointer];
      [s readFullyWithByteArray:jpeg];
      img = new_ComAowagieTextJpeg_initWithByteArray_(jpeg);
    }
    else if (compression == ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
      if (((IOSLongArray *) nil_chk(size))->size_ > 1) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I$", @"Compression JPEG is only supported with a single strip. This image has ", size->size_, @" strips."));
      }
      IOSByteArray *jpeg = [IOSByteArray newArrayWithLength:(jint) IOSLongArray_Get(size, 0)];
      [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(nil_chk(offset), 0)];
      [s readFullyWithByteArray:jpeg];
      img = new_ComAowagieTextJpeg_initWithByteArray_(jpeg);
    }
    else {
      for (jint k = 0; k < ((IOSLongArray *) nil_chk(offset))->size_; ++k) {
        IOSByteArray *im = [IOSByteArray newArrayWithLength:(jint) IOSLongArray_Get(nil_chk(size), k)];
        [((ComAowagieTextPdfRandomAccessFileOrArray *) nil_chk(s)) seekWithLong:IOSLongArray_Get(offset, k)];
        [s readFullyWithByteArray:im];
        jint height = JavaLangMath_minWithInt_withInt_(rowsStrip, rowsLeft);
        IOSByteArray *outBuf = nil;
        if (compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_NONE) {
          outBuf = [IOSByteArray newArrayWithLength:JreIntDiv((w * bitsPerSample * samplePerPixel + 7), 8) * height];
        }
        if (reverse) {
          ComAowagieTextPdfCodecTIFFFaxDecoder_reverseBitsWithByteArray_(im);
        }
        switch (compression) {
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_DEFLATE:
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_ADOBE_DEFLATE:
          ComAowagieTextPdfCodecTiffImage_inflateWithByteArray_withByteArray_(im, outBuf);
          break;
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_NONE:
          outBuf = im;
          break;
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_PACKBITS:
          ComAowagieTextPdfCodecTiffImage_decodePackbitsWithByteArray_withByteArray_(im, outBuf);
          break;
          case ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_LZW:
          (void) [((ComAowagieTextPdfCodecTIFFLZWDecoder *) nil_chk(lzwDecoder)) decodeWithByteArray:im withByteArray:outBuf withInt:height];
          break;
        }
        if (bitsPerSample == 1 && samplePerPixel == 1) {
          [((ComAowagieTextPdfCodecCCITTG4Encoder *) nil_chk(g4)) fax4EncodeWithByteArray:outBuf withInt:height];
        }
        else {
          [((JavaUtilZipDeflaterOutputStream *) nil_chk(zip)) writeWithByteArray:outBuf];
        }
        rowsLeft -= rowsStrip;
      }
      if (bitsPerSample == 1 && samplePerPixel == 1) {
        img = ComAowagieTextImage_getInstanceWithInt_withInt_withBoolean_withInt_withInt_withByteArray_(w, h, false, ComAowagieTextElement_CCITTG4,
#line 484
        photometric == ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISBLACK ? ComAowagieTextElement_CCITT_BLACKIS1 : 0, [((ComAowagieTextPdfCodecCCITTG4Encoder *) nil_chk(g4)) close]);
      }
      else {
        [((JavaUtilZipDeflaterOutputStream *) nil_chk(zip)) close];
        img = ComAowagieTextImage_getInstanceWithInt_withInt_withInt_withInt_withByteArray_(w, h, samplePerPixel, bitsPerSample, [((JavaIoByteArrayOutputStream *) nil_chk(stream)) toByteArray]);
        [((ComAowagieTextImage *) nil_chk(img)) setDeflatedWithBoolean:true];
      }
    }
    [((ComAowagieTextImage *) nil_chk(img)) setDpiWithInt:dpiX withInt:dpiY];
    if (compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_OJPEG && compression != ComAowagieTextPdfCodecTIFFConstants_COMPRESSION_JPEG) {
      if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE]) {
        @try {
          ComAowagieTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_ICCPROFILE];
          HarmonyJavaAwtColorICC_Profile *icc_prof = HarmonyJavaAwtColorICC_Profile_getInstanceWithByteArray_([((ComAowagieTextPdfCodecTIFFField *) nil_chk(fd)) getAsBytes]);
          if (samplePerPixel == [((HarmonyJavaAwtColorICC_Profile *) nil_chk(icc_prof)) getNumComponents]) {
            [img tagICCWithHarmonyJavaAwtColorICC_Profile:icc_prof];
          }
        }
        @catch (JavaLangRuntimeException *e) {
        }
      }
      
#line 506
      if ([dir isTagPresentWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_COLORMAP]) {
        ComAowagieTextPdfCodecTIFFField *fd = [dir getFieldWithInt:ComAowagieTextPdfCodecTIFFConstants_TIFFTAG_COLORMAP];
        IOSCharArray *rgb = [((ComAowagieTextPdfCodecTIFFField *) nil_chk(fd)) getAsChars];
        IOSByteArray *palette = [IOSByteArray newArrayWithLength:((IOSCharArray *) nil_chk(rgb))->size_];
        jint gColor = JreIntDiv(rgb->size_, 3);
        jint bColor = gColor * 2;
        for (jint k = 0; k < gColor; ++k) {
          *IOSByteArray_GetRef(palette, k * 3) = (jbyte) (JreURShift32(IOSCharArray_Get(rgb, k), 8));
          *IOSByteArray_GetRef(palette, k * 3 + 1) = (jbyte) (JreURShift32(IOSCharArray_Get(rgb, k + gColor), 8));
          *IOSByteArray_GetRef(palette, k * 3 + 2) = (jbyte) (JreURShift32(IOSCharArray_Get(rgb, k + bColor), 8));
        }
        ComAowagieTextPdfPdfArray *indexed = new_ComAowagieTextPdfPdfArray_init();
        [indexed addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, INDEXED)];
        [indexed addWithComAowagieTextPdfPdfObject:JreLoadStatic(ComAowagieTextPdfPdfName, DEVICERGB)];
        [indexed addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfNumber_initWithInt_(gColor - 1)];
        [indexed addWithComAowagieTextPdfPdfObject:new_ComAowagieTextPdfPdfString_initWithByteArray_(palette)];
        ComAowagieTextPdfPdfDictionary *additional = new_ComAowagieTextPdfPdfDictionary_init();
        [additional putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withComAowagieTextPdfPdfObject:indexed];
        [img setAdditionalWithComAowagieTextPdfPdfDictionary:additional];
      }
      [img setOriginalTypeWithInt:ComAowagieTextImage_ORIGINAL_TIFF];
    }
    if (photometric == ComAowagieTextPdfCodecTIFFConstants_PHOTOMETRIC_MINISWHITE) {
      [img setInvertedWithBoolean:true];
    }
    if (rotation != 0) {
      [img setInitialRotationWithFloat:rotation];
    }
    return img;
  }
  @catch (JavaLangException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
}


#line 541
IOSLongArray *ComAowagieTextPdfCodecTiffImage_getArrayLongShortWithComAowagieTextPdfCodecTIFFDirectory_withInt_(ComAowagieTextPdfCodecTIFFDirectory *dir, jint tag) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 542
  ComAowagieTextPdfCodecTIFFField *field = [((ComAowagieTextPdfCodecTIFFDirectory *) nil_chk(dir)) getFieldWithInt:tag];
  if (field == nil) {
    return nil;
  }
  IOSLongArray *offset;
  if ([field getType] == ComAowagieTextPdfCodecTIFFField_TIFF_LONG) {
    offset = [field getAsLongs];
  }
  else {
    
#line 550
    IOSCharArray *temp = [field getAsChars];
    offset = [IOSLongArray newArrayWithLength:((IOSCharArray *) nil_chk(temp))->size_];
    for (jint k = 0; k < temp->size_; ++k) {
      *IOSLongArray_GetRef(offset, k) = IOSCharArray_Get(temp, k);
    }
  }
  return offset;
}


#line 560
void ComAowagieTextPdfCodecTiffImage_decodePackbitsWithByteArray_withByteArray_(IOSByteArray *data, IOSByteArray *dst) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 561
  jint srcCount = 0;
  
#line 561
  jint dstCount = 0;
  jbyte repeat;
  
#line 562
  jbyte b;
  
#line 564
  @try {
    while (dstCount < ((IOSByteArray *) nil_chk(dst))->size_) {
      b = IOSByteArray_Get(nil_chk(data), srcCount++);
      if (b >= 0 && b <= 127) {
        
#line 569
        for (jint i = 0; i < b + 1; i++) {
          *IOSByteArray_GetRef(dst, dstCount++) = IOSByteArray_Get(data, srcCount++);
        }
      }
      else if (b <= -1 && b >= -127) {
        
#line 575
        repeat = IOSByteArray_Get(data, srcCount++);
        for (jint i = 0; i < -b + 1; i++) {
          *IOSByteArray_GetRef(dst, dstCount++) = repeat;
        }
      }
      else {
        srcCount++;
      }
    }
  }
  @catch (JavaLangException *e) {
  }
}


#line 590
void ComAowagieTextPdfCodecTiffImage_inflateWithByteArray_withByteArray_(IOSByteArray *deflated, IOSByteArray *inflated) {
  ComAowagieTextPdfCodecTiffImage_initialize();
  
#line 591
  JavaUtilZipInflater *inflater = new_JavaUtilZipInflater_init();
  [inflater setInputWithByteArray:deflated];
  @try {
    [inflater inflateWithByteArray:inflated];
  }
  @catch (JavaUtilZipDataFormatException *dfe) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(dfe);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfCodecTiffImage)
