//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PushbuttonField.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PushbuttonField")
#ifdef RESTRICT_PushbuttonField
#define INCLUDE_ALL_PushbuttonField 0
#else
#define INCLUDE_ALL_PushbuttonField 1
#endif
#undef RESTRICT_PushbuttonField

#if !defined (ComAowagieTextPdfPushbuttonField_) && (INCLUDE_ALL_PushbuttonField || defined(INCLUDE_ComAowagieTextPdfPushbuttonField))
#define ComAowagieTextPdfPushbuttonField_

#define RESTRICT_BaseField 1
#define INCLUDE_ComAowagieTextPdfBaseField 1
#include "BaseField.h"

@class ComAowagieTextImage;
@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPdfAppearance;
@class ComAowagieTextPdfPdfFormField;
@class ComAowagieTextPdfPdfTemplate;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextRectangle;

/*!
 @brief Creates a pushbutton field.It supports all the text and icon alignments.
 The icon may be an image or a template. 
 <br>
  Example usage: 
 <br>
  @code

  Document document = new Document(PageSize.A4, 50, 50, 50, 50);
  PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("output.pdf"));
  document.open();
  PdfContentByte cb = writer.getDirectContent();
  Image img = Image.getInstance("image.png");
  PushbuttonField bt = new PushbuttonField(writer, new Rectangle(100, 100, 200, 200), "Button1");
  bt.setText("My Caption");
  bt.setFontSize(0);
  bt.setImage(img);
  bt.setLayout(PushbuttonField.LAYOUT_ICON_TOP_LABEL_BOTTOM);
  bt.setBackgroundColor(Color.cyan);
  bt.setBorderStyle(PdfBorderDictionary.STYLE_SOLID);
  bt.setBorderColor(Color.red);
  bt.setBorderWidth(3);
  PdfFormField ff = bt.getField();
  PdfAction ac = PdfAction.createSubmitForm("http://www.submit-site.com", null, 0);
  ff.setAction(ac);
  writer.addAnnotation(ff);
  document.close(); 
  
@endcode
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfPushbuttonField : ComAowagieTextPdfBaseField

#pragma mark Public

/*!
 @brief Gets the button appearance.
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return the button appearance
 */
- (ComAowagieTextPdfPdfAppearance *)getAppearance;

/*!
 @brief Gets the pushbutton field.
 @throw IOExceptionon error
 @throw DocumentExceptionon error
 @return the pushbutton field
 */
- (ComAowagieTextPdfPdfFormField *)getField;

/*!
 @brief Getter for property iconHorizontalAdjustment.
 @return Value of property iconHorizontalAdjustment.
 */
- (jfloat)getIconHorizontalAdjustment;

/*!
 @brief Gets the reference to an existing icon.
 @return the reference to an existing icon.
 */
- (ComAowagieTextPdfPRIndirectReference *)getIconReference;

/*!
 @brief Getter for property iconVerticalAdjustment.
 @return Value of property iconVerticalAdjustment.
 */
- (jfloat)getIconVerticalAdjustment;

/*!
 @brief Getter for property image.
 @return Value of property image.
 */
- (ComAowagieTextImage *)getImage;

/*!
 @brief Getter for property layout.
 @return Value of property layout.
 */
- (jint)getLayout;

/*!
 @brief Getter for property scaleIcon.
 @return Value of property scaleIcon.
 */
- (jint)getScaleIcon;

/*!
 @brief Getter for property template.
 @return Value of property template.
 */
- (ComAowagieTextPdfPdfTemplate *)getTemplate;

/*!
 @brief Getter for property iconFitToBounds.
 @return Value of property iconFitToBounds.
 */
- (jboolean)isIconFitToBounds;

/*!
 @brief Getter for property proportionalIcon.
 @return Value of property proportionalIcon.
 */
- (jboolean)isProportionalIcon;

/*!
 @brief If <CODE>true</CODE> the icon will be scaled to fit fully within the bounds of the annotation,
  if <CODE>false</CODE> the border width will be taken into account.The default
  is <CODE>false</CODE>.
 @param iconFitToBounds if  <CODE> true </CODE>  the icon will be scaled to fit fully within the bounds of the annotation,
   if  <CODE> false </CODE>  the border width will be taken into account
 */
- (void)setIconFitToBoundsWithBoolean:(jboolean)iconFitToBounds;

/*!
 @brief A number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon.
 A value of 0 positions the icon at the left of the annotation rectangle.
  A value of 0.5 centers it within the rectangle. The default is 0.5.
 @param iconHorizontalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the left of the icon
 */
- (void)setIconHorizontalAdjustmentWithFloat:(jfloat)iconHorizontalAdjustment;

/*!
 @brief Sets the reference to an existing icon.
 @param iconReference the reference to an existing icon
 */
- (void)setIconReferenceWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)iconReference;

/*!
 @brief A number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon.
 A value of 0 positions the icon at the bottom of the annotation rectangle.
  A value of 0.5 centers it within the rectangle. The default is 0.5.
 @param iconVerticalAdjustment a number between 0 and 1 indicating the fraction of leftover space to allocate at the bottom of the icon
 */
- (void)setIconVerticalAdjustmentWithFloat:(jfloat)iconVerticalAdjustment;

/*!
 @brief Sets the icon as an image.
 @param image the image
 */
- (void)setImageWithComAowagieTextImage:(ComAowagieTextImage *)image;

/*!
 @brief Sets the icon and label layout.Possible values are <CODE>LAYOUT_LABEL_ONLY</CODE>,
  <CODE>LAYOUT_ICON_ONLY</CODE>, <CODE>LAYOUT_ICON_TOP_LABEL_BOTTOM</CODE>,
  <CODE>LAYOUT_LABEL_TOP_ICON_BOTTOM</CODE>, <CODE>LAYOUT_ICON_LEFT_LABEL_RIGHT</CODE>,
  <CODE>LAYOUT_LABEL_LEFT_ICON_RIGHT</CODE> and <CODE>LAYOUT_LABEL_OVER_ICON</CODE>.
 The default is <CODE>LAYOUT_LABEL_ONLY</CODE>.
 @param layout New value of property layout.
 */
- (void)setLayoutWithInt:(jint)layout;

/*!
 @brief Sets the way the icon is scaled.If <CODE>true</CODE> the icon is scaled proportionally,
  if <CODE>false</CODE> the scaling is done anamorphicaly.
 @param proportionalIcon the way the icon is scaled
 */
- (void)setProportionalIconWithBoolean:(jboolean)proportionalIcon;

/*!
 @brief Sets the way the icon will be scaled.Possible values are 
 <CODE>SCALE_ICON_ALWAYS</CODE>, <CODE>SCALE_ICON_NEVER</CODE>,
  <CODE>SCALE_ICON_IS_TOO_BIG</CODE> and <CODE>SCALE_ICON_IS_TOO_SMALL</CODE>.
 The default is <CODE>SCALE_ICON_ALWAYS</CODE>.
 @param scaleIcon the way the icon will be scaled
 */
- (void)setScaleIconWithInt:(jint)scaleIcon;

/*!
 @brief Sets the icon as a template.
 @param template_ the template
 */
- (void)setTemplateWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_;

#pragma mark Package-Private

/*!
 @brief Creates a new instance of PushbuttonField
 @param writer the document  <CODE> PdfWriter </CODE>
 @param box the field location and dimensions
 @param fieldName the field name. If  <CODE> null </CODE>  only the widget keys
   will be included in the field allowing it to be used as a kid field.
 */
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                                     withComAowagieTextRectangle:(ComAowagieTextRectangle *)box
                                                    withNSString:(NSString *)fieldName;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPushbuttonField)

/*!
 @brief An icon scaling option
 */
inline jint ComAowagieTextPdfPushbuttonField_get_SCALE_ICON_ALWAYS(void);
#define ComAowagieTextPdfPushbuttonField_SCALE_ICON_ALWAYS 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPushbuttonField, SCALE_ICON_ALWAYS, jint)

/*!
 @brief An icon scaling option
 */
inline jint ComAowagieTextPdfPushbuttonField_get_SCALE_ICON_NEVER(void);
#define ComAowagieTextPdfPushbuttonField_SCALE_ICON_NEVER 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPushbuttonField, SCALE_ICON_NEVER, jint)

/*!
 @brief An icon scaling option
 */
inline jint ComAowagieTextPdfPushbuttonField_get_SCALE_ICON_IS_TOO_BIG(void);
#define ComAowagieTextPdfPushbuttonField_SCALE_ICON_IS_TOO_BIG 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPushbuttonField, SCALE_ICON_IS_TOO_BIG, jint)

/*!
 @brief An icon scaling option
 */
inline jint ComAowagieTextPdfPushbuttonField_get_SCALE_ICON_IS_TOO_SMALL(void);
#define ComAowagieTextPdfPushbuttonField_SCALE_ICON_IS_TOO_SMALL 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPushbuttonField, SCALE_ICON_IS_TOO_SMALL, jint)

FOUNDATION_EXPORT void ComAowagieTextPdfPushbuttonField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPushbuttonField *self, ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName);

FOUNDATION_EXPORT ComAowagieTextPdfPushbuttonField *new_ComAowagieTextPdfPushbuttonField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfPushbuttonField *create_ComAowagieTextPdfPushbuttonField_initPackagePrivateWithComAowagieTextPdfPdfWriter_withComAowagieTextRectangle_withNSString_(ComAowagieTextPdfPdfWriter *writer, ComAowagieTextRectangle *box, NSString *fieldName);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPushbuttonField)

#endif

#pragma pop_macro("INCLUDE_ALL_PushbuttonField")
