//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/ByteBuffer.java
//

#include "ByteBuffer.h"
#include "DocWriter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfEncodings.h"
#include "java/io/OutputStream.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/Locale.h"

#if !__has_feature(objc_arc)
#error "ByteBuffer must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfByteBuffer () {
 @public
  /*!
   @brief The count of bytes in the buffer.
   */
  jint count_;
  /*!
   @brief The buffer where the bytes are stored.
   */
  IOSByteArray *buf_;
}

/*!
 @brief Converts an double (multiplied by 100 and cast to an int) into an array of bytes.
 @param i the int
 @return a byte array
 */
+ (IOSByteArray *)convertToBytesWithInt:(jint)i;

/*!
 @brief Appends a string representation of a <CODE>double</CODE> according
  to the Pdf conventions.
 @param d the  <CODE> double </CODE>  to be appended
 @return a reference to this <CODE>ByteBuffer</CODE> object
 */
- (ComAowagieTextPdfByteBuffer *)appendWithDouble:(jdouble)d;

/*!
 @brief Outputs a <CODE>double</CODE> into a format suitable for the PDF.
 @param d a double
 @param buf a ByteBuffer
 @return the <CODE>String</CODE> representation of the <CODE>double</CODE> if 
 <CODE>buf</CODE> is <CODE>null</CODE>. If <CODE>buf</CODE> is <B>not</B> <CODE>null</CODE>,
  then the double is appended directly to the buffer and this methods returns <CODE>null</CODE>.
 */
+ (NSString *)formatDoubleWithDouble:(jdouble)d
     withComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)buf;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfByteBuffer, buf_, IOSByteArray *)

inline jint ComAowagieTextPdfByteBuffer_get_byteCacheSize(void);
inline jint ComAowagieTextPdfByteBuffer_set_byteCacheSize(jint value);
inline jint *ComAowagieTextPdfByteBuffer_getRef_byteCacheSize(void);
static jint ComAowagieTextPdfByteBuffer_byteCacheSize = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComAowagieTextPdfByteBuffer, byteCacheSize, jint)

inline IOSObjectArray *ComAowagieTextPdfByteBuffer_get_byteCache(void);
inline IOSObjectArray *ComAowagieTextPdfByteBuffer_set_byteCache(IOSObjectArray *value);
static IOSObjectArray *ComAowagieTextPdfByteBuffer_byteCache;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfByteBuffer, byteCache, IOSObjectArray *)

inline jbyte ComAowagieTextPdfByteBuffer_get_ZERO(void);
#define ComAowagieTextPdfByteBuffer_ZERO 48
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfByteBuffer, ZERO, jbyte)

inline IOSCharArray *ComAowagieTextPdfByteBuffer_get_chars(void);
static IOSCharArray *ComAowagieTextPdfByteBuffer_chars;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfByteBuffer, chars, IOSCharArray *)

inline IOSByteArray *ComAowagieTextPdfByteBuffer_get_bytes(void);
static IOSByteArray *ComAowagieTextPdfByteBuffer_bytes;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfByteBuffer, bytes, IOSByteArray *)

/*!
 @brief If <CODE>true</CODE> always output floating point numbers with 6 decimal digits.
 If <CODE>false</CODE> uses the faster, although less precise, representation.
 */
inline jboolean ComAowagieTextPdfByteBuffer_get_HIGH_PRECISION(void);
inline jboolean ComAowagieTextPdfByteBuffer_set_HIGH_PRECISION(jboolean value);
inline jboolean *ComAowagieTextPdfByteBuffer_getRef_HIGH_PRECISION(void);
static jboolean ComAowagieTextPdfByteBuffer_HIGH_PRECISION = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ComAowagieTextPdfByteBuffer, HIGH_PRECISION, jboolean)

inline JavaTextDecimalFormatSymbols *ComAowagieTextPdfByteBuffer_get_dfs(void);
static JavaTextDecimalFormatSymbols *ComAowagieTextPdfByteBuffer_dfs;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfByteBuffer, dfs, JavaTextDecimalFormatSymbols *)

__attribute__((unused)) static IOSByteArray *ComAowagieTextPdfByteBuffer_convertToBytesWithInt_(jint i);

__attribute__((unused)) static ComAowagieTextPdfByteBuffer *ComAowagieTextPdfByteBuffer_appendWithDouble_(ComAowagieTextPdfByteBuffer *self, jdouble d);

__attribute__((unused)) static NSString *ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_withComAowagieTextPdfByteBuffer_(jdouble d, ComAowagieTextPdfByteBuffer *buf);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/ByteBuffer.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfByteBuffer)


#line 65
@implementation ComAowagieTextPdfByteBuffer

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 86
- (instancetype)init {
  ComAowagieTextPdfByteBuffer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 94
- (instancetype)initWithInt:(jint)size {
  ComAowagieTextPdfByteBuffer_initWithInt_(self, size);
  return self;
}


#line 112
+ (IOSByteArray *)convertToBytesWithInt:(jint)i {
  return ComAowagieTextPdfByteBuffer_convertToBytesWithInt_(i);
}


#line 153
- (ComAowagieTextPdfByteBuffer *)append_iWithInt:(jint)b {
  jint newcount = self->count_ + 1;
  if (newcount > ((IOSByteArray *) nil_chk(self->buf_))->size_) {
    IOSByteArray *newbuf = [IOSByteArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(JreLShift32(self->buf_->size_, 1), newcount)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, 0, newbuf, 0, self->count_);
    self->buf_ = newbuf;
  }
  *IOSByteArray_GetRef(self->buf_, self->count_) = (jbyte) b;
  self->count_ = newcount;
  return self;
}


#line 173
- (ComAowagieTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b
                                             withInt:(jint)off
                                             withInt:(jint)len {
  
#line 174
  if (off < 0 || off > ((IOSByteArray *) nil_chk(b))->size_ || len < 0 ||
#line 175
  off + len > b->size_ || off + len < 0 || len == 0) {
    return self;
  }
  jint newcount = self->count_ + len;
  if (newcount > ((IOSByteArray *) nil_chk(self->buf_))->size_) {
    IOSByteArray *newbuf = [IOSByteArray newArrayWithLength:JavaLangMath_maxWithInt_withInt_(JreLShift32(self->buf_->size_, 1), newcount)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, 0, newbuf, 0, self->count_);
    self->buf_ = newbuf;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, off, self->buf_, self->count_, len);
  self->count_ = newcount;
  return self;
}

- (ComAowagieTextPdfByteBuffer *)appendWithByteArray:(IOSByteArray *)b {
  return [self appendWithByteArray:b withInt:0 withInt:((IOSByteArray *) nil_chk(b))->size_];
}


#line 204
- (ComAowagieTextPdfByteBuffer *)appendWithNSString:(NSString *)str {
  if (str != nil) {
    return [self appendWithByteArray:ComAowagieTextDocWriter_getISOBytesWithNSString_(str)];
  }
  return self;
}


#line 217
- (ComAowagieTextPdfByteBuffer *)appendWithChar:(jchar)c {
  return [self append_iWithInt:c];
}


#line 226
- (ComAowagieTextPdfByteBuffer *)appendWithComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)buf {
  return [self appendWithByteArray:((ComAowagieTextPdfByteBuffer *) nil_chk(buf))->buf_ withInt:0 withInt:buf->count_];
}


#line 235
- (ComAowagieTextPdfByteBuffer *)appendWithInt:(jint)i {
  return ComAowagieTextPdfByteBuffer_appendWithDouble_(self, (jdouble) i);
}

- (ComAowagieTextPdfByteBuffer *)appendWithByte:(jbyte)b {
  return [self append_iWithInt:b];
}

- (ComAowagieTextPdfByteBuffer *)appendHexWithByte:(jbyte)b {
  (void) [self appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), (JreRShift32(b, 4)) & (jint) 0x0f)];
  return [self appendWithByte:IOSByteArray_Get(ComAowagieTextPdfByteBuffer_bytes, b & (jint) 0x0f)];
}


#line 254
- (ComAowagieTextPdfByteBuffer *)appendWithFloat:(jfloat)i {
  return ComAowagieTextPdfByteBuffer_appendWithDouble_(self, (jdouble) i);
}


#line 264
- (ComAowagieTextPdfByteBuffer *)appendWithDouble:(jdouble)d {
  return ComAowagieTextPdfByteBuffer_appendWithDouble_(self, d);
}


#line 274
+ (NSString *)formatDoubleWithDouble:(jdouble)d {
  return ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_(d);
}


#line 286
+ (NSString *)formatDoubleWithDouble:(jdouble)d
     withComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)buf {
  return ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_withComAowagieTextPdfByteBuffer_(d, buf);
}


#line 523
- (void)reset {
  self->count_ = 0;
}


#line 534
- (IOSByteArray *)toByteArray {
  IOSByteArray *newbuf = [IOSByteArray newArrayWithLength:self->count_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->buf_, 0, newbuf, 0, self->count_);
  return newbuf;
}


#line 545
- (jint)size {
  return self->count_;
}

- (void)setSizeWithInt:(jint)size {
  if (size > self->count_ || size < 0) {
    @throw new_JavaLangIndexOutOfBoundsException_initWithNSString_(@"The new size must be positive and <= of the current size");
  }
  self->count_ = size;
}


#line 562
- (NSString *)description {
  
#line 564
  return [NSString java_stringWithBytes:self->buf_ offset:0 length:self->count_];
}


#line 577
- (void)writeToWithJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:self->buf_ withInt:0 withInt:self->count_];
}

- (void)writeWithInt:(jint)b {
  
#line 583
  (void) [self appendWithByte:(jbyte) b];
}


#line 586
- (void)writeWithByteArray:(IOSByteArray *)b
                   withInt:(jint)off
                   withInt:(jint)len {
  
#line 588
  (void) [self appendWithByteArray:b withInt:off withInt:len];
}


#line 591
- (IOSByteArray *)getBuffer {
  return self->buf_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 1, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 5, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 6, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 7, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 8, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x1, 3, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 10, 9, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x0, 3, 11, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x2, 3, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 0, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(convertToBytesWithInt:);
  methods[3].selector = @selector(append_iWithInt:);
  methods[4].selector = @selector(appendWithByteArray:withInt:withInt:);
  methods[5].selector = @selector(appendWithByteArray:);
  methods[6].selector = @selector(appendWithNSString:);
  methods[7].selector = @selector(appendWithChar:);
  methods[8].selector = @selector(appendWithComAowagieTextPdfByteBuffer:);
  methods[9].selector = @selector(appendWithInt:);
  methods[10].selector = @selector(appendWithByte:);
  methods[11].selector = @selector(appendHexWithByte:);
  methods[12].selector = @selector(appendWithFloat:);
  methods[13].selector = @selector(appendWithDouble:);
  methods[14].selector = @selector(formatDoubleWithDouble:);
  methods[15].selector = @selector(formatDoubleWithDouble:withComAowagieTextPdfByteBuffer:);
  methods[16].selector = @selector(reset);
  methods[17].selector = @selector(toByteArray);
  methods[18].selector = @selector(size);
  methods[19].selector = @selector(setSizeWithInt:);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(writeToWithJavaIoOutputStream:);
  methods[22].selector = @selector(writeWithInt:);
  methods[23].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[24].selector = @selector(getBuffer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "buf_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "byteCacheSize", "I", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "byteCache", "[[B", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "ZERO", "B", .constantValue.asChar = ComAowagieTextPdfByteBuffer_ZERO, 0x1a, -1, -1, -1, -1 },
    { "chars", "[C", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "bytes", "[B", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "HIGH_PRECISION", "Z", .constantValue.asLong = 0, 0xa, -1, 25, -1, -1 },
    { "dfs", "LJavaTextDecimalFormatSymbols;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "convertToBytes", "append_i", "append", "[BII", "[B", "LNSString;", "C", "LComAowagieTextPdfByteBuffer;", "B", "appendHex", "F", "D", "formatDouble", "DLComAowagieTextPdfByteBuffer;", "setSize", "toString", "writeTo", "LJavaIoOutputStream;", "LJavaIoIOException;", "write", &ComAowagieTextPdfByteBuffer_byteCacheSize, &ComAowagieTextPdfByteBuffer_byteCache, &ComAowagieTextPdfByteBuffer_chars, &ComAowagieTextPdfByteBuffer_bytes, &ComAowagieTextPdfByteBuffer_HIGH_PRECISION, &ComAowagieTextPdfByteBuffer_dfs };
  static const J2ObjcClassInfo _ComAowagieTextPdfByteBuffer = { "ByteBuffer", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 25, 9, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfByteBuffer;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfByteBuffer class]) {
    ComAowagieTextPdfByteBuffer_byteCache = [IOSObjectArray newArrayWithLength:
#line 74
    ComAowagieTextPdfByteBuffer_byteCacheSize type:IOSClass_byteArray(1)];
    ComAowagieTextPdfByteBuffer_chars = [IOSCharArray newArrayWithChars:(jchar[]){
#line 76
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' } count:10];
      ComAowagieTextPdfByteBuffer_bytes = [IOSByteArray newArrayWithBytes:(jbyte[]){
#line 77
        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102 } count:16];
        ComAowagieTextPdfByteBuffer_dfs = new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(JreLoadStatic(JavaUtilLocale, US));
        J2OBJC_SET_INITIALIZED(ComAowagieTextPdfByteBuffer)
      }
    }

@end


#line 86
void ComAowagieTextPdfByteBuffer_init(ComAowagieTextPdfByteBuffer *self) {
  ComAowagieTextPdfByteBuffer_initWithInt_(self, 128);
}


#line 86
ComAowagieTextPdfByteBuffer *new_ComAowagieTextPdfByteBuffer_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfByteBuffer, init)
}


#line 86
ComAowagieTextPdfByteBuffer *create_ComAowagieTextPdfByteBuffer_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfByteBuffer, init)
}


#line 94
void ComAowagieTextPdfByteBuffer_initWithInt_(ComAowagieTextPdfByteBuffer *self, jint size) {
  JavaIoOutputStream_init(self);
  
#line 95
  if (size < 1) {
    size = 128;
  }
  self->buf_ = [IOSByteArray newArrayWithLength:size];
}


#line 94
ComAowagieTextPdfByteBuffer *new_ComAowagieTextPdfByteBuffer_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfByteBuffer, initWithInt_, size)
}


#line 94
ComAowagieTextPdfByteBuffer *create_ComAowagieTextPdfByteBuffer_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfByteBuffer, initWithInt_, size)
}


#line 112
IOSByteArray *ComAowagieTextPdfByteBuffer_convertToBytesWithInt_(jint i) {
  ComAowagieTextPdfByteBuffer_initialize();
  
#line 113
  jint size = JreFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(i) / JavaLangMath_logWithDouble_(10)));
  if (JreIntMod(i, 100) != 0) {
    size += 2;
  }
  if (JreIntMod(i, 10) != 0) {
    size++;
  }
  if (i < 100) {
    size++;
    if (i < 10) {
      size++;
    }
  }
  size--;
  IOSByteArray *cache = [IOSByteArray newArrayWithLength:size];
  size--;
  if (i < 100) {
    *IOSByteArray_GetRef(cache, 0) = (jbyte) '0';
  }
  if (JreIntMod(i, 10) != 0) {
    *IOSByteArray_GetRef(cache, size--) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(i, 10));
  }
  if (JreIntMod(i, 100) != 0) {
    *IOSByteArray_GetRef(cache, size--) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(i, 10), 10));
    *IOSByteArray_GetRef(cache, size--) = (jbyte) '.';
  }
  size = JreFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(i) / JavaLangMath_logWithDouble_(10))) - 1;
  jint add = 0;
  while (add < size) {
    *IOSByteArray_GetRef(cache, add) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(i, JreFpToInt(JavaLangMath_powWithDouble_withDouble_(10, size - add + 1))), 10));
    add++;
  }
  return cache;
}


#line 264
ComAowagieTextPdfByteBuffer *ComAowagieTextPdfByteBuffer_appendWithDouble_(ComAowagieTextPdfByteBuffer *self, jdouble d) {
  (void) [self appendWithNSString:ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_withComAowagieTextPdfByteBuffer_(d, self)];
  return self;
}


#line 274
NSString *ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_(jdouble d) {
  ComAowagieTextPdfByteBuffer_initialize();
  
#line 275
  return ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_withComAowagieTextPdfByteBuffer_(d, nil);
}


#line 286
NSString *ComAowagieTextPdfByteBuffer_formatDoubleWithDouble_withComAowagieTextPdfByteBuffer_(jdouble d, ComAowagieTextPdfByteBuffer *buf) {
  ComAowagieTextPdfByteBuffer_initialize();
  
#line 287
  if (ComAowagieTextPdfByteBuffer_HIGH_PRECISION) {
    JavaTextDecimalFormat *dn = new_JavaTextDecimalFormat_initWithNSString_withJavaTextDecimalFormatSymbols_(@"0.######", ComAowagieTextPdfByteBuffer_dfs);
    NSString *sform = [dn formatWithDouble:d];
    if (buf == nil) {
      return sform;
    }
    else {
      
#line 293
      (void) [buf appendWithNSString:sform];
      return nil;
    }
  }
  jboolean negative = false;
  if (JavaLangMath_absWithDouble_(d) < 0.000015) {
    if (buf != nil) {
      (void) [buf appendWithByte:ComAowagieTextPdfByteBuffer_ZERO];
      return nil;
    }
    else {
      
#line 303
      return @"0";
    }
  }
  if (d < 0) {
    negative = true;
    d = -d;
  }
  if (d < 1.0) {
    JrePlusAssignDoubleD(&d, 0.000005);
    if (d >= 1) {
      if (negative) {
        if (buf != nil) {
          (void) [buf appendWithByte:(jbyte) '-'];
          (void) [buf appendWithByte:(jbyte) '1'];
          return nil;
        }
        else {
          
#line 319
          return @"-1";
        }
      }
      else {
        
#line 322
        if (buf != nil) {
          (void) [buf appendWithByte:(jbyte) '1'];
          return nil;
        }
        else {
          
#line 326
          return @"1";
        }
      }
    }
    if (buf != nil) {
      jint v = JreFpToInt((d * 100000));
      
#line 333
      if (negative) {
        (void) [buf appendWithByte:(jbyte) '-'];
      }
      (void) [buf appendWithByte:(jbyte) '0'];
      (void) [buf appendWithByte:(jbyte) '.'];
      
#line 339
      (void) [buf appendWithByte:(jbyte) (JreIntDiv(v, 10000) + ComAowagieTextPdfByteBuffer_ZERO)];
      if (JreIntMod(v, 10000) != 0) {
        (void) [buf appendWithByte:(jbyte) (JreIntMod(JreIntDiv(v, 1000), 10) + ComAowagieTextPdfByteBuffer_ZERO)];
        if (JreIntMod(v, 1000) != 0) {
          (void) [buf appendWithByte:(jbyte) (JreIntMod(JreIntDiv(v, 100), 10) + ComAowagieTextPdfByteBuffer_ZERO)];
          if (JreIntMod(v, 100) != 0) {
            (void) [buf appendWithByte:(jbyte) (JreIntMod(JreIntDiv(v, 10), 10) + ComAowagieTextPdfByteBuffer_ZERO)];
            if (JreIntMod(v, 10) != 0) {
              (void) [buf appendWithByte:(jbyte) (JreIntMod(v, 10) + ComAowagieTextPdfByteBuffer_ZERO)];
            }
          }
        }
      }
      return nil;
    }
    else {
      
#line 354
      jint x = 100000;
      jint v = JreFpToInt((d * x));
      
#line 357
      JavaLangStringBuffer *res = new_JavaLangStringBuffer_init();
      if (negative) {
        (void) [res appendWithChar:'-'];
      }
      (void) [res appendWithNSString:@"0."];
      
#line 363
      while (v < JreIntDiv(x, 10)) {
        (void) [res appendWithChar:'0'];
        x /= 10;
      }
      (void) [res appendWithInt:v];
      jint cut = [res java_length] - 1;
      while ([res charAtWithInt:cut] == '0') {
        --cut;
      }
      [res setLengthWithInt:cut + 1];
      return [res description];
    }
  }
  else
#line 375
  if (d <= 32767) {
    JrePlusAssignDoubleD(&d, 0.005);
    jint v = JreFpToInt((d * 100));
    
#line 379
    if (v < ComAowagieTextPdfByteBuffer_byteCacheSize && IOSObjectArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_byteCache), v) != nil) {
      if (buf != nil) {
        if (negative) {
          (void) [buf appendWithByte:(jbyte) '-'];
        }
        (void) [buf appendWithByteArray:IOSObjectArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_byteCache), v)];
        return nil;
      }
      else {
        
#line 387
        NSString *tmp = ComAowagieTextPdfPdfEncodings_convertToStringWithByteArray_withNSString_(IOSObjectArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_byteCache), v), nil);
        if (negative) {
          tmp = JreStrcat("C$", '-', tmp);
        }
        return tmp;
      }
    }
    if (buf != nil) {
      if (v < ComAowagieTextPdfByteBuffer_byteCacheSize) {
        
#line 397
        IOSByteArray *cache;
        jint size = 0;
        if (v >= 1000000) {
          
#line 401
          size += 5;
        }
        else
#line 402
        if (v >= 100000) {
          
#line 404
          size += 4;
        }
        else
#line 405
        if (v >= 10000) {
          
#line 407
          size += 3;
        }
        else
#line 408
        if (v >= 1000) {
          
#line 410
          size += 2;
        }
        else
#line 411
        if (v >= 100) {
          
#line 413
          size += 1;
        }
        
#line 417
        if (JreIntMod(v, 100) != 0) {
          
#line 419
          size += 2;
        }
        if (JreIntMod(v, 10) != 0) {
          size++;
        }
        cache = [IOSByteArray newArrayWithLength:size];
        jint add = 0;
        if (v >= 1000000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntDiv(v, 1000000));
        }
        if (v >= 100000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 100000), 10));
        }
        if (v >= 10000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 10000), 10));
        }
        if (v >= 1000) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 1000), 10));
        }
        if (v >= 100) {
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 100), 10));
        }
        
#line 442
        if (JreIntMod(v, 100) != 0) {
          *IOSByteArray_GetRef(cache, add++) = (jbyte) '.';
          *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 10), 10));
          if (JreIntMod(v, 10) != 0) {
            *IOSByteArray_GetRef(cache, add++) = IOSByteArray_Get(ComAowagieTextPdfByteBuffer_bytes, JreIntMod(v, 10));
          }
        }
        (void) IOSObjectArray_Set(nil_chk(ComAowagieTextPdfByteBuffer_byteCache), v, cache);
      }
      
#line 452
      if (negative) {
        (void) [buf appendWithByte:(jbyte) '-'];
      }
      if (v >= 1000000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntDiv(v, 1000000))];
      }
      if (v >= 100000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 100000), 10))];
      }
      if (v >= 10000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 10000), 10))];
      }
      if (v >= 1000) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 1000), 10))];
      }
      if (v >= 100) {
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 100), 10))];
      }
      
#line 471
      if (JreIntMod(v, 100) != 0) {
        (void) [buf appendWithByte:(jbyte) '.'];
        (void) [buf appendWithByte:IOSByteArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_bytes), JreIntMod(JreIntDiv(v, 10), 10))];
        if (JreIntMod(v, 10) != 0) {
          (void) [buf appendWithByte:IOSByteArray_Get(ComAowagieTextPdfByteBuffer_bytes, JreIntMod(v, 10))];
        }
      }
      return nil;
    }
    else {
      
#line 480
      JavaLangStringBuffer *res = new_JavaLangStringBuffer_init();
      if (negative) {
        (void) [res appendWithChar:'-'];
      }
      if (v >= 1000000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntDiv(v, 1000000))];
      }
      if (v >= 100000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntMod(JreIntDiv(v, 100000), 10))];
      }
      if (v >= 10000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntMod(JreIntDiv(v, 10000), 10))];
      }
      if (v >= 1000) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntMod(JreIntDiv(v, 1000), 10))];
      }
      if (v >= 100) {
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntMod(JreIntDiv(v, 100), 10))];
      }
      
#line 500
      if (JreIntMod(v, 100) != 0) {
        (void) [res appendWithChar:'.'];
        (void) [res appendWithChar:IOSCharArray_Get(nil_chk(ComAowagieTextPdfByteBuffer_chars), JreIntMod(JreIntDiv(v, 10), 10))];
        if (JreIntMod(v, 10) != 0) {
          (void) [res appendWithChar:IOSCharArray_Get(ComAowagieTextPdfByteBuffer_chars, JreIntMod(v, 10))];
        }
      }
      return [res description];
    }
  }
  else {
    
#line 510
    JavaLangStringBuffer *res = new_JavaLangStringBuffer_init();
    if (negative) {
      (void) [res appendWithChar:'-'];
    }
    JrePlusAssignDoubleD(&d, 0.5);
    jlong v = JreFpToLong(d);
    return [((JavaLangStringBuffer *) nil_chk([res appendWithLong:v])) description];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfByteBuffer)
