//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/BCX509CertificateObject.java
//

#include "ASN1BitString.h"
#include "ASN1Dump.h"
#include "ASN1Encodable.h"
#include "ASN1Encoding.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1String.h"
#include "AlgorithmIdentifier.h"
#include "Arrays.h"
#include "BCKeyUsage.h"
#include "BCTime.h"
#include "BCX509CertificateObject.h"
#include "BCX509SignatureUtil.h"
#include "BasicConstraints.h"
#include "BouncyCastleProvider.h"
#include "Certificate.h"
#include "DERBitString.h"
#include "DERIA5String.h"
#include "DERNull.h"
#include "Extension.h"
#include "Extensions.h"
#include "GeneralName.h"
#include "Hex.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Integers.h"
#include "J2ObjC_source.h"
#include "MiscObjectIdentifiers.h"
#include "NetscapeCertType.h"
#include "NetscapeRevocationURL.h"
#include "PKCS12BagAttributeCarrier.h"
#include "PKCS12BagAttributeCarrierImpl.h"
#include "RFC3280CertPathUtilities.h"
#include "RFC4519Style.h"
#include "Strings.h"
#include "SubjectPublicKeyInfo.h"
#include "TBSCertificate.h"
#include "VerisignCzagExtension.h"
#include "X500Name.h"
#include "X500NameStyle.h"
#include "X509Principal.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/math/BigInteger.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/security/Principal.h"
#include "java/security/Provider.h"
#include "java/security/PublicKey.h"
#include "java/security/Security.h"
#include "java/security/Signature.h"
#include "java/security/SignatureException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/CertificateException.h"
#include "java/security/cert/CertificateExpiredException.h"
#include "java/security/cert/CertificateNotYetValidException.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "BCX509CertificateObject must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderBCX509CertificateObject () {
 @public
  OrgSpongycastleAsn1X509Certificate *c_;
  OrgSpongycastleAsn1X509BasicConstraints *basicConstraints_;
  IOSBooleanArray *keyUsage_;
  jboolean hashValueSet_;
  jint hashValue_;
  id<OrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier> attrCarrier_;
}

- (IOSByteArray *)getExtensionBytesWithNSString:(NSString *)oid;

- (jint)calculateHashCode;

- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature;

- (jboolean)isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)id1
                        withOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)id2;

+ (id<JavaUtilCollection>)getAlternativeNamesWithByteArray:(IOSByteArray *)extVal;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CertificateObject, c_, OrgSpongycastleAsn1X509Certificate *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CertificateObject, basicConstraints_, OrgSpongycastleAsn1X509BasicConstraints *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CertificateObject, keyUsage_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBCX509CertificateObject, attrCarrier_, id<OrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier>)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(OrgSpongycastleJceProviderBCX509CertificateObject *self, NSString *oid);

__attribute__((unused)) static jint OrgSpongycastleJceProviderBCX509CertificateObject_calculateHashCode(OrgSpongycastleJceProviderBCX509CertificateObject *self);

__attribute__((unused)) static void OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJceProviderBCX509CertificateObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderBCX509CertificateObject_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_(OrgSpongycastleJceProviderBCX509CertificateObject *self, OrgSpongycastleAsn1X509AlgorithmIdentifier *id1, OrgSpongycastleAsn1X509AlgorithmIdentifier *id2);

__attribute__((unused)) static id<JavaUtilCollection> OrgSpongycastleJceProviderBCX509CertificateObject_getAlternativeNamesWithByteArray_(IOSByteArray *extVal);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/BCX509CertificateObject.java"


#line 72
@implementation OrgSpongycastleJceProviderBCX509CertificateObject


#line 84
- (instancetype)initWithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)c {
  OrgSpongycastleJceProviderBCX509CertificateObject_initWithOrgSpongycastleAsn1X509Certificate_(self, c);
  return self;
}


#line 132
- (void)checkValidity {
  
#line 135
  [self checkValidityWithJavaUtilDate:new_JavaUtilDate_init()];
}

- (void)checkValidityWithJavaUtilDate:(JavaUtilDate *)date {
  
#line 142
  if ([((JavaUtilDate *) nil_chk(date)) getTime] > [((JavaUtilDate *) nil_chk([self getNotAfter])) getTime]) {
    
#line 144
    @throw new_JavaSecurityCertCertificateExpiredException_initWithNSString_(JreStrcat("$$", @"certificate expired on ", [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getEndDate])) getTime]));
  }
  
#line 147
  if ([date getTime] < [((JavaUtilDate *) nil_chk([self getNotBefore])) getTime]) {
    
#line 149
    @throw new_JavaSecurityCertCertificateNotYetValidException_initWithNSString_(JreStrcat("$$", @"certificate not valid till ", [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getStartDate])) getTime]));
  }
}


#line 153
- (jint)getVersion {
  
#line 155
  return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getVersionNumber];
}


#line 158
- (JavaMathBigInteger *)getSerialNumber {
  
#line 160
  return [((OrgSpongycastleAsn1ASN1Integer *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSerialNumber])) getValue];
}


#line 163
- (id<JavaSecurityPrincipal>)getIssuerDN {
  
#line 165
  @try {
    
#line 167
    return new_OrgSpongycastleJceX509Principal_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getIssuer])) getEncoded]));
  }
  @catch (JavaIoIOException *e) {
    
#line 171
    return nil;
  }
}


#line 175
- (JavaxSecurityAuthX500X500Principal *)getIssuerX500Principal {
  
#line 177
  @try {
    
#line 179
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    OrgSpongycastleAsn1ASN1OutputStream *aOut = new_OrgSpongycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
    
#line 182
    [aOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:[((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getIssuer]];
    
#line 184
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([bOut toByteArray]);
  }
  @catch (JavaIoIOException *e) {
    
#line 188
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 192
- (id<JavaSecurityPrincipal>)getSubjectDN {
  
#line 194
  return new_OrgSpongycastleJceX509Principal_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1X500X500Name *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSubject])) toASN1Primitive]));
}


#line 197
- (JavaxSecurityAuthX500X500Principal *)getSubjectX500Principal {
  
#line 199
  @try {
    
#line 201
    JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
    OrgSpongycastleAsn1ASN1OutputStream *aOut = new_OrgSpongycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
    
#line 204
    [aOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:[((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSubject]];
    
#line 206
    return new_JavaxSecurityAuthX500X500Principal_initWithByteArray_([bOut toByteArray]);
  }
  @catch (JavaIoIOException *e) {
    
#line 210
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"can't encode issuer DN");
  }
}


#line 214
- (JavaUtilDate *)getNotBefore {
  
#line 216
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getStartDate])) getDate];
}


#line 219
- (JavaUtilDate *)getNotAfter {
  
#line 221
  return [((OrgSpongycastleAsn1X509BCTime *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getEndDate])) getDate];
}


#line 224
- (IOSByteArray *)getTBSCertificate {
  
#line 227
  @try {
    
#line 229
    return [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 233
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
}


#line 237
- (IOSByteArray *)getSignature {
  
#line 239
  return [((OrgSpongycastleAsn1DERBitString *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignature])) getOctets];
}


#line 246
- (NSString *)getSigAlgName {
  
#line 248
  JavaSecurityProvider *prov = JavaSecuritySecurity_getProviderWithNSString_(OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  
#line 250
  if (prov != nil) {
    
#line 252
    NSString *algName = [prov getPropertyWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", [self getSigAlgOID])];
    
#line 254
    if (algName != nil) {
      
#line 256
      return algName;
    }
  }
  
#line 260
  IOSObjectArray *provs = JavaSecuritySecurity_getProviders();
  
#line 265
  for (jint i = 0; i != ((IOSObjectArray *) nil_chk(provs))->size_; i++) {
    
#line 267
    NSString *algName = [((JavaSecurityProvider *) nil_chk(IOSObjectArray_Get(provs, i))) getPropertyWithNSString:JreStrcat("$$", @"Alg.Alias.Signature.", [self getSigAlgOID])];
    if (algName != nil) {
      
#line 270
      return algName;
    }
  }
  
#line 274
  return [self getSigAlgOID];
}


#line 280
- (NSString *)getSigAlgOID {
  
#line 282
  return [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getAlgorithm])) getId];
}


#line 288
- (IOSByteArray *)getSigAlgParams {
  
#line 290
  if ([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getParameters] != nil) {
    
#line 292
    @try {
      
#line 294
      return [((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm])) getParameters])) toASN1Primitive])) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
    }
    @catch (JavaIoIOException *e) {
      
#line 298
      return nil;
    }
  }
  else {
    
#line 303
    return nil;
  }
}


#line 307
- (IOSBooleanArray *)getIssuerUniqueID {
  
#line 309
  OrgSpongycastleAsn1DERBitString *id_ = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getIssuerUniqueId];
  
#line 311
  if (id_ != nil) {
    
#line 313
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    
#line 316
    for (jint i = 0; i != boolId->size_; i++) {
      
#line 318
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, JreIntDiv(i, 8)) & (JreURShift32((jint) 0x80, (JreIntMod(i, 8))))) != 0);
    }
    
#line 321
    return boolId;
  }
  
#line 324
  return nil;
}


#line 327
- (IOSBooleanArray *)getSubjectUniqueID {
  
#line 329
  OrgSpongycastleAsn1DERBitString *id_ = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getSubjectUniqueId];
  
#line 331
  if (id_ != nil) {
    
#line 333
    IOSByteArray *bytes = [id_ getBytes];
    IOSBooleanArray *boolId = [IOSBooleanArray newArrayWithLength:((IOSByteArray *) nil_chk(bytes))->size_ * 8 - [id_ getPadBits]];
    
#line 336
    for (jint i = 0; i != boolId->size_; i++) {
      
#line 338
      *IOSBooleanArray_GetRef(boolId, i) = ((IOSByteArray_Get(bytes, JreIntDiv(i, 8)) & (JreURShift32((jint) 0x80, (JreIntMod(i, 8))))) != 0);
    }
    
#line 341
    return boolId;
  }
  
#line 344
  return nil;
}


#line 347
- (IOSBooleanArray *)getKeyUsage {
  
#line 349
  return keyUsage_;
}


#line 352
- (id<JavaUtilList>)getExtendedKeyUsage {
  
#line 355
  IOSByteArray *bytes = OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.37");
  
#line 357
  if (bytes != nil) {
    
#line 359
    @try {
      
#line 361
      OrgSpongycastleAsn1ASN1InputStream *dIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(bytes);
      OrgSpongycastleAsn1ASN1Sequence *seq = (OrgSpongycastleAsn1ASN1Sequence *) cast_chk([dIn readObject], [OrgSpongycastleAsn1ASN1Sequence class]);
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      
#line 365
      for (jint i = 0; i != [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(seq)) size]; i++) {
        
#line 367
        [list addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(((OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([seq getObjectAtWithInt:i], [OrgSpongycastleAsn1ASN1ObjectIdentifier class])))) getId]];
      }
      
#line 370
      return JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
    }
    @catch (JavaLangException *e) {
      
#line 374
      @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(@"error processing extended key usage extension");
    }
  }
  
#line 378
  return nil;
}


#line 381
- (jint)getBasicConstraints {
  
#line 383
  if (basicConstraints_ != nil) {
    
#line 385
    if ([basicConstraints_ isCA]) {
      
#line 387
      if ([((OrgSpongycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint] == nil) {
        
#line 389
        return JavaLangInteger_MAX_VALUE;
      }
      else {
        
#line 393
        return [((JavaMathBigInteger *) nil_chk([((OrgSpongycastleAsn1X509BasicConstraints *) nil_chk(basicConstraints_)) getPathLenConstraint])) intValue];
      }
    }
    else {
      
#line 398
      return -1;
    }
  }
  
#line 402
  return -1;
}


#line 405
- (id<JavaUtilCollection>)getSubjectAlternativeNames {
  
#line 408
  return OrgSpongycastleJceProviderBCX509CertificateObject_getAlternativeNamesWithByteArray_(OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, subjectAlternativeName))) getId]));
}

- (id<JavaUtilCollection>)getIssuerAlternativeNames {
  
#line 414
  return OrgSpongycastleJceProviderBCX509CertificateObject_getAlternativeNamesWithByteArray_(OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuerAlternativeName))) getId]));
}

- (id<JavaUtilSet>)getCriticalExtensionOIDs {
  
#line 419
  if ([self getVersion] == 3) {
    
#line 421
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 424
    if (extensions != nil) {
      
#line 426
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 428
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 430
        OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
        OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 433
        if ([((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 435
          [set addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 439
      return set;
    }
  }
  
#line 443
  return nil;
}


#line 446
- (IOSByteArray *)getExtensionBytesWithNSString:(NSString *)oid {
  return OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, oid);
}


#line 462
- (IOSByteArray *)getExtensionValueWithNSString:(NSString *)oid {
  
#line 464
  OrgSpongycastleAsn1X509Extensions *exts = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
  
#line 466
  if (exts != nil) {
    
#line 468
    OrgSpongycastleAsn1X509Extension *ext = [exts getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    
#line 470
    if (ext != nil) {
      
#line 472
      @try {
        
#line 474
        return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getEncoded];
      }
      @catch (JavaLangException *e) {
        
#line 478
        @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"error parsing ", [e description]));
      }
    }
  }
  
#line 483
  return nil;
}


#line 486
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs {
  
#line 488
  if ([self getVersion] == 3) {
    
#line 490
    id<JavaUtilSet> set = new_JavaUtilHashSet_init();
    OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 493
    if (extensions != nil) {
      
#line 495
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 497
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 499
        OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
        OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 502
        if (![((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 504
          [set addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId]];
        }
      }
      
#line 508
      return set;
    }
  }
  
#line 512
  return nil;
}


#line 515
- (jboolean)hasUnsupportedCriticalExtension {
  
#line 517
  if ([self getVersion] == 3) {
    
#line 519
    OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
    
#line 521
    if (extensions != nil) {
      
#line 523
      id<JavaUtilEnumeration> e = [extensions oids];
      
#line 525
      while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
        
#line 527
        OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
        NSString *oidId = [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) getId];
        
#line 530
        if ([((NSString *) nil_chk(oidId)) isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)] ||
#line 531
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)] ||
#line 532
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)] ||
#line 533
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)] ||
#line 534
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS)] ||
#line 535
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)] ||
#line 536
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)] ||
#line 537
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)] ||
#line 538
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)] ||
#line 539
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)] ||
#line 540
        [oidId isEqual:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)]) {
          
#line 542
          continue;
        }
        
#line 545
        OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
        
#line 547
        if ([((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) isCritical]) {
          
#line 549
          return true;
        }
      }
    }
  }
  
#line 555
  return false;
}


#line 558
- (id<JavaSecurityPublicKey>)getPublicKey {
  
#line 560
  @try {
    
#line 562
    return OrgSpongycastleJceProviderBouncyCastleProvider_getPublicKeyWithOrgSpongycastleAsn1X509SubjectPublicKeyInfo_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSubjectPublicKeyInfo]);
  }
  @catch (JavaIoIOException *e) {
    
#line 566
    return nil;
  }
}


#line 570
- (IOSByteArray *)getEncoded {
  
#line 573
  @try {
    
#line 575
    return [((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getEncodedWithNSString:OrgSpongycastleAsn1ASN1Encoding_DER];
  }
  @catch (JavaIoIOException *e) {
    
#line 579
    @throw new_JavaSecurityCertCertificateEncodingException_initWithNSString_([e description]);
  }
}


#line 583
- (jboolean)isEqual:(id)o {
  
#line 586
  if (JreObjectEqualsEquals(o, self)) {
    
#line 588
    return true;
  }
  
#line 591
  if (!([o isKindOfClass:[JavaSecurityCertCertificate class]])) {
    
#line 593
    return false;
  }
  
#line 596
  JavaSecurityCertCertificate *other = (JavaSecurityCertCertificate *) cast_chk(o, [JavaSecurityCertCertificate class]);
  
#line 598
  @try {
    
#line 600
    IOSByteArray *b1 = [self getEncoded];
    IOSByteArray *b2 = [((JavaSecurityCertCertificate *) nil_chk(other)) getEncoded];
    
#line 603
    return OrgSpongycastleUtilArrays_areEqualWithByteArray_withByteArray_(b1, b2);
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    
#line 607
    return false;
  }
}


#line 611
- (NSUInteger)hash {
  @synchronized(self) {
    if (!hashValueSet_) {
      
#line 615
      hashValue_ = OrgSpongycastleJceProviderBCX509CertificateObject_calculateHashCode(self);
      hashValueSet_ = true;
    }
    
#line 619
    return hashValue_;
  }
}


#line 622
- (jint)calculateHashCode {
  return OrgSpongycastleJceProviderBCX509CertificateObject_calculateHashCode(self);
}


#line 640
- (void)setBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid
                              withOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)attribute {
  
#line 644
  [((id<OrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) setBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid withOrgSpongycastleAsn1ASN1Encodable:attribute];
}

- (id<OrgSpongycastleAsn1ASN1Encodable>)getBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid {
  
#line 650
  return [((id<OrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
}

- (id<JavaUtilEnumeration>)getBagAttributeKeys {
  
#line 655
  return [((id<OrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier>) nil_chk(attrCarrier_)) getBagAttributeKeys];
}


#line 658
- (NSString *)description {
  
#line 660
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  NSString *nl = OrgSpongycastleUtilStrings_lineSeparator();
  
#line 663
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  [0]         Version: "])) appendWithInt:[self getVersion]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"         SerialNumber: "])) appendWithId:[self getSerialNumber]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"             IssuerDN: "])) appendWithId:[self getIssuerDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Start Date: "])) appendWithId:[self getNotBefore]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Final Date: "])) appendWithId:[self getNotAfter]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            SubjectDN: "])) appendWithId:[self getSubjectDN]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"           Public Key: "])) appendWithId:[self getPublicKey]])) appendWithNSString:nl];
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"  Signature Algorithm: "])) appendWithNSString:[self getSigAlgName]])) appendWithNSString:nl];
  
#line 672
  IOSByteArray *sig = [self getSignature];
  
#line 674
  (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"            Signature: "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, 0, 20)]])) appendWithNSString:nl];
  for (jint i = 20; i < ((IOSByteArray *) nil_chk(sig))->size_; i += 20) {
    
#line 677
    if (i < sig->size_ - 20) {
      
#line 679
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, i, 20)]])) appendWithNSString:nl];
    }
    else {
      
#line 683
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       "])) appendWithNSString:[NSString java_stringWithBytes:OrgSpongycastleUtilEncodersHex_encodeWithByteArray_withInt_withInt_(sig, i, sig->size_ - i)]])) appendWithNSString:nl];
    }
  }
  
#line 687
  OrgSpongycastleAsn1X509Extensions *extensions = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getTBSCertificate])) getExtensions];
  
#line 689
  if (extensions != nil) {
    
#line 691
    id<JavaUtilEnumeration> e = [extensions oids];
    
#line 693
    if ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
      
#line 695
      (void) [buf appendWithNSString:@"       Extensions: \n"];
    }
    
#line 698
    while ([e hasMoreElements]) {
      
#line 700
      OrgSpongycastleAsn1ASN1ObjectIdentifier *oid = (OrgSpongycastleAsn1ASN1ObjectIdentifier *) cast_chk([e nextElement], [OrgSpongycastleAsn1ASN1ObjectIdentifier class]);
      OrgSpongycastleAsn1X509Extension *ext = [extensions getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:oid];
      
#line 703
      if ([((OrgSpongycastleAsn1X509Extension *) nil_chk(ext)) getExtnValue] != nil) {
        
#line 705
        IOSByteArray *octs = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
        OrgSpongycastleAsn1ASN1InputStream *dIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(octs);
        (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@"                       critical("])) appendWithBoolean:[ext isCritical]])) appendWithNSString:@") "];
        @try {
          
#line 710
          if ([((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(oid)) isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, basicConstraints)]) {
            
#line 712
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509BasicConstraints_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1X509Extension, keyUsage)]) {
            
#line 716
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:OrgSpongycastleAsn1X509BCKeyUsage_getInstanceWithId_([dIn readObject])])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1MiscMiscObjectIdentifiers, netscapeCertType)]) {
            
#line 720
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgSpongycastleAsn1MiscNetscapeCertType_initWithOrgSpongycastleAsn1DERBitString_((OrgSpongycastleAsn1DERBitString *) cast_chk([dIn readObject], [OrgSpongycastleAsn1DERBitString class]))])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1MiscMiscObjectIdentifiers, netscapeRevocationURL)]) {
            
#line 724
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgSpongycastleAsn1MiscNetscapeRevocationURL_initWithOrgSpongycastleAsn1DERIA5String_((OrgSpongycastleAsn1DERIA5String *) cast_chk([dIn readObject], [OrgSpongycastleAsn1DERIA5String class]))])) appendWithNSString:nl];
          }
          else if ([oid isEqual:JreLoadStatic(OrgSpongycastleAsn1MiscMiscObjectIdentifiers, verisignCzagExtension)]) {
            
#line 728
            (void) [((JavaLangStringBuffer *) nil_chk([buf appendWithId:new_OrgSpongycastleAsn1MiscVerisignCzagExtension_initWithOrgSpongycastleAsn1DERIA5String_((OrgSpongycastleAsn1DERIA5String *) cast_chk([dIn readObject], [OrgSpongycastleAsn1DERIA5String class]))])) appendWithNSString:nl];
          }
          else {
            
#line 732
            (void) [buf appendWithNSString:[oid getId]];
            (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:OrgSpongycastleAsn1UtilASN1Dump_dumpAsStringWithId_([dIn readObject])])) appendWithNSString:nl];
          }
        }
        @catch (
#line 737
        JavaLangException *ex) {
          
#line 739
          (void) [buf appendWithNSString:[oid getId]];
          
#line 741
          (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([buf appendWithNSString:@" value = "])) appendWithNSString:@"*****"])) appendWithNSString:nl];
        }
      }
      else {
        
#line 746
        (void) [buf appendWithNSString:nl];
      }
    }
  }
  
#line 751
  return [buf description];
}


#line 754
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  
#line 759
  JavaSecuritySignature *signature;
  NSString *sigName = OrgSpongycastleJceProviderBCX509SignatureUtil_getSignatureNameWithOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  
#line 762
  @try {
    
#line 764
    signature = JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaLangException *e) {
    
#line 768
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  
#line 771
  OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}


#line 774
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                           withNSString:(NSString *)sigProvider {
  
#line 780
  NSString *sigName = OrgSpongycastleJceProviderBCX509SignatureUtil_getSignatureNameWithOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  JavaSecuritySignature *signature;
  
#line 783
  if (sigProvider != nil) {
    
#line 785
    signature = JavaSecuritySignature_getInstanceWithNSString_withNSString_(sigName, sigProvider);
  }
  else {
    
#line 789
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  
#line 792
  OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}


#line 795
- (void)verifyWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
               withJavaSecurityProvider:(JavaSecurityProvider *)sigProvider {
  
#line 801
  NSString *sigName = OrgSpongycastleJceProviderBCX509SignatureUtil_getSignatureNameWithOrgSpongycastleAsn1X509AlgorithmIdentifier_([((OrgSpongycastleAsn1X509Certificate *) nil_chk(c_)) getSignatureAlgorithm]);
  JavaSecuritySignature *signature;
  
#line 804
  if (sigProvider != nil) {
    
#line 806
    signature = JavaSecuritySignature_getInstanceWithNSString_withJavaSecurityProvider_(sigName, sigProvider);
  }
  else {
    
#line 810
    signature = JavaSecuritySignature_getInstanceWithNSString_(sigName);
  }
  
#line 813
  OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}


#line 816
- (void)checkSignatureWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key
                      withJavaSecuritySignature:(JavaSecuritySignature *)signature {
  OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(self, key, signature);
}


#line 842
- (jboolean)isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)id1
                        withOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)id2 {
  return OrgSpongycastleJceProviderBCX509CertificateObject_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_(self, id1, id2);
}


#line 872
+ (id<JavaUtilCollection>)getAlternativeNamesWithByteArray:(IOSByteArray *)extVal {
  return OrgSpongycastleJceProviderBCX509CertificateObject_getAlternativeNamesWithByteArray_(extVal);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPrincipal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxSecurityAuthX500X500Principal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 11, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Encodable;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LJavaUtilEnumeration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 20, 19, -1, -1, -1 },
    { NULL, "V", 0x11, 17, 21, 22, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 24, 25, -1, -1, -1 },
    { NULL, "Z", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xa, 28, 29, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509Certificate:);
  methods[1].selector = @selector(checkValidity);
  methods[2].selector = @selector(checkValidityWithJavaUtilDate:);
  methods[3].selector = @selector(getVersion);
  methods[4].selector = @selector(getSerialNumber);
  methods[5].selector = @selector(getIssuerDN);
  methods[6].selector = @selector(getIssuerX500Principal);
  methods[7].selector = @selector(getSubjectDN);
  methods[8].selector = @selector(getSubjectX500Principal);
  methods[9].selector = @selector(getNotBefore);
  methods[10].selector = @selector(getNotAfter);
  methods[11].selector = @selector(getTBSCertificate);
  methods[12].selector = @selector(getSignature);
  methods[13].selector = @selector(getSigAlgName);
  methods[14].selector = @selector(getSigAlgOID);
  methods[15].selector = @selector(getSigAlgParams);
  methods[16].selector = @selector(getIssuerUniqueID);
  methods[17].selector = @selector(getSubjectUniqueID);
  methods[18].selector = @selector(getKeyUsage);
  methods[19].selector = @selector(getExtendedKeyUsage);
  methods[20].selector = @selector(getBasicConstraints);
  methods[21].selector = @selector(getSubjectAlternativeNames);
  methods[22].selector = @selector(getIssuerAlternativeNames);
  methods[23].selector = @selector(getCriticalExtensionOIDs);
  methods[24].selector = @selector(getExtensionBytesWithNSString:);
  methods[25].selector = @selector(getExtensionValueWithNSString:);
  methods[26].selector = @selector(getNonCriticalExtensionOIDs);
  methods[27].selector = @selector(hasUnsupportedCriticalExtension);
  methods[28].selector = @selector(getPublicKey);
  methods[29].selector = @selector(getEncoded);
  methods[30].selector = @selector(isEqual:);
  methods[31].selector = @selector(hash);
  methods[32].selector = @selector(calculateHashCode);
  methods[33].selector = @selector(setBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:withOrgSpongycastleAsn1ASN1Encodable:);
  methods[34].selector = @selector(getBagAttributeWithOrgSpongycastleAsn1ASN1ObjectIdentifier:);
  methods[35].selector = @selector(getBagAttributeKeys);
  methods[36].selector = @selector(description);
  methods[37].selector = @selector(verifyWithJavaSecurityPublicKey:);
  methods[38].selector = @selector(verifyWithJavaSecurityPublicKey:withNSString:);
  methods[39].selector = @selector(verifyWithJavaSecurityPublicKey:withJavaSecurityProvider:);
  methods[40].selector = @selector(checkSignatureWithJavaSecurityPublicKey:withJavaSecuritySignature:);
  methods[41].selector = @selector(isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier:withOrgSpongycastleAsn1X509AlgorithmIdentifier:);
  methods[42].selector = @selector(getAlternativeNamesWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "c_", "LOrgSpongycastleAsn1X509Certificate;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "basicConstraints_", "LOrgSpongycastleAsn1X509BasicConstraints;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyUsage_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashValueSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrCarrier_", "LOrgSpongycastleJceInterfacesPKCS12BagAttributeCarrier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1X509Certificate;", "LJavaSecurityCertCertificateParsingException;", "LJavaSecurityCertCertificateExpiredException;LJavaSecurityCertCertificateNotYetValidException;", "checkValidity", "LJavaUtilDate;", "LJavaSecurityCertCertificateEncodingException;", "getExtensionBytes", "LNSString;", "getExtensionValue", "equals", "LNSObject;", "hashCode", "setBagAttribute", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;LOrgSpongycastleAsn1ASN1Encodable;", "getBagAttribute", "LOrgSpongycastleAsn1ASN1ObjectIdentifier;", "toString", "verify", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecurityNoSuchProviderException;LJavaSecuritySignatureException;", "LJavaSecurityPublicKey;LNSString;", "LJavaSecurityPublicKey;LJavaSecurityProvider;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecurityInvalidKeyException;LJavaSecuritySignatureException;", "checkSignature", "LJavaSecurityPublicKey;LJavaSecuritySignature;", "LJavaSecurityCertCertificateException;LJavaSecurityNoSuchAlgorithmException;LJavaSecuritySignatureException;LJavaSecurityInvalidKeyException;", "isAlgIdEqual", "LOrgSpongycastleAsn1X509AlgorithmIdentifier;LOrgSpongycastleAsn1X509AlgorithmIdentifier;", "getAlternativeNames", "[B" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderBCX509CertificateObject = { "BCX509CertificateObject", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 43, 6, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderBCX509CertificateObject;
}

@end


#line 84
void OrgSpongycastleJceProviderBCX509CertificateObject_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleJceProviderBCX509CertificateObject *self, OrgSpongycastleAsn1X509Certificate *c) {
  JavaSecurityCertX509Certificate_init(self);
  self->attrCarrier_ = new_OrgSpongycastleJcajceProviderAsymmetricUtilPKCS12BagAttributeCarrierImpl_init();
  
#line 88
  self->c_ = c;
  
#line 90
  @try {
    
#line 92
    IOSByteArray *bytes = OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.19");
    
#line 94
    if (bytes != nil) {
      
#line 96
      self->basicConstraints_ = OrgSpongycastleAsn1X509BasicConstraints_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(bytes));
    }
  }
  @catch (JavaLangException *e) {
    
#line 101
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(JreStrcat("$@", @"cannot construct BasicConstraints: ", e));
  }
  
#line 104
  @try {
    
#line 106
    IOSByteArray *bytes = OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(self, @"2.5.29.15");
    if (bytes != nil) {
      
#line 109
      OrgSpongycastleAsn1ASN1BitString *bits = OrgSpongycastleAsn1DERBitString_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(bytes));
      
#line 111
      bytes = [((OrgSpongycastleAsn1ASN1BitString *) nil_chk(bits)) getBytes];
      jint length = (((IOSByteArray *) nil_chk(bytes))->size_ * 8) - [bits getPadBits];
      
#line 114
      self->keyUsage_ = [IOSBooleanArray newArrayWithLength:(length < 9) ? 9 : length];
      
#line 116
      for (jint i = 0; i != length; i++) {
        
#line 118
        *IOSBooleanArray_GetRef(self->keyUsage_, i) = ((IOSByteArray_Get(bytes, JreIntDiv(i, 8)) & (JreURShift32((jint) 0x80, (JreIntMod(i, 8))))) != 0);
      }
    }
    else {
      
#line 123
      self->keyUsage_ = nil;
    }
  }
  @catch (JavaLangException *e) {
    
#line 128
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_(JreStrcat("$@", @"cannot construct KeyUsage: ", e));
  }
}


#line 84
OrgSpongycastleJceProviderBCX509CertificateObject *new_OrgSpongycastleJceProviderBCX509CertificateObject_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *c) {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderBCX509CertificateObject, initWithOrgSpongycastleAsn1X509Certificate_, c)
}


#line 84
OrgSpongycastleJceProviderBCX509CertificateObject *create_OrgSpongycastleJceProviderBCX509CertificateObject_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *c) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderBCX509CertificateObject, initWithOrgSpongycastleAsn1X509Certificate_, c)
}


#line 446
IOSByteArray *OrgSpongycastleJceProviderBCX509CertificateObject_getExtensionBytesWithNSString_(OrgSpongycastleJceProviderBCX509CertificateObject *self, NSString *oid) {
  
#line 448
  OrgSpongycastleAsn1X509Extensions *exts = [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) getExtensions];
  
#line 450
  if (exts != nil) {
    
#line 452
    OrgSpongycastleAsn1X509Extension *ext = [exts getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(oid)];
    if (ext != nil) {
      
#line 455
      return [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk([ext getExtnValue])) getOctets];
    }
  }
  
#line 459
  return nil;
}


#line 622
jint OrgSpongycastleJceProviderBCX509CertificateObject_calculateHashCode(OrgSpongycastleJceProviderBCX509CertificateObject *self) {
  
#line 624
  @try {
    
#line 626
    jint hashCode = 0;
    IOSByteArray *certData = [self getEncoded];
    for (jint i = 1; i < ((IOSByteArray *) nil_chk(certData))->size_; i++) {
      
#line 630
      hashCode += IOSByteArray_Get(certData, i) * i;
    }
    return hashCode;
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    
#line 636
    return 0;
  }
}


#line 816
void OrgSpongycastleJceProviderBCX509CertificateObject_checkSignatureWithJavaSecurityPublicKey_withJavaSecuritySignature_(OrgSpongycastleJceProviderBCX509CertificateObject *self, id<JavaSecurityPublicKey> key, JavaSecuritySignature *signature) {
  
#line 822
  if (!OrgSpongycastleJceProviderBCX509CertificateObject_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_(self, [((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm], [((OrgSpongycastleAsn1X509TBSCertificate *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->c_)) getTBSCertificate])) getSignature])) {
    
#line 824
    @throw new_JavaSecurityCertCertificateException_initWithNSString_(@"signature algorithm in TBS cert not same as outer cert");
  }
  
#line 827
  id<OrgSpongycastleAsn1ASN1Encodable> params = [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk([((OrgSpongycastleAsn1X509Certificate *) nil_chk(self->c_)) getSignatureAlgorithm])) getParameters];
  
#line 830
  OrgSpongycastleJceProviderBCX509SignatureUtil_setSignatureParametersWithJavaSecuritySignature_withOrgSpongycastleAsn1ASN1Encodable_(signature, params);
  
#line 832
  [((JavaSecuritySignature *) nil_chk(signature)) initVerifyWithJavaSecurityPublicKey:key];
  
#line 834
  [signature updateWithByteArray:[self getTBSCertificate]];
  
#line 836
  if (![signature verifyWithByteArray:[self getSignature]]) {
    
#line 838
    @throw new_JavaSecuritySignatureException_initWithNSString_(@"certificate does not verify with supplied key");
  }
}


#line 842
jboolean OrgSpongycastleJceProviderBCX509CertificateObject_isAlgIdEqualWithOrgSpongycastleAsn1X509AlgorithmIdentifier_withOrgSpongycastleAsn1X509AlgorithmIdentifier_(OrgSpongycastleJceProviderBCX509CertificateObject *self, OrgSpongycastleAsn1X509AlgorithmIdentifier *id1, OrgSpongycastleAsn1X509AlgorithmIdentifier *id2) {
  
#line 844
  if (![((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(id1)) getAlgorithm])) isEqual:[((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(id2)) getAlgorithm]]) {
    
#line 846
    return false;
  }
  
#line 849
  if ([id1 getParameters] == nil) {
    
#line 851
    if ([id2 getParameters] != nil && ![((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([id2 getParameters])) isEqual:JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE)]) {
      
#line 853
      return false;
    }
    
#line 856
    return true;
  }
  
#line 859
  if ([id2 getParameters] == nil) {
    
#line 861
    if ([id1 getParameters] != nil && ![((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:JreLoadStatic(OrgSpongycastleAsn1DERNull, INSTANCE)]) {
      
#line 863
      return false;
    }
    
#line 866
    return true;
  }
  
#line 869
  return [((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([id1 getParameters])) isEqual:[id2 getParameters]];
}


#line 872
id<JavaUtilCollection> OrgSpongycastleJceProviderBCX509CertificateObject_getAlternativeNamesWithByteArray_(IOSByteArray *extVal) {
  OrgSpongycastleJceProviderBCX509CertificateObject_initialize();
  
#line 875
  if (extVal == nil) {
    
#line 877
    return nil;
  }
  @try {
    
#line 881
    id<JavaUtilCollection> temp = new_JavaUtilArrayList_init();
    id<JavaUtilEnumeration> it = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(extVal))) getObjects];
    while ([((id<JavaUtilEnumeration>) nil_chk(it)) hasMoreElements]) {
      
#line 885
      OrgSpongycastleAsn1X509GeneralName *genName = OrgSpongycastleAsn1X509GeneralName_getInstanceWithId_([it nextElement]);
      id<JavaUtilList> list = new_JavaUtilArrayList_init();
      [list addWithId:OrgSpongycastleUtilIntegers_valueOfWithInt_([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(genName)) getTagNo])];
      {
        
#line 907
        IOSByteArray *addrBytes;
        NSString *addr;
        
#line 888
        switch ([genName getTagNo]) {
          
#line 890
          case OrgSpongycastleAsn1X509GeneralName_ediPartyName:
          case OrgSpongycastleAsn1X509GeneralName_x400Address:
          case OrgSpongycastleAsn1X509GeneralName_otherName:
          [list addWithId:[genName getEncoded]];
          break;
          case OrgSpongycastleAsn1X509GeneralName_directoryName:
          [list addWithId:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleAsn1X500X500Name_getInstanceWithOrgSpongycastleAsn1X500X500NameStyle_withId_(JreLoadStatic(OrgSpongycastleAsn1X500StyleRFC4519Style, INSTANCE), [genName getName]))) description]];
          break;
          case OrgSpongycastleAsn1X509GeneralName_dNSName:
          case OrgSpongycastleAsn1X509GeneralName_rfc822Name:
          case OrgSpongycastleAsn1X509GeneralName_uniformResourceIdentifier:
          [list addWithId:[((id<OrgSpongycastleAsn1ASN1String>) nil_chk(((id<OrgSpongycastleAsn1ASN1String>) cast_check([genName getName], OrgSpongycastleAsn1ASN1String_class_())))) getString]];
          break;
          case OrgSpongycastleAsn1X509GeneralName_registeredID:
          [list addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(OrgSpongycastleAsn1ASN1ObjectIdentifier_getInstanceWithId_([genName getName]))) getId]];
          break;
          case OrgSpongycastleAsn1X509GeneralName_iPAddress:
          addrBytes = [((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_([genName getName]))) getOctets];
          
#line 909
          @try {
            
#line 911
            addr = [((JavaNetInetAddress *) nil_chk(JavaNetInetAddress_getByAddressWithByteArray_(addrBytes))) getHostAddress];
          }
          @catch (JavaNetUnknownHostException *e) {
            
#line 915
            continue;
          }
          [list addWithId:addr];
          break;
          default:
          @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"Bad tag number: ", [genName getTagNo]));
        }
      }
      [temp addWithId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(list)];
    }
    if ([temp size] == 0) {
      
#line 927
      return nil;
    }
    return JavaUtilCollections_unmodifiableCollectionWithJavaUtilCollection_(temp);
  }
  @catch (JavaLangException *e) {
    
#line 933
    @throw new_JavaSecurityCertCertificateParsingException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderBCX509CertificateObject)
