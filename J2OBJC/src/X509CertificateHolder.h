//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/cert/X509CertificateHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_X509CertificateHolder")
#ifdef RESTRICT_X509CertificateHolder
#define INCLUDE_ALL_X509CertificateHolder 0
#else
#define INCLUDE_ALL_X509CertificateHolder 1
#endif
#undef RESTRICT_X509CertificateHolder

#if !defined (OrgSpongycastleCertX509CertificateHolder_) && (INCLUDE_ALL_X509CertificateHolder || defined(INCLUDE_OrgSpongycastleCertX509CertificateHolder))
#define OrgSpongycastleCertX509CertificateHolder_

#define RESTRICT_Encodable 1
#define INCLUDE_OrgSpongycastleUtilEncodable 1
#include "Encodable.h"

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaUtilDate;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X500X500Name;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleAsn1X509Certificate;
@class OrgSpongycastleAsn1X509Extension;
@class OrgSpongycastleAsn1X509Extensions;
@class OrgSpongycastleAsn1X509SubjectPublicKeyInfo;
@protocol JavaUtilList;
@protocol JavaUtilSet;
@protocol OrgSpongycastleOperatorContentVerifierProvider;

/*!
 @brief Holding class for an X.509 Certificate structure.
 */
@interface OrgSpongycastleCertX509CertificateHolder : NSObject < OrgSpongycastleUtilEncodable, JavaIoSerializable >

#pragma mark Public

/*!
 @brief Create a X509CertificateHolder from the passed in bytes.
 @param certEncoding BER/DER encoding of the certificate.
 @throw IOExceptionin the event of corrupted data, or an incorrect structure.
 */
- (instancetype)initWithByteArray:(IOSByteArray *)certEncoding;

/*!
 @brief Create a X509CertificateHolder from the passed in ASN.1 structure.
 @param x509Certificate an ASN.1 Certificate structure.
 */
- (instancetype)initWithOrgSpongycastleAsn1X509Certificate:(OrgSpongycastleAsn1X509Certificate *)x509Certificate;

- (jboolean)isEqual:(id)o;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  critical extensions contained in this holder's certificate.
 @return a set of critical extension OIDs.
 */
- (id<JavaUtilSet>)getCriticalExtensionOIDs;

/*!
 @brief Return the ASN.1 encoding of this holder's certificate.
 @return a DER encoded byte array.
 @throw IOExceptionif an encoding cannot be generated.
 */
- (IOSByteArray *)getEncoded;

/*!
 @brief Look up the extension associated with the passed in OID.
 @param oid the OID of the extension of interest.
 @return the extension if present, null otherwise.
 */
- (OrgSpongycastleAsn1X509Extension *)getExtensionWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)oid;

/*!
 @brief Returns a list of ASN1ObjectIdentifier objects representing the OIDs of the
  extensions contained in this holder's certificate.
 @return a list of extension OIDs.
 */
- (id<JavaUtilList>)getExtensionOIDs;

/*!
 @brief Return the extensions block associated with this certificate if there is one.
 @return the extensions block, null otherwise.
 */
- (OrgSpongycastleAsn1X509Extensions *)getExtensions;

/*!
 @brief Return the issuer of this certificate.
 @return the certificate issuer.
 */
- (OrgSpongycastleAsn1X500X500Name *)getIssuer;

/*!
 @brief Returns a set of ASN1ObjectIdentifier objects representing the OIDs of the
  non-critical extensions contained in this holder's certificate.
 @return a set of non-critical extension OIDs.
 */
- (id<JavaUtilSet>)getNonCriticalExtensionOIDs;

/*!
 @brief Return the date after which this certificate is not valid.
 @return the final time for the certificate's validity period.
 */
- (JavaUtilDate *)getNotAfter;

/*!
 @brief Return the date before which this certificate is not valid.
 @return the start time for the certificate's validity period.
 */
- (JavaUtilDate *)getNotBefore;

/*!
 @brief Return the serial number of this attribute certificate.
 @return the serial number.
 */
- (JavaMathBigInteger *)getSerialNumber;

/*!
 @brief Return the bytes making up the signature associated with this attribute certificate.
 @return the attribute certificate signature bytes.
 */
- (IOSByteArray *)getSignature;

/*!
 @brief Return the details of the signature algorithm used to create this attribute certificate.
 @return the AlgorithmIdentifier describing the signature algorithm used to create this attribute certificate.
 */
- (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getSignatureAlgorithm;

/*!
 @brief Return the subject this certificate is for.
 @return the subject for the certificate.
 */
- (OrgSpongycastleAsn1X500X500Name *)getSubject;

/*!
 @brief Return the SubjectPublicKeyInfo describing the public key this certificate is carrying.
 @return the public key ASN.1 structure contained in the certificate.
 */
- (OrgSpongycastleAsn1X509SubjectPublicKeyInfo *)getSubjectPublicKeyInfo;

/*!
 */
- (jint)getVersion;

- (jint)getVersionNumber;

/*!
 @brief Return whether or not the holder's certificate contains extensions.
 @return true if extension are present, false otherwise.
 */
- (jboolean)hasExtensions;

- (NSUInteger)hash;

/*!
 @brief Validate the signature on the certificate in this holder.
 @param verifierProvider a ContentVerifierProvider that can generate a verifier for the signature.
 @return true if the signature is valid, false otherwise.
 @throw CertExceptionif the signature cannot be processed or is inappropriate.
 */
- (jboolean)isSignatureValidWithOrgSpongycastleOperatorContentVerifierProvider:(id<OrgSpongycastleOperatorContentVerifierProvider>)verifierProvider;

/*!
 @brief Return whether or not this certificate is valid on a particular date.
 @param date the date of interest.
 @return true if the certificate is valid, false otherwise.
 */
- (jboolean)isValidOnWithJavaUtilDate:(JavaUtilDate *)date;

/*!
 @brief Return the underlying ASN.1 structure for the certificate in this holder.
 @return a Certificate object.
 */
- (OrgSpongycastleAsn1X509Certificate *)toASN1Structure;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCertX509CertificateHolder)

FOUNDATION_EXPORT void OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(OrgSpongycastleCertX509CertificateHolder *self, IOSByteArray *certEncoding);

FOUNDATION_EXPORT OrgSpongycastleCertX509CertificateHolder *new_OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertX509CertificateHolder *create_OrgSpongycastleCertX509CertificateHolder_initWithByteArray_(IOSByteArray *certEncoding);

FOUNDATION_EXPORT void OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleCertX509CertificateHolder *self, OrgSpongycastleAsn1X509Certificate *x509Certificate);

FOUNDATION_EXPORT OrgSpongycastleCertX509CertificateHolder *new_OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *x509Certificate) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleCertX509CertificateHolder *create_OrgSpongycastleCertX509CertificateHolder_initWithOrgSpongycastleAsn1X509Certificate_(OrgSpongycastleAsn1X509Certificate *x509Certificate);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCertX509CertificateHolder)

#endif

#pragma pop_macro("INCLUDE_ALL_X509CertificateHolder")
