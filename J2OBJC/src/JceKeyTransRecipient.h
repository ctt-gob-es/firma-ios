//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/cms/jcajce/JceKeyTransRecipient.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JceKeyTransRecipient")
#ifdef RESTRICT_JceKeyTransRecipient
#define INCLUDE_ALL_JceKeyTransRecipient 0
#else
#define INCLUDE_ALL_JceKeyTransRecipient 1
#endif
#undef RESTRICT_JceKeyTransRecipient

#if !defined (OrgSpongycastleCmsJcajceJceKeyTransRecipient_) && (INCLUDE_ALL_JceKeyTransRecipient || defined(INCLUDE_OrgSpongycastleCmsJcajceJceKeyTransRecipient))
#define OrgSpongycastleCmsJcajceJceKeyTransRecipient_

#define RESTRICT_KeyTransRecipient 1
#define INCLUDE_OrgSpongycastleCmsKeyTransRecipient 1
#include "KeyTransRecipient.h"

@class IOSByteArray;
@class JavaSecurityProvider;
@class OrgSpongycastleAsn1ASN1ObjectIdentifier;
@class OrgSpongycastleAsn1X509AlgorithmIdentifier;
@class OrgSpongycastleCmsJcajceEnvelopedDataHelper;
@protocol JavaSecurityKey;
@protocol JavaSecurityPrivateKey;
@protocol JavaUtilMap;

@interface OrgSpongycastleCmsJcajceJceKeyTransRecipient : NSObject < OrgSpongycastleCmsKeyTransRecipient > {
 @public
  OrgSpongycastleCmsJcajceEnvelopedDataHelper *helper_;
  OrgSpongycastleCmsJcajceEnvelopedDataHelper *contentHelper_;
  id<JavaUtilMap> extraMappings_;
  jboolean validateKeySize_;
  jboolean unwrappedKeyMustBeEncodable_;
}

#pragma mark Public

- (instancetype)initWithJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)recipientKey;

/*!
 @brief Internally algorithm ids are converted into cipher names using a lookup table.For some providers
  the standard lookup table won't work.
 Use this method to establish a specific mapping from an
  algorithm identifier to a specific algorithm. 
 <p>
  For example: 
 @code

      unwrapper.setAlgorithmMapping(PKCSObjectIdentifiers.rsaEncryption, "RSA"); 
  
@endcode
  </p>
 @param algorithm OID of algorithm in recipient.
 @param algorithmName JCE algorithm name to use.
 @return the current Recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setAlgorithmMappingWithOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)algorithm
                                                                                                    withNSString:(NSString *)algorithmName;

/*!
 @brief Set the provider to use for content processing.If providerName is null a "no provider" search will be
  used to satisfy getInstance calls.
 @param provider the provider to use.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setContentProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Set the provider to use for content processing.If providerName is null a "no provider" search will be
  used to satisfy getInstance calls.
 @param providerName the name of the provider to use.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setContentProviderWithNSString:(NSString *)providerName;

/*!
 @brief Set validation of retrieved key sizes against the algorithm parameters for the encrypted key where possible - default is off.
 <p>
  This setting will not have any affect if the encryption algorithm in the recipient does not specify a particular key size, or
  if the unwrapper is a HSM and the byte encoding of the unwrapped secret key is not available. 
 </p>
 @param doValidate true if unwrapped key's should be validated against the content encryption algorithm, false otherwise.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setKeySizeValidationWithBoolean:(jboolean)doValidate;

/*!
 @brief Flag that unwrapping must produce a key that will return a meaningful value from a call to Key.getEncoded().
 This is important if you are using a HSM for unwrapping and using a software based provider for
  decrypting the content. Default value: false.
 @param unwrappedKeyMustBeEncodable true if getEncoded() should return key bytes, false if not necessary.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setMustProduceEncodableUnwrappedKeyWithBoolean:(jboolean)unwrappedKeyMustBeEncodable;

/*!
 @brief Set the provider to use for key recovery and content processing.
 @param provider provider to use.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setProviderWithJavaSecurityProvider:(JavaSecurityProvider *)provider;

/*!
 @brief Set the provider to use for key recovery and content processing.
 @param providerName the name of the provider to use.
 @return this recipient.
 */
- (OrgSpongycastleCmsJcajceJceKeyTransRecipient *)setProviderWithNSString:(NSString *)providerName;

#pragma mark Protected

- (id<JavaSecurityKey>)extractSecretKeyWithOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)keyEncryptionAlgorithm
                                       withOrgSpongycastleAsn1X509AlgorithmIdentifier:(OrgSpongycastleAsn1X509AlgorithmIdentifier *)encryptedKeyAlgorithm
                                                                        withByteArray:(IOSByteArray *)encryptedEncryptionKey;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleCmsJcajceJceKeyTransRecipient)

J2OBJC_FIELD_SETTER(OrgSpongycastleCmsJcajceJceKeyTransRecipient, helper_, OrgSpongycastleCmsJcajceEnvelopedDataHelper *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCmsJcajceJceKeyTransRecipient, contentHelper_, OrgSpongycastleCmsJcajceEnvelopedDataHelper *)
J2OBJC_FIELD_SETTER(OrgSpongycastleCmsJcajceJceKeyTransRecipient, extraMappings_, id<JavaUtilMap>)

FOUNDATION_EXPORT void OrgSpongycastleCmsJcajceJceKeyTransRecipient_initWithJavaSecurityPrivateKey_(OrgSpongycastleCmsJcajceJceKeyTransRecipient *self, id<JavaSecurityPrivateKey> recipientKey);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleCmsJcajceJceKeyTransRecipient)

#endif

#pragma pop_macro("INCLUDE_ALL_JceKeyTransRecipient")
