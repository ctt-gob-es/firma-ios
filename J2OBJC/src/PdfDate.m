//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDate.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfDate.h"
#include "PdfString.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Calendar.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/SimpleTimeZone.h"

#if !__has_feature(objc_arc)
#error "PdfDate must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfDate ()

/*!
 @brief Adds a number of leading zeros to a given <CODE>String</CODE> in order to get a <CODE>String</CODE>
  of a certain length.
 @param i a given number
 @param length the length of the resulting  <CODE> String </CODE>
 @return the resulting <CODE>String</CODE>
 */
- (NSString *)setLengthWithInt:(jint)i
                       withInt:(jint)length;

@end

inline IOSIntArray *ComAowagieTextPdfPdfDate_get_DATE_SPACE(void);
static IOSIntArray *ComAowagieTextPdfPdfDate_DATE_SPACE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfDate, DATE_SPACE, IOSIntArray *)

__attribute__((unused)) static NSString *ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(ComAowagieTextPdfPdfDate *self, jint i, jint length);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfDate.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfDate)


#line 72
@implementation ComAowagieTextPdfPdfDate


#line 85
- (instancetype)initWithJavaUtilCalendar:(JavaUtilCalendar *)d {
  ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(self, d);
  return self;
}


#line 130
- (NSString *)setLengthWithInt:(jint)i
                       withInt:(jint)length {
  return ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, i, length);
}


#line 144
- (NSString *)getW3CDate {
  return ComAowagieTextPdfPdfDate_getW3CDateWithNSString_(self->value_);
}


#line 153
+ (NSString *)getW3CDateWithNSString:(NSString *)d {
  return ComAowagieTextPdfPdfDate_getW3CDateWithNSString_(d);
}


#line 217
+ (JavaUtilCalendar *)decodeWithNSString:(NSString *)s {
  return ComAowagieTextPdfPdfDate_decodeWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCalendar;", 0x9, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilCalendar:);
  methods[1].selector = @selector(setLengthWithInt:withInt:);
  methods[2].selector = @selector(getW3CDate);
  methods[3].selector = @selector(getW3CDateWithNSString:);
  methods[4].selector = @selector(decodeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DATE_SPACE", "[I", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilCalendar;", "setLength", "II", "getW3CDate", "LNSString;", "decode", &ComAowagieTextPdfPdfDate_DATE_SPACE };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfDate = { "PdfDate", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfDate;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfDate class]) {
    ComAowagieTextPdfPdfDate_DATE_SPACE = [IOSIntArray newArrayWithInts:(jint[]){
#line 74
      JavaUtilCalendar_YEAR, 4, 0, JavaUtilCalendar_MONTH, 2, -1, JavaUtilCalendar_DAY_OF_MONTH, 2, 0,
#line 75
      JavaUtilCalendar_HOUR_OF_DAY, 2, 0, JavaUtilCalendar_MINUTE, 2, 0, JavaUtilCalendar_SECOND, 2, 0 } count:18];
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfDate)
    }
  }

@end


#line 85
void ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(ComAowagieTextPdfPdfDate *self, JavaUtilCalendar *d) {
  ComAowagieTextPdfPdfString_init(self);
  JavaLangStringBuffer *date = new_JavaLangStringBuffer_initWithNSString_(@"D:");
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [((JavaUtilCalendar *) nil_chk(d)) getWithInt:JavaUtilCalendar_YEAR], 4)];
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [d getWithInt:JavaUtilCalendar_MONTH] + 1, 2)];
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [d getWithInt:JavaUtilCalendar_DATE], 2)];
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [d getWithInt:JavaUtilCalendar_HOUR_OF_DAY], 2)];
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [d getWithInt:JavaUtilCalendar_MINUTE], 2)];
  (void) [date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, [d getWithInt:JavaUtilCalendar_SECOND], 2)];
  jint timezone_ = JreIntDiv(([d getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [d getWithInt:JavaUtilCalendar_DST_OFFSET]), (60 * 60 * 1000));
  if (timezone_ == 0) {
    (void) [date appendWithChar:'Z'];
  }
  else if (timezone_ < 0) {
    (void) [date appendWithChar:'-'];
    timezone_ = -timezone_;
  }
  else {
    (void) [date appendWithChar:'+'];
  }
  if (timezone_ != 0) {
    (void) [((JavaLangStringBuffer *) nil_chk([date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, timezone_, 2)])) appendWithChar:'\''];
    jint zone = JavaLangMath_absWithInt_(JreIntDiv(([d getWithInt:JavaUtilCalendar_ZONE_OFFSET] + [d getWithInt:JavaUtilCalendar_DST_OFFSET]), (60 * 1000))) - timezone_ * 60;
    (void) [((JavaLangStringBuffer *) nil_chk([date appendWithNSString:ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(self, zone, 2)])) appendWithChar:'\''];
  }
  self->value_ = [date description];
}


#line 85
ComAowagieTextPdfPdfDate *new_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(JavaUtilCalendar *d) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfDate, initWithJavaUtilCalendar_, d)
}


#line 85
ComAowagieTextPdfPdfDate *create_ComAowagieTextPdfPdfDate_initWithJavaUtilCalendar_(JavaUtilCalendar *d) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfDate, initWithJavaUtilCalendar_, d)
}


#line 130
NSString *ComAowagieTextPdfPdfDate_setLengthWithInt_withInt_(ComAowagieTextPdfPdfDate *self, jint i, jint length) {
  JavaLangStringBuffer *tmp = new_JavaLangStringBuffer_init();
  (void) [tmp appendWithInt:i];
  while ([tmp java_length] < length) {
    (void) [tmp insertWithInt:0 withNSString:@"0"];
  }
  [tmp setLengthWithInt:length];
  return [tmp description];
}


#line 153
NSString *ComAowagieTextPdfPdfDate_getW3CDateWithNSString_(NSString *d) {
  ComAowagieTextPdfPdfDate_initialize();
  
#line 154
  if ([((NSString *) nil_chk(d)) java_hasPrefix:@"D:"]) {
    d = [d java_substring:2];
  }
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  if ([((NSString *) nil_chk(d)) java_length] < 4) {
    return @"0000";
  }
  (void) [sb appendWithNSString:[d java_substring:0 endIndex:4]];
  d = [d java_substring:4];
  if ([((NSString *) nil_chk(d)) java_length] < 2) {
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'-'])) appendWithNSString:[d java_substring:0 endIndex:2]];
  d = [d java_substring:2];
  if ([((NSString *) nil_chk(d)) java_length] < 2) {
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'-'])) appendWithNSString:[d java_substring:0 endIndex:2]];
  d = [d java_substring:2];
  if ([((NSString *) nil_chk(d)) java_length] < 2) {
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'T'])) appendWithNSString:[d java_substring:0 endIndex:2]];
  d = [d java_substring:2];
  if ([((NSString *) nil_chk(d)) java_length] < 2) {
    (void) [sb appendWithNSString:@":00Z"];
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:':'])) appendWithNSString:[d java_substring:0 endIndex:2]];
  d = [d java_substring:2];
  if ([((NSString *) nil_chk(d)) java_length] < 2) {
    (void) [sb appendWithChar:'Z'];
    return [sb description];
  }
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:':'])) appendWithNSString:[d java_substring:0 endIndex:2]];
  d = [d java_substring:2];
  if ([((NSString *) nil_chk(d)) java_hasPrefix:@"-"] || [d java_hasPrefix:@"+"]) {
    NSString *sign = [d java_substring:0 endIndex:1];
    d = [d java_substring:1];
    NSString *h = @"00";
    NSString *m = @"00";
    if ([((NSString *) nil_chk(d)) java_length] >= 2) {
      h = [d java_substring:0 endIndex:2];
      if ([d java_length] > 2) {
        d = [d java_substring:3];
        if ([((NSString *) nil_chk(d)) java_length] >= 2) {
          m = [d java_substring:0 endIndex:2];
        }
      }
      (void) [((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([((JavaLangStringBuffer *) nil_chk([sb appendWithNSString:sign])) appendWithNSString:h])) appendWithChar:':'])) appendWithNSString:m];
      return [sb description];
    }
  }
  (void) [sb appendWithChar:'Z'];
  return [sb description];
}


#line 217
JavaUtilCalendar *ComAowagieTextPdfPdfDate_decodeWithNSString_(NSString *s) {
  ComAowagieTextPdfPdfDate_initialize();
  
#line 218
  @try {
    if ([((NSString *) nil_chk(s)) java_hasPrefix:@"D:"]) {
      s = [s java_substring:2];
    }
    JavaUtilGregorianCalendar *calendar;
    jint slen = [((NSString *) nil_chk(s)) java_length];
    jint idx = [s java_indexOf:'Z'];
    if (idx >= 0) {
      slen = idx;
      calendar = new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(0, @"ZPDF"));
    }
    else {
      jint sign = 1;
      idx = [s java_indexOf:'+'];
      if (idx < 0) {
        idx = [s java_indexOf:'-'];
        if (idx >= 0) {
          sign = -1;
        }
      }
      if (idx < 0) {
        calendar = new_JavaUtilGregorianCalendar_init();
      }
      else {
        
#line 241
        jint offset = JavaLangInteger_parseIntWithNSString_([s java_substring:idx + 1 endIndex:idx + 3]) * 60;
        if (idx + 5 < [s java_length]) {
          offset += JavaLangInteger_parseIntWithNSString_([s java_substring:idx + 4 endIndex:idx + 6]);
        }
        calendar = new_JavaUtilGregorianCalendar_initWithJavaUtilTimeZone_(new_JavaUtilSimpleTimeZone_initWithInt_withNSString_(offset * sign * 60000, @"ZPDF"));
        slen = idx;
      }
    }
    [calendar clear];
    idx = 0;
    for (jint k = 0; k < ((IOSIntArray *) nil_chk(ComAowagieTextPdfPdfDate_DATE_SPACE))->size_; k += 3) {
      if (idx >= slen) {
        break;
      }
      [calendar setWithInt:IOSIntArray_Get(ComAowagieTextPdfPdfDate_DATE_SPACE, k) withInt:JavaLangInteger_parseIntWithNSString_([s java_substring:idx endIndex:idx + IOSIntArray_Get(ComAowagieTextPdfPdfDate_DATE_SPACE, k + 1)]) + IOSIntArray_Get(ComAowagieTextPdfPdfDate_DATE_SPACE, k + 2)];
      idx += IOSIntArray_Get(ComAowagieTextPdfPdfDate_DATE_SPACE, k + 1);
    }
    return calendar;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfDate)
