//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/util/Pack.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Pack")
#ifdef RESTRICT_Pack
#define INCLUDE_ALL_Pack 0
#else
#define INCLUDE_ALL_Pack 1
#endif
#undef RESTRICT_Pack

#if !defined (OrgSpongycastleUtilPack_) && (INCLUDE_ALL_Pack || defined(INCLUDE_OrgSpongycastleUtilPack))
#define OrgSpongycastleUtilPack_

@class IOSByteArray;
@class IOSIntArray;
@class IOSLongArray;

/*!
 @brief Utility methods for converting byte arrays into ints and longs, and back again.
 */
@interface OrgSpongycastleUtilPack : NSObject

#pragma mark Public

- (instancetype)init;

+ (jint)bigEndianToIntWithByteArray:(IOSByteArray *)bs
                            withInt:(jint)off;

+ (void)bigEndianToIntWithByteArray:(IOSByteArray *)bs
                            withInt:(jint)off
                       withIntArray:(IOSIntArray *)ns;

+ (jlong)bigEndianToLongWithByteArray:(IOSByteArray *)bs
                              withInt:(jint)off;

+ (void)bigEndianToLongWithByteArray:(IOSByteArray *)bs
                             withInt:(jint)off
                       withLongArray:(IOSLongArray *)ns;

+ (jshort)bigEndianToShortWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)off;

+ (IOSByteArray *)intToBigEndianWithInt:(jint)n;

+ (void)intToBigEndianWithInt:(jint)n
                withByteArray:(IOSByteArray *)bs
                      withInt:(jint)off;

+ (IOSByteArray *)intToBigEndianWithIntArray:(IOSIntArray *)ns;

+ (void)intToBigEndianWithIntArray:(IOSIntArray *)ns
                     withByteArray:(IOSByteArray *)bs
                           withInt:(jint)off;

+ (IOSByteArray *)intToLittleEndianWithInt:(jint)n;

+ (void)intToLittleEndianWithInt:(jint)n
                   withByteArray:(IOSByteArray *)bs
                         withInt:(jint)off;

+ (IOSByteArray *)intToLittleEndianWithIntArray:(IOSIntArray *)ns;

+ (void)intToLittleEndianWithIntArray:(IOSIntArray *)ns
                        withByteArray:(IOSByteArray *)bs
                              withInt:(jint)off;

+ (jint)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)off;

+ (IOSIntArray *)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                                        withInt:(jint)off
                                        withInt:(jint)count;

+ (void)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)off
                          withIntArray:(IOSIntArray *)ns;

+ (void)littleEndianToIntWithByteArray:(IOSByteArray *)bs
                               withInt:(jint)bOff
                          withIntArray:(IOSIntArray *)ns
                               withInt:(jint)nOff
                               withInt:(jint)count;

+ (jlong)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                 withInt:(jint)off;

+ (void)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)off
                          withLongArray:(IOSLongArray *)ns;

+ (void)littleEndianToLongWithByteArray:(IOSByteArray *)bs
                                withInt:(jint)bsOff
                          withLongArray:(IOSLongArray *)ns
                                withInt:(jint)nsOff
                                withInt:(jint)nsLen;

+ (jshort)littleEndianToShortWithByteArray:(IOSByteArray *)bs
                                   withInt:(jint)off;

+ (IOSByteArray *)longToBigEndianWithLong:(jlong)n;

+ (void)longToBigEndianWithLong:(jlong)n
                  withByteArray:(IOSByteArray *)bs
                        withInt:(jint)off;

+ (IOSByteArray *)longToBigEndianWithLongArray:(IOSLongArray *)ns;

+ (void)longToBigEndianWithLongArray:(IOSLongArray *)ns
                       withByteArray:(IOSByteArray *)bs
                             withInt:(jint)off;

+ (IOSByteArray *)longToLittleEndianWithLong:(jlong)n;

+ (void)longToLittleEndianWithLong:(jlong)n
                     withByteArray:(IOSByteArray *)bs
                           withInt:(jint)off;

+ (IOSByteArray *)longToLittleEndianWithLongArray:(IOSLongArray *)ns;

+ (void)longToLittleEndianWithLongArray:(IOSLongArray *)ns
                          withByteArray:(IOSByteArray *)bs
                                withInt:(jint)off;

+ (void)longToLittleEndianWithLongArray:(IOSLongArray *)ns
                                withInt:(jint)nsOff
                                withInt:(jint)nsLen
                          withByteArray:(IOSByteArray *)bs
                                withInt:(jint)bsOff;

+ (IOSByteArray *)shortToLittleEndianWithShort:(jshort)n;

+ (void)shortToLittleEndianWithShort:(jshort)n
                       withByteArray:(IOSByteArray *)bs
                             withInt:(jint)off;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleUtilPack)

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_init(OrgSpongycastleUtilPack *self);

FOUNDATION_EXPORT jshort OrgSpongycastleUtilPack_bigEndianToShortWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jint OrgSpongycastleUtilPack_bigEndianToIntWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_bigEndianToIntWithByteArray_withInt_withIntArray_(IOSByteArray *bs, jint off, IOSIntArray *ns);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_intToBigEndianWithInt_(jint n);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_intToBigEndianWithInt_withByteArray_withInt_(jint n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_intToBigEndianWithIntArray_(IOSIntArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_intToBigEndianWithIntArray_withByteArray_withInt_(IOSIntArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jlong OrgSpongycastleUtilPack_bigEndianToLongWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_bigEndianToLongWithByteArray_withInt_withLongArray_(IOSByteArray *bs, jint off, IOSLongArray *ns);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_longToBigEndianWithLong_(jlong n);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_longToBigEndianWithLong_withByteArray_withInt_(jlong n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_longToBigEndianWithLongArray_(IOSLongArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_longToBigEndianWithLongArray_withByteArray_withInt_(IOSLongArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jshort OrgSpongycastleUtilPack_littleEndianToShortWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jint OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_(IOSByteArray *bs, jint off, IOSIntArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withIntArray_withInt_withInt_(IOSByteArray *bs, jint bOff, IOSIntArray *ns, jint nOff, jint count);

FOUNDATION_EXPORT IOSIntArray *OrgSpongycastleUtilPack_littleEndianToIntWithByteArray_withInt_withInt_(IOSByteArray *bs, jint off, jint count);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_shortToLittleEndianWithShort_(jshort n);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_shortToLittleEndianWithShort_withByteArray_withInt_(jshort n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_intToLittleEndianWithInt_(jint n);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_intToLittleEndianWithInt_withByteArray_withInt_(jint n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_intToLittleEndianWithIntArray_(IOSIntArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_intToLittleEndianWithIntArray_withByteArray_withInt_(IOSIntArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT jlong OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_(IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_(IOSByteArray *bs, jint off, IOSLongArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_littleEndianToLongWithByteArray_withInt_withLongArray_withInt_withInt_(IOSByteArray *bs, jint bsOff, IOSLongArray *ns, jint nsOff, jint nsLen);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_longToLittleEndianWithLong_(jlong n);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_longToLittleEndianWithLong_withByteArray_withInt_(jlong n, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT IOSByteArray *OrgSpongycastleUtilPack_longToLittleEndianWithLongArray_(IOSLongArray *ns);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_longToLittleEndianWithLongArray_withByteArray_withInt_(IOSLongArray *ns, IOSByteArray *bs, jint off);

FOUNDATION_EXPORT void OrgSpongycastleUtilPack_longToLittleEndianWithLongArray_withInt_withInt_withByteArray_withInt_(IOSLongArray *ns, jint nsOff, jint nsLen, IOSByteArray *bs, jint bsOff);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleUtilPack)

#endif

#pragma pop_macro("INCLUDE_ALL_Pack")
