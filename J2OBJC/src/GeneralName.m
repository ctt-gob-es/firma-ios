//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/x509/GeneralName.java
//

#include "ASN1Encodable.h"
#include "ASN1Object.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "ASN1TaggedObject.h"
#include "DERIA5String.h"
#include "DEROctetString.h"
#include "DERTaggedObject.h"
#include "GeneralName.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IPAddress.h"
#include "J2ObjC_source.h"
#include "X500Name.h"
#include "X509Name.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/StringTokenizer.h"

#if !__has_feature(objc_arc)
#error "GeneralName must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleAsn1X509GeneralName () {
 @public
  id<OrgSpongycastleAsn1ASN1Encodable> obj_;
  jint tag_;
}

- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip;

- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset;

- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset;

- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask;

- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet OBJC_METHOD_FAMILY_NONE;

- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleAsn1X509GeneralName, obj_, id<OrgSpongycastleAsn1ASN1Encodable>)

__attribute__((unused)) static IOSByteArray *OrgSpongycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip);

__attribute__((unused)) static void OrgSpongycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset);

__attribute__((unused)) static void OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset);

__attribute__((unused)) static IOSIntArray *OrgSpongycastleAsn1X509GeneralName_parseMaskWithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *mask);

__attribute__((unused)) static void OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet);

__attribute__((unused)) static IOSIntArray *OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/asn1/x509/GeneralName.java"


#line 45
@implementation OrgSpongycastleAsn1X509GeneralName


#line 66
- (instancetype)initWithOrgSpongycastleAsn1X509X509Name:(OrgSpongycastleAsn1X509X509Name *)dirName {
  OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X509X509Name_(self, dirName);
  return self;
}


#line 73
- (instancetype)initWithOrgSpongycastleAsn1X500X500Name:(OrgSpongycastleAsn1X500X500Name *)dirName {
  OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(self, dirName);
  return self;
}


#line 107
- (instancetype)initWithInt:(jint)tag
withOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>)name {
  OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(self, tag, name);
  return self;
}


#line 138
- (instancetype)initWithInt:(jint)tag
               withNSString:(NSString *)name {
  OrgSpongycastleAsn1X509GeneralName_initWithInt_withNSString_(self, tag, name);
  return self;
}


#line 174
+ (OrgSpongycastleAsn1X509GeneralName *)getInstanceWithId:(id)obj {
  return OrgSpongycastleAsn1X509GeneralName_getInstanceWithId_(obj);
}


#line 225
+ (OrgSpongycastleAsn1X509GeneralName *)getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:(OrgSpongycastleAsn1ASN1TaggedObject *)tagObj
                                                                               withBoolean:(jboolean)explicit_ {
  return OrgSpongycastleAsn1X509GeneralName_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, explicit_);
}


#line 232
- (jint)getTagNo {
  
#line 234
  return tag_;
}


#line 237
- (id<OrgSpongycastleAsn1ASN1Encodable>)getName {
  
#line 239
  return obj_;
}


#line 242
- (NSString *)description {
  
#line 244
  JavaLangStringBuffer *buf = new_JavaLangStringBuffer_init();
  
#line 246
  (void) [buf appendWithInt:tag_];
  (void) [buf appendWithNSString:@": "];
  switch (tag_) {
    
#line 250
    case OrgSpongycastleAsn1X509GeneralName_rfc822Name:
    case OrgSpongycastleAsn1X509GeneralName_dNSName:
    case OrgSpongycastleAsn1X509GeneralName_uniformResourceIdentifier:
    (void) [buf appendWithNSString:[((OrgSpongycastleAsn1DERIA5String *) nil_chk(OrgSpongycastleAsn1DERIA5String_getInstanceWithId_(obj_))) getString]];
    break;
    case OrgSpongycastleAsn1X509GeneralName_directoryName:
    (void) [buf appendWithNSString:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(obj_))) description]];
    break;
    default:
    (void) [buf appendWithNSString:[((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk(obj_)) description]];
  }
  return [buf description];
}


#line 264
- (IOSByteArray *)toGeneralNameEncodingWithNSString:(NSString *)ip {
  return OrgSpongycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, ip);
}


#line 332
- (void)parseIPv4MaskWithNSString:(NSString *)mask
                    withByteArray:(IOSByteArray *)addr
                          withInt:(jint)offset {
  OrgSpongycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, offset);
}


#line 342
- (void)parseIPv4WithNSString:(NSString *)ip
                withByteArray:(IOSByteArray *)addr
                      withInt:(jint)offset {
  OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, offset);
}


#line 353
- (IOSIntArray *)parseMaskWithNSString:(NSString *)mask {
  return OrgSpongycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
}


#line 365
- (void)copyIntsWithIntArray:(IOSIntArray *)parsedIp
               withByteArray:(IOSByteArray *)addr
                     withInt:(jint)offSet {
  OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, offSet);
}


#line 374
- (IOSIntArray *)parseIPv6WithNSString:(NSString *)ip {
  return OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
}


#line 428
- (OrgSpongycastleAsn1ASN1Primitive *)toASN1Primitive {
  
#line 430
  if (tag_ == OrgSpongycastleAsn1X509GeneralName_directoryName) {
    
#line 432
    return new_OrgSpongycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgSpongycastleAsn1ASN1Encodable_(true, tag_, obj_);
  }
  else {
    
#line 436
    return new_OrgSpongycastleAsn1DERTaggedObject_initWithBoolean_withInt_withOrgSpongycastleAsn1ASN1Encodable_(false, tag_, obj_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509GeneralName;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509GeneralName;", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Encodable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 16, 9, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgSpongycastleAsn1X509X509Name:);
  methods[1].selector = @selector(initWithOrgSpongycastleAsn1X500X500Name:);
  methods[2].selector = @selector(initWithInt:withOrgSpongycastleAsn1ASN1Encodable:);
  methods[3].selector = @selector(initWithInt:withNSString:);
  methods[4].selector = @selector(getInstanceWithId:);
  methods[5].selector = @selector(getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject:withBoolean:);
  methods[6].selector = @selector(getTagNo);
  methods[7].selector = @selector(getName);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(toGeneralNameEncodingWithNSString:);
  methods[10].selector = @selector(parseIPv4MaskWithNSString:withByteArray:withInt:);
  methods[11].selector = @selector(parseIPv4WithNSString:withByteArray:withInt:);
  methods[12].selector = @selector(parseMaskWithNSString:);
  methods[13].selector = @selector(copyIntsWithIntArray:withByteArray:withInt:);
  methods[14].selector = @selector(parseIPv6WithNSString:);
  methods[15].selector = @selector(toASN1Primitive);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "otherName", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_otherName, 0x19, -1, -1, -1, -1 },
    { "rfc822Name", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_rfc822Name, 0x19, -1, -1, -1, -1 },
    { "dNSName", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_dNSName, 0x19, -1, -1, -1, -1 },
    { "x400Address", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_x400Address, 0x19, -1, -1, -1, -1 },
    { "directoryName", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_directoryName, 0x19, -1, -1, -1, -1 },
    { "ediPartyName", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_ediPartyName, 0x19, -1, -1, -1, -1 },
    { "uniformResourceIdentifier", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_uniformResourceIdentifier, 0x19, -1, -1, -1, -1 },
    { "iPAddress", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_iPAddress, 0x19, -1, -1, -1, -1 },
    { "registeredID", "I", .constantValue.asInt = OrgSpongycastleAsn1X509GeneralName_registeredID, 0x19, -1, -1, -1, -1 },
    { "obj_", "LOrgSpongycastleAsn1ASN1Encodable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tag_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgSpongycastleAsn1X509X509Name;", "LOrgSpongycastleAsn1X500X500Name;", "ILOrgSpongycastleAsn1ASN1Encodable;", "ILNSString;", "getInstance", "LNSObject;", "LOrgSpongycastleAsn1ASN1TaggedObject;Z", "toString", "toGeneralNameEncoding", "LNSString;", "parseIPv4Mask", "LNSString;[BI", "parseIPv4", "parseMask", "copyInts", "[I[BI", "parseIPv6" };
  static const J2ObjcClassInfo _OrgSpongycastleAsn1X509GeneralName = { "GeneralName", "org.spongycastle.asn1.x509", ptrTable, methods, fields, 7, 0x1, 16, 11, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleAsn1X509GeneralName;
}

@end


#line 66
void OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X509X509Name_(OrgSpongycastleAsn1X509GeneralName *self, OrgSpongycastleAsn1X509X509Name *dirName) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  
#line 69
  self->obj_ = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_(dirName);
  self->tag_ = 4;
}


#line 66
OrgSpongycastleAsn1X509GeneralName *new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X509X509Name_(OrgSpongycastleAsn1X509X509Name *dirName) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithOrgSpongycastleAsn1X509X509Name_, dirName)
}


#line 66
OrgSpongycastleAsn1X509GeneralName *create_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X509X509Name_(OrgSpongycastleAsn1X509X509Name *dirName) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithOrgSpongycastleAsn1X509X509Name_, dirName)
}


#line 73
void OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X509GeneralName *self, OrgSpongycastleAsn1X500X500Name *dirName) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  
#line 76
  self->obj_ = dirName;
  self->tag_ = 4;
}


#line 73
OrgSpongycastleAsn1X509GeneralName *new_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name *dirName) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithOrgSpongycastleAsn1X500X500Name_, dirName)
}


#line 73
OrgSpongycastleAsn1X509GeneralName *create_OrgSpongycastleAsn1X509GeneralName_initWithOrgSpongycastleAsn1X500X500Name_(OrgSpongycastleAsn1X500X500Name *dirName) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithOrgSpongycastleAsn1X500X500Name_, dirName)
}


#line 107
void OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(OrgSpongycastleAsn1X509GeneralName *self, jint tag, id<OrgSpongycastleAsn1ASN1Encodable> name) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  
#line 111
  self->obj_ = name;
  self->tag_ = tag;
}


#line 107
OrgSpongycastleAsn1X509GeneralName *new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(jint tag, id<OrgSpongycastleAsn1ASN1Encodable> name) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithInt_withOrgSpongycastleAsn1ASN1Encodable_, tag, name)
}


#line 107
OrgSpongycastleAsn1X509GeneralName *create_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(jint tag, id<OrgSpongycastleAsn1ASN1Encodable> name) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithInt_withOrgSpongycastleAsn1ASN1Encodable_, tag, name)
}


#line 138
void OrgSpongycastleAsn1X509GeneralName_initWithInt_withNSString_(OrgSpongycastleAsn1X509GeneralName *self, jint tag, NSString *name) {
  OrgSpongycastleAsn1ASN1Object_init(self);
  
#line 142
  self->tag_ = tag;
  
#line 144
  if (tag == OrgSpongycastleAsn1X509GeneralName_rfc822Name || tag == OrgSpongycastleAsn1X509GeneralName_dNSName || tag == OrgSpongycastleAsn1X509GeneralName_uniformResourceIdentifier) {
    
#line 146
    self->obj_ = new_OrgSpongycastleAsn1DERIA5String_initWithNSString_(name);
  }
  else if (tag == OrgSpongycastleAsn1X509GeneralName_registeredID) {
    
#line 150
    self->obj_ = new_OrgSpongycastleAsn1ASN1ObjectIdentifier_initWithNSString_(name);
  }
  else if (tag == OrgSpongycastleAsn1X509GeneralName_directoryName) {
    
#line 154
    self->obj_ = new_OrgSpongycastleAsn1X500X500Name_initWithNSString_(name);
  }
  else if (tag == OrgSpongycastleAsn1X509GeneralName_iPAddress) {
    
#line 158
    IOSByteArray *enc = OrgSpongycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(self, name);
    if (enc != nil) {
      
#line 161
      self->obj_ = new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(enc);
    }
    else {
      
#line 165
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"IP Address is invalid");
    }
  }
  else {
    
#line 170
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"can't process String for tag: ", tag));
  }
}


#line 138
OrgSpongycastleAsn1X509GeneralName *new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) {
  J2OBJC_NEW_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithInt_withNSString_, tag, name)
}


#line 138
OrgSpongycastleAsn1X509GeneralName *create_OrgSpongycastleAsn1X509GeneralName_initWithInt_withNSString_(jint tag, NSString *name) {
  J2OBJC_CREATE_IMPL(OrgSpongycastleAsn1X509GeneralName, initWithInt_withNSString_, tag, name)
}


#line 174
OrgSpongycastleAsn1X509GeneralName *OrgSpongycastleAsn1X509GeneralName_getInstanceWithId_(id obj) {
  OrgSpongycastleAsn1X509GeneralName_initialize();
  
#line 177
  if (obj == nil || [obj isKindOfClass:[OrgSpongycastleAsn1X509GeneralName class]]) {
    
#line 179
    return (OrgSpongycastleAsn1X509GeneralName *) cast_chk(obj, [OrgSpongycastleAsn1X509GeneralName class]);
  }
  
#line 182
  if ([obj isKindOfClass:[OrgSpongycastleAsn1ASN1TaggedObject class]]) {
    
#line 184
    OrgSpongycastleAsn1ASN1TaggedObject *tagObj = (OrgSpongycastleAsn1ASN1TaggedObject *) obj;
    jint tag = [tagObj getTagNo];
    
#line 187
    switch (tag) {
      
#line 189
      case OrgSpongycastleAsn1X509GeneralName_otherName:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1ASN1Sequence_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_rfc822Name:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1DERIA5String_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_dNSName:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1DERIA5String_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_x400Address:
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"unknown tag: ", tag));
      case OrgSpongycastleAsn1X509GeneralName_directoryName:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1X500X500Name_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, true));
      case OrgSpongycastleAsn1X509GeneralName_ediPartyName:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1ASN1Sequence_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_uniformResourceIdentifier:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1DERIA5String_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_iPAddress:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1ASN1OctetString_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
      case OrgSpongycastleAsn1X509GeneralName_registeredID:
      return new_OrgSpongycastleAsn1X509GeneralName_initWithInt_withOrgSpongycastleAsn1ASN1Encodable_(tag, OrgSpongycastleAsn1ASN1ObjectIdentifier_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, false));
    }
  }
  
#line 210
  if ([obj isKindOfClass:[IOSByteArray class]]) {
    
#line 212
    @try {
      
#line 214
      return OrgSpongycastleAsn1X509GeneralName_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_((IOSByteArray *) cast_chk(obj, [IOSByteArray class])));
    }
    @catch (JavaIoIOException *e) {
      
#line 218
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"unable to parse encoded general name");
    }
  }
  
#line 222
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown object in getInstance: ", [[obj java_getClass] getName]));
}


#line 225
OrgSpongycastleAsn1X509GeneralName *OrgSpongycastleAsn1X509GeneralName_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(OrgSpongycastleAsn1ASN1TaggedObject *tagObj, jboolean explicit_) {
  OrgSpongycastleAsn1X509GeneralName_initialize();
  
#line 229
  return OrgSpongycastleAsn1X509GeneralName_getInstanceWithId_(OrgSpongycastleAsn1ASN1TaggedObject_getInstanceWithOrgSpongycastleAsn1ASN1TaggedObject_withBoolean_(tagObj, true));
}


#line 264
IOSByteArray *OrgSpongycastleAsn1X509GeneralName_toGeneralNameEncodingWithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip) {
  
#line 266
  if (OrgSpongycastleUtilIPAddress_isValidIPv6WithNetmaskWithNSString_(ip) || OrgSpongycastleUtilIPAddress_isValidIPv6WithNSString_(ip)) {
    
#line 268
    jint slashIndex = [((NSString *) nil_chk(ip)) java_indexOf:'/'];
    
#line 270
    if (slashIndex < 0) {
      
#line 272
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:16];
      IOSIntArray *parsedIp = OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, ip);
      OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      
#line 276
      return addr;
    }
    else {
      
#line 280
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:32];
      IOSIntArray *parsedIp = OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, [ip java_substring:0 endIndex:slashIndex]);
      OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 0);
      NSString *mask = [ip java_substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) java_indexOf:':'] > 0) {
        
#line 286
        parsedIp = OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(self, mask);
      }
      else {
        
#line 290
        parsedIp = OrgSpongycastleAsn1X509GeneralName_parseMaskWithNSString_(self, mask);
      }
      OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(self, parsedIp, addr, 16);
      
#line 294
      return addr;
    }
  }
  else if (OrgSpongycastleUtilIPAddress_isValidIPv4WithNetmaskWithNSString_(ip) || OrgSpongycastleUtilIPAddress_isValidIPv4WithNSString_(ip)) {
    
#line 299
    jint slashIndex = [((NSString *) nil_chk(ip)) java_indexOf:'/'];
    
#line 301
    if (slashIndex < 0) {
      
#line 303
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:4];
      
#line 305
      OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, ip, addr, 0);
      
#line 307
      return addr;
    }
    else {
      
#line 311
      IOSByteArray *addr = [IOSByteArray newArrayWithLength:8];
      
#line 313
      OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, [ip java_substring:0 endIndex:slashIndex], addr, 0);
      
#line 315
      NSString *mask = [ip java_substring:slashIndex + 1];
      if ([((NSString *) nil_chk(mask)) java_indexOf:'.'] > 0) {
        
#line 318
        OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      else {
        
#line 322
        OrgSpongycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(self, mask, addr, 4);
      }
      
#line 325
      return addr;
    }
  }
  
#line 329
  return nil;
}


#line 332
void OrgSpongycastleAsn1X509GeneralName_parseIPv4MaskWithNSString_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, NSString *mask, IOSByteArray *addr, jint offset) {
  
#line 334
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  
#line 336
  for (jint i = 0; i != maskVal; i++) {
    
#line 338
    *IOSByteArray_GetRef(nil_chk(addr), (JreIntDiv(i, 8)) + offset) |= JreLShift32(1, (7 - (JreIntMod(i, 8))));
  }
}


#line 342
void OrgSpongycastleAsn1X509GeneralName_parseIPv4WithNSString_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip, IOSByteArray *addr, jint offset) {
  
#line 344
  JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(ip, @"./");
  jint index = 0;
  
#line 347
  while ([sTok hasMoreTokens]) {
    
#line 349
    *IOSByteArray_GetRef(nil_chk(addr), offset + index++) = (jbyte) JavaLangInteger_parseIntWithNSString_([sTok nextToken]);
  }
}


#line 353
IOSIntArray *OrgSpongycastleAsn1X509GeneralName_parseMaskWithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *mask) {
  
#line 355
  IOSIntArray *res = [IOSIntArray newArrayWithLength:8];
  jint maskVal = JavaLangInteger_parseIntWithNSString_(mask);
  
#line 358
  for (jint i = 0; i != maskVal; i++) {
    
#line 360
    *IOSIntArray_GetRef(res, JreIntDiv(i, 16)) |= JreLShift32(1, (15 - (JreIntMod(i, 16))));
  }
  return res;
}


#line 365
void OrgSpongycastleAsn1X509GeneralName_copyIntsWithIntArray_withByteArray_withInt_(OrgSpongycastleAsn1X509GeneralName *self, IOSIntArray *parsedIp, IOSByteArray *addr, jint offSet) {
  
#line 367
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(parsedIp))->size_; i++) {
    
#line 369
    *IOSByteArray_GetRef(nil_chk(addr), (i * 2) + offSet) = (jbyte) (JreRShift32(IOSIntArray_Get(parsedIp, i), 8));
    *IOSByteArray_GetRef(addr, (i * 2 + 1) + offSet) = (jbyte) IOSIntArray_Get(parsedIp, i);
  }
}


#line 374
IOSIntArray *OrgSpongycastleAsn1X509GeneralName_parseIPv6WithNSString_(OrgSpongycastleAsn1X509GeneralName *self, NSString *ip) {
  
#line 376
  JavaUtilStringTokenizer *sTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_withBoolean_(ip, @":", true);
  jint index = 0;
  IOSIntArray *val = [IOSIntArray newArrayWithLength:8];
  
#line 380
  if ([((NSString *) nil_chk(ip)) charAtWithInt:0] == ':' && [ip charAtWithInt:1] == ':') {
    
#line 382
    (void) [sTok nextToken];
  }
  
#line 385
  jint doubleColon = -1;
  
#line 387
  while ([sTok hasMoreTokens]) {
    
#line 389
    NSString *e = [sTok nextToken];
    
#line 391
    if ([((NSString *) nil_chk(e)) isEqual:@":"]) {
      
#line 393
      doubleColon = index;
      *IOSIntArray_GetRef(val, index++) = 0;
    }
    else {
      
#line 398
      if ([e java_indexOf:'.'] < 0) {
        
#line 400
        *IOSIntArray_GetRef(val, index++) = JavaLangInteger_parseIntWithNSString_withInt_(e, 16);
        if ([sTok hasMoreTokens]) {
          
#line 403
          (void) [sTok nextToken];
        }
      }
      else {
        
#line 408
        JavaUtilStringTokenizer *eTok = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(e, @".");
        
#line 410
        *IOSIntArray_GetRef(val, index++) = (JreLShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
        *IOSIntArray_GetRef(val, index++) = (JreLShift32(JavaLangInteger_parseIntWithNSString_([eTok nextToken]), 8)) | JavaLangInteger_parseIntWithNSString_([eTok nextToken]);
      }
    }
  }
  
#line 416
  if (index != val->size_) {
    
#line 418
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(val, doubleColon, val, val->size_ - (index - doubleColon), index - doubleColon);
    for (jint i = doubleColon; i != val->size_ - (index - doubleColon); i++) {
      
#line 421
      *IOSIntArray_GetRef(val, i) = 0;
    }
  }
  
#line 425
  return val;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleAsn1X509GeneralName)
