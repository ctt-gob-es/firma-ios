//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/signers/cades/asic/AOCAdESASiCSSigner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AOCAdESASiCSSigner")
#ifdef RESTRICT_AOCAdESASiCSSigner
#define INCLUDE_ALL_AOCAdESASiCSSigner 0
#else
#define INCLUDE_ALL_AOCAdESASiCSSigner 1
#endif
#undef RESTRICT_AOCAdESASiCSSigner

#if !defined (EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner_) && (INCLUDE_ALL_AOCAdESASiCSSigner || defined(INCLUDE_EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner))
#define EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner_

#define RESTRICT_AOSigner 1
#define INCLUDE_EsGobAfirmaCoreSignersAOSigner 1
#include "AOSigner.h"

@class EsGobAfirmaCoreSignersAOSignInfo;
@class EsGobAfirmaCoreSignersCounterSignTarget;
@class EsGobAfirmaCoreUtilTreeAOTreeModel;
@class IOSByteArray;
@class IOSObjectArray;
@class JavaUtilProperties;
@protocol JavaSecurityPrivateKey;

/*!
 @brief Firmador CAdES ASiC-S.
 @author Tom&aacute;s Garc&iacute;a-Mer&aacute;s.
 */
@interface EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner : NSObject < EsGobAfirmaCoreSignersAOSigner >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Cofirma en formato CAdES los datos encontrados en un contenedor ASiC-S que ya tuviese una firma CAdES o CMS,
  a&ntilde;adiendo esta nueva firma a la del contenedor (se sustituye la antigua por la el nuevo fichero con todas las firmas).
 No se pueden cofirmar con esta clase contenedores ASiC-S que ya contengan firmas XML. 
 <p>
   Nota sobre cofirmas cruzadas entre PKCS#7/CMS y CAdES:<br>
   Las cofirmas de un documento dan como resultado varias firmas a un mismo nivel sobre este mismo documento,
   es decir, que ninguna firma envuelve a la otra ni una prevalece sobre la otra.
   A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente,
   esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el
   resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas
   independientes, una en CAdES y otra en CMS.<br>
   Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma
   se adec&uacute;a al est&aacute;ndar mas amplio, CMS en este caso.
   Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos en un unico documento es la ruptura
   de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles
   con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES,
   se pierde la compatibilidad PKCS#7 en el global de la firma. 
 </p>
  <p><b>IMPORTANTE: Este m&eacute;todo requiere la presencia de <code>es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCoSigner</code> en el CLASSPATH</b></p>
 @param data Se ignora este par &aacute; metro, los datos se cojen del contenedor ASiC-S.
 @param sign Contenedor ASiC-S (con un fichero de firmas CAdES o CMS).
 @param algorithm Algoritmo a usar para la firma.  
  <p> Se aceptan los siguientes algoritmos en el par &aacute; metro  <code> algorithm </code> : </p>   <ul>    <li> &nbsp; &nbsp; &nbsp; <i> SHA1 </i> </li>    <li> &nbsp; &nbsp; &nbsp; <i> SHA256 </i> </li>    <li> &nbsp; &nbsp; &nbsp; <i> SHA384 </i> </li>    <li> &nbsp; &nbsp; &nbsp; <i> SHA512 </i> </li>   </ul>
 @param key Clave privada a usar para firmar
 @param extraParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams-asic-s.html"> detalle </a> ). <br>                     Adicionalmente, se pueden usar tambi &eacute; n los  <a href="doc-files/extraparams.html"> par &aacute; metros                     definidos para las firmas CAdES normales </a>  menos el par &aacute; metro  <code> mode </code> , que aunque se                     estableca no tendr &aacute;  ning &uacute; n efecto, ya que un contenedor ASiC contendra siempre, y de forma                     separada, datos y firma.
 @return Contenedor ASiC-S con su fichero de firmas conteniendo la nueva firma.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionSi hay problemas en el tratamiento de datos.
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)data
                        withByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams;

/*!
 @brief Cofirma en formato CAdES los datos encontrador en un contenedor ASiC-S que ya tuviese una firma CAdES o CMS,
  a&ntilde;adiendo esta nueva firma a la del contenedor (se sustituye la antigua por la el nuevo fichero con todas las firmas).
 No se pueden cofirmar con esta clase contenedores ASiC-S que ya contengan firmas XML. 
 <p>
   Nota sobre cofirmas cruzadas entre PKCS#7/CMS y CAdES:<br>
   Las cofirmas de un documento dan como resultado varias firmas a un mismo nivel sobre este mismo documento,
   es decir, que ninguna firma envuelve a la otra ni una prevalece sobre la otra.
   A nivel de formato interno, esto quiere decir que cuando cofirmamos un documento ya firmado previamente,
   esta firma previa no se modifica. Si tenemos en cuenta que CAdES es en realidad un subconjunto de CMS, el
   resultado de una cofirma CAdES sobre un documento firmado previamente con CMS (o viceversa), son dos firmas
   independientes, una en CAdES y otra en CMS.<br>
   Dado que todas las firmas CAdES son CMS pero no todas las firmas CMS son CAdES, el resultado global de la firma
   se adec&uacute;a al est&aacute;ndar mas amplio, CMS en este caso.
   Otro efecto de compatibilidad de formatos de las cofirmas con varios formatos en un unico documento es la ruptura
   de la compatibilidad con PKCS#7, ya que, aunque las firmas generadas por el cliente mediante CMS son compatibles
   con PKCS#7, las generadas con CAdES no lo son, por lo que, en el momento que se introduzca una estructura CAdES,
   se pierde la compatibilidad PKCS#7 en el global de la firma. 
 </p>
  <p><b>IMPORTANTE: Este m&eacute;todo requiere la presencia de <code>es.gob.afirma.signers.multi.cades.asic.AOCAdESASiCSCoSigner</code> en el CLASSPATH</b></p>
 @param sign Contenedor ASiC-S (con un fichero de firmas CAdES o CMS).
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar
 @param extraParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams-asic-s.html"> detalle </a> ). <br>                     Adicionalmente, se pueden usar tambi &eacute; n los  <a href="doc-files/extraparams.html"> par &aacute; metros                     definidos para las firmas CAdES normales </a>  menos el par &aacute; metro  <code> mode </code> , que aunque se                     estableca no tendr &aacute;  ning &uacute; n efecto, ya que un contenedor ASiC contendra siempre, y de forma                     separada, datos y firma.
 @return Contenedor ASiC-S con su fichero de firmas conteniendo la nueva firma.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionSi hay problemas en el tratamiento de datos.
 */
- (IOSByteArray *)cosignWithByteArray:(IOSByteArray *)sign
                         withNSString:(NSString *)algorithm
           withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
 withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
               withJavaUtilProperties:(JavaUtilProperties *)extraParams;

- (IOSByteArray *)countersignWithByteArray:(IOSByteArray *)sign
                              withNSString:(NSString *)algorithm
withEsGobAfirmaCoreSignersCounterSignTarget:(EsGobAfirmaCoreSignersCounterSignTarget *)targetType
                         withNSObjectArray:(IOSObjectArray *)targets
                withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
      withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
                    withJavaUtilProperties:(JavaUtilProperties *)extraParams;

- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)signData;

- (IOSByteArray *)getDataWithByteArray:(IOSByteArray *)sign
                withJavaUtilProperties:(JavaUtilProperties *)params;

- (NSString *)getSignedNameWithNSString:(NSString *)originalName
                           withNSString:(NSString *)inText;

- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                             withBoolean:(jboolean)asSimpleSignInfo;

- (EsGobAfirmaCoreUtilTreeAOTreeModel *)getSignersStructureWithByteArray:(IOSByteArray *)sign
                                                  withJavaUtilProperties:(JavaUtilProperties *)params
                                                             withBoolean:(jboolean)asSimpleSignInfo;

- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)signData;

- (EsGobAfirmaCoreSignersAOSignInfo *)getSignInfoWithByteArray:(IOSByteArray *)data
                                        withJavaUtilProperties:(JavaUtilProperties *)params;

- (jboolean)isSignWithByteArray:(IOSByteArray *)is;

- (jboolean)isSignWithByteArray:(IOSByteArray *)signData
         withJavaUtilProperties:(JavaUtilProperties *)params;

- (jboolean)isValidDataFileWithByteArray:(IOSByteArray *)data;

/*!
 @brief Firma datos en formato CAdES devolviendo el resultado empaquetado como ASiC-S.
 @param data Datos que deseamos firmar.
 @param algorithm Algoritmo a usar para la firma.
 @param key Clave privada a usar para firmar.
 @param certChain Cadena de certificados del firmante.
 @param xParams Par &aacute; metros adicionales para la firma ( <a href="doc-files/extraparams-asic-s.html"> detalle </a> ). <br>                 Adicionalmente, se pueden usar tambi &eacute; n los  <a href="doc-files/extraparams.html"> par &aacute; metros                 definidos para las firmas CAdES normales </a>  menos el par &aacute; metro  <code> mode </code> , que aunque se                 estableca no tendr &aacute;  ning &uacute; n efecto, ya que un contenedor ASiC contendra siempre, y de forma                 separada, datos y firma.
 @return Firma en formato CAdES.
 @throw AOExceptionCuando ocurre cualquier problema durante el proceso.
 @throw IOExceptionSi hay problemas en el tratamiento de datos.
 */
- (IOSByteArray *)signWithByteArray:(IOSByteArray *)data
                       withNSString:(NSString *)algorithm
         withJavaSecurityPrivateKey:(id<JavaSecurityPrivateKey>)key
withJavaSecurityCertCertificateArray:(IOSObjectArray *)certChain
             withJavaUtilProperties:(JavaUtilProperties *)xParams;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner)

FOUNDATION_EXPORT void EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner_init(EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner *self);

FOUNDATION_EXPORT EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner *new_EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner *create_EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner_init(void);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaSignersCadesAsicAOCAdESASiCSSigner)

#endif

#pragma pop_macro("INCLUDE_ALL_AOCAdESASiCSSigner")
