//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/pades/PAdESTriPhaseSigner.java
//

#include "AOException.h"
#include "AOUtil.h"
#include "CAdESParameters.h"
#include "CAdESTriPhaseSigner.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "InvalidPdfException.h"
#include "J2ObjC_source.h"
#include "PAdESTriPhaseSigner.h"
#include "PdfDictionary.h"
#include "PdfName.h"
#include "PdfSessionManager.h"
#include "PdfSignResult.h"
#include "PdfSignatureAppearance.h"
#include "PdfString.h"
#include "PdfTriPhaseSession.h"
#include "SignEnhancer.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/Properties.h"

#if !__has_feature(objc_arc)
#error "PAdESTriPhaseSigner must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaSignersPadesPAdESTriPhaseSigner ()

- (instancetype)init;

+ (EsGobAfirmaSignersPadesPdfSignResult *)generatePdfSignatureWithNSString:(NSString *)signatureAlgorithm
                                      withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                                                    withJavaUtilProperties:(JavaUtilProperties *)xParams
                                                             withByteArray:(IOSByteArray *)pkcs1Signature
                                                             withByteArray:(IOSByteArray *)signedAttributes
                                                              withNSString:(NSString *)pdfFileId
                                                             withByteArray:(IOSByteArray *)timestamp
                                             withJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)signingTime
                                    withEsGobAfirmaCoreSignersSignEnhancer:(id<EsGobAfirmaCoreSignersSignEnhancer>)enhancer
                                                    withJavaUtilProperties:(JavaUtilProperties *)enhancerConfig;

+ (IOSByteArray *)insertSignatureOnPdfWithByteArray:(IOSByteArray *)inPdf
               withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
           withEsGobAfirmaSignersPadesPdfSignResult:(EsGobAfirmaSignersPadesPdfSignResult *)signature
                                        withBoolean:(jboolean)secureMode;

@end

__attribute__((unused)) static void EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init(EsGobAfirmaSignersPadesPAdESTriPhaseSigner *self);

__attribute__((unused)) static EsGobAfirmaSignersPadesPAdESTriPhaseSigner *new_EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaSignersPadesPAdESTriPhaseSigner *create_EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init(void);

__attribute__((unused)) static EsGobAfirmaSignersPadesPdfSignResult *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_generatePdfSignatureWithNSString_withJavaSecurityCertCertificateArray_withJavaUtilProperties_withByteArray_withByteArray_withNSString_withByteArray_withJavaUtilGregorianCalendar_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_(NSString *signatureAlgorithm, IOSObjectArray *signerCertificateChain, JavaUtilProperties *xParams, IOSByteArray *pkcs1Signature, IOSByteArray *signedAttributes, NSString *pdfFileId, IOSByteArray *timestamp, JavaUtilGregorianCalendar *signingTime, id<EsGobAfirmaCoreSignersSignEnhancer> enhancer, JavaUtilProperties *enhancerConfig);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_insertSignatureOnPdfWithByteArray_withJavaSecurityCertCertificateArray_withEsGobAfirmaSignersPadesPdfSignResult_withBoolean_(IOSByteArray *inPdf, IOSObjectArray *signerCertificateChain, EsGobAfirmaSignersPadesPdfSignResult *signature, jboolean secureMode);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/signers/pades/PAdESTriPhaseSigner.java"


#line 132
@implementation EsGobAfirmaSignersPadesPAdESTriPhaseSigner

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 137
- (instancetype)init {
  EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 162
+ (EsGobAfirmaSignersPadesPdfSignResult *)preSignWithNSString:(NSString *)signatureAlgorithm
                                                withByteArray:(IOSByteArray *)inPDF
                         withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                                withJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)signTime
                                       withJavaUtilProperties:(JavaUtilProperties *)xParams
                                                  withBoolean:(jboolean)secureMode {
  return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_preSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_withBoolean_(signatureAlgorithm, inPDF, signerCertificateChain, signTime, xParams, secureMode);
}


#line 236
+ (IOSByteArray *)postSignWithNSString:(NSString *)signatureAlgorithm
                         withByteArray:(IOSByteArray *)inPdf
  withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                         withByteArray:(IOSByteArray *)pkcs1Signature
withEsGobAfirmaSignersPadesPdfSignResult:(EsGobAfirmaSignersPadesPdfSignResult *)preSign
withEsGobAfirmaCoreSignersSignEnhancer:(id<EsGobAfirmaCoreSignersSignEnhancer>)enhancer
                withJavaUtilProperties:(JavaUtilProperties *)enhancerConfig
                           withBoolean:(jboolean)secureMode {
  return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withEsGobAfirmaSignersPadesPdfSignResult_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_withBoolean_(signatureAlgorithm, inPdf, signerCertificateChain, pkcs1Signature, preSign, enhancer, enhancerConfig, secureMode);
}


#line 269
+ (EsGobAfirmaSignersPadesPdfSignResult *)generatePdfSignatureWithNSString:(NSString *)signatureAlgorithm
                                      withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
                                                    withJavaUtilProperties:(JavaUtilProperties *)xParams
                                                             withByteArray:(IOSByteArray *)pkcs1Signature
                                                             withByteArray:(IOSByteArray *)signedAttributes
                                                              withNSString:(NSString *)pdfFileId
                                                             withByteArray:(IOSByteArray *)timestamp
                                             withJavaUtilGregorianCalendar:(JavaUtilGregorianCalendar *)signingTime
                                    withEsGobAfirmaCoreSignersSignEnhancer:(id<EsGobAfirmaCoreSignersSignEnhancer>)enhancer
                                                    withJavaUtilProperties:(JavaUtilProperties *)enhancerConfig {
  return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_generatePdfSignatureWithNSString_withJavaSecurityCertCertificateArray_withJavaUtilProperties_withByteArray_withByteArray_withNSString_withByteArray_withJavaUtilGregorianCalendar_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_(signatureAlgorithm, signerCertificateChain, xParams, pkcs1Signature, signedAttributes, pdfFileId, timestamp, signingTime, enhancer, enhancerConfig);
}


#line 306
+ (IOSByteArray *)insertSignatureOnPdfWithByteArray:(IOSByteArray *)inPdf
               withJavaSecurityCertCertificateArray:(IOSObjectArray *)signerCertificateChain
           withEsGobAfirmaSignersPadesPdfSignResult:(EsGobAfirmaSignersPadesPdfSignResult *)signature
                                        withBoolean:(jboolean)secureMode {
  return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_insertSignatureOnPdfWithByteArray_withJavaSecurityCertCertificateArray_withEsGobAfirmaSignersPadesPdfSignResult_withBoolean_(inPdf, signerCertificateChain, signature, secureMode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LEsGobAfirmaSignersPadesPdfSignResult;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "LEsGobAfirmaSignersPadesPdfSignResult;", 0xa, 6, 7, 5, -1, -1, -1 },
    { NULL, "[B", 0xa, 8, 9, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(preSignWithNSString:withByteArray:withJavaSecurityCertCertificateArray:withJavaUtilGregorianCalendar:withJavaUtilProperties:withBoolean:);
  methods[2].selector = @selector(postSignWithNSString:withByteArray:withJavaSecurityCertCertificateArray:withByteArray:withEsGobAfirmaSignersPadesPdfSignResult:withEsGobAfirmaCoreSignersSignEnhancer:withJavaUtilProperties:withBoolean:);
  methods[3].selector = @selector(generatePdfSignatureWithNSString:withJavaSecurityCertCertificateArray:withJavaUtilProperties:withByteArray:withByteArray:withNSString:withByteArray:withJavaUtilGregorianCalendar:withEsGobAfirmaCoreSignersSignEnhancer:withJavaUtilProperties:);
  methods[4].selector = @selector(insertSignatureOnPdfWithByteArray:withJavaSecurityCertCertificateArray:withEsGobAfirmaSignersPadesPdfSignResult:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LAST_PAGE", "I", .constantValue.asInt = EsGobAfirmaSignersPadesPAdESTriPhaseSigner_LAST_PAGE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "preSign", "LNSString;[B[LJavaSecurityCertCertificate;LJavaUtilGregorianCalendar;LJavaUtilProperties;Z", "LJavaIoIOException;LEsGobAfirmaCoreAOException;LEsGobAfirmaSignersPadesInvalidPdfException;", "postSign", "LNSString;[B[LJavaSecurityCertCertificate;[BLEsGobAfirmaSignersPadesPdfSignResult;LEsGobAfirmaCoreSignersSignEnhancer;LJavaUtilProperties;Z", "LEsGobAfirmaCoreAOException;LJavaIoIOException;LJavaSecurityNoSuchAlgorithmException;", "generatePdfSignature", "LNSString;[LJavaSecurityCertCertificate;LJavaUtilProperties;[B[BLNSString;[BLJavaUtilGregorianCalendar;LEsGobAfirmaCoreSignersSignEnhancer;LJavaUtilProperties;", "insertSignatureOnPdf", "[B[LJavaSecurityCertCertificate;LEsGobAfirmaSignersPadesPdfSignResult;Z", "LEsGobAfirmaCoreAOException;LJavaIoIOException;" };
  static const J2ObjcClassInfo _EsGobAfirmaSignersPadesPAdESTriPhaseSigner = { "PAdESTriPhaseSigner", "es.gob.afirma.signers.pades", ptrTable, methods, fields, 7, 0x11, 5, 1, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaSignersPadesPAdESTriPhaseSigner;
}

@end


#line 137
void EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init(EsGobAfirmaSignersPadesPAdESTriPhaseSigner *self) {
  NSObject_init(self);
}


#line 137
EsGobAfirmaSignersPadesPAdESTriPhaseSigner *new_EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaSignersPadesPAdESTriPhaseSigner, init)
}


#line 137
EsGobAfirmaSignersPadesPAdESTriPhaseSigner *create_EsGobAfirmaSignersPadesPAdESTriPhaseSigner_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaSignersPadesPAdESTriPhaseSigner, init)
}


#line 162
EsGobAfirmaSignersPadesPdfSignResult *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_preSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_withBoolean_(NSString *signatureAlgorithm, IOSByteArray *inPDF, IOSObjectArray *signerCertificateChain, JavaUtilGregorianCalendar *signTime, JavaUtilProperties *xParams, jboolean secureMode) {
  EsGobAfirmaSignersPadesPAdESTriPhaseSigner_initialize();
  
#line 171
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  
#line 173
  EsGobAfirmaSignersPadesPdfTriPhaseSession *ptps = EsGobAfirmaSignersPadesPdfSessionManager_getSessionDataWithByteArray_withJavaSecurityCertCertificateArray_withJavaUtilCalendar_withJavaUtilProperties_withBoolean_(inPDF, signerCertificateChain, signTime, extraParams, secureMode);
  
#line 176
  IOSByteArray *pdfRangeBytes = EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_([((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk([((EsGobAfirmaSignersPadesPdfTriPhaseSession *) nil_chk(ptps)) getSAP])) getRangeStream]);
  
#line 178
  EsGobAfirmaSignersCadesCAdESParameters *parameters = EsGobAfirmaSignersCadesCAdESParameters_load__WithByteArray_withNSString_withJavaUtilProperties_(nil, signatureAlgorithm, extraParams);
  
#line 184
  IOSByteArray *md;
  @try {
    md = [((JavaSecurityMessageDigest *) nil_chk(JavaSecurityMessageDigest_getInstanceWithNSString_([((EsGobAfirmaSignersCadesCAdESParameters *) nil_chk(parameters)) getDigestAlgorithm]))) digestWithByteArray:pdfRangeBytes];
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@", @"El algoritmo de huella digital no es valido: ", e), e);
  }
  [parameters setDataDigestWithByteArray:md];
  
#line 194
  [parameters setMetadataWithEsGobAfirmaSignersCadesCAdESSignerMetadata:nil];
  
#line 197
  [parameters setContentTypeOidWithNSString:nil];
  [parameters setContentDescriptionWithNSString:nil];
  
#line 201
  [parameters setSigningTimeWithJavaUtilDate:nil];
  
#line 206
  IOSByteArray *cadesPresign = EsGobAfirmaSignersCadesCAdESTriPhaseSigner_preSignWithJavaSecurityCertCertificateArray_withJavaUtilDate_withEsGobAfirmaSignersCadesCAdESParameters_(
#line 207
  signerCertificateChain,
#line 208
  [((JavaUtilGregorianCalendar *) nil_chk(signTime)) getTime],
#line 209
  parameters);
  
#line 212
  return new_EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(
#line 213
  [ptps getFileID],
#line 214
  cadesPresign,
#line 215
  nil,
#line 216
  signTime,
#line 217
  extraParams);
}


#line 236
IOSByteArray *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withEsGobAfirmaSignersPadesPdfSignResult_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_withBoolean_(NSString *signatureAlgorithm, IOSByteArray *inPdf, IOSObjectArray *signerCertificateChain, IOSByteArray *pkcs1Signature, EsGobAfirmaSignersPadesPdfSignResult *preSign, id<EsGobAfirmaCoreSignersSignEnhancer> enhancer, JavaUtilProperties *enhancerConfig, jboolean secureMode) {
  EsGobAfirmaSignersPadesPAdESTriPhaseSigner_initialize();
  
#line 247
  EsGobAfirmaSignersPadesPdfSignResult *completePdfSSignature = EsGobAfirmaSignersPadesPAdESTriPhaseSigner_generatePdfSignatureWithNSString_withJavaSecurityCertCertificateArray_withJavaUtilProperties_withByteArray_withByteArray_withNSString_withByteArray_withJavaUtilGregorianCalendar_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_(
#line 248
  signatureAlgorithm,
#line 249
  signerCertificateChain,
#line 250
  [((EsGobAfirmaSignersPadesPdfSignResult *) nil_chk(preSign)) getExtraParams],
#line 251
  pkcs1Signature,
#line 252
  [preSign getSign],
#line 253
  [preSign getFileID],
#line 254
  [preSign getTimestamp],
#line 255
  [preSign getSignTime],
#line 256
  enhancer,
#line 257
  enhancerConfig);
  
#line 261
  return EsGobAfirmaSignersPadesPAdESTriPhaseSigner_insertSignatureOnPdfWithByteArray_withJavaSecurityCertCertificateArray_withEsGobAfirmaSignersPadesPdfSignResult_withBoolean_(
#line 262
  inPdf,
#line 263
  signerCertificateChain,
#line 264
  completePdfSSignature,
#line 265
  secureMode);
}


#line 269
EsGobAfirmaSignersPadesPdfSignResult *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_generatePdfSignatureWithNSString_withJavaSecurityCertCertificateArray_withJavaUtilProperties_withByteArray_withByteArray_withNSString_withByteArray_withJavaUtilGregorianCalendar_withEsGobAfirmaCoreSignersSignEnhancer_withJavaUtilProperties_(NSString *signatureAlgorithm, IOSObjectArray *signerCertificateChain, JavaUtilProperties *xParams, IOSByteArray *pkcs1Signature, IOSByteArray *signedAttributes, NSString *pdfFileId, IOSByteArray *timestamp, JavaUtilGregorianCalendar *signingTime, id<EsGobAfirmaCoreSignersSignEnhancer> enhancer, JavaUtilProperties *enhancerConfig) {
  EsGobAfirmaSignersPadesPAdESTriPhaseSigner_initialize();
  
#line 281
  IOSByteArray *completeCAdESSignature = EsGobAfirmaSignersCadesCAdESTriPhaseSigner_postSignWithNSString_withByteArray_withJavaSecurityCertCertificateArray_withByteArray_withByteArray_(
#line 282
  signatureAlgorithm,
#line 283
  nil,
#line 284
  signerCertificateChain,
#line 285
  pkcs1Signature,
#line 286
  signedAttributes);
  
#line 289
  JavaUtilProperties *extraParams = xParams != nil ? xParams : new_JavaUtilProperties_init();
  
#line 291
  if (enhancer != nil) {
    completeCAdESSignature = [enhancer enhanceWithByteArray:
#line 293
    completeCAdESSignature withJavaUtilProperties:
#line 294
    enhancerConfig != nil ? enhancerConfig : extraParams];
  }
  
#line 298
  return new_EsGobAfirmaSignersPadesPdfSignResult_initWithNSString_withByteArray_withByteArray_withJavaUtilGregorianCalendar_withJavaUtilProperties_(
#line 299
  pdfFileId,
#line 300
  completeCAdESSignature,
#line 301
  timestamp,
#line 302
  signingTime,
#line 303
  xParams != nil ? xParams : new_JavaUtilProperties_init());
}


#line 306
IOSByteArray *EsGobAfirmaSignersPadesPAdESTriPhaseSigner_insertSignatureOnPdfWithByteArray_withJavaSecurityCertCertificateArray_withEsGobAfirmaSignersPadesPdfSignResult_withBoolean_(IOSByteArray *inPdf, IOSObjectArray *signerCertificateChain, EsGobAfirmaSignersPadesPdfSignResult *signature, jboolean secureMode) {
  EsGobAfirmaSignersPadesPAdESTriPhaseSigner_initialize();
  
#line 311
  jint reservedSize = EsGobAfirmaSignersPadesPdfSessionManager_getReservedSignatureSizedWithJavaUtilProperties_([((EsGobAfirmaSignersPadesPdfSignResult *) nil_chk(signature)) getExtraParams]);
  IOSByteArray *outc = [IOSByteArray newArrayWithLength:reservedSize];
  
#line 314
  if (((IOSByteArray *) nil_chk([signature getSign]))->size_ > reservedSize) {
    @throw new_EsGobAfirmaCoreAOException_initWithNSString_(JreStrcat("$I$IC", @"El tamano de la firma (", ((IOSByteArray *) nil_chk(
#line 316
    [signature getSign]))->size_, @") supera el maximo permitido para un PDF (", reservedSize, ')'));
  }
  
#line 320
  ComAowagieTextPdfPdfDictionary *dic2 = new_ComAowagieTextPdfPdfDictionary_init();
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([signature getSign], 0, outc, 0, ((IOSByteArray *) nil_chk([signature getSign]))->size_);
  [dic2 putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, CONTENTS) withComAowagieTextPdfPdfObject:[new_ComAowagieTextPdfPdfString_initWithByteArray_(outc) setHexWritingWithBoolean:true]];
  
#line 324
  EsGobAfirmaSignersPadesPdfTriPhaseSession *pts;
  @try {
    pts = EsGobAfirmaSignersPadesPdfSessionManager_getSessionDataWithByteArray_withJavaSecurityCertCertificateArray_withJavaUtilCalendar_withJavaUtilProperties_withBoolean_(inPdf, signerCertificateChain, [signature getSignTime], [signature getExtraParams], secureMode);
  }
  @catch (EsGobAfirmaSignersPadesInvalidPdfException *e) {
    @throw new_JavaIoIOException_initWithJavaLangThrowable_(e);
  }
  ComAowagieTextPdfPdfSignatureAppearance *sap = [((EsGobAfirmaSignersPadesPdfTriPhaseSession *) nil_chk(pts)) getSAP];
  
#line 333
  IOSByteArray *ret;
  {
    JavaIoByteArrayOutputStream *baos = [pts getBAOS];
    JavaLangThrowable *__primaryException1 = nil;
    
#line 334
    @try {
      
#line 337
      NSString *badFileID = [pts getFileID];
      @try {
        [((ComAowagieTextPdfPdfSignatureAppearance *) nil_chk(sap)) closeWithComAowagieTextPdfPdfDictionary:dic2];
      }
      @catch (JavaLangException *e) {
        [((JavaIoByteArrayOutputStream *) nil_chk(baos)) close];
        @throw new_EsGobAfirmaCoreAOException_initWithNSString_withJavaLangThrowable_(@"Error al cerrar el PDF para finalizar el proceso de firma", e);
      }
      ret = [((NSString *) nil_chk([[NSString java_stringWithBytes:[((JavaIoByteArrayOutputStream *) nil_chk(baos)) toByteArray] charset:JreLoadStatic(JavaNioCharsetStandardCharsets, ISO_8859_1)] java_replace:badFileID withSequence:[signature getFileID]])) java_getBytesWithCharset:JreLoadStatic(JavaNioCharsetStandardCharsets, ISO_8859_1)];
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (baos != nil) {
        if (__primaryException1 != nil) {
          @try {
            [baos close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [baos close];
        }
      }
    }
  }
  
#line 347
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaSignersPadesPAdESTriPhaseSigner)
