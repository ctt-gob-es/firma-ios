//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/CertPathValidatorUtilities.java
//

#include "ASN1Encodable.h"
#include "ASN1Enumerated.h"
#include "ASN1GeneralizedTime.h"
#include "ASN1InputStream.h"
#include "ASN1Integer.h"
#include "ASN1ObjectIdentifier.h"
#include "ASN1OctetString.h"
#include "ASN1OutputStream.h"
#include "ASN1Primitive.h"
#include "ASN1Sequence.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "AuthorityKeyIdentifier.h"
#include "BCAttributeCertificateIssuer.h"
#include "BCCertStatus.h"
#include "BCX509CRLObject.h"
#include "CRLDistPoint.h"
#include "CRLReason.h"
#include "CertPathValidatorUtilities.h"
#include "DEROctetString.h"
#include "DistributionPoint.h"
#include "DistributionPointName.h"
#include "ExtCertPathValidatorException.h"
#include "Extension.h"
#include "GeneralName.h"
#include "GeneralNames.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ISISMTTObjectIdentifiers.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "PKIXCRLStore.h"
#include "PKIXCRLStoreSelector.h"
#include "PKIXCRLUtil.h"
#include "PKIXCertStore.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedParameters.h"
#include "PKIXPolicyNode.h"
#include "PolicyInformation.h"
#include "PrincipalUtils.h"
#include "RFC3280CertPathUtilities.h"
#include "RFC4519Style.h"
#include "Store.h"
#include "StoreException.h"
#include "SubjectPublicKeyInfo.h"
#include "X500Name.h"
#include "X500NameStyle.h"
#include "X509AttributeCertificate.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/RuntimeException.h"
#include "java/math/BigInteger.h"
#include "java/security/KeyFactory.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CRLException.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertStore.h"
#include "java/security/cert/CertStoreException.h"
#include "java/security/cert/Certificate.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/PolicyQualifierInfo.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509CRL.h"
#include "java/security/cert/X509CRLEntry.h"
#include "java/security/cert/X509CRLSelector.h"
#include "java/security/cert/X509CertSelector.h"
#include "java/security/cert/X509Certificate.h"
#include "java/security/cert/X509Extension.h"
#include "java/security/interfaces/DSAParams.h"
#include "java/security/interfaces/DSAPublicKey.h"
#include "java/security/spec/DSAPublicKeySpec.h"
#include "java/text/ParseException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Date.h"
#include "java/util/Enumeration.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "CertPathValidatorUtilities must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderCertPathValidatorUtilities ()

+ (OrgSpongycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                              withByteArray:(IOSByteArray *)ext;

+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
        withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)_node;

+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert;

+ (jboolean)isDeltaCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl;

@end

__attribute__((unused)) static OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext);

__attribute__((unused)) static void OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *_node);

__attribute__((unused)) static JavaMathBigInteger *OrgSpongycastleJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(id cert);

__attribute__((unused)) static jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/CertPathValidatorUtilities.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleJceProviderCertPathValidatorUtilities)

OrgSpongycastleJceProviderPKIXCRLUtil *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_USAGE;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_FRESHEST_CRL;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER;
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY = @"2.5.29.32.0";
NSString *OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_NUMBER;
IOSObjectArray *OrgSpongycastleJceProviderCertPathValidatorUtilities_crlReasons;


#line 80
@implementation OrgSpongycastleJceProviderCertPathValidatorUtilities


#line 80
- (instancetype)initPackagePrivate {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate(self);
  return self;
}


#line 133
+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(cert, trustAnchors);
}


#line 155
+ (JavaSecurityCertTrustAnchor *)findTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                                    withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                                       withNSString:(NSString *)sigProvider {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider);
}


#line 240
+ (jboolean)isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                   withJavaUtilSet:(id<JavaUtilSet>)trustAnchors
                                                      withNSString:(NSString *)sigProvider {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider);
}


#line 256
+ (id<JavaUtilList>)getAdditionalStoresFromAltNamesWithByteArray:(IOSByteArray *)issuerAlternativeName
                                                 withJavaUtilMap:(id<JavaUtilMap>)altNameCertStoreMap {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(issuerAlternativeName, altNameCertStoreMap);
}


#line 290
+ (JavaUtilDate *)getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX);
}


#line 302
+ (jboolean)isSelfIssuedWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(cert);
}


#line 315
+ (OrgSpongycastleAsn1ASN1Primitive *)getExtensionValueWithJavaSecurityCertX509Extension:(id<JavaSecurityCertX509Extension>)ext
                                                                            withNSString:(NSString *)oid {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(ext, oid);
}


#line 329
+ (OrgSpongycastleAsn1ASN1Primitive *)getObjectWithNSString:(NSString *)oid
                                              withByteArray:(IOSByteArray *)ext {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, ext);
}


#line 348
+ (OrgSpongycastleAsn1X509AlgorithmIdentifier *)getAlgorithmIdentifierWithJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)key {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(key);
}


#line 373
+ (id<JavaUtilSet>)getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence:(OrgSpongycastleAsn1ASN1Sequence *)qualifiers {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_(qualifiers);
}


#line 407
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree
                                                                                     withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                              withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)_node {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, _node);
}


#line 437
+ (void)removePolicyNodeRecurseWithJavaUtilListArray:(IOSObjectArray *)policyNodes
        withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)_node {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
}


#line 455
+ (jboolean)processCertD1iWithInt:(jint)index
            withJavaUtilListArray:(IOSObjectArray *)policyNodes
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)pOid
                  withJavaUtilSet:(id<JavaUtilSet>)pq {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, pOid, pq);
}


#line 490
+ (void)processCertD1iiWithInt:(jint)index
         withJavaUtilListArray:(IOSObjectArray *)policyNodes
withOrgSpongycastleAsn1ASN1ObjectIdentifier:(OrgSpongycastleAsn1ASN1ObjectIdentifier *)_poid
               withJavaUtilSet:(id<JavaUtilSet>)_pq {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(index, policyNodes, _poid, _pq);
}


#line 521
+ (void)prepareNextCertB1WithInt:(jint)i
           withJavaUtilListArray:(IOSObjectArray *)policyNodes
                    withNSString:(NSString *)id_p
                 withJavaUtilMap:(id<JavaUtilMap>)m_idp
withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(i, policyNodes, id_p, m_idp, cert);
}


#line 610
+ (OrgSpongycastleJceProviderPKIXPolicyNode *)prepareNextCertB2WithInt:(jint)i
                                                 withJavaUtilListArray:(IOSObjectArray *)policyNodes
                                                          withNSString:(NSString *)id_p
                          withOrgSpongycastleJceProviderPKIXPolicyNode:(OrgSpongycastleJceProviderPKIXPolicyNode *)validPolicyTree {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withOrgSpongycastleJceProviderPKIXPolicyNode_(i, policyNodes, id_p, validPolicyTree);
}


#line 646
+ (jboolean)isAnyPolicyWithJavaUtilSet:(id<JavaUtilSet>)policySet {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(policySet);
}


#line 663
+ (id<JavaUtilCollection>)findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector:(OrgSpongycastleJcajcePKIXCertStoreSelector *)certSelect
                                                                        withJavaUtilList:(id<JavaUtilList>)certStores {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}


#line 706
+ (id<JavaUtilList>)getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint:(OrgSpongycastleAsn1X509CRLDistPoint *)crldp
                                                                                       withJavaUtilMap:(id<JavaUtilMap>)namedCRLStoreMap {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint_withJavaUtilMap_(crldp, namedCRLStoreMap);
}


#line 770
+ (void)getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                                withJavaUtilCollection:(id<JavaUtilCollection>)issuerPrincipals
                                                   withJavaSecurityCertX509CRLSelector:(JavaSecurityCertX509CRLSelector *)selector {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(dp, issuerPrincipals, selector);
}


#line 876
+ (JavaMathBigInteger *)getSerialNumberWithId:(id)cert {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert);
}


#line 882
+ (void)getCertStatusWithJavaUtilDate:(JavaUtilDate *)validDate
          withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl
                               withId:(id)cert
withOrgSpongycastleJceProviderBCCertStatus:(OrgSpongycastleJceProviderBCCertStatus *)certStatus {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(validDate, crl, cert, certStatus);
}


#line 992
+ (id<JavaUtilSet>)getDeltaCRLsWithJavaUtilDate:(JavaUtilDate *)validityDate
                    withJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)completeCRL
                               withJavaUtilList:(id<JavaUtilList>)certStores
                               withJavaUtilList:(id<JavaUtilList>)pkixCrlStores {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(validityDate, completeCRL, certStores, pkixCrlStores);
}


#line 1071
+ (jboolean)isDeltaCRLWithJavaSecurityCertX509CRL:(JavaSecurityCertX509CRL *)crl {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(crl);
}


#line 1096
+ (id<JavaUtilSet>)getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint:(OrgSpongycastleAsn1X509DistributionPoint *)dp
                                                                        withId:(id)cert
                                                              withJavaUtilDate:(JavaUtilDate *)currentDate
                               withOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_(dp, cert, currentDate, paramsPKIX);
}


#line 1137
+ (JavaUtilDate *)getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters:(OrgSpongycastleJcajcePKIXExtendedParameters *)paramsPKIX
                                                                      withJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                                                           withInt:(jint)index {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(paramsPKIX, certPath, index);
}


#line 1222
+ (id<JavaSecurityPublicKey>)getNextWorkingKeyWithJavaUtilList:(id<JavaUtilList>)certs
                                                       withInt:(jint)index
                     withOrgSpongycastleJcajceUtilJcaJceHelper:(id<OrgSpongycastleJcajceUtilJcaJceHelper>)helper {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withOrgSpongycastleJcajceUtilJcaJceHelper_(certs, index, helper);
}


#line 1274
+ (id<JavaUtilCollection>)findIssuerCertsWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                                            withJavaUtilList:(id<JavaUtilList>)certStores
                                                            withJavaUtilList:(id<JavaUtilList>)pkixCertStores {
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(cert, certStores, pkixCertStores);
}


#line 1340
+ (void)verifyX509CertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert
                                       withJavaSecurityPublicKey:(id<JavaSecurityPublicKey>)publicKey
                                                    withNSString:(NSString *)sigProvider {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, publicKey, sigProvider);
}


#line 1354
+ (void)checkCRLsNotEmptyWithJavaUtilSet:(id<JavaUtilSet>)crls
                                  withId:(id)cert {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(crls, cert);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertTrustAnchor;", 0xc, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertTrustAnchor;", 0xc, 0, 3, 2, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 3, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 5, 6, 7, 8, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xc, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0xc, 13, 14, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1ASN1Primitive;", 0xa, 15, 16, 2, -1, -1, -1 },
    { NULL, "LOrgSpongycastleAsn1X509AlgorithmIdentifier;", 0xc, 17, 18, 19, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1c, 20, 21, 19, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 28, 27, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 29, 30, 31, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceProviderPKIXPolicyNode;", 0xc, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0xc, 34, 35, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 36, 37, 2, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x8, 38, 39, 2, 40, -1, -1 },
    { NULL, "V", 0xc, 41, 42, 2, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0xa, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0xc, 45, 46, 2, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 47, 48, 2, 49, -1, -1 },
    { NULL, "Z", 0xa, 50, 51, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0xc, 52, 53, 2, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0xc, 54, 55, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityPublicKey;", 0xc, 56, 57, 19, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x8, 58, 59, 2, 60, -1, -1 },
    { NULL, "V", 0xc, 61, 62, 63, -1, -1, -1 },
    { NULL, "V", 0x8, 64, 65, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(findTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:);
  methods[2].selector = @selector(findTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:withNSString:);
  methods[3].selector = @selector(isIssuerTrustAnchorWithJavaSecurityCertX509Certificate:withJavaUtilSet:withNSString:);
  methods[4].selector = @selector(getAdditionalStoresFromAltNamesWithByteArray:withJavaUtilMap:);
  methods[5].selector = @selector(getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters:);
  methods[6].selector = @selector(isSelfIssuedWithJavaSecurityCertX509Certificate:);
  methods[7].selector = @selector(getExtensionValueWithJavaSecurityCertX509Extension:withNSString:);
  methods[8].selector = @selector(getObjectWithNSString:withByteArray:);
  methods[9].selector = @selector(getAlgorithmIdentifierWithJavaSecurityPublicKey:);
  methods[10].selector = @selector(getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence:);
  methods[11].selector = @selector(removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode:withJavaUtilListArray:withOrgSpongycastleJceProviderPKIXPolicyNode:);
  methods[12].selector = @selector(removePolicyNodeRecurseWithJavaUtilListArray:withOrgSpongycastleJceProviderPKIXPolicyNode:);
  methods[13].selector = @selector(processCertD1iWithInt:withJavaUtilListArray:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[14].selector = @selector(processCertD1iiWithInt:withJavaUtilListArray:withOrgSpongycastleAsn1ASN1ObjectIdentifier:withJavaUtilSet:);
  methods[15].selector = @selector(prepareNextCertB1WithInt:withJavaUtilListArray:withNSString:withJavaUtilMap:withJavaSecurityCertX509Certificate:);
  methods[16].selector = @selector(prepareNextCertB2WithInt:withJavaUtilListArray:withNSString:withOrgSpongycastleJceProviderPKIXPolicyNode:);
  methods[17].selector = @selector(isAnyPolicyWithJavaUtilSet:);
  methods[18].selector = @selector(findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector:withJavaUtilList:);
  methods[19].selector = @selector(getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint:withJavaUtilMap:);
  methods[20].selector = @selector(getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint:withJavaUtilCollection:withJavaSecurityCertX509CRLSelector:);
  methods[21].selector = @selector(getSerialNumberWithId:);
  methods[22].selector = @selector(getCertStatusWithJavaUtilDate:withJavaSecurityCertX509CRL:withId:withOrgSpongycastleJceProviderBCCertStatus:);
  methods[23].selector = @selector(getDeltaCRLsWithJavaUtilDate:withJavaSecurityCertX509CRL:withJavaUtilList:withJavaUtilList:);
  methods[24].selector = @selector(isDeltaCRLWithJavaSecurityCertX509CRL:);
  methods[25].selector = @selector(getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint:withId:withJavaUtilDate:withOrgSpongycastleJcajcePKIXExtendedParameters:);
  methods[26].selector = @selector(getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters:withJavaSecurityCertCertPath:withInt:);
  methods[27].selector = @selector(getNextWorkingKeyWithJavaUtilList:withInt:withOrgSpongycastleJcajceUtilJcaJceHelper:);
  methods[28].selector = @selector(findIssuerCertsWithJavaSecurityCertX509Certificate:withJavaUtilList:withJavaUtilList:);
  methods[29].selector = @selector(verifyX509CertificateWithJavaSecurityCertX509Certificate:withJavaSecurityPublicKey:withNSString:);
  methods[30].selector = @selector(checkCRLsNotEmptyWithJavaUtilSet:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CRL_UTIL", "LOrgSpongycastleJceProviderPKIXCRLUtil;", .constantValue.asLong = 0, 0x1c, -1, 66, -1, -1 },
    { "CERTIFICATE_POLICIES", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 67, -1, -1 },
    { "BASIC_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 68, -1, -1 },
    { "POLICY_MAPPINGS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 69, -1, -1 },
    { "SUBJECT_ALTERNATIVE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 70, -1, -1 },
    { "NAME_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 71, -1, -1 },
    { "KEY_USAGE", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 72, -1, -1 },
    { "INHIBIT_ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 73, -1, -1 },
    { "ISSUING_DISTRIBUTION_POINT", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 74, -1, -1 },
    { "DELTA_CRL_INDICATOR", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 75, -1, -1 },
    { "POLICY_CONSTRAINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 76, -1, -1 },
    { "FRESHEST_CRL", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 77, -1, -1 },
    { "CRL_DISTRIBUTION_POINTS", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 78, -1, -1 },
    { "AUTHORITY_KEY_IDENTIFIER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 79, -1, -1 },
    { "ANY_POLICY", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 80, -1, -1 },
    { "CRL_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 81, -1, -1 },
    { "KEY_CERT_SIGN", "I", .constantValue.asInt = OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_CERT_SIGN, 0x1c, -1, -1, -1, -1 },
    { "CRL_SIGN", "I", .constantValue.asInt = OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_SIGN, 0x1c, -1, -1, -1, -1 },
    { "crlReasons", "[LNSString;", .constantValue.asLong = 0, 0x1c, -1, 82, -1, -1 },
  };
  static const void *ptrTable[] = { "findTrustAnchor", "LJavaSecurityCertX509Certificate;LJavaUtilSet;", "LOrgSpongycastleJceProviderAnnotatedException;", "LJavaSecurityCertX509Certificate;LJavaUtilSet;LNSString;", "isIssuerTrustAnchor", "getAdditionalStoresFromAltNames", "[BLJavaUtilMap;", "LJavaSecurityCertCertificateParsingException;", "([BLjava/util/Map<Lorg/spongycastle/asn1/x509/GeneralName;Lorg/spongycastle/jcajce/PKIXCertStore;>;)Ljava/util/List<Lorg/spongycastle/jcajce/PKIXCertStore;>;", "getValidDate", "LOrgSpongycastleJcajcePKIXExtendedParameters;", "isSelfIssued", "LJavaSecurityCertX509Certificate;", "getExtensionValue", "LJavaSecurityCertX509Extension;LNSString;", "getObject", "LNSString;[B", "getAlgorithmIdentifier", "LJavaSecurityPublicKey;", "LJavaSecurityCertCertPathValidatorException;", "getQualifierSet", "LOrgSpongycastleAsn1ASN1Sequence;", "removePolicyNode", "LOrgSpongycastleJceProviderPKIXPolicyNode;[LJavaUtilList;LOrgSpongycastleJceProviderPKIXPolicyNode;", "removePolicyNodeRecurse", "[LJavaUtilList;LOrgSpongycastleJceProviderPKIXPolicyNode;", "processCertD1i", "I[LJavaUtilList;LOrgSpongycastleAsn1ASN1ObjectIdentifier;LJavaUtilSet;", "processCertD1ii", "prepareNextCertB1", "I[LJavaUtilList;LNSString;LJavaUtilMap;LJavaSecurityCertX509Certificate;", "LOrgSpongycastleJceProviderAnnotatedException;LJavaSecurityCertCertPathValidatorException;", "prepareNextCertB2", "I[LJavaUtilList;LNSString;LOrgSpongycastleJceProviderPKIXPolicyNode;", "isAnyPolicy", "LJavaUtilSet;", "findCertificates", "LOrgSpongycastleJcajcePKIXCertStoreSelector;LJavaUtilList;", "getAdditionalStoresFromCRLDistributionPoint", "LOrgSpongycastleAsn1X509CRLDistPoint;LJavaUtilMap;", "(Lorg/spongycastle/asn1/x509/CRLDistPoint;Ljava/util/Map<Lorg/spongycastle/asn1/x509/GeneralName;Lorg/spongycastle/jcajce/PKIXCRLStore;>;)Ljava/util/List<Lorg/spongycastle/jcajce/PKIXCRLStore;>;", "getCRLIssuersFromDistributionPoint", "LOrgSpongycastleAsn1X509DistributionPoint;LJavaUtilCollection;LJavaSecurityCertX509CRLSelector;", "getSerialNumber", "LNSObject;", "getCertStatus", "LJavaUtilDate;LJavaSecurityCertX509CRL;LNSObject;LOrgSpongycastleJceProviderBCCertStatus;", "getDeltaCRLs", "LJavaUtilDate;LJavaSecurityCertX509CRL;LJavaUtilList;LJavaUtilList;", "(Ljava/util/Date;Ljava/security/cert/X509CRL;Ljava/util/List<Ljava/security/cert/CertStore;>;Ljava/util/List<Lorg/spongycastle/jcajce/PKIXCRLStore;>;)Ljava/util/Set;", "isDeltaCRL", "LJavaSecurityCertX509CRL;", "getCompleteCRLs", "LOrgSpongycastleAsn1X509DistributionPoint;LNSObject;LJavaUtilDate;LOrgSpongycastleJcajcePKIXExtendedParameters;", "getValidCertDateFromValidityModel", "LOrgSpongycastleJcajcePKIXExtendedParameters;LJavaSecurityCertCertPath;I", "getNextWorkingKey", "LJavaUtilList;ILOrgSpongycastleJcajceUtilJcaJceHelper;", "findIssuerCerts", "LJavaSecurityCertX509Certificate;LJavaUtilList;LJavaUtilList;", "(Ljava/security/cert/X509Certificate;Ljava/util/List<Ljava/security/cert/CertStore;>;Ljava/util/List<Lorg/spongycastle/jcajce/PKIXCertStore;>;)Ljava/util/Collection;", "verifyX509Certificate", "LJavaSecurityCertX509Certificate;LJavaSecurityPublicKey;LNSString;", "LJavaSecurityGeneralSecurityException;", "checkCRLsNotEmpty", "LJavaUtilSet;LNSObject;", &OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL, &OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES, &OrgSpongycastleJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS, &OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS, &OrgSpongycastleJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME, &OrgSpongycastleJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS, &OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_USAGE, &OrgSpongycastleJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY, &OrgSpongycastleJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT, &OrgSpongycastleJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR, &OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS, &OrgSpongycastleJceProviderCertPathValidatorUtilities_FRESHEST_CRL, &OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS, &OrgSpongycastleJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER, &OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY, &OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_NUMBER, &OrgSpongycastleJceProviderCertPathValidatorUtilities_crlReasons };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderCertPathValidatorUtilities = { "CertPathValidatorUtilities", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 31, 19, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderCertPathValidatorUtilities;
}

+ (void)initialize {
  if (self == [OrgSpongycastleJceProviderCertPathValidatorUtilities class]) {
    OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL = new_OrgSpongycastleJceProviderPKIXCRLUtil_initPackagePrivate();
    OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES =
#line 84
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, certificatePolicies))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_BASIC_CONSTRAINTS =
#line 85
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, basicConstraints))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_MAPPINGS =
#line 86
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, policyMappings))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_SUBJECT_ALTERNATIVE_NAME =
#line 87
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, subjectAlternativeName))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_NAME_CONSTRAINTS =
#line 88
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, nameConstraints))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_KEY_USAGE =
#line 89
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, keyUsage))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_INHIBIT_ANY_POLICY =
#line 90
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, inhibitAnyPolicy))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT =
#line 91
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuingDistributionPoint))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_DELTA_CRL_INDICATOR =
#line 92
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, deltaCRLIndicator))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_POLICY_CONSTRAINTS =
#line 93
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, policyConstraints))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_FRESHEST_CRL =
#line 94
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, freshestCRL))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_DISTRIBUTION_POINTS =
#line 95
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLDistributionPoints))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER =
#line 96
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, authorityKeyIdentifier))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_NUMBER =
#line 100
    [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, cRLNumber))) getId];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_crlReasons = [IOSObjectArray newArrayWithObjects:(id[]){
#line 109
      @"unspecified",
#line 110
      @"keyCompromise",
#line 111
      @"cACompromise",
#line 112
      @"affiliationChanged",
#line 113
      @"superseded",
#line 114
      @"cessationOfOperation",
#line 115
      @"certificateHold",
#line 116
      @"unknown",
#line 117
      @"removeFromCRL",
#line 118
      @"privilegeWithdrawn",
#line 119
      @"aACompromise" } count:11 type:NSString_class_()];
      J2OBJC_SET_INITIALIZED(OrgSpongycastleJceProviderCertPathValidatorUtilities)
    }
  }

@end


#line 80
void OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate(OrgSpongycastleJceProviderCertPathValidatorUtilities *self) {
  NSObject_init(self);
}


#line 80
OrgSpongycastleJceProviderCertPathValidatorUtilities *new_OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderCertPathValidatorUtilities, initPackagePrivate)
}


#line 80
OrgSpongycastleJceProviderCertPathValidatorUtilities *create_OrgSpongycastleJceProviderCertPathValidatorUtilities_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderCertPathValidatorUtilities, initPackagePrivate)
}


#line 133
JavaSecurityCertTrustAnchor *OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 138
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, nil);
}


#line 155
JavaSecurityCertTrustAnchor *OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 161
  JavaSecurityCertTrustAnchor *trust = nil;
  id<JavaSecurityPublicKey> trustPublicKey = nil;
  JavaLangException *invalidKeyEx = nil;
  
#line 165
  JavaSecurityCertX509CertSelector *certSelectX509 = new_JavaSecurityCertX509CertSelector_init();
  OrgSpongycastleAsn1X500X500Name *certIssuer = OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert);
  
#line 168
  @try {
    
#line 170
    [certSelectX509 setSubjectWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(certIssuer)) getEncoded]];
  }
  @catch (JavaIoIOException *ex) {
    
#line 174
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot set subject search criteria for trust anchor.", ex);
  }
  
#line 177
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk(trustAnchors)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext] && trust == nil) {
    
#line 180
    trust = (JavaSecurityCertTrustAnchor *) cast_chk([iter next], [JavaSecurityCertTrustAnchor class]);
    if ([((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert] != nil) {
      
#line 183
      if ([certSelectX509 matchWithJavaSecurityCertCertificate:[trust getTrustedCert]]) {
        
#line 185
        trustPublicKey = [((JavaSecurityCertX509Certificate *) nil_chk([trust getTrustedCert])) getPublicKey];
      }
      else {
        
#line 189
        trust = nil;
      }
    }
    else if ([trust getCAName] != nil &&
#line 193
    [trust getCAPublicKey] != nil) {
      
#line 195
      @try {
        
#line 197
        OrgSpongycastleAsn1X500X500Name *caName = OrgSpongycastleJceProviderPrincipalUtils_getCAWithJavaSecurityCertTrustAnchor_(trust);
        if ([certIssuer isEqual:caName]) {
          
#line 200
          trustPublicKey = [trust getCAPublicKey];
        }
        else {
          
#line 204
          trust = nil;
        }
      }
      @catch (JavaLangIllegalArgumentException *ex) {
        
#line 209
        trust = nil;
      }
    }
    else {
      
#line 214
      trust = nil;
    }
    
#line 217
    if (trustPublicKey != nil) {
      
#line 219
      @try {
        
#line 221
        OrgSpongycastleJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(cert, trustPublicKey, sigProvider);
      }
      @catch (JavaLangException *ex) {
        
#line 225
        invalidKeyEx = ex;
        trust = nil;
        trustPublicKey = nil;
      }
    }
  }
  
#line 232
  if (trust == nil && invalidKeyEx != nil) {
    
#line 234
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"TrustAnchor found but certificate validation failed.", invalidKeyEx);
  }
  
#line 237
  return trust;
}


#line 240
jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaUtilSet> trustAnchors, NSString *sigProvider) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 246
  @try {
    
#line 248
    return OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(cert, trustAnchors, sigProvider) != nil;
  }
  @catch (JavaLangException *e) {
    
#line 252
    return false;
  }
}

id<JavaUtilList> OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_(IOSByteArray *issuerAlternativeName, id<JavaUtilMap> altNameCertStoreMap) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 263
  if (issuerAlternativeName != nil) {
    
#line 265
    OrgSpongycastleAsn1X509GeneralNames *issuerAltName = OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(issuerAlternativeName))) getOctets]);
    
#line 267
    IOSObjectArray *names = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(issuerAltName)) getNames];
    id<JavaUtilList> stores = new_JavaUtilArrayList_init();
    
#line 270
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(names))->size_; i++) {
      
#line 272
      OrgSpongycastleAsn1X509GeneralName *altName = IOSObjectArray_Get(names, i);
      
#line 274
      id<OrgSpongycastleJcajcePKIXCertStore> altStore = [((id<JavaUtilMap>) nil_chk(altNameCertStoreMap)) getWithId:altName];
      
#line 276
      if (altStore != nil) {
        
#line 278
        [stores addWithId:altStore];
      }
    }
    
#line 282
    return stores;
  }
  else {
    
#line 286
    return JreLoadStatic(JavaUtilCollections, EMPTY_LIST);
  }
}


#line 290
JavaUtilDate *OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  JavaUtilDate *validDate = [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate];
  
#line 294
  if (validDate == nil) {
    
#line 296
    validDate = new_JavaUtilDate_init();
  }
  
#line 299
  return validDate;
}


#line 302
jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isSelfIssuedWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  return [((id<JavaSecurityPrincipal>) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getSubjectDN])) isEqual:[cert getIssuerDN]];
}


#line 315
OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(id<JavaSecurityCertX509Extension> ext, NSString *oid) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 320
  IOSByteArray *bytes = [((id<JavaSecurityCertX509Extension>) nil_chk(ext)) getExtensionValueWithNSString:oid];
  if (bytes == nil) {
    
#line 323
    return nil;
  }
  
#line 326
  return OrgSpongycastleJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(oid, bytes);
}


#line 329
OrgSpongycastleAsn1ASN1Primitive *OrgSpongycastleJceProviderCertPathValidatorUtilities_getObjectWithNSString_withByteArray_(NSString *oid, IOSByteArray *ext) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 334
  @try {
    
#line 336
    OrgSpongycastleAsn1ASN1InputStream *aIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_(ext);
    OrgSpongycastleAsn1ASN1OctetString *octs = (OrgSpongycastleAsn1ASN1OctetString *) cast_chk([aIn readObject], [OrgSpongycastleAsn1ASN1OctetString class]);
    
#line 339
    aIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(octs)) getOctets]);
    return [aIn readObject];
  }
  @catch (JavaLangException *e) {
    
#line 344
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"exception processing extension ", oid), e);
  }
}


#line 348
OrgSpongycastleAsn1X509AlgorithmIdentifier *OrgSpongycastleJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(id<JavaSecurityPublicKey> key) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 352
  @try {
    
#line 354
    OrgSpongycastleAsn1ASN1InputStream *aIn = new_OrgSpongycastleAsn1ASN1InputStream_initWithByteArray_([((id<JavaSecurityPublicKey>) nil_chk(key)) getEncoded]);
    
#line 356
    OrgSpongycastleAsn1X509SubjectPublicKeyInfo *info = OrgSpongycastleAsn1X509SubjectPublicKeyInfo_getInstanceWithId_([aIn readObject]);
    
#line 358
    return [((OrgSpongycastleAsn1X509SubjectPublicKeyInfo *) nil_chk(info)) getAlgorithm];
  }
  @catch (JavaLangException *e) {
    
#line 362
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Subject public key cannot be decoded.", e);
  }
}


#line 373
id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_(OrgSpongycastleAsn1ASN1Sequence *qualifiers) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 376
  id<JavaUtilSet> pq = new_JavaUtilHashSet_init();
  
#line 378
  if (qualifiers == nil) {
    
#line 380
    return pq;
  }
  
#line 383
  JavaIoByteArrayOutputStream *bOut = new_JavaIoByteArrayOutputStream_init();
  OrgSpongycastleAsn1ASN1OutputStream *aOut = new_OrgSpongycastleAsn1ASN1OutputStream_initWithJavaIoOutputStream_(bOut);
  
#line 386
  id<JavaUtilEnumeration> e = [qualifiers getObjects];
  
#line 388
  while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
    
#line 390
    @try {
      
#line 392
      [aOut writeObjectWithOrgSpongycastleAsn1ASN1Encodable:(id<OrgSpongycastleAsn1ASN1Encodable>) cast_check([e nextElement], OrgSpongycastleAsn1ASN1Encodable_class_())];
      
#line 394
      [pq addWithId:new_JavaSecurityCertPolicyQualifierInfo_initWithByteArray_([bOut toByteArray])];
    }
    @catch (JavaIoIOException *ex) {
      
#line 398
      @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(@"Policy qualifier info cannot be decoded.", ex);
    }
    
#line 401
    [bOut reset];
  }
  
#line 404
  return pq;
}


#line 407
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree, IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *_node) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 412
  OrgSpongycastleJceProviderPKIXPolicyNode *_parent = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getParent], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
  
#line 414
  if (validPolicyTree == nil) {
    
#line 416
    return nil;
  }
  
#line 419
  if (_parent == nil) {
    
#line 421
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(policyNodes))->size_; j++) {
      
#line 423
      (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
    }
    
#line 426
    return nil;
  }
  else {
    
#line 430
    [_parent removeChildWithOrgSpongycastleJceProviderPKIXPolicyNode:_node];
    OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(policyNodes, _node);
    
#line 433
    return validPolicyTree;
  }
}


#line 437
void OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(IOSObjectArray *policyNodes, OrgSpongycastleJceProviderPKIXPolicyNode *_node) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 441
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getDepth]))) removeWithId:_node];
  
#line 443
  if ([_node hasChildren]) {
    
#line 445
    id<JavaUtilIterator> _iter = [_node getChildren];
    while ([((id<JavaUtilIterator>) nil_chk(_iter)) hasNext]) {
      
#line 448
      OrgSpongycastleJceProviderPKIXPolicyNode *_child = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([_iter next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
      OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeRecurseWithJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(policyNodes, _child);
    }
  }
}


#line 455
jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, OrgSpongycastleAsn1ASN1ObjectIdentifier *pOid, id<JavaUtilSet> pq) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 461
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  
#line 463
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    
#line 465
    OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
    id<JavaUtilSet> expectedPolicies = [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getExpectedPolicies];
    
#line 468
    if ([((id<JavaUtilSet>) nil_chk(expectedPolicies)) containsWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(pOid)) getId]]) {
      
#line 470
      id<JavaUtilSet> childExpectedPolicies = new_JavaUtilHashSet_init();
      [childExpectedPolicies addWithId:[pOid getId]];
      
#line 473
      OrgSpongycastleJceProviderPKIXPolicyNode *child = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(),
#line 474
      index,
#line 475
      childExpectedPolicies,
#line 476
      node,
#line 477
      pq,
#line 478
      [pOid getId],
#line 479
      false);
      [node addChildWithOrgSpongycastleJceProviderPKIXPolicyNode:child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:child];
      
#line 483
      return true;
    }
  }
  
#line 487
  return false;
}


#line 490
void OrgSpongycastleJceProviderCertPathValidatorUtilities_processCertD1iiWithInt_withJavaUtilListArray_withOrgSpongycastleAsn1ASN1ObjectIdentifier_withJavaUtilSet_(jint index, IOSObjectArray *policyNodes, OrgSpongycastleAsn1ASN1ObjectIdentifier *_poid, id<JavaUtilSet> _pq) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 496
  id<JavaUtilList> policyNodeVec = IOSObjectArray_Get(nil_chk(policyNodes), index - 1);
  
#line 498
  for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(policyNodeVec)) size]; j++) {
    
#line 500
    OrgSpongycastleJceProviderPKIXPolicyNode *_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([policyNodeVec getWithInt:j], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
    
#line 502
    if ([((NSString *) nil_chk(OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(_node)) getValidPolicy]]) {
      
#line 504
      id<JavaUtilSet> _childExpectedPolicies = new_JavaUtilHashSet_init();
      [_childExpectedPolicies addWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(_poid)) getId]];
      
#line 507
      OrgSpongycastleJceProviderPKIXPolicyNode *_child = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(),
#line 508
      index,
#line 509
      _childExpectedPolicies,
#line 510
      _node,
#line 511
      _pq,
#line 512
      [_poid getId],
#line 513
      false);
      [_node addChildWithOrgSpongycastleJceProviderPKIXPolicyNode:_child];
      [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, index))) addWithId:_child];
      return;
    }
  }
}


#line 521
void OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB1WithInt_withJavaUtilListArray_withNSString_withJavaUtilMap_withJavaSecurityCertX509Certificate_(jint i, IOSObjectArray *policyNodes, NSString *id_p, id<JavaUtilMap> m_idp, JavaSecurityCertX509Certificate *cert) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 530
  jboolean idp_found = false;
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    
#line 534
    OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      
#line 537
      idp_found = true;
      node->expectedPolicies_ = (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_());
      break;
    }
  }
  
#line 543
  if (!idp_found) {
    
#line 545
    nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
      
#line 548
      OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
      if ([((NSString *) nil_chk(OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY)) isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy]]) {
        
#line 551
        id<JavaUtilSet> pq = nil;
        OrgSpongycastleAsn1ASN1Sequence *policies = nil;
        @try {
          
#line 555
          policies = OrgSpongycastleAsn1ASN1Sequence_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(cert, OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES));
        }
        @catch (JavaLangException *e) {
          
#line 559
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Certificate policies cannot be decoded.", e);
        }
        id<JavaUtilEnumeration> e = [((OrgSpongycastleAsn1ASN1Sequence *) nil_chk(policies)) getObjects];
        while ([((id<JavaUtilEnumeration>) nil_chk(e)) hasMoreElements]) {
          
#line 564
          OrgSpongycastleAsn1X509PolicyInformation *pinfo = nil;
          
#line 566
          @try {
            
#line 568
            pinfo = OrgSpongycastleAsn1X509PolicyInformation_getInstanceWithId_([e nextElement]);
          }
          @catch (JavaLangException *ex) {
            
#line 572
            @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Policy information cannot be decoded.", ex);
          }
          if ([OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY isEqual:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk([((OrgSpongycastleAsn1X509PolicyInformation *) nil_chk(pinfo)) getPolicyIdentifier])) getId]]) {
            
#line 576
            @try {
              
#line 578
              pq = OrgSpongycastleJceProviderCertPathValidatorUtilities_getQualifierSetWithOrgSpongycastleAsn1ASN1Sequence_([pinfo getPolicyQualifiers]);
            }
            @catch (JavaSecurityCertCertPathValidatorException *ex) {
              
#line 582
              @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_(
#line 583
              @"Policy qualifier info set could not be built.", ex);
            }
            break;
          }
        }
        jboolean ci = false;
        if ([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs] != nil) {
          
#line 591
          ci = [((id<JavaUtilSet>) nil_chk([cert getCriticalExtensionOIDs])) containsWithId:OrgSpongycastleJceProviderCertPathValidatorUtilities_CERTIFICATE_POLICIES];
        }
        
#line 594
        OrgSpongycastleJceProviderPKIXPolicyNode *p_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
        if ([OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY isEqual:[((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) getValidPolicy]]) {
          
#line 597
          OrgSpongycastleJceProviderPKIXPolicyNode *c_node = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(),
#line 598
          i,
#line 599
          (id<JavaUtilSet>) cast_check([((id<JavaUtilMap>) nil_chk(m_idp)) getWithId:id_p], JavaUtilSet_class_()),
#line 600
          p_node, pq, id_p, ci);
          [p_node addChildWithOrgSpongycastleJceProviderPKIXPolicyNode:c_node];
          [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, i))) addWithId:c_node];
        }
        break;
      }
    }
  }
}


#line 610
OrgSpongycastleJceProviderPKIXPolicyNode *OrgSpongycastleJceProviderCertPathValidatorUtilities_prepareNextCertB2WithInt_withJavaUtilListArray_withNSString_withOrgSpongycastleJceProviderPKIXPolicyNode_(jint i, IOSObjectArray *policyNodes, NSString *id_p, OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 616
  id<JavaUtilIterator> nodes_i = [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(nil_chk(policyNodes), i))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(nodes_i)) hasNext]) {
    
#line 619
    OrgSpongycastleJceProviderPKIXPolicyNode *node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes_i next], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
    if ([((NSString *) nil_chk([((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node)) getValidPolicy])) isEqual:id_p]) {
      
#line 622
      OrgSpongycastleJceProviderPKIXPolicyNode *p_node = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([node getParent], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
      [((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(p_node)) removeChildWithOrgSpongycastleJceProviderPKIXPolicyNode:node];
      [nodes_i remove];
      for (jint k = (i - 1); k >= 0; k--) {
        
#line 627
        id<JavaUtilList> nodes = IOSObjectArray_Get(policyNodes, k);
        for (jint l = 0; l < [((id<JavaUtilList>) nil_chk(nodes)) size]; l++) {
          
#line 630
          OrgSpongycastleJceProviderPKIXPolicyNode *node2 = (OrgSpongycastleJceProviderPKIXPolicyNode *) cast_chk([nodes getWithInt:l], [OrgSpongycastleJceProviderPKIXPolicyNode class]);
          if (![((OrgSpongycastleJceProviderPKIXPolicyNode *) nil_chk(node2)) hasChildren]) {
            
#line 633
            validPolicyTree = OrgSpongycastleJceProviderCertPathValidatorUtilities_removePolicyNodeWithOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_(validPolicyTree, policyNodes, node2);
            if (validPolicyTree == nil) {
              
#line 636
              break;
            }
          }
        }
      }
    }
  }
  return validPolicyTree;
}


#line 646
jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isAnyPolicyWithJavaUtilSet_(id<JavaUtilSet> policySet) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 649
  return policySet == nil || [policySet containsWithId:OrgSpongycastleJceProviderCertPathValidatorUtilities_ANY_POLICY] || [policySet isEmpty];
}


#line 663
id<JavaUtilCollection> OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(OrgSpongycastleJcajcePKIXCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 667
  id<JavaUtilSet> certs = new_JavaUtilLinkedHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  
#line 670
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 672
    id obj = [iter next];
    
#line 674
    if ([OrgSpongycastleUtilStore_class_() isInstance:obj]) {
      
#line 676
      id<OrgSpongycastleUtilStore> certStore = (id<OrgSpongycastleUtilStore>) cast_check(obj, OrgSpongycastleUtilStore_class_());
      @try {
        
#line 679
        [certs addAllWithJavaUtilCollection:[((id<OrgSpongycastleUtilStore>) nil_chk(certStore)) getMatchesWithOrgSpongycastleUtilSelector:certSelect]];
      }
      @catch (OrgSpongycastleUtilStoreException *e) {
        
#line 683
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 684
        @"Problem while picking certificates from X.509 store.", e);
      }
    }
    else {
      
#line 689
      JavaSecurityCertCertStore *certStore = (JavaSecurityCertCertStore *) cast_chk(obj, [JavaSecurityCertCertStore class]);
      
#line 691
      @try {
        
#line 693
        [certs addAllWithJavaUtilCollection:OrgSpongycastleJcajcePKIXCertStoreSelector_getCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaSecurityCertCertStore_(certSelect, certStore)];
      }
      @catch (JavaSecurityCertCertStoreException *e) {
        
#line 697
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 698
        @"Problem while picking certificates from certificate store.",
#line 699
        e);
      }
    }
  }
  return certs;
}


#line 706
id<JavaUtilList> OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromCRLDistributionPointWithOrgSpongycastleAsn1X509CRLDistPoint_withJavaUtilMap_(OrgSpongycastleAsn1X509CRLDistPoint *crldp, id<JavaUtilMap> namedCRLStoreMap) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 709
  if (crldp != nil) {
    
#line 711
    IOSObjectArray *dps = nil;
    @try {
      
#line 714
      dps = [crldp getDistributionPoints];
    }
    @catch (JavaLangException *e) {
      
#line 718
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 719
      @"Distribution points could not be read.", e);
    }
    id<JavaUtilList> stores = new_JavaUtilArrayList_init();
    
#line 723
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(dps))->size_; i++) {
      
#line 725
      OrgSpongycastleAsn1X509DistributionPointName *dpn = [((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(IOSObjectArray_Get(dps, i))) getDistributionPoint];
      
#line 727
      if (dpn != nil) {
        
#line 729
        if ([dpn getType] == OrgSpongycastleAsn1X509DistributionPointName_FULL_NAME) {
          
#line 731
          IOSObjectArray *genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk(OrgSpongycastleAsn1X509GeneralNames_getInstanceWithId_(
#line 732
          [dpn getName]))) getNames];
          
#line 734
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
            
#line 736
            id<OrgSpongycastleJcajcePKIXCRLStore> store = [((id<JavaUtilMap>) nil_chk(namedCRLStoreMap)) getWithId:IOSObjectArray_Get(genNames, j)];
            if (store != nil) {
              
#line 739
              [stores addWithId:store];
            }
          }
        }
      }
    }
    
#line 746
    return stores;
  }
  else {
    
#line 750
    return JreLoadStatic(JavaUtilCollections, EMPTY_LIST);
  }
}

void OrgSpongycastleJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(OrgSpongycastleAsn1X509DistributionPoint *dp, id<JavaUtilCollection> issuerPrincipals, JavaSecurityCertX509CRLSelector *selector) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 776
  id<JavaUtilList> issuers = new_JavaUtilArrayList_init();
  
#line 778
  if ([((OrgSpongycastleAsn1X509DistributionPoint *) nil_chk(dp)) getCRLIssuer] != nil) {
    
#line 780
    IOSObjectArray *genNames = [((OrgSpongycastleAsn1X509GeneralNames *) nil_chk([dp getCRLIssuer])) getNames];
    
#line 782
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(genNames))->size_; j++) {
      
#line 784
      if ([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getTagNo] == OrgSpongycastleAsn1X509GeneralName_directoryName) {
        
#line 786
        @try {
          
#line 788
          [issuers addWithId:OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([((OrgSpongycastleAsn1ASN1Primitive *) nil_chk([((id<OrgSpongycastleAsn1ASN1Encodable>) nil_chk([((OrgSpongycastleAsn1X509GeneralName *) nil_chk(IOSObjectArray_Get(genNames, j))) getName])) toASN1Primitive])) getEncoded])];
        }
        @catch (
#line 791
        JavaIoIOException *e) {
          
#line 793
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 794
          @"CRL issuer information from distribution point cannot be decoded.",
#line 795
          e);
        }
      }
    }
  }
  else {
    
#line 806
    if ([dp getDistributionPoint] == nil) {
      
#line 808
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 809
      @"CRL issuer is omitted from distribution point but no distributionPoint field present.");
    }
    
#line 812
    for (id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(issuerPrincipals)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      
#line 814
      [issuers addWithId:[it next]];
    }
  }
  
#line 861
  id<JavaUtilIterator> it = [issuers iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    
#line 864
    @try {
      
#line 866
      [((JavaSecurityCertX509CRLSelector *) nil_chk(selector)) addIssuerNameWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(((OrgSpongycastleAsn1X500X500Name *) cast_chk([it next], [OrgSpongycastleAsn1X500X500Name class])))) getEncoded]];
    }
    @catch (JavaIoIOException *ex) {
      
#line 870
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 871
      @"Cannot decode CRL issuer information.", ex);
    }
  }
}


#line 876
JavaMathBigInteger *OrgSpongycastleJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(id cert) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 879
  return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class])))) getSerialNumber];
}


#line 882
void OrgSpongycastleJceProviderCertPathValidatorUtilities_getCertStatusWithJavaUtilDate_withJavaSecurityCertX509CRL_withId_withOrgSpongycastleJceProviderBCCertStatus_(JavaUtilDate *validDate, JavaSecurityCertX509CRL *crl, id cert, OrgSpongycastleJceProviderBCCertStatus *certStatus) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 889
  JavaSecurityCertX509CRLEntry *crl_entry = nil;
  
#line 891
  jboolean isIndirect;
  @try {
    
#line 894
    isIndirect = OrgSpongycastleJceProviderBCX509CRLObject_isIndirectCRLWithJavaSecurityCertX509CRL_(crl);
  }
  @catch (JavaSecurityCertCRLException *exception) {
    
#line 898
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Failed check for indirect CRL.", exception);
  }
  
#line 901
  if (isIndirect) {
    
#line 903
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:OrgSpongycastleJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    
#line 905
    if (crl_entry == nil) {
      
#line 907
      return;
    }
    
#line 910
    JavaxSecurityAuthX500X500Principal *certificateIssuer = [crl_entry getCertificateIssuer];
    
#line 912
    OrgSpongycastleAsn1X500X500Name *certIssuer;
    if (certificateIssuer == nil) {
      
#line 915
      certIssuer = OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl);
    }
    else {
      
#line 919
      certIssuer = OrgSpongycastleAsn1X500X500Name_getInstanceWithId_([certificateIssuer getEncoded]);
    }
    
#line 922
    if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:certIssuer]) {
      
#line 924
      return;
    }
  }
  else if (![((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert))) isEqual:OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(crl)]) {
    
#line 929
    return;
  }
  else {
    
#line 933
    crl_entry = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getRevokedCertificateWithJavaMathBigInteger:OrgSpongycastleJceProviderCertPathValidatorUtilities_getSerialNumberWithId_(cert)];
    
#line 935
    if (crl_entry == nil) {
      
#line 937
      return;
    }
  }
  
#line 941
  OrgSpongycastleAsn1ASN1Enumerated *reasonCode = nil;
  if ([crl_entry hasExtensions]) {
    
#line 944
    @try {
      
#line 946
      reasonCode = OrgSpongycastleAsn1ASN1Enumerated_getInstanceWithId_(OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(
#line 948
      crl_entry,
#line 949
      [((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, reasonCode))) getId]));
    }
    @catch (JavaLangException *e) {
      
#line 953
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 954
      @"Reason code CRL entry extension could not be decoded.",
#line 955
      e);
    }
  }
  
#line 961
  if (!([((JavaUtilDate *) nil_chk(validDate)) getTime] < [((JavaUtilDate *) nil_chk([crl_entry getRevocationDate])) getTime]) ||
#line 962
  reasonCode == nil ||
#line 963
  [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 0 ||
#line 964
  [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 1 ||
#line 965
  [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 2 ||
#line 966
  [((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue] == 8) {
    
#line 970
    if (reasonCode != nil) {
      
#line 972
      [((OrgSpongycastleJceProviderBCCertStatus *) nil_chk(certStatus)) setCertStatusWithInt:[((JavaMathBigInteger *) nil_chk([reasonCode getValue])) intValue]];
    }
    else {
      
#line 977
      [((OrgSpongycastleJceProviderBCCertStatus *) nil_chk(certStatus)) setCertStatusWithInt:OrgSpongycastleAsn1X509CRLReason_unspecified];
    }
    [certStatus setRevocationDateWithJavaUtilDate:[crl_entry getRevocationDate]];
  }
}


#line 992
id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getDeltaCRLsWithJavaUtilDate_withJavaSecurityCertX509CRL_withJavaUtilList_withJavaUtilList_(JavaUtilDate *validityDate, JavaSecurityCertX509CRL *completeCRL, id<JavaUtilList> certStores, id<JavaUtilList> pkixCrlStores) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 996
  JavaSecurityCertX509CRLSelector *baseDeltaSelect = new_JavaSecurityCertX509CRLSelector_init();
  
#line 998
  @try {
    
#line 1000
    [baseDeltaSelect addIssuerNameWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509CRL_(completeCRL))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    
#line 1004
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Cannot extract issuer from CRL.", e);
  }
  
#line 1009
  JavaMathBigInteger *completeCRLNumber = nil;
  @try {
    
#line 1012
    OrgSpongycastleAsn1ASN1Primitive *derObject = OrgSpongycastleJceProviderCertPathValidatorUtilities_getExtensionValueWithJavaSecurityCertX509Extension_withNSString_(completeCRL,
#line 1013
    OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_NUMBER);
    if (derObject != nil) {
      
#line 1016
      completeCRLNumber = [((OrgSpongycastleAsn1ASN1Integer *) nil_chk(OrgSpongycastleAsn1ASN1Integer_getInstanceWithId_(derObject))) getPositiveValue];
    }
  }
  @catch (JavaLangException *e) {
    
#line 1021
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1022
    @"CRL number extension could not be extracted from CRL.", e);
  }
  
#line 1026
  IOSByteArray *idp = nil;
  @try {
    
#line 1029
    idp = [((JavaSecurityCertX509CRL *) nil_chk(completeCRL)) getExtensionValueWithNSString:OrgSpongycastleJceProviderCertPathValidatorUtilities_ISSUING_DISTRIBUTION_POINT];
  }
  @catch (JavaLangException *e) {
    
#line 1033
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1034
    @"Issuing distribution point extension value could not be read.",
#line 1035
    e);
  }
  
#line 1040
  [baseDeltaSelect setMinCRLNumberWithJavaMathBigInteger:completeCRLNumber == nil ? nil : [completeCRLNumber addWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(
#line 1041
  1)]];
  
#line 1043
  OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *selBuilder = new_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(baseDeltaSelect);
  
#line 1045
  [selBuilder setIssuingDistributionPointWithByteArray:idp];
  [selBuilder setIssuingDistributionPointEnabledWithBoolean:true];
  
#line 1049
  [selBuilder setMaxBaseCRLNumberWithJavaMathBigInteger:completeCRLNumber];
  
#line 1051
  OrgSpongycastleJcajcePKIXCRLStoreSelector *deltaSelect = [selBuilder build];
  
#line 1054
  id<JavaUtilSet> temp = [((OrgSpongycastleJceProviderPKIXCRLUtil *) nil_chk(OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL)) findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:deltaSelect withJavaUtilDate:validityDate withJavaUtilList:certStores withJavaUtilList:pkixCrlStores];
  
#line 1056
  id<JavaUtilSet> result = new_JavaUtilHashSet_init();
  
#line 1058
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(temp)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    
#line 1060
    JavaSecurityCertX509CRL *crl = (JavaSecurityCertX509CRL *) cast_chk([it next], [JavaSecurityCertX509CRL class]);
    
#line 1062
    if (OrgSpongycastleJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(crl)) {
      
#line 1064
      [result addWithId:crl];
    }
  }
  
#line 1068
  return result;
}


#line 1071
jboolean OrgSpongycastleJceProviderCertPathValidatorUtilities_isDeltaCRLWithJavaSecurityCertX509CRL_(JavaSecurityCertX509CRL *crl) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  id<JavaUtilSet> critical = [((JavaSecurityCertX509CRL *) nil_chk(crl)) getCriticalExtensionOIDs];
  
#line 1075
  if (critical == nil) {
    
#line 1077
    return false;
  }
  
#line 1080
  return [critical containsWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
}


#line 1096
id<JavaUtilSet> OrgSpongycastleJceProviderCertPathValidatorUtilities_getCompleteCRLsWithOrgSpongycastleAsn1X509DistributionPoint_withId_withJavaUtilDate_withOrgSpongycastleJcajcePKIXExtendedParameters_(OrgSpongycastleAsn1X509DistributionPoint *dp, id cert, JavaUtilDate *currentDate, OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1100
  JavaSecurityCertX509CRLSelector *baseCrlSelect = new_JavaSecurityCertX509CRLSelector_init();
  
#line 1102
  @try {
    
#line 1104
    id<JavaUtilSet> issuers = new_JavaUtilHashSet_init();
    
#line 1106
    [issuers addWithId:OrgSpongycastleJceProviderPrincipalUtils_getEncodedIssuerPrincipalWithId_(cert)];
    
#line 1108
    OrgSpongycastleJceProviderCertPathValidatorUtilities_getCRLIssuersFromDistributionPointWithOrgSpongycastleAsn1X509DistributionPoint_withJavaUtilCollection_withJavaSecurityCertX509CRLSelector_(dp, issuers, baseCrlSelect);
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1112
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1113
    @"Could not get issuer information from distribution point.", e);
  }
  
#line 1116
  if ([cert isKindOfClass:[JavaSecurityCertX509Certificate class]]) {
    
#line 1118
    [baseCrlSelect setCertificateCheckingWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *) cert];
  }
  
#line 1121
  OrgSpongycastleJcajcePKIXCRLStoreSelector *crlSelect = [((OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *) nil_chk([new_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(baseCrlSelect) setCompleteCRLEnabledWithBoolean:true])) build];
  
#line 1123
  JavaUtilDate *validityDate = currentDate;
  
#line 1125
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getDate] != nil) {
    
#line 1127
    validityDate = [paramsPKIX getDate];
  }
  
#line 1130
  id<JavaUtilSet> crls = [((OrgSpongycastleJceProviderPKIXCRLUtil *) nil_chk(OrgSpongycastleJceProviderCertPathValidatorUtilities_CRL_UTIL)) findCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:crlSelect withJavaUtilDate:validityDate withJavaUtilList:[paramsPKIX getCertStores] withJavaUtilList:[paramsPKIX getCRLStores]];
  
#line 1132
  OrgSpongycastleJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(crls, cert);
  
#line 1134
  return crls;
}


#line 1137
JavaUtilDate *OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidCertDateFromValidityModelWithOrgSpongycastleJcajcePKIXExtendedParameters_withJavaSecurityCertCertPath_withInt_(OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX, JavaSecurityCertCertPath *certPath, jint index) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1141
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getValidityModel] == OrgSpongycastleJcajcePKIXExtendedParameters_CHAIN_VALIDITY_MODEL) {
    
#line 1144
    if (index <= 0) {
      
#line 1146
      return OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX);
    }
    else {
      
#line 1151
      if (index - 1 == 0) {
        
#line 1153
        OrgSpongycastleAsn1ASN1GeneralizedTime *dateOfCertgen = nil;
        @try {
          
#line 1156
          IOSByteArray *extBytes = [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) getWithInt:index - 1], [JavaSecurityCertX509Certificate class])))) getExtensionValueWithNSString:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1IsismttISISMTTObjectIdentifiers, id_isismtt_at_dateOfCertGen))) getId]];
          if (extBytes != nil) {
            
#line 1159
            dateOfCertgen = OrgSpongycastleAsn1ASN1GeneralizedTime_getInstanceWithId_(OrgSpongycastleAsn1ASN1Primitive_fromByteArrayWithByteArray_(extBytes));
          }
        }
        @catch (JavaIoIOException *e) {
          
#line 1164
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 1165
          @"Date of cert gen extension could not be read.");
        }
        @catch (JavaLangIllegalArgumentException *e) {
          
#line 1169
          @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 1170
          @"Date of cert gen extension could not be read.");
        }
        if (dateOfCertgen != nil) {
          
#line 1174
          @try {
            
#line 1176
            return [dateOfCertgen getDate];
          }
          @catch (JavaTextParseException *e) {
            
#line 1180
            @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1181
            @"Date from date of cert gen extension could not be parsed.",
#line 1182
            e);
          }
        }
        return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([certPath getCertificates])) getWithInt:
#line 1186
        index - 1], [JavaSecurityCertX509Certificate class])))) getNotBefore];
      }
      else {
        
#line 1190
        return [((JavaSecurityCertX509Certificate *) nil_chk(((JavaSecurityCertX509Certificate *) cast_chk([((id<JavaUtilList>) nil_chk([((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates])) getWithInt:
#line 1191
        index - 1], [JavaSecurityCertX509Certificate class])))) getNotBefore];
      }
    }
  }
  else {
    
#line 1197
    return OrgSpongycastleJceProviderCertPathValidatorUtilities_getValidDateWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX);
  }
}


#line 1222
id<JavaSecurityPublicKey> OrgSpongycastleJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withOrgSpongycastleJcajceUtilJcaJceHelper_(id<JavaUtilList> certs, jint index, id<OrgSpongycastleJcajceUtilJcaJceHelper> helper) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1225
  JavaSecurityCertCertificate *cert = (JavaSecurityCertCertificate *) cast_chk([((id<JavaUtilList>) nil_chk(certs)) getWithInt:index], [JavaSecurityCertCertificate class]);
  id<JavaSecurityPublicKey> pubKey = [((JavaSecurityCertCertificate *) nil_chk(cert)) getPublicKey];
  if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
    
#line 1229
    return pubKey;
  }
  id<JavaSecurityInterfacesDSAPublicKey> dsaPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
  if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(dsaPubKey)) getParams] != nil) {
    
#line 1234
    return dsaPubKey;
  }
  for (jint i = index + 1; i < [certs size]; i++) {
    
#line 1238
    JavaSecurityCertX509Certificate *parentCert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:i], [JavaSecurityCertX509Certificate class]);
    pubKey = [((JavaSecurityCertX509Certificate *) nil_chk(parentCert)) getPublicKey];
    if (!([JavaSecurityInterfacesDSAPublicKey_class_() isInstance:pubKey])) {
      
#line 1242
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(
#line 1243
      @"DSA parameters cannot be inherited from previous certificate.");
    }
    id<JavaSecurityInterfacesDSAPublicKey> prevDSAPubKey = (id<JavaSecurityInterfacesDSAPublicKey>) cast_check(pubKey, JavaSecurityInterfacesDSAPublicKey_class_());
    if ([((id<JavaSecurityInterfacesDSAPublicKey>) nil_chk(prevDSAPubKey)) getParams] == nil) {
      
#line 1248
      continue;
    }
    id<JavaSecurityInterfacesDSAParams> dsaParams = [prevDSAPubKey getParams];
    JavaSecuritySpecDSAPublicKeySpec *dsaPubKeySpec = new_JavaSecuritySpecDSAPublicKeySpec_initWithJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_withJavaMathBigInteger_(
#line 1252
    [dsaPubKey getY], [((id<JavaSecurityInterfacesDSAParams>) nil_chk(dsaParams)) getP], [dsaParams getQ], [dsaParams getG]);
    @try {
      
#line 1255
      JavaSecurityKeyFactory *keyFactory = [((id<OrgSpongycastleJcajceUtilJcaJceHelper>) nil_chk(helper)) createKeyFactoryWithNSString:@"DSA"];
      return [((JavaSecurityKeyFactory *) nil_chk(keyFactory)) generatePublicWithJavaSecuritySpecKeySpec:dsaPubKeySpec];
    }
    @catch (JavaLangException *exception) {
      
#line 1260
      @throw new_JavaLangRuntimeException_initWithNSString_([exception getMessage]);
    }
  }
  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_(@"DSA parameters cannot be inherited from previous certificate.");
}


#line 1274
id<JavaUtilCollection> OrgSpongycastleJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(JavaSecurityCertX509Certificate *cert, id<JavaUtilList> certStores, id<JavaUtilList> pkixCertStores) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1280
  JavaSecurityCertX509CertSelector *selector = new_JavaSecurityCertX509CertSelector_init();
  
#line 1282
  @try {
    
#line 1284
    [selector setSubjectWithByteArray:[((OrgSpongycastleAsn1X500X500Name *) nil_chk(OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509Certificate_(cert))) getEncoded]];
  }
  @catch (JavaIoIOException *e) {
    
#line 1288
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 1289
    @"Subject criteria for certificate selector to find issuer certificate could not be set.", e);
  }
  
#line 1292
  @try {
    
#line 1294
    IOSByteArray *akiExtensionValue = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getExtensionValueWithNSString:OrgSpongycastleJceProviderCertPathValidatorUtilities_AUTHORITY_KEY_IDENTIFIER];
    if (akiExtensionValue != nil) {
      
#line 1297
      OrgSpongycastleAsn1ASN1OctetString *aki = OrgSpongycastleAsn1ASN1OctetString_getInstanceWithId_(akiExtensionValue);
      IOSByteArray *authorityKeyIdentifier = [((OrgSpongycastleAsn1X509AuthorityKeyIdentifier *) nil_chk(OrgSpongycastleAsn1X509AuthorityKeyIdentifier_getInstanceWithId_([((OrgSpongycastleAsn1ASN1OctetString *) nil_chk(aki)) getOctets]))) getKeyIdentifier];
      if (authorityKeyIdentifier != nil) {
        
#line 1301
        [selector setSubjectKeyIdentifierWithByteArray:[new_OrgSpongycastleAsn1DEROctetString_initWithByteArray_(authorityKeyIdentifier) getEncoded]];
      }
    }
  }
  @catch (JavaLangException *e) {
  }
  
#line 1310
  OrgSpongycastleJcajcePKIXCertStoreSelector *certSelect = [new_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build];
  id<JavaUtilSet> certs = new_JavaUtilLinkedHashSet_init();
  
#line 1313
  id<JavaUtilIterator> iter;
  
#line 1315
  @try {
    
#line 1317
    id<JavaUtilList> matches = new_JavaUtilArrayList_init();
    
#line 1319
    [matches addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, certStores)];
    [matches addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certSelect, pkixCertStores)];
    
#line 1322
    iter = [matches iterator];
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 1326
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(@"Issuer certificate cannot be searched.", e);
  }
  
#line 1329
  JavaSecurityCertX509Certificate *issuer = nil;
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 1332
    issuer = (JavaSecurityCertX509Certificate *) cast_chk([iter next], [JavaSecurityCertX509Certificate class]);
    
#line 1335
    [certs addWithId:issuer];
  }
  return certs;
}


#line 1340
void OrgSpongycastleJceProviderCertPathValidatorUtilities_verifyX509CertificateWithJavaSecurityCertX509Certificate_withJavaSecurityPublicKey_withNSString_(JavaSecurityCertX509Certificate *cert, id<JavaSecurityPublicKey> publicKey, NSString *sigProvider) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1344
  if (sigProvider == nil) {
    
#line 1346
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey];
  }
  else {
    
#line 1350
    [((JavaSecurityCertX509Certificate *) nil_chk(cert)) verifyWithJavaSecurityPublicKey:publicKey withNSString:sigProvider];
  }
}


#line 1354
void OrgSpongycastleJceProviderCertPathValidatorUtilities_checkCRLsNotEmptyWithJavaUtilSet_withId_(id<JavaUtilSet> crls, id cert) {
  OrgSpongycastleJceProviderCertPathValidatorUtilities_initialize();
  
#line 1357
  if ([((id<JavaUtilSet>) nil_chk(crls)) isEmpty]) {
    
#line 1359
    if ([OrgSpongycastleX509X509AttributeCertificate_class_() isInstance:cert]) {
      
#line 1361
      id<OrgSpongycastleX509X509AttributeCertificate> aCert = (id<OrgSpongycastleX509X509AttributeCertificate>) cast_check(cert, OrgSpongycastleX509X509AttributeCertificate_class_());
      
#line 1363
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(JreStrcat("$@C", @"No CRLs found for issuer \"", IOSObjectArray_Get(nil_chk([((OrgSpongycastleX509BCAttributeCertificateIssuer *) nil_chk([((id<OrgSpongycastleX509X509AttributeCertificate>) nil_chk(aCert)) getIssuer])) getPrincipals]), 0), '"'));
    }
    else {
      
#line 1367
      JavaSecurityCertX509Certificate *xCert = (JavaSecurityCertX509Certificate *) cast_chk(cert, [JavaSecurityCertX509Certificate class]);
      
#line 1369
      @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(JreStrcat("$$C", @"No CRLs found for issuer \"", [((id<OrgSpongycastleAsn1X500X500NameStyle>) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X500StyleRFC4519Style, INSTANCE))) toStringWithOrgSpongycastleAsn1X500X500Name:OrgSpongycastleJceProviderPrincipalUtils_getIssuerPrincipalWithJavaSecurityCertX509Certificate_(xCert)], '"'));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderCertPathValidatorUtilities)
