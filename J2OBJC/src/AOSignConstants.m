//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOSignConstants.java
//

#include "AOSignConstants.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Locale.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "AOSignConstants must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreSignersAOSignConstants ()

- (instancetype)init;

@end

__attribute__((unused)) static void EsGobAfirmaCoreSignersAOSignConstants_init(EsGobAfirmaCoreSignersAOSignConstants *self);

__attribute__((unused)) static EsGobAfirmaCoreSignersAOSignConstants *new_EsGobAfirmaCoreSignersAOSignConstants_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreSignersAOSignConstants *create_EsGobAfirmaCoreSignersAOSignConstants_init(void);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/signers/AOSignConstants.java"

NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_AUTO = @"auto";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CMS = @"CMS/PKCS#7";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_ASIC_S = @"CAdES-ASiC-S";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_ASIC_S_TRI = @"CAdES-ASiC-S-tri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES = @"CAdES";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_TRI = @"CAdEStri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1 = @"NONE";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_ALT1 = @"PKCS1";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_ALT2 = @"PKCS#1";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_TRI = @"NONEtri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ASIC_S = @"XAdES-ASiC-S";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ASIC_S_TRI = @"XAdES-ASiC-S-tri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_DETACHED = @"XAdES Detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_EXTERNALLY_DETACHED = @"XAdES Externally Detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ENVELOPED = @"XAdES Enveloped";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ENVELOPING = @"XAdES Enveloping";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES = @"XAdES";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_TRI = @"XAdEStri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_DETACHED = @"XMLDSig Detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_EXTERNALLY_DETACHED = @"XMLDSig Externally Detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_ENVELOPED = @"XMLDSig Enveloped";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_ENVELOPING = @"XMLDSig Enveloping";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG = @"XMLDSig";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_OOXML = @"OOXML (Office Open XML)";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_OOXML_ALT1 = @"OOXML";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_ODF = @"ODF (Open Document Format)";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_ODF_ALT1 = @"ODF";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PDF = @"Adobe PDF";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PDF_TRI = @"Adobe PDF TriPhase";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PADES = @"PAdES";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PADES_TRI = @"PAdEStri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_SOAP = @"SOAP";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE = @"FacturaE";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE_TRI = @"FacturaEtri";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE_ALT1 = @"Factura-e";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_FORMAT = @"CAdES";
NSString *EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_SIGN = @"FIRMAR";
NSString *EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COSIGN = @"COFIRMAR";
NSString *EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COUNTERSIGN_TREE = @"CONTRAFIRMAR_ARBOL";
NSString *EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COUNTERSIGN_LEAFS = @"CONTRAFIRMAR_HOJAS";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_MASSIVE_OPERATION = @"FIRMAR";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_ADVANCED = @"advanced";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE = @"baseline";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_PROFILE = @"advanced";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_DATA = @"Data";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_SIGNEDDATA = @"SignedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_DIGESTEDDATA = @"DigestedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_COMPRESSEDDATA = @"CompressedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_ENCRYPTEDDATA = @"EncryptedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_ENVELOPEDDATA = @"EnvelopedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA = @"SignedAndEnvelopedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_AUTHENTICATEDDATA = @"AuthenticatedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_AUTHENVELOPEDDATA = @"AuthEnvelopedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_CMS_CONTENTTYPE = @"EnvelopedData";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_OID_TO_SIGN = @"1.3.6.1.4.1.1466.115.121.1.40";
NSString *EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BASIC = @"adbe.pkcs7.detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES = @"ETSI.CAdES.detached";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA1 = @"SHA1";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA256 = @"SHA256";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA384 = @"SHA384";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA512 = @"SHA512";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHRSA = @"SHA1withRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHRSA = @"SHA256withRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHRSA = @"SHA384withRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHRSA = @"SHA512withRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_NONEWITHRSA = @"NONEwithRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHDSA = @"SHA1withDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHECDSA = @"SHA1withECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA224WITHECDSA = @"SHA224withECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHECDSA = @"SHA256withECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHECDSA = @"SHA384withECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHECDSA = @"SHA512withECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_NONEWITHECDSA = @"NONEwithECDSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_ALGO = @"SHA512withRSA";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_MODE_EXPLICIT = @"explicit";
NSString *EsGobAfirmaCoreSignersAOSignConstants_SIGN_MODE_IMPLICIT = @"implicit";
NSString *EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_MODE = @"explicit";


#line 16
@implementation EsGobAfirmaCoreSignersAOSignConstants

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 286
- (instancetype)init {
  EsGobAfirmaCoreSignersAOSignConstants_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 294
+ (NSString *)getDigestAlgorithmNameWithNSString:(NSString *)pseudoName {
  return EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(pseudoName);
}


#line 367
+ (NSString *)composeSignatureAlgorithmNameWithNSString:(NSString *)algorithm
                                           withNSString:(NSString *)keyType {
  return EsGobAfirmaCoreSignersAOSignConstants_composeSignatureAlgorithmNameWithNSString_withNSString_(algorithm, keyType);
}


#line 400
+ (jboolean)isSHA2SignatureAlgorithmWithNSString:(NSString *)algorithm {
  return EsGobAfirmaCoreSignersAOSignConstants_isSHA2SignatureAlgorithmWithNSString_(algorithm);
}


#line 415
+ (jboolean)isSHA1SignatureAlgorithmWithNSString:(NSString *)algorithm {
  return EsGobAfirmaCoreSignersAOSignConstants_isSHA1SignatureAlgorithmWithNSString_(algorithm);
}


#line 427
+ (jboolean)isDSAorECDSASignatureAlgorithmWithNSString:(NSString *)algorithm {
  return EsGobAfirmaCoreSignersAOSignConstants_isDSAorECDSASignatureAlgorithmWithNSString_(algorithm);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDigestAlgorithmNameWithNSString:);
  methods[2].selector = @selector(composeSignatureAlgorithmNameWithNSString:withNSString:);
  methods[3].selector = @selector(isSHA2SignatureAlgorithmWithNSString:);
  methods[4].selector = @selector(isSHA1SignatureAlgorithmWithNSString:);
  methods[5].selector = @selector(isDSAorECDSASignatureAlgorithmWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SIGN_FORMAT_AUTO", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "SIGN_FORMAT_CMS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "SIGN_FORMAT_CADES_ASIC_S", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "SIGN_FORMAT_CADES_ASIC_S_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "SIGN_FORMAT_CADES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "SIGN_FORMAT_CADES_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "SIGN_FORMAT_PKCS1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "SIGN_FORMAT_PKCS1_ALT1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "SIGN_FORMAT_PKCS1_ALT2", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "SIGN_FORMAT_PKCS1_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "SIGN_FORMAT_XADES_ASIC_S", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "SIGN_FORMAT_XADES_ASIC_S_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "SIGN_FORMAT_XADES_DETACHED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "SIGN_FORMAT_XADES_EXTERNALLY_DETACHED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "SIGN_FORMAT_XADES_ENVELOPED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "SIGN_FORMAT_XADES_ENVELOPING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "SIGN_FORMAT_XADES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "SIGN_FORMAT_XADES_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 24, -1, -1 },
    { "SIGN_FORMAT_XMLDSIG_DETACHED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "SIGN_FORMAT_XMLDSIG_EXTERNALLY_DETACHED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "SIGN_FORMAT_XMLDSIG_ENVELOPED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "SIGN_FORMAT_XMLDSIG_ENVELOPING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "SIGN_FORMAT_XMLDSIG", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "SIGN_FORMAT_OOXML", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "SIGN_FORMAT_OOXML_ALT1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "SIGN_FORMAT_ODF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "SIGN_FORMAT_ODF_ALT1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "SIGN_FORMAT_PDF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "SIGN_FORMAT_PDF_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "SIGN_FORMAT_PADES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "SIGN_FORMAT_PADES_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 37, -1, -1 },
    { "SIGN_FORMAT_SOAP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 38, -1, -1 },
    { "SIGN_FORMAT_FACTURAE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 39, -1, -1 },
    { "SIGN_FORMAT_FACTURAE_TRI", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 40, -1, -1 },
    { "SIGN_FORMAT_FACTURAE_ALT1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "DEFAULT_SIGN_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "MASSIVE_OPERATION_SIGN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "MASSIVE_OPERATION_COSIGN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "MASSIVE_OPERATION_COUNTERSIGN_TREE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 45, -1, -1 },
    { "MASSIVE_OPERATION_COUNTERSIGN_LEAFS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "DEFAULT_MASSIVE_OPERATION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "SIGN_PROFILE_ADVANCED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "SIGN_PROFILE_BASELINE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "DEFAULT_SIGN_PROFILE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "CMS_CONTENTTYPE_DATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "CMS_CONTENTTYPE_SIGNEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 52, -1, -1 },
    { "CMS_CONTENTTYPE_DIGESTEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "CMS_CONTENTTYPE_COMPRESSEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "CMS_CONTENTTYPE_ENCRYPTEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "CMS_CONTENTTYPE_ENVELOPEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 57, -1, -1 },
    { "CMS_CONTENTTYPE_AUTHENTICATEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "CMS_CONTENTTYPE_AUTHENVELOPEDDATA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "DEFAULT_CMS_CONTENTTYPE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 60, -1, -1 },
    { "DEFAULT_OID_TO_SIGN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 61, -1, -1 },
    { "PADES_SUBFILTER_BASIC", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "PADES_SUBFILTER_BES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "DIGEST_ALGORITHM_SHA1", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
    { "DIGEST_ALGORITHM_SHA256", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "DIGEST_ALGORITHM_SHA384", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "DIGEST_ALGORITHM_SHA512", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "SIGN_ALGORITHM_SHA1WITHRSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "SIGN_ALGORITHM_SHA256WITHRSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "SIGN_ALGORITHM_SHA384WITHRSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 70, -1, -1 },
    { "SIGN_ALGORITHM_SHA512WITHRSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 71, -1, -1 },
    { "SIGN_ALGORITHM_NONEWITHRSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 72, -1, -1 },
    { "SIGN_ALGORITHM_SHA1WITHDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
    { "SIGN_ALGORITHM_SHA1WITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 74, -1, -1 },
    { "SIGN_ALGORITHM_SHA224WITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "SIGN_ALGORITHM_SHA256WITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "SIGN_ALGORITHM_SHA384WITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "SIGN_ALGORITHM_SHA512WITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "SIGN_ALGORITHM_NONEWITHECDSA", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "DEFAULT_SIGN_ALGO", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 80, -1, -1 },
    { "SIGN_MODE_EXPLICIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 81, -1, -1 },
    { "SIGN_MODE_IMPLICIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 82, -1, -1 },
    { "DEFAULT_SIGN_MODE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 83, -1, -1 },
  };
  static const void *ptrTable[] = { "getDigestAlgorithmName", "LNSString;", "composeSignatureAlgorithmName", "LNSString;LNSString;", "isSHA2SignatureAlgorithm", "isSHA1SignatureAlgorithm", "isDSAorECDSASignatureAlgorithm", &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_AUTO, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CMS, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_ASIC_S, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_ASIC_S_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_CADES_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_ALT1, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_ALT2, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PKCS1_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ASIC_S, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ASIC_S_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_DETACHED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_EXTERNALLY_DETACHED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ENVELOPED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_ENVELOPING, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XADES_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_DETACHED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_EXTERNALLY_DETACHED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_ENVELOPED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG_ENVELOPING, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_XMLDSIG, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_OOXML, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_OOXML_ALT1, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_ODF, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_ODF_ALT1, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PDF, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PDF_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PADES, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_PADES_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_SOAP, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE_TRI, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_FORMAT_FACTURAE_ALT1, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_FORMAT, &EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_SIGN, &EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COSIGN, &EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COUNTERSIGN_TREE, &EsGobAfirmaCoreSignersAOSignConstants_MASSIVE_OPERATION_COUNTERSIGN_LEAFS, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_MASSIVE_OPERATION, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_ADVANCED, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_PROFILE_BASELINE, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_PROFILE, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_DATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_SIGNEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_DIGESTEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_COMPRESSEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_ENCRYPTEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_ENVELOPEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_SIGNEDANDENVELOPEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_AUTHENTICATEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_CMS_CONTENTTYPE_AUTHENVELOPEDDATA, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_CMS_CONTENTTYPE, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_OID_TO_SIGN, &EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BASIC, &EsGobAfirmaCoreSignersAOSignConstants_PADES_SUBFILTER_BES, &EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA1, &EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA256, &EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA384, &EsGobAfirmaCoreSignersAOSignConstants_DIGEST_ALGORITHM_SHA512, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHRSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHRSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHRSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHRSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_NONEWITHRSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA224WITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_NONEWITHECDSA, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_ALGO, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_MODE_EXPLICIT, &EsGobAfirmaCoreSignersAOSignConstants_SIGN_MODE_IMPLICIT, &EsGobAfirmaCoreSignersAOSignConstants_DEFAULT_SIGN_MODE };
  static const J2ObjcClassInfo _EsGobAfirmaCoreSignersAOSignConstants = { "AOSignConstants", "es.gob.afirma.core.signers", ptrTable, methods, fields, 7, 0x11, 6, 77, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreSignersAOSignConstants;
}

@end


#line 286
void EsGobAfirmaCoreSignersAOSignConstants_init(EsGobAfirmaCoreSignersAOSignConstants *self) {
  NSObject_init(self);
}


#line 286
EsGobAfirmaCoreSignersAOSignConstants *new_EsGobAfirmaCoreSignersAOSignConstants_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreSignersAOSignConstants, init)
}


#line 286
EsGobAfirmaCoreSignersAOSignConstants *create_EsGobAfirmaCoreSignersAOSignConstants_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreSignersAOSignConstants, init)
}


#line 294
NSString *EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(NSString *pseudoName) {
  EsGobAfirmaCoreSignersAOSignConstants_initialize();
  
#line 295
  if (pseudoName == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 297
    @"El nombre del algoritmo de huella digital no puede ser nulo");
  }
  
#line 300
  NSString *upperPseudoName = [pseudoName java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)];
  if ([((NSString *) nil_chk(upperPseudoName)) isEqual:@"SHA"] ||
#line 302
  [upperPseudoName isEqual:[@"http://www.w3.org/2000/09/xmldsig#sha1" java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]] ||
#line 303
  [upperPseudoName isEqual:@"1.3.14.3.2.26"] ||
#line 304
  [upperPseudoName java_hasPrefix:@"SHA1"] ||
#line 305
  [upperPseudoName java_hasPrefix:@"SHA-1"]) {
    
#line 307
    return @"SHA1";
  }
  
#line 310
  if ([upperPseudoName isEqual:[@"http://www.w3.org/2001/04/xmlenc#sha256" java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]] ||
#line 311
  [upperPseudoName isEqual:@"2.16.840.1.101.3.4.2.1"] ||
#line 312
  [upperPseudoName java_hasPrefix:@"SHA256"] ||
#line 313
  [upperPseudoName java_hasPrefix:@"SHA-256"]) {
    return @"SHA-256";
  }
  
#line 317
  if ([upperPseudoName java_hasPrefix:@"SHA384"] ||
#line 318
  [upperPseudoName isEqual:@"2.16.840.1.101.3.4.2.2"] ||
#line 319
  [upperPseudoName java_hasPrefix:@"SHA-384"]) {
    return @"SHA-384";
  }
  
#line 323
  if ([upperPseudoName isEqual:[@"http://www.w3.org/2001/04/xmlenc#sha512" java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]] ||
#line 324
  [upperPseudoName isEqual:@"2.16.840.1.101.3.4.2.3"] ||
#line 325
  [upperPseudoName java_hasPrefix:@"SHA512"] ||
#line 326
  [upperPseudoName java_hasPrefix:@"SHA-512"]) {
    return @"SHA-512";
  }
  
#line 330
  if ([upperPseudoName isEqual:[@"http://www.w3.org/2001/04/xmlenc#ripemd160" java_uppercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, US)]] ||
#line 331
  [upperPseudoName java_hasPrefix:@"RIPEMD160"] ||
#line 332
  [upperPseudoName java_hasPrefix:@"RIPEMD-160"]) {
    return @"RIPEMD160";
  }
  
#line 340
  if ([pseudoName java_contains:@"with"]) {
    NSString *subname = [pseudoName java_substring:0 endIndex:[pseudoName java_indexOfString:@"with"]];
    return EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(subname);
  }
  else
#line 345
  if ([pseudoName java_hasPrefix:@"http://www.w3.org/2001/04/xmldsig-more#"] ||
#line 346
  [pseudoName java_hasPrefix:@"http://www.w3.org/2000/09/xmldsig#"] ||
#line 347
  [pseudoName java_hasPrefix:@"http://www.w3.org/2009/xmldsig11#"]) {
    NSString *subname = [pseudoName java_substring:[pseudoName java_lastIndexOf:'-'] + 1];
    return EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(subname);
  }
  
#line 353
  [((JavaUtilLoggingLogger *) nil_chk(JavaUtilLoggingLogger_getLoggerWithNSString_(@"es.gob.afirma"))) warningWithNSString:JreStrcat("$$", @"Algoritmo de huella desconocido, no se normalizara su nombre: ",
#line 354
  pseudoName)];
  
#line 357
  return pseudoName;
}


#line 367
NSString *EsGobAfirmaCoreSignersAOSignConstants_composeSignatureAlgorithmNameWithNSString_withNSString_(NSString *algorithm, NSString *keyType) {
  EsGobAfirmaCoreSignersAOSignConstants_initialize();
  
#line 368
  if (algorithm == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 370
    @"El nombre del algoritmo no puede ser nulo");
  }
  if (keyType == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(
#line 374
    @"El tipo de clave de certificado no puede ser nulo");
  }
  
#line 378
  NSString *digestAlgorithm = [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_getDigestAlgorithmNameWithNSString_(algorithm))) java_replace:@"-" withSequence:@""];
  
#line 381
  NSString *suffix;
  if ([keyType isEqual:@"RSA"]) {
    suffix = @"withRSA";
  }
  else
#line 384
  if ([keyType isEqual:@"DSA"]) {
    suffix = @"withDSA";
  }
  else
#line 386
  if ([keyType java_hasPrefix:@"EC"]) {
    suffix = @"withECDSA";
  }
  else {
    
#line 389
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Tipo de clave de firma no soportado: ", keyType));
  }
  return JreStrcat("$$", digestAlgorithm, suffix);
}


#line 400
jboolean EsGobAfirmaCoreSignersAOSignConstants_isSHA2SignatureAlgorithmWithNSString_(NSString *algorithm) {
  EsGobAfirmaCoreSignersAOSignConstants_initialize();
  
#line 401
  return [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHRSA)) isEqual:algorithm] ||
#line 402
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHRSA)) isEqual:algorithm] ||
#line 403
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHRSA)) isEqual:algorithm] ||
#line 404
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA256WITHECDSA)) isEqual:algorithm] ||
#line 405
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA384WITHECDSA)) isEqual:algorithm] ||
#line 406
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA512WITHECDSA)) isEqual:algorithm];
}


#line 415
jboolean EsGobAfirmaCoreSignersAOSignConstants_isSHA1SignatureAlgorithmWithNSString_(NSString *algorithm) {
  EsGobAfirmaCoreSignersAOSignConstants_initialize();
  
#line 416
  return [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHRSA)) isEqual:algorithm] ||
#line 417
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHDSA)) isEqual:algorithm] ||
#line 418
  [((NSString *) nil_chk(EsGobAfirmaCoreSignersAOSignConstants_SIGN_ALGORITHM_SHA1WITHECDSA)) isEqual:algorithm];
}


#line 427
jboolean EsGobAfirmaCoreSignersAOSignConstants_isDSAorECDSASignatureAlgorithmWithNSString_(NSString *algorithm) {
  EsGobAfirmaCoreSignersAOSignConstants_initialize();
  
#line 428
  return algorithm != nil &&
#line 429
  ([algorithm java_hasSuffix:@"withECDSA"] ||
#line 430
  [algorithm java_hasSuffix:@"withECDSAinP1363Format"] ||
#line 431
  [algorithm java_hasSuffix:@"withDSA"] ||
#line 432
  [algorithm java_hasSuffix:@"withECDSAinP1363Format"]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreSignersAOSignConstants)
