//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/XfaForm.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_XfaForm")
#ifdef RESTRICT_XfaForm
#define INCLUDE_ALL_XfaForm 0
#else
#define INCLUDE_ALL_XfaForm 1
#endif
#undef RESTRICT_XfaForm
#ifdef INCLUDE_ComAowagieTextPdfXfaForm_Xml2SomTemplate
#define INCLUDE_ComAowagieTextPdfXfaForm_Xml2Som 1
#endif
#ifdef INCLUDE_ComAowagieTextPdfXfaForm_AcroFieldsSearch
#define INCLUDE_ComAowagieTextPdfXfaForm_Xml2Som 1
#endif
#ifdef INCLUDE_ComAowagieTextPdfXfaForm_Xml2SomDatasets
#define INCLUDE_ComAowagieTextPdfXfaForm_Xml2Som 1
#endif

#if !defined (ComAowagieTextPdfXfaForm_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm))
#define ComAowagieTextPdfXfaForm_

@class ComAowagieTextPdfAcroFields;
@class ComAowagieTextPdfPdfObject;
@class ComAowagieTextPdfPdfReader;
@class ComAowagieTextPdfPdfWriter;
@class ComAowagieTextPdfXfaForm_AcroFieldsSearch;
@class ComAowagieTextPdfXfaForm_Xml2SomDatasets;
@class ComAowagieTextPdfXfaForm_Xml2SomTemplate;
@protocol OrgW3cDomDocument;
@protocol OrgW3cDomNode;

/*!
 @brief Processes XFA forms.
 @author Paulo Soares (psoares@@consiste.pt)
 */
@interface ComAowagieTextPdfXfaForm : NSObject

#pragma mark Public

/*!
 @brief An empty constructor to build on.
 */
- (instancetype)initPackagePrivate;

/*!
 @brief A constructor from a <CODE>PdfReader</CODE>.It basically does everything
  from finding the XFA stream to the XML parsing.
 @param reader the reader
 @throw java.io.IOExceptionon error
 @throw javax.xml.parsers.ParserConfigurationExceptionon error
 @throw org.xml.sax.SAXExceptionon error
 */
- (instancetype)initPackagePrivateWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

/*!
 @brief Gets the class that contains the "classic" fields processing.
 @return the class that contains the "classic" fields processing
 */
- (ComAowagieTextPdfXfaForm_AcroFieldsSearch *)getAcroFieldsSom;

/*!
 @brief Gets the <CODE>Node</CODE> that corresponds to the datasets part.
 @return the <CODE>Node</CODE> that corresponds to the datasets part
 */
- (id<OrgW3cDomNode>)getDatasetsNode;

/*!
 @brief Gets the class that contains the datasets processing section of the XFA.
 @return the class that contains the datasets processing section of the XFA
 */
- (ComAowagieTextPdfXfaForm_Xml2SomDatasets *)getDatasetsSom;

/*!
 @brief Gets the top level DOM document.
 @return the top level DOM document
 */
- (id<OrgW3cDomDocument>)getDomDocument;

/*!
 @brief Gets the <CODE>PdfReader</CODE> used by this instance.
 @return the <CODE>PdfReader</CODE> used by this instance
 */
- (ComAowagieTextPdfPdfReader *)getReader;

/*!
 @brief Gets the class that contains the template processing section of the XFA.
 @return the class that contains the template processing section of the XFA
 */
- (ComAowagieTextPdfXfaForm_Xml2SomTemplate *)getTemplateSom;

/*!
 @brief Return the XFA Object, could be an array, could be a Stream.
 Returns null f no XFA Object is present.
 @param reader a PdfReader instance
 @return the XFA object
 @since 2.1.3
 */
+ (ComAowagieTextPdfPdfObject *)getXfaObjectWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

/*!
 @brief Checks if this XFA form was changed.
 @return <CODE>true</CODE> if this XFA form was changed
 */
- (jboolean)isChanged;

/*!
 @brief Returns <CODE>true</CODE> if it is a XFA form.
 @return <CODE>true</CODE> if it is a XFA form
 */
- (jboolean)isXfaPresent;

/*!
 @brief Sets the class that contains the "classic" fields processing.
 @param acroFieldsSom the class that contains the "classic" fields processing
 */
- (void)setAcroFieldsSomWithComAowagieTextPdfXfaForm_AcroFieldsSearch:(ComAowagieTextPdfXfaForm_AcroFieldsSearch *)acroFieldsSom;

/*!
 @brief Sets the changed status of this XFA instance.
 @param changed the changed status of this XFA instance
 */
- (void)setChangedWithBoolean:(jboolean)changed;

/*!
 @brief Sets the class that contains the datasets processing section of the XFA.
 @param datasetsSom the class that contains the datasets processing section of the XFA
 */
- (void)setDatasetsSomWithComAowagieTextPdfXfaForm_Xml2SomDatasets:(ComAowagieTextPdfXfaForm_Xml2SomDatasets *)datasetsSom;

/*!
 @brief Sets the top DOM document.
 @param domDocument the top DOM document
 */
- (void)setDomDocumentWithOrgW3cDomDocument:(id<OrgW3cDomDocument>)domDocument;

/*!
 @brief Sets the <CODE>PdfReader</CODE> to be used by this instance.
 @param reader the  <CODE> PdfReader </CODE>  to be used by this instance
 */
- (void)setReaderWithComAowagieTextPdfPdfReader:(ComAowagieTextPdfPdfReader *)reader;

/*!
 @brief Sets the class that contains the template processing section of the XFA
 @param templateSom the class that contains the template processing section of the XFA
 */
- (void)setTemplateSomWithComAowagieTextPdfXfaForm_Xml2SomTemplate:(ComAowagieTextPdfXfaForm_Xml2SomTemplate *)templateSom;

/*!
 @brief Sets the XFA key from the instance data.The old XFA is erased.
 @param writer the writer
 @throw java.io.IOExceptionon error
 */
- (void)setXfaWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer;

/*!
 @brief Sets the XFA form flag signaling that this is a valid XFA form.
 @param xfaPresent the XFA form flag signaling that this is a valid XFA form
 */
- (void)setXfaPresentWithBoolean:(jboolean)xfaPresent;

#pragma mark Package-Private

/*!
 @brief Finds the <CODE>Node</CODE> contained in the datasets section from a
  possibly partial name.
 @param name the complete or partial name
 @return the <CODE>Node</CODE> or <CODE>null</CODE> if not found
 */
- (id<OrgW3cDomNode>)findDatasetsNodeWithNSString:(NSString *)name;

/*!
 @brief Finds the complete field name contained in the "classic" forms from a partial
  name.
 @param name the complete or partial name
 @param af the fields
 @return the complete name or <CODE>null</CODE> if not found
 */
- (NSString *)findFieldNameWithNSString:(NSString *)name
        withComAowagieTextPdfAcroFields:(ComAowagieTextPdfAcroFields *)af;

/*!
 @brief Sets the text of this node.All the child's node are deleted and a new
  child text node is created.
 @param n the  <CODE> Node </CODE>  to add the text to
 @param text the text to add
 */
- (void)setNodeTextWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                        withNSString:(NSString *)text;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ComAowagieTextPdfXfaForm)

inline NSString *ComAowagieTextPdfXfaForm_get_XFA_DATA_SCHEMA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfXfaForm_XFA_DATA_SCHEMA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfXfaForm, XFA_DATA_SCHEMA, NSString *)

FOUNDATION_EXPORT void ComAowagieTextPdfXfaForm_initPackagePrivate(ComAowagieTextPdfXfaForm *self);

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm *new_ComAowagieTextPdfXfaForm_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm *create_ComAowagieTextPdfXfaForm_initPackagePrivate(void);

FOUNDATION_EXPORT ComAowagieTextPdfPdfObject *ComAowagieTextPdfXfaForm_getXfaObjectWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader);

FOUNDATION_EXPORT void ComAowagieTextPdfXfaForm_initPackagePrivateWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfXfaForm *self, ComAowagieTextPdfPdfReader *reader);

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm *new_ComAowagieTextPdfXfaForm_initPackagePrivateWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm *create_ComAowagieTextPdfXfaForm_initPackagePrivateWithComAowagieTextPdfPdfReader_(ComAowagieTextPdfPdfReader *reader);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm)

#endif

#if !defined (ComAowagieTextPdfXfaForm_Stack2_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm_Stack2))
#define ComAowagieTextPdfXfaForm_Stack2_

#define RESTRICT_JavaUtilArrayList 1
#define INCLUDE_JavaUtilArrayList 1
#include "java/util/ArrayList.h"

/*!
 @brief Another stack implementation.The main use is to facilitate
  the porting to other languages.
 */
@interface ComAowagieTextPdfXfaForm_Stack2 : JavaUtilArrayList

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfXfaForm_Stack2)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm_Stack2)

#endif

#if !defined (ComAowagieTextPdfXfaForm_Xml2Som_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm_Xml2Som))
#define ComAowagieTextPdfXfaForm_Xml2Som_

@class ComAowagieTextPdfXfaForm_Stack2;
@class JavaUtilArrayList;
@class JavaUtilHashMap;

/*!
 @brief A class for some basic SOM processing.
 */
@interface ComAowagieTextPdfXfaForm_Xml2Som : NSObject {
 @public
  /*!
   @brief The order the names appear in the XML, depth first.
   */
  JavaUtilArrayList *order_;
  /*!
   @brief The mapping of full names to nodes.
   */
  JavaUtilHashMap *name2Node_;
  /*!
   @brief The data to do a search from the bottom hierarchy.
   */
  JavaUtilHashMap *inverseSearch_;
  /*!
   @brief A stack to be used when parsing.
   */
  ComAowagieTextPdfXfaForm_Stack2 *stack_;
  /*!
   @brief A temporary store for the repetition count.
   */
  jint anform_;
}

#pragma mark Public

/*!
 @brief Gets the data to do a search from the bottom hierarchy.
 @return the data to do a search from the bottom hierarchy
 */
- (JavaUtilHashMap *)getInverseSearch;

/*!
 @brief Gets the mapping of full names to nodes.
 @return the mapping of full names to nodes
 */
- (JavaUtilHashMap *)getName2Node;

/*!
 @brief Gets the order the names appear in the XML, depth first.
 @return the order the names appear in the XML, depth first
 */
- (JavaUtilArrayList *)getOrder;

/*!
 @brief Gets the name with the <CODE>#subform</CODE> removed.
 @param s the long name
 @return the short name
 */
+ (NSString *)getShortNameWithNSString:(NSString *)s;

/*!
 @brief Sets the data to do a search from the bottom hierarchy.
 @param inverseSearch the data to do a search from the bottom hierarchy
 */
- (void)setInverseSearchWithJavaUtilHashMap:(JavaUtilHashMap *)inverseSearch;

/*!
 @brief Sets the mapping of full names to nodes.
 @param name2Node the mapping of full names to nodes
 */
- (void)setName2NodeWithJavaUtilHashMap:(JavaUtilHashMap *)name2Node;

/*!
 @brief Sets the order the names appear in the XML, depth first
 @param order the order the names appear in the XML, depth first
 */
- (void)setOrderWithJavaUtilArrayList:(JavaUtilArrayList *)order;

#pragma mark Package-Private

- (instancetype)init;

/*!
 @brief Escapes a SOM string fragment replacing "." with "\.".
 @param s the unescaped string
 @return the escaped string
 */
+ (NSString *)escapeSomWithNSString:(NSString *)s;

/*!
 @brief Adds a SOM name to the search node chain.
 @param inverseSearch the start point
 @param stack the stack with the separated SOM parts
 @param unstack the full name
 */
+ (void)inverseSearchAddWithJavaUtilHashMap:(JavaUtilHashMap *)inverseSearch
        withComAowagieTextPdfXfaForm_Stack2:(ComAowagieTextPdfXfaForm_Stack2 *)stack
                               withNSString:(NSString *)unstack;

/*!
 @brief Adds a SOM name to the search node chain.
 @param unstack the SOM name
 */
- (void)inverseSearchAddWithNSString:(NSString *)unstack;

/*!
 @brief Searches the SOM hierarchy from the bottom.
 @param parts the SOM parts
 @return the full name or <CODE>null</CODE> if not found
 */
- (NSString *)inverseSearchGlobalWithJavaUtilArrayList:(JavaUtilArrayList *)parts;

/*!
 @brief Outputs the stack as the sequence of elements separated
  by '.'.
 @return the stack as the sequence of elements separated by '.'
 */
- (NSString *)printStack;

/*!
 @brief Splits a SOM name in the individual parts.
 @param name the full SOM name
 @return the split name
 */
+ (ComAowagieTextPdfXfaForm_Stack2 *)splitPartsWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfXfaForm_Xml2Som)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfaForm_Xml2Som, order_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfaForm_Xml2Som, name2Node_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfaForm_Xml2Som, inverseSearch_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfXfaForm_Xml2Som, stack_, ComAowagieTextPdfXfaForm_Stack2 *)

FOUNDATION_EXPORT void ComAowagieTextPdfXfaForm_Xml2Som_init(ComAowagieTextPdfXfaForm_Xml2Som *self);

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm_Xml2Som *new_ComAowagieTextPdfXfaForm_Xml2Som_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm_Xml2Som *create_ComAowagieTextPdfXfaForm_Xml2Som_init(void);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfXfaForm_Xml2Som_escapeSomWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *ComAowagieTextPdfXfaForm_Xml2Som_getShortNameWithNSString_(NSString *s);

FOUNDATION_EXPORT void ComAowagieTextPdfXfaForm_Xml2Som_inverseSearchAddWithJavaUtilHashMap_withComAowagieTextPdfXfaForm_Stack2_withNSString_(JavaUtilHashMap *inverseSearch, ComAowagieTextPdfXfaForm_Stack2 *stack, NSString *unstack);

FOUNDATION_EXPORT ComAowagieTextPdfXfaForm_Stack2 *ComAowagieTextPdfXfaForm_Xml2Som_splitPartsWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm_Xml2Som)

#endif

#if !defined (ComAowagieTextPdfXfaForm_Xml2SomDatasets_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm_Xml2SomDatasets))
#define ComAowagieTextPdfXfaForm_Xml2SomDatasets_

@protocol OrgW3cDomNode;

/*!
 @brief Processes the datasets section in the XFA form.
 */
@interface ComAowagieTextPdfXfaForm_Xml2SomDatasets : ComAowagieTextPdfXfaForm_Xml2Som

#pragma mark Public

/*!
 @brief Inserts a new <CODE>Node</CODE> that will match the short name.
 @param n the datasets top  <CODE> Node </CODE>
 @param shortName the short name
 @return the new <CODE>Node</CODE> of the inserted name
 */
- (id<OrgW3cDomNode>)insertNodeWithOrgW3cDomNode:(id<OrgW3cDomNode>)n
                                    withNSString:(NSString *)shortName;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfXfaForm_Xml2SomDatasets)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm_Xml2SomDatasets)

#endif

#if !defined (ComAowagieTextPdfXfaForm_AcroFieldsSearch_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm_AcroFieldsSearch))
#define ComAowagieTextPdfXfaForm_AcroFieldsSearch_

@class JavaUtilHashMap;

/*!
 @brief A class to process "classic" fields.
 */
@interface ComAowagieTextPdfXfaForm_AcroFieldsSearch : ComAowagieTextPdfXfaForm_Xml2Som

#pragma mark Public

/*!
 @brief Gets the mapping from short names to long names.A long
  name may contain the #subform name part.
 @return the mapping from short names to long names
 */
- (JavaUtilHashMap *)getAcroShort2LongName;

/*!
 @brief Sets the mapping from short names to long names.A long
  name may contain the #subform name part.
 @param acroShort2LongName the mapping from short names to long names
 */
- (void)setAcroShort2LongNameWithJavaUtilHashMap:(JavaUtilHashMap *)acroShort2LongName;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfXfaForm_AcroFieldsSearch)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm_AcroFieldsSearch)

#endif

#if !defined (ComAowagieTextPdfXfaForm_Xml2SomTemplate_) && (INCLUDE_ALL_XfaForm || defined(INCLUDE_ComAowagieTextPdfXfaForm_Xml2SomTemplate))
#define ComAowagieTextPdfXfaForm_Xml2SomTemplate_

/*!
 @brief Processes the template section in the XFA form.
 */
@interface ComAowagieTextPdfXfaForm_Xml2SomTemplate : ComAowagieTextPdfXfaForm_Xml2Som

#pragma mark Public

/*!
 @brief <CODE>true</CODE> if it's a dynamic form; <CODE>false</CODE>
  if it's a static form.
 @return <CODE>true</CODE> if it's a dynamic form; <CODE>false</CODE>
  if it's a static form
 */
- (jboolean)isDynamicForm;

/*!
 @brief Sets the dynamic form flag.It doesn't change the template.
 @param dynamicForm the dynamic form flag
 */
- (void)setDynamicFormWithBoolean:(jboolean)dynamicForm;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfXfaForm_Xml2SomTemplate)

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfXfaForm_Xml2SomTemplate)

#endif

#pragma pop_macro("INCLUDE_ALL_XfaForm")
