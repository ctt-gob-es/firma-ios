//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/PdfObject.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PdfObject")
#ifdef RESTRICT_PdfObject
#define INCLUDE_ALL_PdfObject 0
#else
#define INCLUDE_ALL_PdfObject 1
#endif
#undef RESTRICT_PdfObject

#if !defined (ComAowagieTextPdfPdfObject_) && (INCLUDE_ALL_PdfObject || defined(INCLUDE_ComAowagieTextPdfPdfObject))
#define ComAowagieTextPdfPdfObject_

@class ComAowagieTextPdfPRIndirectReference;
@class ComAowagieTextPdfPdfWriter;
@class IOSByteArray;
@class JavaIoOutputStream;

/*!
 @brief <CODE>PdfObject</CODE> is the abstract superclass of all PDF objects.
 <P>
  PDF supports seven basic types of objects: Booleans, numbers, strings, names,
  arrays, dictionaries and streams. In addition, PDF provides a null object.
  Objects may be labeled so that they can be referred to by other objects.<BR>
  All these basic PDF objects are described in the 'Portable Document Format
  Reference Manual version 1.3' Chapter 4 (pages 37-54).
 - seealso: PdfNull
 - seealso: PdfBoolean
 - seealso: PdfNumber
 - seealso: PdfString
 - seealso: PdfName
 - seealso: PdfArray
 - seealso: PdfDictionary
 - seealso: PdfStream
 - seealso: PdfIndirectReference
 */
@interface ComAowagieTextPdfPdfObject : NSObject {
 @public
  /*!
   @brief The content of this <CODE>PdfObject</CODE>
   */
  IOSByteArray *bytes_;
  /*!
   @brief The type of this <CODE>PdfObject</CODE>
   */
  jint type_;
}

#pragma mark Public

/*!
 @brief Gets the presentation of this object in a byte array
 @return a byte array
 */
- (IOSByteArray *)getBytes;

/*!
 @brief Get the indirect reference
 @return A <CODE>PdfIndirectReference</CODE>
 */
- (ComAowagieTextPdfPRIndirectReference *)getIndRef;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfArray</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isArray;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfBoolean</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isBoolean;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfDictionary</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isDictionary;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfIndirectObject</CODE>.
 @return <CODE>true</CODE> if this is an indirect object,
    otherwise <CODE>false</CODE>
 */
- (jboolean)isIndirect;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfName</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isName;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfNull</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isNull;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfNumber</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isNumber;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfStream</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isStream;

/*!
 @brief Checks if this <CODE>PdfObject</CODE> is of the type 
 <CODE>PdfString</CODE>.
 @return <CODE>true</CODE> or <CODE>false</CODE>
 */
- (jboolean)isString;

/*!
 @brief Set the indirect reference
 @param indRef New value as a  <CODE> PdfIndirectReference </CODE>
 */
- (void)setIndRefWithComAowagieTextPdfPRIndirectReference:(ComAowagieTextPdfPRIndirectReference *)indRef;

/*!
 @brief Writes the PDF representation of this <CODE>PdfObject</CODE> as an
  array of <CODE>byte</CODE>s to the writer.
 @param writer for backwards compatibility
 @param os The  <CODE> OutputStream </CODE>  to write the bytes to.
 @throw IOExceptionon error
 */
- (void)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer
                     withJavaIoOutputStream:(JavaIoOutputStream *)os;

/*!
 @brief Returns the <CODE>String</CODE>-representation of this 
 <CODE>PdfObject</CODE>.
 @return a <CODE>String</CODE>
 */
- (NSString *)description;

/*!
 @brief Returns the type of this <CODE>PdfObject</CODE>.
 May be either of:
  - <VAR>NULL</VAR>: A <CODE>PdfNull</CODE>
  - <VAR>BOOLEAN</VAR>: A <CODE>PdfBoolean</CODE>
  - <VAR>NUMBER</VAR>: A <CODE>PdfNumber</CODE>
  - <VAR>STRING</VAR>: A <CODE>PdfString</CODE>
  - <VAR>NAME</VAR>: A <CODE>PdfName</CODE>
  - <VAR>ARRAY</VAR>: A <CODE>PdfArray</CODE>
  - <VAR>DICTIONARY</VAR>: A <CODE>PdfDictionary</CODE>
  - <VAR>STREAM</VAR>: A <CODE>PdfStream</CODE>
  - <VAR>INDIRECT</VAR>: A <CODE>PdfIndirectObject</CODE>
 @return The type
 */
- (jint)type;

#pragma mark Protected

/*!
 @brief Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR>
  without any <VAR>content</VAR>.
 @param type type of the new  <CODE> PdfObject </CODE>
 */
- (instancetype)initWithInt:(jint)type;

/*!
 @brief Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR>
  with a certain <VAR>content</VAR>.
 @param type type of the new  <CODE> PdfObject </CODE>
 @param bytes content of the new  <CODE> PdfObject </CODE>  as an array of
      <CODE> byte </CODE> .
 */
- (instancetype)initWithInt:(jint)type
              withByteArray:(IOSByteArray *)bytes;

/*!
 @brief Constructs a <CODE>PdfObject</CODE> of a certain <VAR>type</VAR>
  with a certain <VAR>content</VAR>.
 @param type type of the new  <CODE> PdfObject </CODE>
 @param content content of the new  <CODE> PdfObject </CODE>  as a
      <CODE> String </CODE> .
 */
- (instancetype)initWithInt:(jint)type
               withNSString:(NSString *)content;

/*!
 @brief Changes the content of this <CODE>PdfObject</CODE>.
 @param content the new content of this  <CODE> PdfObject </CODE>
 */
- (void)setContentWithNSString:(NSString *)content;

#pragma mark Package-Private

/*!
 @brief Whether this object can be contained in an object stream.
 PdfObjects of type STREAM OR INDIRECT can not be contained in an
  object stream.
 @return <CODE>true</CODE> if this object can be in an object stream.
    Otherwise <CODE>false</CODE>
 */
- (jboolean)canBeInObjStm;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextPdfPdfObject)

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfObject, bytes_, IOSByteArray *)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_BOOLEAN(void);
#define ComAowagieTextPdfPdfObject_BOOLEAN 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, BOOLEAN, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_NUMBER(void);
#define ComAowagieTextPdfPdfObject_NUMBER 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, NUMBER, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_STRING(void);
#define ComAowagieTextPdfPdfObject_STRING 3
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, STRING, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_NAME(void);
#define ComAowagieTextPdfPdfObject_NAME 4
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, NAME, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_ARRAY(void);
#define ComAowagieTextPdfPdfObject_ARRAY 5
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, ARRAY, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_DICTIONARY(void);
#define ComAowagieTextPdfPdfObject_DICTIONARY 6
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, DICTIONARY, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_STREAM(void);
#define ComAowagieTextPdfPdfObject_STREAM 7
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, STREAM, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_NULL(void);
#define ComAowagieTextPdfPdfObject_NULL 8
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, NULL, jint)

/*!
 @brief A possible type of <CODE>PdfObject</CODE>
 */
inline jint ComAowagieTextPdfPdfObject_get_INDIRECT(void);
#define ComAowagieTextPdfPdfObject_INDIRECT 10
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfObject, INDIRECT, jint)

/*!
 @brief An empty string used for the <CODE>PdfNull</CODE>-object and for an empty <CODE>PdfString</CODE>-object.
 */
inline NSString *ComAowagieTextPdfPdfObject_get_NOTHING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfPdfObject_NOTHING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfObject, NOTHING, NSString *)

/*!
 @brief This is the default encoding to be used for converting Strings into
  bytes and vice versa.The default encoding is PdfDocEncoding.
 */
inline NSString *ComAowagieTextPdfPdfObject_get_TEXT_PDFDOCENCODING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfPdfObject_TEXT_PDFDOCENCODING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfObject, TEXT_PDFDOCENCODING, NSString *)

/*!
 @brief This is the encoding to be used to output text in Unicode.
 */
inline NSString *ComAowagieTextPdfPdfObject_get_TEXT_UNICODE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ComAowagieTextPdfPdfObject_TEXT_UNICODE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfObject, TEXT_UNICODE, NSString *)

FOUNDATION_EXPORT void ComAowagieTextPdfPdfObject_initWithInt_(ComAowagieTextPdfPdfObject *self, jint type);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfObject_initWithInt_withNSString_(ComAowagieTextPdfPdfObject *self, jint type, NSString *content);

FOUNDATION_EXPORT void ComAowagieTextPdfPdfObject_initWithInt_withByteArray_(ComAowagieTextPdfPdfObject *self, jint type, IOSByteArray *bytes);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextPdfPdfObject)

#endif

#pragma pop_macro("INCLUDE_ALL_PdfObject")
