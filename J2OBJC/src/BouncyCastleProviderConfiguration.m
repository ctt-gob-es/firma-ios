//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/BouncyCastleProviderConfiguration.java
//

#include "BouncyCastleProvider.h"
#include "BouncyCastleProviderConfiguration.h"
#include "ConfigurableProvider.h"
#include "EC5Util.h"
#include "ECParameterSpec.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ProviderConfigurationPermission.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/SecurityManager.h"
#include "java/lang/System.h"
#include "java/lang/ThreadLocal.h"
#include "java/math/BigInteger.h"
#include "java/security/Permission.h"
#include "java/security/spec/ECParameterSpec.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/crypto/spec/DHParameterSpec.h"

#if !__has_feature(objc_arc)
#error "BouncyCastleProviderConfiguration must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderBouncyCastleProviderConfiguration () {
 @public
  JavaLangThreadLocal *ecThreadSpec_;
  JavaLangThreadLocal *dhThreadSpec_;
  volatile_id ecImplicitCaParams_;
  volatile_id dhDefaultParams_;
  volatile_id acceptableNamedCurves_;
  volatile_id additionalECParameters_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, ecThreadSpec_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, dhThreadSpec_, JavaLangThreadLocal *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, ecImplicitCaParams_, OrgSpongycastleJceSpecECParameterSpec *)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, dhDefaultParams_, id)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, acceptableNamedCurves_, id<JavaUtilSet>)
J2OBJC_VOLATILE_FIELD_SETTER(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, additionalECParameters_, id<JavaUtilMap>)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_DH_LOCAL_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_DH_LOCAL_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_DH_LOCAL_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_DH_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_DH_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_DH_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_EC_CURVE_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_EC_CURVE_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_EC_CURVE_PERMISSION, JavaSecurityPermission *)

inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_get_BC_ADDITIONAL_EC_CURVE_PERMISSION(void);
inline JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_set_BC_ADDITIONAL_EC_CURVE_PERMISSION(JavaSecurityPermission *value);
static JavaSecurityPermission *OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION;
J2OBJC_STATIC_FIELD_OBJ(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, BC_ADDITIONAL_EC_CURVE_PERMISSION, JavaSecurityPermission *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/org/spongycastle/jce/provider/BouncyCastleProviderConfiguration.java"

J2OBJC_INITIALIZED_DEFN(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration)


#line 18
@implementation OrgSpongycastleJceProviderBouncyCastleProviderConfiguration


#line 18
- (instancetype)initPackagePrivate {
  OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate(self);
  return self;
}


#line 42
- (void)setParameterWithNSString:(NSString *)parameterName
                          withId:(id)parameter {
  JavaLangSecurityManager *securityManager = JavaLangSystem_getSecurityManager();
  
#line 46
  if ([((NSString *) nil_chk(parameterName)) isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA]) {
    
#line 48
    OrgSpongycastleJceSpecECParameterSpec *curveSpec;
    
#line 50
    if (securityManager != nil) {
      
#line 52
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION];
    }
    
#line 55
    if ([parameter isKindOfClass:[OrgSpongycastleJceSpecECParameterSpec class]] || parameter == nil) {
      
#line 57
      curveSpec = (OrgSpongycastleJceSpecECParameterSpec *) cast_chk(parameter, [OrgSpongycastleJceSpecECParameterSpec class]);
    }
    else {
      
#line 61
      curveSpec = OrgSpongycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class]), false);
    }
    
#line 64
    if (curveSpec == nil) {
      
#line 66
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) remove];
    }
    else {
      
#line 70
      [((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) setWithId:curveSpec];
    }
  }
  else if ([parameterName isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_EC_IMPLICITLY_CA]) {
    
#line 75
    if (securityManager != nil) {
      
#line 77
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION];
    }
    
#line 80
    if ([parameter isKindOfClass:[OrgSpongycastleJceSpecECParameterSpec class]] || parameter == nil) {
      
#line 82
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, (OrgSpongycastleJceSpecECParameterSpec *) cast_chk(parameter, [OrgSpongycastleJceSpecECParameterSpec class]));
    }
    else {
      
#line 86
      (void) JreVolatileStrongAssign(&ecImplicitCaParams_, OrgSpongycastleJcajceProviderAsymmetricUtilEC5Util_convertSpecWithJavaSecuritySpecECParameterSpec_withBoolean_((JavaSecuritySpecECParameterSpec *) cast_chk(parameter, [JavaSecuritySpecECParameterSpec class]), false));
    }
  }
  else if ([parameterName isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS]) {
    
#line 91
    id dhSpec;
    
#line 93
    if (securityManager != nil) {
      
#line 95
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION];
    }
    
#line 98
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      
#line 100
      dhSpec = parameter;
    }
    else {
      
#line 104
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec");
    }
    
#line 107
    if (dhSpec == nil) {
      
#line 109
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) remove];
    }
    else {
      
#line 113
      [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) setWithId:dhSpec];
    }
  }
  else if ([parameterName isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_DH_DEFAULT_PARAMS]) {
    
#line 118
    if (securityManager != nil) {
      
#line 120
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION];
    }
    
#line 123
    if ([parameter isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]] || [IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:parameter] || parameter == nil) {
      
#line 125
      (void) JreVolatileStrongAssign(&dhDefaultParams_, parameter);
    }
    else {
      
#line 129
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"not a valid DHParameterSpec or DHParameterSpec[]");
    }
  }
  else if ([parameterName isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_ACCEPTABLE_EC_CURVES]) {
    
#line 134
    if (securityManager != nil) {
      
#line 136
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION];
    }
    
#line 139
    (void) JreVolatileStrongAssign(&self->acceptableNamedCurves_, (id<JavaUtilSet>) cast_check(parameter, JavaUtilSet_class_()));
  }
  else if ([parameterName isEqual:OrgSpongycastleJcajceProviderConfigConfigurableProvider_ADDITIONAL_EC_PARAMETERS]) {
    
#line 143
    if (securityManager != nil) {
      
#line 145
      [securityManager checkPermissionWithJavaSecurityPermission:OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION];
    }
    
#line 148
    (void) JreVolatileStrongAssign(&self->additionalECParameters_, (id<JavaUtilMap>) cast_check(parameter, JavaUtilMap_class_()));
  }
}


#line 152
- (OrgSpongycastleJceSpecECParameterSpec *)getEcImplicitlyCa {
  
#line 154
  OrgSpongycastleJceSpecECParameterSpec *spec = (OrgSpongycastleJceSpecECParameterSpec *) cast_chk([((JavaLangThreadLocal *) nil_chk(ecThreadSpec_)) get], [OrgSpongycastleJceSpecECParameterSpec class]);
  
#line 156
  if (spec != nil) {
    
#line 158
    return spec;
  }
  
#line 161
  return JreLoadVolatileId(&ecImplicitCaParams_);
}


#line 164
- (JavaxCryptoSpecDHParameterSpec *)getDHDefaultParametersWithInt:(jint)keySize {
  
#line 166
  id params = [((JavaLangThreadLocal *) nil_chk(dhThreadSpec_)) get];
  if (params == nil) {
    
#line 169
    params = JreLoadVolatileId(&dhDefaultParams_);
  }
  
#line 172
  if ([params isKindOfClass:[JavaxCryptoSpecDHParameterSpec class]]) {
    
#line 174
    JavaxCryptoSpecDHParameterSpec *spec = (JavaxCryptoSpecDHParameterSpec *) params;
    
#line 176
    if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(spec)) getP])) bitLength] == keySize) {
      
#line 178
      return spec;
    }
  }
  else if ([IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1) isInstance:params]) {
    
#line 183
    IOSObjectArray *specs = (IOSObjectArray *) cast_check(params, IOSClass_arrayType(JavaxCryptoSpecDHParameterSpec_class_(), 1));
    
#line 185
    for (jint i = 0; i != ((IOSObjectArray *) nil_chk(specs))->size_; i++) {
      
#line 187
      if ([((JavaMathBigInteger *) nil_chk([((JavaxCryptoSpecDHParameterSpec *) nil_chk(IOSObjectArray_Get(specs, i))) getP])) bitLength] == keySize) {
        
#line 189
        return IOSObjectArray_Get(specs, i);
      }
    }
  }
  
#line 194
  return nil;
}


#line 197
- (id<JavaUtilSet>)getAcceptableNamedCurves {
  
#line 199
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(JreLoadVolatileId(&acceptableNamedCurves_));
}


#line 202
- (id<JavaUtilMap>)getAdditionalECParameters {
  
#line 204
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(JreLoadVolatileId(&additionalECParameters_));
}

- (void)__javaClone:(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&ecImplicitCaParams_, &original->ecImplicitCaParams_);
  JreCloneVolatileStrong(&dhDefaultParams_, &original->dhDefaultParams_);
  JreCloneVolatileStrong(&acceptableNamedCurves_, &original->acceptableNamedCurves_);
  JreCloneVolatileStrong(&additionalECParameters_, &original->additionalECParameters_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgSpongycastleJceSpecECParameterSpec;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaxCryptoSpecDHParameterSpec;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(setParameterWithNSString:withId:);
  methods[2].selector = @selector(getEcImplicitlyCa);
  methods[3].selector = @selector(getDHDefaultParametersWithInt:);
  methods[4].selector = @selector(getAcceptableNamedCurves);
  methods[5].selector = @selector(getAdditionalECParameters);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BC_EC_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 4, -1, -1 },
    { "BC_EC_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 5, -1, -1 },
    { "BC_DH_LOCAL_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
    { "BC_DH_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "BC_EC_CURVE_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "BC_ADDITIONAL_EC_CURVE_PERMISSION", "LJavaSecurityPermission;", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "ecThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dhThreadSpec_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ecImplicitCaParams_", "LOrgSpongycastleJceSpecECParameterSpec;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "dhDefaultParams_", "LNSObject;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "acceptableNamedCurves_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "additionalECParameters_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setParameter", "LNSString;LNSObject;", "getDHDefaultParameters", "I", &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION, &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION, &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION, &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION, &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION, &OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderBouncyCastleProviderConfiguration = { "BouncyCastleProviderConfiguration", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x0, 6, 12, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderBouncyCastleProviderConfiguration;
}

+ (void)initialize {
  if (self == [OrgSpongycastleJceProviderBouncyCastleProviderConfiguration class]) {
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_LOCAL_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 22
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_EC_IMPLICITLY_CA);
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 24
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_EC_IMPLICITLY_CA);
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_LOCAL_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 26
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_THREAD_LOCAL_DH_DEFAULT_PARAMS);
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_DH_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 28
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_DH_DEFAULT_PARAMS);
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_EC_CURVE_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 30
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_ACCEPTABLE_EC_CURVES);
    OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_BC_ADDITIONAL_EC_CURVE_PERMISSION = new_OrgSpongycastleJcajceProviderConfigProviderConfigurationPermission_initWithNSString_withNSString_(
#line 32
    OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME, OrgSpongycastleJcajceProviderConfigConfigurableProvider_ADDITIONAL_EC_PARAMETERS);
    J2OBJC_SET_INITIALIZED(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration)
  }
}

@end


#line 18
void OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *self) {
  NSObject_init(self);
  self->ecThreadSpec_ = new_JavaLangThreadLocal_init();
  self->dhThreadSpec_ = new_JavaLangThreadLocal_init();
  (void) JreVolatileStrongAssign(&self->acceptableNamedCurves_, new_JavaUtilHashSet_init());
  (void) JreVolatileStrongAssign(&self->additionalECParameters_, new_JavaUtilHashMap_init());
}


#line 18
OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *new_OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, initPackagePrivate)
}


#line 18
OrgSpongycastleJceProviderBouncyCastleProviderConfiguration *create_OrgSpongycastleJceProviderBouncyCastleProviderConfiguration_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderBouncyCastleProviderConfiguration)
