//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/OfficeAnalizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OfficeAnalizer")
#ifdef RESTRICT_OfficeAnalizer
#define INCLUDE_ALL_OfficeAnalizer 0
#else
#define INCLUDE_ALL_OfficeAnalizer 1
#endif
#undef RESTRICT_OfficeAnalizer

#if !defined (EsGobAfirmaCoreMiscOfficeAnalizer_) && (INCLUDE_ALL_OfficeAnalizer || defined(INCLUDE_EsGobAfirmaCoreMiscOfficeAnalizer))
#define EsGobAfirmaCoreMiscOfficeAnalizer_

@class IOSByteArray;
@class JavaIoInputStream;

/*!
 @brief Clase para el an&aacute;lisis de ficheros OOXML, ODF y Microsoft Office 97/2003.
 */
@interface EsGobAfirmaCoreMiscOfficeAnalizer : NSObject

#pragma mark Public

/*!
 @brief Recupera el MimeType del XML "[Content_Type].xml" de un OOXML.Si el
  documento no es correcto o no se reconoce el Mimetype se devuelve null.
 @param contentTypeIs XML "[Content_Type].xml".
 @return Devuelve el MimeType del OOXML o, si no es un OOXML reconocido,
          devuelve <code>null</code>.
 */
+ (NSString *)getOOXMLMimeTypeWithJavaIoInputStream:(JavaIoInputStream *)contentTypeIs;

/*!
 @brief Indica si un fichero tiene la estructura de un documento ODF.
 @param document Fichero a analizar.
 @return Devuelve <code>true</code> si el fichero era un ODF, 
 <code>false</code> en caso de no serlo o no poder comprobarlo.
 @throw IOExceptionSi ocurren problemas leyendo el fichero.
 */
+ (jboolean)isODFDocumentWithByteArray:(IOSByteArray *)document;

/*!
 @brief Indica si un fichero tiene la estructura de un documento OOXML.
 @param document Fichero a analizar.
 @return Devuelve <code>true</code> si el fichero era un OOXML, 
 <code>false</code> en caso de no serlo o no poder comprobarlo.
 */
+ (jboolean)isOOXMLDocumentWithByteArray:(IOSByteArray *)document;

#pragma mark Package-Private

/*!
 @brief Devuelve la extensi&oacute;n correspondiente al documento ofim&aacute;tico
  proporcionado (ODF u OOXML).Si el fichero no se corresponde con ninguno
  de ellos pero es un Zip se devolver&aacute; la extensi&oacute;n "zip"
  y si no es Zip se devolver&aacute; <code>null</code>.
 @param zipData Fichero ODF u OOXML.
 @return Extensi&oacute;n.
 @throw IOExceptionCuando ocurre alg&uacute;n error en la lectura de los datos.
 */
+ (NSString *)getDescriptionWithByteArray:(IOSByteArray *)zipData;

/*!
 @brief Devuelve la extensi&oacute;n correspondiente al tipo de dato indicado.
 @param mimetype Tipo de datos ofim &aacute; tico.
 @return Extensi&oacute;n de fichero asociada con el tipo de datos indicado o 
 <code>null</code> si no se reconoce.
 */
+ (NSString *)getDescriptionWithNSString:(NSString *)mimetype;

/*!
 @brief Devuelve la extensi&oacute;n correspondiente al documento ofim&aacute;tico
  proporcionado (ODF u OOXML).Si el fichero no se corresponde con ninguno
  de ellos pero es un Zip se devolver&aacute; la extensi&oacute;n "zip"
  y si no es Zip se devolver&aacute; <code>null</code>.
 @param zipData Fichero ODF u OOXML.
 @return Extensi&oacute;n.
 @throw IOExceptionCuando ocurre alg&uacute;n error en la lectura de los datos.
 */
+ (NSString *)getExtensionWithByteArray:(IOSByteArray *)zipData;

/*!
 @brief Devuelve la extensi&oacute;n correspondiente al tipo de dato indicado.
 @param mimetype Tipo de datos ofim &aacute; tico.
 @return Extensi&oacute;n de fichero asociada con el tipo de datos indicado o 
 <code>null</code> si no se reconoce.
 */
+ (NSString *)getExtensionWithNSString:(NSString *)mimetype;

/*!
 @brief Devuelve el MimeType correspondiente al documento ofim&aacute;tico
  proporcionado (ODF u OOXML).Si el fichero no se corresponde con ninguno
  de ellos pero es un Zip se devolver&aacute; el MimeType del Zip
  (application/zip) y, si tampocop es Zip, se devolver&aacute; "application/octect-stream".
 @param data Fichero ODF, OOXML o Microsoft Office 97/2003.
 @return MimeType de los datos o el mimetype por defecto para datos binarios.
 @throw IOExceptionSi no se puede leer el fichero,
 */
+ (NSString *)getMimeTypeWithByteArray:(IOSByteArray *)data;

@end

J2OBJC_STATIC_INIT(EsGobAfirmaCoreMiscOfficeAnalizer)

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getMimeTypeWithByteArray_(IOSByteArray *data);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getExtensionWithByteArray_(IOSByteArray *zipData);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getExtensionWithNSString_(NSString *mimetype);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getDescriptionWithByteArray_(IOSByteArray *zipData);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getDescriptionWithNSString_(NSString *mimetype);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreMiscOfficeAnalizer_isOOXMLDocumentWithByteArray_(IOSByteArray *document);

FOUNDATION_EXPORT NSString *EsGobAfirmaCoreMiscOfficeAnalizer_getOOXMLMimeTypeWithJavaIoInputStream_(JavaIoInputStream *contentTypeIs);

FOUNDATION_EXPORT jboolean EsGobAfirmaCoreMiscOfficeAnalizer_isODFDocumentWithByteArray_(IOSByteArray *document);

J2OBJC_TYPE_LITERAL_HEADER(EsGobAfirmaCoreMiscOfficeAnalizer)

#endif

#pragma pop_macro("INCLUDE_ALL_OfficeAnalizer")
