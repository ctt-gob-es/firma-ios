//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXCertPathValidatorSpi.java
//

#include "ASN1Encodable.h"
#include "ASN1ObjectIdentifier.h"
#include "AlgorithmIdentifier.h"
#include "AnnotatedException.h"
#include "BCJcaJceHelper.h"
#include "CertPathValidatorUtilities.h"
#include "ExtCertPathValidatorException.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JcaJceHelper.h"
#include "PKIXCertPathValidatorSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "PKIXNameConstraintValidator.h"
#include "PKIXPolicyNode.h"
#include "PrincipalUtils.h"
#include "RFC3280CertPathUtilities.h"
#include "TBSCertificate.h"
#include "X500Name.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidatorException.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertPathValidatorSpi.h"
#include "java/security/cert/CertificateEncodingException.h"
#include "java/security/cert/PKIXCertPathChecker.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PKIXParameters.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PKIXCertPathValidatorSpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderPKIXCertPathValidatorSpi () {
 @public
  id<OrgSpongycastleJcajceUtilJcaJceHelper> helper_;
}

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXCertPathValidatorSpi, helper_, id<OrgSpongycastleJcajceUtilJcaJceHelper>)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXCertPathValidatorSpi.java"


#line 40
@implementation OrgSpongycastleJceProviderPKIXCertPathValidatorSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 45
- (instancetype)init {
  OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 49
- (id<JavaSecurityCertCertPathValidatorResult>)engineValidateWithJavaSecurityCertCertPath:(JavaSecurityCertCertPath *)certPath
                                                   withJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  
#line 55
  OrgSpongycastleJcajcePKIXExtendedParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXParameters class]]) {
    
#line 58
    OrgSpongycastleJcajcePKIXExtendedParameters_Builder *paramsPKIXBldr = new_OrgSpongycastleJcajcePKIXExtendedParameters_Builder_initWithJavaSecurityCertPKIXParameters_((JavaSecurityCertPKIXParameters *) params);
    
#line 60
    if ([params isKindOfClass:[OrgSpongycastleX509ExtendedPKIXParameters class]]) {
      
#line 62
      OrgSpongycastleX509ExtendedPKIXParameters *extPKIX = (OrgSpongycastleX509ExtendedPKIXParameters *) params;
      
#line 64
      (void) [paramsPKIXBldr setUseDeltasEnabledWithBoolean:[((OrgSpongycastleX509ExtendedPKIXParameters *) nil_chk(extPKIX)) isUseDeltasEnabled]];
      (void) [paramsPKIXBldr setValidityModelWithInt:[extPKIX getValidityModel]];
    }
    
#line 68
    paramsPKIX = [paramsPKIXBldr build];
  }
  else if ([params isKindOfClass:[OrgSpongycastleJcajcePKIXExtendedBuilderParameters class]]) {
    
#line 72
    paramsPKIX = [((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) params))) getBaseParameters];
  }
  else if ([params isKindOfClass:[OrgSpongycastleJcajcePKIXExtendedParameters class]]) {
    
#line 76
    paramsPKIX = (OrgSpongycastleJcajcePKIXExtendedParameters *) params;
  }
  else {
    
#line 80
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$", @"Parameters must be a ", [JavaSecurityCertPKIXParameters_class_() getName], @" instance."));
  }
  
#line 83
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) getTrustAnchors] == nil) {
    
#line 85
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(
#line 86
    @"trustAnchors is null, this is not allowed for certification path validation.");
  }
  
#line 96
  id<JavaUtilList> certs = [((JavaSecurityCertCertPath *) nil_chk(certPath)) getCertificates];
  jint n = [((id<JavaUtilList>) nil_chk(certs)) size];
  
#line 99
  if ([certs isEmpty]) {
    
#line 101
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Certification path is empty.", nil, certPath, -1);
  }
  
#line 112
  id<JavaUtilSet> userInitialPolicySet = [paramsPKIX getInitialPolicies];
  
#line 117
  JavaSecurityCertTrustAnchor *trust;
  @try {
    
#line 120
    trust = OrgSpongycastleJceProviderCertPathValidatorUtilities_findTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_((JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:[certs size] - 1], [JavaSecurityCertX509Certificate class]),
#line 121
    [paramsPKIX getTrustAnchors], [paramsPKIX getSigProvider]);
    
#line 123
    if (trust == nil) {
      
#line 125
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Trust anchor for certification path not found.", nil, certPath, -1);
    }
    
#line 128
    OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_([trust getTrustedCert]);
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 132
    @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getUnderlyingException], certPath, [certs size] - 1);
  }
  
#line 136
  paramsPKIX = [((OrgSpongycastleJcajcePKIXExtendedParameters_Builder *) nil_chk([new_OrgSpongycastleJcajcePKIXExtendedParameters_Builder_initWithOrgSpongycastleJcajcePKIXExtendedParameters_(paramsPKIX) setTrustAnchorWithJavaSecurityCertTrustAnchor:trust])) build];
  
#line 141
  id<JavaUtilIterator> certIter;
  jint index = 0;
  jint i;
  
#line 153
  IOSObjectArray *policyNodes = [IOSObjectArray newArrayWithLength:n + 1 type:JavaUtilArrayList_class_()];
  for (jint j = 0; j < policyNodes->size_; j++) {
    
#line 156
    (void) IOSObjectArray_SetAndConsume(policyNodes, j, new_JavaUtilArrayList_init());
  }
  
#line 159
  id<JavaUtilSet> policySet = new_JavaUtilHashSet_init();
  
#line 161
  [policySet addWithId:OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY];
  
#line 163
  OrgSpongycastleJceProviderPKIXPolicyNode *validPolicyTree = new_OrgSpongycastleJceProviderPKIXPolicyNode_initWithJavaUtilList_withInt_withJavaUtilSet_withJavaSecurityCertPolicyNode_withJavaUtilSet_withNSString_withBoolean_(new_JavaUtilArrayList_init(), 0, policySet, nil, new_JavaUtilHashSet_init(),
#line 164
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_ANY_POLICY, false);
  
#line 166
  [((id<JavaUtilList>) nil_chk(IOSObjectArray_Get(policyNodes, 0))) addWithId:validPolicyTree];
  
#line 171
  OrgSpongycastleJceProviderPKIXNameConstraintValidator *nameConstraintValidator = new_OrgSpongycastleJceProviderPKIXNameConstraintValidator_init();
  
#line 175
  jint explicitPolicy;
  id<JavaUtilSet> acceptablePolicies = new_JavaUtilHashSet_init();
  
#line 178
  if ([((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk(paramsPKIX)) isExplicitPolicyRequired]) {
    
#line 180
    explicitPolicy = 0;
  }
  else {
    
#line 184
    explicitPolicy = n + 1;
  }
  
#line 190
  jint inhibitAnyPolicy;
  
#line 192
  if ([paramsPKIX isAnyPolicyInhibited]) {
    
#line 194
    inhibitAnyPolicy = 0;
  }
  else {
    
#line 198
    inhibitAnyPolicy = n + 1;
  }
  
#line 204
  jint policyMapping;
  
#line 206
  if ([paramsPKIX isPolicyMappingInhibited]) {
    
#line 208
    policyMapping = 0;
  }
  else {
    
#line 212
    policyMapping = n + 1;
  }
  
#line 218
  id<JavaSecurityPublicKey> workingPublicKey;
  OrgSpongycastleAsn1X500X500Name *workingIssuerName;
  
#line 221
  JavaSecurityCertX509Certificate *sign = [((JavaSecurityCertTrustAnchor *) nil_chk(trust)) getTrustedCert];
  @try {
    
#line 224
    if (sign != nil) {
      
#line 226
      workingIssuerName = OrgSpongycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(sign);
      workingPublicKey = [sign getPublicKey];
    }
    else {
      
#line 231
      workingIssuerName = OrgSpongycastleJceProviderPrincipalUtils_getCAWithJavaSecurityCertTrustAnchor_(trust);
      workingPublicKey = [trust getCAPublicKey];
    }
  }
  @catch (JavaLangIllegalArgumentException *ex) {
    
#line 237
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Subject of trust anchor could not be (re)encoded.", ex, certPath,
#line 238
    -1);
  }
  
#line 241
  OrgSpongycastleAsn1X509AlgorithmIdentifier *workingAlgId = nil;
  @try {
    
#line 244
    workingAlgId = OrgSpongycastleJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
  }
  @catch (JavaSecurityCertCertPathValidatorException *e) {
    
#line 248
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 249
    @"Algorithm identifier of public key of trust anchor could not be read.", e, certPath, -1);
  }
  OrgSpongycastleAsn1ASN1ObjectIdentifier *workingPublicKeyAlgorithm = [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
  id<OrgSpongycastleAsn1ASN1Encodable> workingPublicKeyParameters = [workingAlgId getParameters];
  
#line 257
  jint maxPathLength = n;
  
#line 263
  if ([paramsPKIX getTargetConstraints] != nil &&
#line 264
  ![((OrgSpongycastleJcajcePKIXCertStoreSelector *) nil_chk([paramsPKIX getTargetConstraints])) matchWithId:(JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:0], [JavaSecurityCertX509Certificate class])]) {
    
#line 266
    @throw new_OrgSpongycastleJceExceptionExtCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(
#line 267
    @"Target certificate in certification path does not match targetConstraints.", nil, certPath, 0);
  }
  
#line 273
  id<JavaUtilList> pathCheckers = [paramsPKIX getCertPathCheckers];
  certIter = [((id<JavaUtilList>) nil_chk(pathCheckers)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(certIter)) hasNext]) {
    
#line 277
    [((JavaSecurityCertPKIXCertPathChecker *) nil_chk(((JavaSecurityCertPKIXCertPathChecker *) cast_chk([certIter next], [JavaSecurityCertPKIXCertPathChecker class])))) init__WithBoolean:false];
  }
  
#line 280
  JavaSecurityCertX509Certificate *cert = nil;
  
#line 282
  for (index = [certs size] - 1; index >= 0; index--) {
    
#line 289
    i = n - index;
    
#line 297
    cert = (JavaSecurityCertX509Certificate *) cast_chk([certs getWithInt:index], [JavaSecurityCertX509Certificate class]);
    jboolean verificationAlreadyPerformed = index == [certs size] - 1;
    
#line 300
    @try {
      
#line 302
      OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(cert);
    }
    @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
      
#line 306
      @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_([e getMessage], [e getUnderlyingException], certPath, index);
    }
    
#line 313
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertAWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withInt_withJavaSecurityPublicKey_withBoolean_withOrgSpongycastleAsn1X500X500Name_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajceUtilJcaJceHelper_(certPath, paramsPKIX, index, workingPublicKey,
#line 314
    verificationAlreadyPerformed, workingIssuerName, sign, helper_);
    
#line 316
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertBCWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
    
#line 318
    validPolicyTree = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertDWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilListArray_withInt_(certPath, index, acceptablePolicies,
#line 319
    validPolicyTree, policyNodes, inhibitAnyPolicy);
    
#line 321
    validPolicyTree = OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertEWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_(certPath, index, validPolicyTree);
    
#line 323
    OrgSpongycastleJceProviderRFC3280CertPathUtilities_processCertFWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, validPolicyTree, explicitPolicy);
    
#line 328
    if (i != n) {
      
#line 330
      if (cert != nil && [cert getVersion] == 1) {
        
#line 333
        if ((i == 1) && [cert isEqual:[trust getTrustedCert]]) {
          
#line 335
          continue;
        }
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Version 1 certificates can't be used as CA ones.", nil,
#line 338
        certPath, index);
      }
      
#line 341
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertAWithJavaSecurityCertCertPath_withInt_(certPath, index);
      
#line 343
      validPolicyTree = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareCertBWithJavaSecurityCertCertPath_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withInt_(certPath, index, policyNodes, validPolicyTree,
#line 344
      policyMapping);
      
#line 346
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertGWithJavaSecurityCertCertPath_withInt_withOrgSpongycastleJceProviderPKIXNameConstraintValidator_(certPath, index, nameConstraintValidator);
      
#line 349
      explicitPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
      policyMapping = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
      inhibitAnyPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertH3WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
      
#line 356
      explicitPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI1WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, explicitPolicy);
      policyMapping = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertI2WithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, policyMapping);
      
#line 360
      inhibitAnyPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertJWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, inhibitAnyPolicy);
      
#line 363
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertKWithJavaSecurityCertCertPath_withInt_(certPath, index);
      
#line 366
      maxPathLength = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertLWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
      
#line 369
      maxPathLength = OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertMWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index, maxPathLength);
      
#line 372
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertNWithJavaSecurityCertCertPath_withInt_(certPath, index);
      
#line 374
      id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
      if (criticalExtensions != nil) {
        
#line 377
        criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
        
#line 380
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)];
        [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)];
      }
      else {
        
#line 393
        criticalExtensions = new_JavaUtilHashSet_init();
      }
      
#line 397
      OrgSpongycastleJceProviderRFC3280CertPathUtilities_prepareNextCertOWithJavaSecurityCertCertPath_withInt_withJavaUtilSet_withJavaUtilList_(certPath, index, criticalExtensions, pathCheckers);
      
#line 400
      sign = cert;
      
#line 403
      workingIssuerName = OrgSpongycastleJceProviderPrincipalUtils_getSubjectPrincipalWithJavaSecurityCertX509Certificate_(sign);
      
#line 406
      @try {
        
#line 408
        workingPublicKey = OrgSpongycastleJceProviderCertPathValidatorUtilities_getNextWorkingKeyWithJavaUtilList_withInt_withOrgSpongycastleJcajceUtilJcaJceHelper_([certPath getCertificates], index, helper_);
      }
      @catch (JavaSecurityCertCertPathValidatorException *e) {
        
#line 412
        @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Next working key could not be retrieved.", e, certPath, index);
      }
      
#line 415
      workingAlgId = OrgSpongycastleJceProviderCertPathValidatorUtilities_getAlgorithmIdentifierWithJavaSecurityPublicKey_(workingPublicKey);
      
#line 417
      workingPublicKeyAlgorithm = [((OrgSpongycastleAsn1X509AlgorithmIdentifier *) nil_chk(workingAlgId)) getAlgorithm];
      
#line 419
      workingPublicKeyParameters = [workingAlgId getParameters];
    }
  }
  
#line 427
  explicitPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertAWithInt_withJavaSecurityCertX509Certificate_(explicitPolicy, cert);
  
#line 429
  explicitPolicy = OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertBWithJavaSecurityCertCertPath_withInt_withInt_(certPath, index + 1, explicitPolicy);
  
#line 438
  id<JavaUtilSet> criticalExtensions = [((JavaSecurityCertX509Certificate *) nil_chk(cert)) getCriticalExtensionOIDs];
  
#line 440
  if (criticalExtensions != nil) {
    
#line 442
    criticalExtensions = new_JavaUtilHashSet_initWithJavaUtilCollection_(criticalExtensions);
    
#line 444
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, KEY_USAGE)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CERTIFICATE_POLICIES)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_MAPPINGS)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, INHIBIT_ANY_POLICY)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, ISSUING_DISTRIBUTION_POINT)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, DELTA_CRL_INDICATOR)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, POLICY_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, BASIC_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, SUBJECT_ALTERNATIVE_NAME)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, NAME_CONSTRAINTS)];
    [criticalExtensions removeWithId:JreLoadStatic(OrgSpongycastleJceProviderRFC3280CertPathUtilities, CRL_DISTRIBUTION_POINTS)];
    [criticalExtensions removeWithId:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, extendedKeyUsage))) getId]];
  }
  else {
    
#line 459
    criticalExtensions = new_JavaUtilHashSet_init();
  }
  
#line 462
  OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertFWithJavaSecurityCertCertPath_withInt_withJavaUtilList_withJavaUtilSet_(certPath, index + 1, pathCheckers, criticalExtensions);
  
#line 464
  OrgSpongycastleJceProviderPKIXPolicyNode *intersection = OrgSpongycastleJceProviderRFC3280CertPathUtilities_wrapupCertGWithJavaSecurityCertCertPath_withOrgSpongycastleJcajcePKIXExtendedParameters_withJavaUtilSet_withInt_withJavaUtilListArray_withOrgSpongycastleJceProviderPKIXPolicyNode_withJavaUtilSet_(certPath, paramsPKIX, userInitialPolicySet,
#line 465
  index + 1, policyNodes, validPolicyTree, acceptablePolicies);
  
#line 467
  if ((explicitPolicy > 0) || (intersection != nil)) {
    
#line 469
    return new_JavaSecurityCertPKIXCertPathValidatorResult_initWithJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(trust, intersection, [cert getPublicKey]);
  }
  
#line 472
  @throw new_JavaSecurityCertCertPathValidatorException_initWithNSString_withJavaLangThrowable_withJavaSecurityCertCertPath_withInt_(@"Path processing failed on policy.", nil, certPath, index);
}


#line 475
+ (void)checkCertificateWithJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)cert {
  OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(cert);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathValidatorResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x8, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineValidateWithJavaSecurityCertCertPath:withJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(checkCertificateWithJavaSecurityCertX509Certificate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LOrgSpongycastleJcajceUtilJcaJceHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineValidate", "LJavaSecurityCertCertPath;LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathValidatorException;LJavaSecurityInvalidAlgorithmParameterException;", "checkCertificate", "LJavaSecurityCertX509Certificate;", "LOrgSpongycastleJceProviderAnnotatedException;" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderPKIXCertPathValidatorSpi = { "PKIXCertPathValidatorSpi", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderPKIXCertPathValidatorSpi;
}

@end


#line 45
void OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_init(OrgSpongycastleJceProviderPKIXCertPathValidatorSpi *self) {
  JavaSecurityCertCertPathValidatorSpi_init(self);
  self->helper_ = new_OrgSpongycastleJcajceUtilBCJcaJceHelper_init();
}


#line 45
OrgSpongycastleJceProviderPKIXCertPathValidatorSpi *new_OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderPKIXCertPathValidatorSpi, init)
}


#line 45
OrgSpongycastleJceProviderPKIXCertPathValidatorSpi *create_OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderPKIXCertPathValidatorSpi, init)
}


#line 475
void OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_checkCertificateWithJavaSecurityCertX509Certificate_(JavaSecurityCertX509Certificate *cert) {
  OrgSpongycastleJceProviderPKIXCertPathValidatorSpi_initialize();
  
#line 478
  @try {
    
#line 480
    (void) OrgSpongycastleAsn1X509TBSCertificate_getInstanceWithId_([((JavaSecurityCertX509Certificate *) nil_chk(cert)) getTBSCertificate]);
  }
  @catch (JavaSecurityCertCertificateEncodingException *e) {
    
#line 484
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(@"unable to process TBSCertificate");
  }
  @catch (JavaLangIllegalArgumentException *e) {
    
#line 488
    @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_([e getMessage]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderPKIXCertPathValidatorSpi)
