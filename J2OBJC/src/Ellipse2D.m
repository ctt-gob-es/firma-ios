//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Ellipse2D.java
//

#include "AffineTransform.h"
#include "Ellipse2D.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Messages.h"
#include "PathIterator.h"
#include "Rectangle2D.h"
#include "RectangularShape.h"
#include "java/lang/Math.h"
#include "java/util/NoSuchElementException.h"

#if !__has_feature(objc_arc)
#error "Ellipse2D must be compiled with ARC (-fobjc-arc)"
#endif

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Ellipse2D.java"


#line 26
@implementation HarmonyJavaAwtGeomEllipse2D

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 292
- (instancetype)init {
  HarmonyJavaAwtGeomEllipse2D_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 295
- (jboolean)containsWithDouble:(jdouble)px
                    withDouble:(jdouble)py {
  
#line 296
  if ([self isEmpty]) {
    return false;
  }
  
#line 300
  jdouble a = (px - [self getX]) / [self getWidth] - 0.5;
  jdouble b = (py - [self getY]) / [self getHeight] - 0.5;
  
#line 303
  return a * a + b * b < 0.25;
}


#line 306
- (jboolean)intersectsWithDouble:(jdouble)rx
                      withDouble:(jdouble)ry
                      withDouble:(jdouble)rw
                      withDouble:(jdouble)rh {
  
#line 307
  if ([self isEmpty] || rw <= 0.0 || rh <= 0.0) {
    return false;
  }
  
#line 311
  jdouble cx = [self getX] + [self getWidth] / 2.0;
  jdouble cy = [self getY] + [self getHeight] / 2.0;
  
#line 314
  jdouble rx1 = rx;
  jdouble ry1 = ry;
  jdouble rx2 = rx + rw;
  jdouble ry2 = ry + rh;
  
#line 319
  jdouble nx = cx < rx1 ? rx1 : (cx > rx2 ? rx2 : cx);
  jdouble ny = cy < ry1 ? ry1 : (cy > ry2 ? ry2 : cy);
  
#line 322
  return [self containsWithDouble:nx withDouble:ny];
}


#line 325
- (jboolean)containsWithDouble:(jdouble)rx
                    withDouble:(jdouble)ry
                    withDouble:(jdouble)rw
                    withDouble:(jdouble)rh {
  
#line 326
  if ([self isEmpty] || rw <= 0.0 || rh <= 0.0) {
    return false;
  }
  
#line 330
  jdouble rx1 = rx;
  jdouble ry1 = ry;
  jdouble rx2 = rx + rw;
  jdouble ry2 = ry + rh;
  
#line 335
  return [self containsWithDouble:rx1 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry1] && [self containsWithDouble:rx2 withDouble:ry2] && [self containsWithDouble:rx1 withDouble:ry2];
}


#line 338
- (id<HarmonyJavaAwtGeomPathIterator>)getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)at {
  return new_HarmonyJavaAwtGeomEllipse2D_Iterator_initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_(self, self, at);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 3, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomPathIterator;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(containsWithDouble:withDouble:);
  methods[2].selector = @selector(intersectsWithDouble:withDouble:withDouble:withDouble:);
  methods[3].selector = @selector(containsWithDouble:withDouble:withDouble:withDouble:);
  methods[4].selector = @selector(getPathIteratorWithHarmonyJavaAwtGeomAffineTransform:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "contains", "DD", "intersects", "DDDD", "getPathIterator", "LHarmonyJavaAwtGeomAffineTransform;", "LHarmonyJavaAwtGeomEllipse2D_Float;LHarmonyJavaAwtGeomEllipse2D_Double;LHarmonyJavaAwtGeomEllipse2D_Iterator;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomEllipse2D = { "Ellipse2D", "harmony.java.awt.geom", ptrTable, methods, NULL, 7, 0x401, 5, 0, -1, 6, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomEllipse2D;
}

@end


#line 292
void HarmonyJavaAwtGeomEllipse2D_init(HarmonyJavaAwtGeomEllipse2D *self) {
  HarmonyJavaAwtGeomRectangularShape_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomEllipse2D)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Ellipse2D.java"


#line 28
@implementation HarmonyJavaAwtGeomEllipse2D_Float

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 35
- (instancetype)init {
  HarmonyJavaAwtGeomEllipse2D_Float_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 38
- (instancetype)initWithFloat:(jfloat)x
                    withFloat:(jfloat)y
                    withFloat:(jfloat)width
                    withFloat:(jfloat)height {
  HarmonyJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(self, x, y, width, height);
  return self;
}


#line 42
- (jdouble)getX {
  
#line 44
  return x_;
}


#line 47
- (jdouble)getY {
  
#line 49
  return y_;
}


#line 52
- (jdouble)getWidth {
  
#line 54
  return width_;
}


#line 57
- (jdouble)getHeight {
  
#line 59
  return height_;
}


#line 62
- (jboolean)isEmpty {
  
#line 64
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 67
- (void)setFrameWithFloat:(jfloat)x
                withFloat:(jfloat)y
                withFloat:(jfloat)width
                withFloat:(jfloat)height {
  
#line 68
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 74
- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  
#line 76
  self->x_ = (jfloat) x;
  self->y_ = (jfloat) y;
  self->width_ = (jfloat) width;
  self->height_ = (jfloat) height;
}


#line 82
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  return new_HarmonyJavaAwtGeomRectangle2D_Float_initWithFloat_withFloat_withFloat_withFloat_(x_, y_, width_, height_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(setFrameWithFloat:withFloat:withFloat:withFloat:);
  methods[8].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[9].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFF", "setFrame", "DDDD", "LHarmonyJavaAwtGeomEllipse2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomEllipse2D_Float = { "Float", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 10, 4, 3, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomEllipse2D_Float;
}

@end


#line 35
void HarmonyJavaAwtGeomEllipse2D_Float_init(HarmonyJavaAwtGeomEllipse2D_Float *self) {
  HarmonyJavaAwtGeomEllipse2D_init(self);
}


#line 35
HarmonyJavaAwtGeomEllipse2D_Float *new_HarmonyJavaAwtGeomEllipse2D_Float_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomEllipse2D_Float, init)
}


#line 35
HarmonyJavaAwtGeomEllipse2D_Float *create_HarmonyJavaAwtGeomEllipse2D_Float_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomEllipse2D_Float, init)
}


#line 38
void HarmonyJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(HarmonyJavaAwtGeomEllipse2D_Float *self, jfloat x, jfloat y, jfloat width, jfloat height) {
  HarmonyJavaAwtGeomEllipse2D_init(self);
  
#line 39
  [self setFrameWithFloat:x withFloat:y withFloat:width withFloat:height];
}


#line 38
HarmonyJavaAwtGeomEllipse2D_Float *new_HarmonyJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomEllipse2D_Float, initWithFloat_withFloat_withFloat_withFloat_, x, y, width, height)
}


#line 38
HarmonyJavaAwtGeomEllipse2D_Float *create_HarmonyJavaAwtGeomEllipse2D_Float_initWithFloat_withFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat width, jfloat height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomEllipse2D_Float, initWithFloat_withFloat_withFloat_withFloat_, x, y, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomEllipse2D_Float)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Ellipse2D.java"


#line 87
@implementation HarmonyJavaAwtGeomEllipse2D_Double

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 94
- (instancetype)init {
  HarmonyJavaAwtGeomEllipse2D_Double_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 97
- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)width
                    withDouble:(jdouble)height {
  HarmonyJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(self, x, y, width, height);
  return self;
}


#line 101
- (jdouble)getX {
  
#line 103
  return x_;
}


#line 106
- (jdouble)getY {
  
#line 108
  return y_;
}


#line 111
- (jdouble)getWidth {
  
#line 113
  return width_;
}


#line 116
- (jdouble)getHeight {
  
#line 118
  return height_;
}


#line 121
- (jboolean)isEmpty {
  
#line 123
  return width_ <= 0.0 || height_ <= 0.0;
}


#line 126
- (void)setFrameWithDouble:(jdouble)x
                withDouble:(jdouble)y
                withDouble:(jdouble)width
                withDouble:(jdouble)height {
  
#line 128
  self->x_ = x;
  self->y_ = y;
  self->width_ = width;
  self->height_ = height;
}


#line 134
- (HarmonyJavaAwtGeomRectangle2D *)getBounds2D {
  return new_HarmonyJavaAwtGeomRectangle2D_Double_initWithDouble_withDouble_withDouble_withDouble_(x_, y_, width_, height_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LHarmonyJavaAwtGeomRectangle2D;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(setFrameWithDouble:withDouble:withDouble:withDouble:);
  methods[8].selector = @selector(getBounds2D);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDD", "setFrame", "LHarmonyJavaAwtGeomEllipse2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomEllipse2D_Double = { "Double", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x9, 9, 4, 2, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomEllipse2D_Double;
}

@end


#line 94
void HarmonyJavaAwtGeomEllipse2D_Double_init(HarmonyJavaAwtGeomEllipse2D_Double *self) {
  HarmonyJavaAwtGeomEllipse2D_init(self);
}


#line 94
HarmonyJavaAwtGeomEllipse2D_Double *new_HarmonyJavaAwtGeomEllipse2D_Double_init() {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomEllipse2D_Double, init)
}


#line 94
HarmonyJavaAwtGeomEllipse2D_Double *create_HarmonyJavaAwtGeomEllipse2D_Double_init() {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomEllipse2D_Double, init)
}


#line 97
void HarmonyJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(HarmonyJavaAwtGeomEllipse2D_Double *self, jdouble x, jdouble y, jdouble width, jdouble height) {
  HarmonyJavaAwtGeomEllipse2D_init(self);
  
#line 98
  [self setFrameWithDouble:x withDouble:y withDouble:width withDouble:height];
}


#line 97
HarmonyJavaAwtGeomEllipse2D_Double *new_HarmonyJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomEllipse2D_Double, initWithDouble_withDouble_withDouble_withDouble_, x, y, width, height)
}


#line 97
HarmonyJavaAwtGeomEllipse2D_Double *create_HarmonyJavaAwtGeomEllipse2D_Double_initWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble width, jdouble height) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomEllipse2D_Double, initWithDouble_withDouble_withDouble_withDouble_, x, y, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomEllipse2D_Double)

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/harmony/java/awt/geom/Ellipse2D.java"


#line 142
@implementation HarmonyJavaAwtGeomEllipse2D_Iterator


#line 203
- (instancetype)initWithHarmonyJavaAwtGeomEllipse2D:(HarmonyJavaAwtGeomEllipse2D *)outer$
                    withHarmonyJavaAwtGeomEllipse2D:(HarmonyJavaAwtGeomEllipse2D *)e
              withHarmonyJavaAwtGeomAffineTransform:(HarmonyJavaAwtGeomAffineTransform *)t {
  HarmonyJavaAwtGeomEllipse2D_Iterator_initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_(self, outer$, e, t);
  return self;
}


#line 214
- (jint)getWindingRule {
  return HarmonyJavaAwtGeomPathIterator_WIND_NON_ZERO;
}

- (jboolean)isDone {
  return index_ > 5;
}

- (void)next {
  index_++;
}

- (jint)currentSegmentWithDoubleArray:(IOSDoubleArray *)coords {
  if ([self isDone]) {
    
#line 229
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == 5) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    count = 1;
    IOSDoubleArray *p = IOSObjectArray_Get(nil_chk(points_), 3);
    *IOSDoubleArray_GetRef(nil_chk(coords), 0) = x_ + IOSDoubleArray_Get(nil_chk(p), 4) * width_;
    *IOSDoubleArray_GetRef(coords, 1) = y_ + IOSDoubleArray_Get(p, 5) * height_;
  }
  else {
    
#line 243
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    count = 3;
    IOSDoubleArray *p = IOSObjectArray_Get(nil_chk(points_), index_ - 1);
    jint j = 0;
    for (jint i = 0; i < 3; i++) {
      jint unseq$1 = j;
      
#line 248
      *IOSDoubleArray_GetRef(nil_chk(coords), unseq$1) = x_ + IOSDoubleArray_Get(nil_chk(p), j++) * width_;
      jint unseq$2 = j;
      
#line 249
      *IOSDoubleArray_GetRef(coords, unseq$2) = y_ + IOSDoubleArray_Get(p, j++) * height_;
    }
  }
  if (t_ != nil) {
    [t_ transformWithDoubleArray:coords withInt:0 withDoubleArray:coords withInt:0 withInt:count];
  }
  return type;
}


#line 258
- (jint)currentSegmentWithFloatArray:(IOSFloatArray *)coords {
  if ([self isDone]) {
    
#line 261
    @throw new_JavaUtilNoSuchElementException_initWithNSString_(ComMessages_getStringWithNSString_(@"awt.4B"));
  }
  if (index_ == 5) {
    return HarmonyJavaAwtGeomPathIterator_SEG_CLOSE;
  }
  jint type;
  jint count;
  if (index_ == 0) {
    type = HarmonyJavaAwtGeomPathIterator_SEG_MOVETO;
    count = 1;
    IOSDoubleArray *p = IOSObjectArray_Get(nil_chk(points_), 3);
    *IOSFloatArray_GetRef(nil_chk(coords), 0) = (jfloat) (x_ + IOSDoubleArray_Get(nil_chk(p), 4) * width_);
    *IOSFloatArray_GetRef(coords, 1) = (jfloat) (y_ + IOSDoubleArray_Get(p, 5) * height_);
  }
  else {
    
#line 275
    type = HarmonyJavaAwtGeomPathIterator_SEG_CUBICTO;
    count = 3;
    jint j = 0;
    IOSDoubleArray *p = IOSObjectArray_Get(nil_chk(points_), index_ - 1);
    for (jint i = 0; i < 3; i++) {
      jint unseq$1 = j;
      
#line 280
      *IOSFloatArray_GetRef(nil_chk(coords), unseq$1) = (jfloat) (x_ + IOSDoubleArray_Get(nil_chk(p), j++) * width_);
      jint unseq$2 = j;
      
#line 281
      *IOSFloatArray_GetRef(coords, unseq$2) = (jfloat) (y_ + IOSDoubleArray_Get(p, j++) * height_);
    }
  }
  if (t_ != nil) {
    [t_ transformWithFloatArray:coords withInt:0 withFloatArray:coords withInt:0 withInt:count];
  }
  return type;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithHarmonyJavaAwtGeomEllipse2D:withHarmonyJavaAwtGeomEllipse2D:withHarmonyJavaAwtGeomAffineTransform:);
  methods[1].selector = @selector(getWindingRule);
  methods[2].selector = @selector(isDone);
  methods[3].selector = @selector(next);
  methods[4].selector = @selector(currentSegmentWithDoubleArray:);
  methods[5].selector = @selector(currentSegmentWithFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "u_", "D", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "points_", "[[D", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "x_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "t_", "LHarmonyJavaAwtGeomAffineTransform;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LHarmonyJavaAwtGeomEllipse2D;LHarmonyJavaAwtGeomEllipse2D;LHarmonyJavaAwtGeomAffineTransform;", "currentSegment", "[D", "[F", "LHarmonyJavaAwtGeomEllipse2D;" };
  static const J2ObjcClassInfo _HarmonyJavaAwtGeomEllipse2D_Iterator = { "Iterator", "harmony.java.awt.geom", ptrTable, methods, fields, 7, 0x0, 6, 8, 4, -1, -1, -1, -1 };
  return &_HarmonyJavaAwtGeomEllipse2D_Iterator;
}

@end


#line 203
void HarmonyJavaAwtGeomEllipse2D_Iterator_initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomEllipse2D_Iterator *self, HarmonyJavaAwtGeomEllipse2D *outer$, HarmonyJavaAwtGeomEllipse2D *e, HarmonyJavaAwtGeomAffineTransform *t) {
  NSObject_init(self);
  self->u_ =
#line 156
  2.0 / 3.0 * (JavaLangMath_sqrtWithDouble_(2.0) - 1.0);
  self->points_ = [IOSObjectArray newArrayWithObjects:(id[]){ [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 161
    1.0, 0.5 + self->u_, 0.5 + self->u_, 1.0, 0.5, 1.0 } count:6], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.5 - self->u_, 1.0, 0.0, 0.5 + self->u_, 0.0, 0.5 } count:6], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){
#line 162
      0.0, 0.5 - self->u_, 0.5 - self->u_, 0.0, 0.5, 0.0 } count:6], [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0.5 + self->u_, 0.0, 1.0, 0.5 - self->u_, 1.0, 0.5 } count:6] } count:4 type:IOSClass_doubleArray(1)];
      
#line 204
      self->x_ = [((HarmonyJavaAwtGeomEllipse2D *) nil_chk(e)) getX];
      self->y_ = [e getY];
      self->width_ = [e getWidth];
      self->height_ = [e getHeight];
      self->t_ = t;
      if (self->width_ < 0.0 || self->height_ < 0.0) {
        self->index_ = 6;
      }
    }


#line 203
HarmonyJavaAwtGeomEllipse2D_Iterator *new_HarmonyJavaAwtGeomEllipse2D_Iterator_initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomEllipse2D *outer$, HarmonyJavaAwtGeomEllipse2D *e, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_NEW_IMPL(HarmonyJavaAwtGeomEllipse2D_Iterator, initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, e, t)
}


#line 203
HarmonyJavaAwtGeomEllipse2D_Iterator *create_HarmonyJavaAwtGeomEllipse2D_Iterator_initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_(HarmonyJavaAwtGeomEllipse2D *outer$, HarmonyJavaAwtGeomEllipse2D *e, HarmonyJavaAwtGeomAffineTransform *t) {
  J2OBJC_CREATE_IMPL(HarmonyJavaAwtGeomEllipse2D_Iterator, initWithHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomEllipse2D_withHarmonyJavaAwtGeomAffineTransform_, outer$, e, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HarmonyJavaAwtGeomEllipse2D_Iterator)
