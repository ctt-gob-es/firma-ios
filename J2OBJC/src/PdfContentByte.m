//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfContentByte.java
//

#include "Annotation.h"
#include "BaseFont.h"
#include "ByteBuffer.h"
#include "CMYKColor.h"
#include "Color.h"
#include "ColorDetails.h"
#include "DocumentException.h"
#include "ExceptionConverter.h"
#include "ExtendedColor.h"
#include "FontDetails.h"
#include "GrayColor.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IllegalPdfSyntaxException.h"
#include "Image.h"
#include "ImgJBIG2.h"
#include "J2ObjC_source.h"
#include "PageResources.h"
#include "PatternColor.h"
#include "PdfAction.h"
#include "PdfAnnotation.h"
#include "PdfAnnotationsImp.h"
#include "PdfAppearance.h"
#include "PdfArray.h"
#include "PdfContentByte.h"
#include "PdfDictionary.h"
#include "PdfDocument.h"
#include "PdfGState.h"
#include "PdfImage.h"
#include "PdfIndirectObject.h"
#include "PdfIndirectReference.h"
#include "PdfLayer.h"
#include "PdfLayerMembership.h"
#include "PdfName.h"
#include "PdfOCG.h"
#include "PdfObject.h"
#include "PdfOutline.h"
#include "PdfPatternPainter.h"
#include "PdfShading.h"
#include "PdfShadingPattern.h"
#include "PdfSpotColor.h"
#include "PdfTemplate.h"
#include "PdfTextArray.h"
#include "PdfWriter.h"
#include "PdfXConformanceImp.h"
#include "Rectangle.h"
#include "ShadingColor.h"
#include "SpotColor.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Set.h"

#if !__has_feature(objc_arc)
#error "PdfContentByte must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfPdfContentByte () {
 @public
  /*!
   @brief The list were we save/restore the state
   */
  JavaUtilArrayList *stateList_;
  /*!
   @brief The list were we save/restore the layer depth
   */
  JavaUtilArrayList *layerDepth_;
  jint mcDepth_;
  jboolean inText_;
}

/*!
 @brief Helper to validate and write the RGB color components
 @param red the intensity of red. A value between 0 and 1
 @param green the intensity of green. A value between 0 and 1
 @param blue the intensity of blue. A value between 0 and 1
 */
- (void)HelperRGBWithFloat:(jfloat)red
                 withFloat:(jfloat)green
                 withFloat:(jfloat)blue;

/*!
 @brief Helper to validate and write the CMYK color components.
 @param cyan the intensity of cyan. A value between 0 and 1
 @param magenta the intensity of magenta. A value between 0 and 1
 @param yellow the intensity of yellow. A value between 0 and 1
 @param black the intensity of black. A value between 0 and 1
 */
- (void)HelperCMYKWithFloat:(jfloat)cyan
                  withFloat:(jfloat)magenta
                  withFloat:(jfloat)yellow
                  withFloat:(jfloat)black;

- (jboolean)compareColorsWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)c1
                         withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)c2;

/*!
 @brief Adds a variable width border to the current path.
 Only use if <code>Rectangle.isUseVariableBorders</code>
  = true.
 @param rect a  <CODE> Rectangle </CODE>
 */
- (void)variableRectangleWithComAowagieTextRectangle:(ComAowagieTextRectangle *)rect;

/*!
 @brief Adds an <CODE>Image</CODE> to the page.The <CODE>Image</CODE> must have
  absolute positioning.
 The image can be placed inline.
 @param image the  <CODE> Image </CODE>  object
 @param inlineImage <CODE> true </CODE>  to place this image inline,  <CODE> false </CODE>  otherwise
 @throw DocumentExceptionif the <CODE>Image</CODE> does not have absolute positioning
 */
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                            withBoolean:(jboolean)inlineImage;

/*!
 @brief Makes this <CODE>PdfContentByte</CODE> empty.
 @param validateContent will call  <code> sanityCheck() </code>  if true.
 @since 2.1.6
 */
- (void)resetWithBoolean:(jboolean)validateContent;

/*!
 @brief A helper to insert into the content stream the <CODE>text</CODE>
  converted to bytes according to the font's encoding.
 @param text the text to write
 */
- (void)showText2WithNSString:(NSString *)text;

/*!
 @brief Constructs a kern array for a text in a certain font
 @param text the text
 @param font the font
 @return a PdfTextArray
 */
+ (ComAowagieTextPdfPdfTextArray *)getKernArrayWithNSString:(NSString *)text
                              withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)font;

/*!
 @brief Shows the <CODE>text</CODE> kerned.
 @param text the text to write
 */
- (void)showTextKernedWithNSString:(NSString *)text;

/*!
 @brief Escapes a <CODE>byte</CODE> array according to the PDF conventions.
 @param b the  <CODE> byte </CODE>  array to escape
 @param content the content
 */
+ (void)escapeStringWithByteArray:(IOSByteArray *)b
  withComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)content;

/*!
 @brief Computes the width of the given string taking in account
  the current values of "Character spacing", "Word Spacing"
  and "Horizontal Scaling".
 The additional spacing is not computed for the last character
  of the string.
 @param text the string to get width of
 @param kerned the kerning option
 @return the width
 */
- (jfloat)getEffectiveStringWidthWithNSString:(NSString *)text
                                  withBoolean:(jboolean)kerned;

- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation
                   withBoolean:(jboolean)kerned;

/*!
 @brief Create a new colored tiling pattern.
 @param width the width of the pattern
 @param height the height of the pattern
 @param xstep the desired horizontal spacing between pattern cells.  May be either positive or negative, but not zero.
 @param ystep the desired vertical spacing between pattern cells.  May be either positive or negative, but not zero.
 @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
 */
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height
                                                     withFloat:(jfloat)xstep
                                                     withFloat:(jfloat)ystep;

/*!
 @brief Create a new uncolored tiling pattern.
 @param width the width of the pattern
 @param height the height of the pattern
 @param xstep the desired horizontal spacing between pattern cells.  May be either positive or negative, but not zero.
 @param ystep the desired vertical spacing between pattern cells.  May be either positive or negative, but not zero.
 @param color the default color. Can be  <CODE> null </CODE>
 @return the <CODE>PdfPatternPainter</CODE> where the pattern will be created
 */
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height
                                                     withFloat:(jfloat)xstep
                                                     withFloat:(jfloat)ystep
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

- (ComAowagieTextPdfPdfTemplate *)createTemplateWithFloat:(jfloat)width
                                                withFloat:(jfloat)height
                             withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)forcedName;

- (ComAowagieTextPdfPdfAppearance *)createAppearanceWithFloat:(jfloat)width
                                                    withFloat:(jfloat)height
                                 withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)forcedName;

/*!
 @brief Outputs the color values to the content.
 @param color The color
 @param tint the tint if it is a spot color, ignored otherwise
 */
- (void)outputColorNumbersWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                        withFloat:(jfloat)tint;

/*!
 @brief Sets the fill color to an uncolored pattern.
 @param p the pattern
 @param color the color of the pattern
 */
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                     withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

/*!
 @brief Sets the stroke color to an uncolored pattern.
 @param p the pattern
 @param color the color of the pattern
 */
- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color;

/*!
 @brief Paints using a shading object.
 @param shading the shading object
 */
- (void)paintShadingWithComAowagieTextPdfPdfShading:(ComAowagieTextPdfPdfShading *)shading;

/*!
 @brief Throws an error if it is a pattern.
 @param t the object to check
 */
- (void)checkNoPatternWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)t;

/*!
 @brief Begins a graphic block whose visibility is controlled by the <CODE>layer</CODE>.
 Blocks can be nested. Each block must be terminated by an <code>endLayer()</code>.<p>
  Note that nested layers with <code>PdfLayer.addChild(PdfLayer)</code> only require a single
  call to this method and a single call to <code>endLayer()</code>; all the nesting control
  is built in.
 @param layer the layer
 */
- (void)beginLayerWithComAowagieTextPdfPdfOCG:(id<ComAowagieTextPdfPdfOCG>)layer;

- (void)beginLayer2WithComAowagieTextPdfPdfOCG:(id<ComAowagieTextPdfPdfOCG>)layer;

/*!
 @brief Ends a layer controlled graphic block.It will end the most recent open block.
 */
- (void)endLayer;

/*!
 @brief Begins a marked content sequence.If property is <CODE>null</CODE> the mark will be of the type 
 <CODE>BMC</CODE> otherwise it will be <CODE>BDC</CODE>.
 @param tag the tag
 @param property the property
 @param inline_ <CODE> true </CODE>  to include the property in the content or  <CODE> false </CODE>
   to include the property in the resource dictionary with the possibility of reusing
 */
- (void)beginMarkedContentSequenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)tag
                            withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)property
                                                   withBoolean:(jboolean)inline_;

/*!
 @brief Checks for any dangling state: Mismatched save/restore state, begin/end text,
  begin/end layer, or begin/end marked content sequence.
 If found, this function will throw.  This function is called automatically
  during a reset() (from Document.newPage() for example), and before writing
  itself out in toPdf().
  One possible cause: not calling myPdfGraphics2D.dispose() will leave dangling
                      saveState() calls.
 @since 2.1.6
 */
- (void)sanityCheck;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, stateList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte, layerDepth_, JavaUtilArrayList *)

/*!
 @brief The alignment is right
 */
inline jint ComAowagieTextPdfPdfContentByte_get_ALIGN_RIGHT(void);
#define ComAowagieTextPdfPdfContentByte_ALIGN_RIGHT 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, ALIGN_RIGHT, jint)

/*!
 @brief A possible line cap value
 */
inline jint ComAowagieTextPdfPdfContentByte_get_LINE_CAP_BUTT(void);
#define ComAowagieTextPdfPdfContentByte_LINE_CAP_BUTT 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, LINE_CAP_BUTT, jint)

/*!
 @brief A possible line join value
 */
inline jint ComAowagieTextPdfPdfContentByte_get_LINE_JOIN_MITER(void);
#define ComAowagieTextPdfPdfContentByte_LINE_JOIN_MITER 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfContentByte, LINE_JOIN_MITER, jint)

inline IOSFloatArray *ComAowagieTextPdfPdfContentByte_get_unitRect(void);
static IOSFloatArray *ComAowagieTextPdfPdfContentByte_unitRect;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ComAowagieTextPdfPdfContentByte, unitRect, IOSFloatArray *)

inline JavaUtilHashMap *ComAowagieTextPdfPdfContentByte_get_abrev(void);
inline JavaUtilHashMap *ComAowagieTextPdfPdfContentByte_set_abrev(JavaUtilHashMap *value);
static JavaUtilHashMap *ComAowagieTextPdfPdfContentByte_abrev;
J2OBJC_STATIC_FIELD_OBJ(ComAowagieTextPdfPdfContentByte, abrev, JavaUtilHashMap *)

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat red, jfloat green, jfloat blue);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_HelperCMYKWithFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat cyan, jfloat magenta, jfloat yellow, jfloat black);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, HarmonyJavaAwtColor *c1, HarmonyJavaAwtColor *c2);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_variableRectangleWithComAowagieTextRectangle_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextRectangle *rect);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_addImageWithComAowagieTextImage_withBoolean_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextImage *image, jboolean inlineImage);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_resetWithBoolean_(ComAowagieTextPdfPdfContentByte *self, jboolean validateContent);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_showText2WithNSString_(ComAowagieTextPdfPdfContentByte *self, NSString *text);

__attribute__((unused)) static ComAowagieTextPdfPdfTextArray *ComAowagieTextPdfPdfContentByte_getKernArrayWithNSString_withComAowagieTextPdfBaseFont_(NSString *text, ComAowagieTextPdfBaseFont *font);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_showTextKernedWithNSString_(ComAowagieTextPdfPdfContentByte *self, NSString *text);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_withComAowagieTextPdfByteBuffer_(IOSByteArray *b, ComAowagieTextPdfByteBuffer *content);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(ComAowagieTextPdfPdfContentByte *self, NSString *text, jboolean kerned);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_showTextAlignedWithInt_withNSString_withFloat_withFloat_withFloat_withBoolean_(ComAowagieTextPdfPdfContentByte *self, jint alignment, NSString *text, jfloat x, jfloat y, jfloat rotation, jboolean kerned);

__attribute__((unused)) static ComAowagieTextPdfPdfPatternPainter *ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, jfloat xstep, jfloat ystep);

__attribute__((unused)) static ComAowagieTextPdfPdfPatternPainter *ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, jfloat xstep, jfloat ystep, HarmonyJavaAwtColor *color);

__attribute__((unused)) static ComAowagieTextPdfPdfTemplate *ComAowagieTextPdfPdfContentByte_createTemplateWithFloat_withFloat_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, ComAowagieTextPdfPdfName *forcedName);

__attribute__((unused)) static ComAowagieTextPdfPdfAppearance *ComAowagieTextPdfPdfContentByte_createAppearanceWithFloat_withFloat_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, ComAowagieTextPdfPdfName *forcedName);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_outputColorNumbersWithHarmonyJavaAwtColor_withFloat_(ComAowagieTextPdfPdfContentByte *self, HarmonyJavaAwtColor *color, jfloat tint);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_setPatternFillWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfPatternPainter *p, HarmonyJavaAwtColor *color);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_setPatternStrokeWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfPatternPainter *p, HarmonyJavaAwtColor *color);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_paintShadingWithComAowagieTextPdfPdfShading_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfShading *shading);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_checkNoPatternWithComAowagieTextPdfPdfTemplate_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfTemplate *t);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_beginLayerWithComAowagieTextPdfPdfOCG_(ComAowagieTextPdfPdfContentByte *self, id<ComAowagieTextPdfPdfOCG> layer);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_beginLayer2WithComAowagieTextPdfPdfOCG_(ComAowagieTextPdfPdfContentByte *self, id<ComAowagieTextPdfPdfOCG> layer);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_endLayer(ComAowagieTextPdfPdfContentByte *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_beginMarkedContentSequenceWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfDictionary_withBoolean_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfName *tag, ComAowagieTextPdfPdfDictionary *property, jboolean inline_);

__attribute__((unused)) static void ComAowagieTextPdfPdfContentByte_sanityCheck(ComAowagieTextPdfPdfContentByte *self);

@interface ComAowagieTextPdfPdfContentByte_GraphicState () {
 @public
  /*!
   @brief This is the color in use
   */
  ComAowagieTextPdfColorDetails *colorDetails_;
  /*!
   @brief The x position of the text line matrix.
   */
  jfloat xTLM_;
  /*!
   @brief The y position of the text line matrix.
   */
  jfloat yTLM_;
  /*!
   @brief The current text leading.
   */
  jfloat leading_;
  /*!
   @brief The current horizontal scaling
   */
  jfloat scale__;
  /*!
   @brief The current word spacing
   */
  jfloat wordSpace_;
}

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfContentByte_GraphicState, colorDetails_, ComAowagieTextPdfColorDetails *)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfContentByte.java"

J2OBJC_INITIALIZED_DEFN(ComAowagieTextPdfPdfContentByte)


#line 74
@implementation ComAowagieTextPdfPdfContentByte


#line 206
- (instancetype)initWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)wr {
  ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(self, wr);
  return self;
}


#line 221
- (NSString *)description {
  
#line 223
  return [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) description];
}


#line 230
- (ComAowagieTextPdfByteBuffer *)getInternalBuffer {
  return self->content_;
}


#line 240
- (IOSByteArray *)toPdfWithComAowagieTextPdfPdfWriter:(ComAowagieTextPdfPdfWriter *)writer {
  ComAowagieTextPdfPdfContentByte_sanityCheck(self);
  return [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) toByteArray];
}


#line 253
- (void)addWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)other {
  if (((ComAowagieTextPdfPdfContentByte *) nil_chk(other))->writer_ != nil && !JreObjectEqualsEquals(self->writer_, other->writer_)) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Inconsistent writers. Are you mixing two documents?");
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithComAowagieTextPdfByteBuffer:other->content_];
}


#line 265
- (jfloat)getXTLM {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->xTLM_;
}


#line 274
- (jfloat)getYTLM {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->yTLM_;
}


#line 283
- (jfloat)getLeading {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->leading_;
}


#line 292
- (jfloat)getCharacterSpacing {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->charSpace_;
}


#line 301
- (jfloat)getWordSpacing {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->wordSpace_;
}


#line 310
- (jfloat)getHorizontalScaling {
  return ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->scale__;
}


#line 323
- (void)setFlatnessWithFloat:(jfloat)flatness {
  if (flatness >= 0 && flatness <= 100) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:flatness])) appendWithNSString:@" i"])) append_iWithInt:self->separator_];
  }
}


#line 339
- (void)setLineCapWithInt:(jint)style {
  if (style >= 0 && style <= 2) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithInt:style])) appendWithNSString:@" J"])) append_iWithInt:self->separator_];
  }
}


#line 356
- (void)setLineDashWithFloat:(jfloat)phase {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"[] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:self->separator_];
}


#line 372
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)phase {
  
#line 373
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"["])) appendWithFloat:unitsOn])) appendWithNSString:@"] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:self->separator_];
}


#line 389
- (void)setLineDashWithFloat:(jfloat)unitsOn
                   withFloat:(jfloat)unitsOff
                   withFloat:(jfloat)phase {
  
#line 390
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"["])) appendWithFloat:unitsOn])) appendWithChar:' '])) appendWithFloat:unitsOff])) appendWithNSString:@"] "])) appendWithFloat:phase])) appendWithNSString:@" d"])) append_iWithInt:self->separator_];
}


#line 405
- (void)setLineJoinWithInt:(jint)style {
  if (style >= 0 && style <= 2) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithInt:style])) appendWithNSString:@" j"])) append_iWithInt:self->separator_];
  }
}


#line 420
- (void)setLineWidthWithFloat:(jfloat)w {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:w])) appendWithNSString:@" w"])) append_iWithInt:self->separator_];
}


#line 435
- (void)setMiterLimitWithFloat:(jfloat)miterLimit {
  if (miterLimit > 1) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:miterLimit])) appendWithNSString:@" M"])) append_iWithInt:self->separator_];
  }
}


#line 447
- (void)clip {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"W"])) append_iWithInt:self->separator_];
}


#line 456
- (void)eoClip {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"W*"])) append_iWithInt:self->separator_];
}


#line 469
- (void)setGrayFillWithFloat:(jfloat)gray {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:gray])) appendWithNSString:@" g"])) append_iWithInt:self->separator_];
}


#line 477
- (void)resetGrayFill {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 g"])) append_iWithInt:self->separator_];
}


#line 490
- (void)setGrayStrokeWithFloat:(jfloat)gray {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:gray])) appendWithNSString:@" G"])) append_iWithInt:self->separator_];
}


#line 498
- (void)resetGrayStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 G"])) append_iWithInt:self->separator_];
}


#line 508
- (void)HelperRGBWithFloat:(jfloat)red
                 withFloat:(jfloat)green
                 withFloat:(jfloat)blue {
  ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(self, red, green, blue);
}


#line 542
- (void)setRGBColorFillFWithFloat:(jfloat)red
                        withFloat:(jfloat)green
                        withFloat:(jfloat)blue {
  
#line 543
  ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(self, red, green, blue);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" rg"])) append_iWithInt:self->separator_];
}

- (void)resetRGBColorFill {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 g"])) append_iWithInt:self->separator_];
}


#line 569
- (void)setRGBColorStrokeFWithFloat:(jfloat)red
                          withFloat:(jfloat)green
                          withFloat:(jfloat)blue {
  
#line 570
  ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(self, red, green, blue);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" RG"])) append_iWithInt:self->separator_];
}


#line 579
- (void)resetRGBColorStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 G"])) append_iWithInt:self->separator_];
}


#line 591
- (void)HelperCMYKWithFloat:(jfloat)cyan
                  withFloat:(jfloat)magenta
                  withFloat:(jfloat)yellow
                  withFloat:(jfloat)black {
  ComAowagieTextPdfPdfContentByte_HelperCMYKWithFloat_withFloat_withFloat_withFloat_(self, cyan, magenta, yellow, black);
}


#line 630
- (void)setCMYKColorFillFWithFloat:(jfloat)cyan
                         withFloat:(jfloat)magenta
                         withFloat:(jfloat)yellow
                         withFloat:(jfloat)black {
  
#line 631
  ComAowagieTextPdfPdfContentByte_HelperCMYKWithFloat_withFloat_withFloat_withFloat_(self, cyan, magenta, yellow, black);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" k"])) append_iWithInt:self->separator_];
}

- (void)resetCMYKColorFill {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 0 0 1 k"])) append_iWithInt:self->separator_];
}


#line 659
- (void)setCMYKColorStrokeFWithFloat:(jfloat)cyan
                           withFloat:(jfloat)magenta
                           withFloat:(jfloat)yellow
                           withFloat:(jfloat)black {
  
#line 660
  ComAowagieTextPdfPdfContentByte_HelperCMYKWithFloat_withFloat_withFloat_withFloat_(self, cyan, magenta, yellow, black);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" K"])) append_iWithInt:self->separator_];
}

- (void)resetCMYKColorStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"0 0 0 1 K"])) append_iWithInt:self->separator_];
}


#line 680
- (void)moveToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 681
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" m"])) append_iWithInt:self->separator_];
}


#line 692
- (void)lineToWithFloat:(jfloat)x
              withFloat:(jfloat)y {
  
#line 693
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" l"])) append_iWithInt:self->separator_];
}


#line 707
- (void)curveToWithFloat:(jfloat)x1
               withFloat:(jfloat)y1
               withFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3 {
  
#line 708
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x1])) appendWithChar:' '])) appendWithFloat:y1])) appendWithChar:' '])) appendWithFloat:x2])) appendWithChar:' '])) appendWithFloat:y2])) appendWithChar:' '])) appendWithFloat:x3])) appendWithChar:' '])) appendWithFloat:y3])) appendWithNSString:@" c"])) append_iWithInt:self->separator_];
}


#line 720
- (void)curveToWithFloat:(jfloat)x2
               withFloat:(jfloat)y2
               withFloat:(jfloat)x3
               withFloat:(jfloat)y3 {
  
#line 721
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x2])) appendWithChar:' '])) appendWithFloat:y2])) appendWithChar:' '])) appendWithFloat:x3])) appendWithChar:' '])) appendWithFloat:y3])) appendWithNSString:@" v"])) append_iWithInt:self->separator_];
}


#line 739
- (void)rectangleWithFloat:(jfloat)x
                 withFloat:(jfloat)y
                 withFloat:(jfloat)w
                 withFloat:(jfloat)h {
  
#line 740
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithChar:' '])) appendWithFloat:w])) appendWithChar:' '])) appendWithFloat:h])) appendWithNSString:@" re"])) append_iWithInt:self->separator_];
}


#line 743
- (jboolean)compareColorsWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)c1
                         withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)c2 {
  return ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, c1, c2);
}


#line 762
- (void)variableRectangleWithComAowagieTextRectangle:(ComAowagieTextRectangle *)rect {
  ComAowagieTextPdfPdfContentByte_variableRectangleWithComAowagieTextRectangle_(self, rect);
}


#line 907
- (void)rectangleWithComAowagieTextRectangle:(ComAowagieTextRectangle *)rectangle {
  
#line 909
  jfloat x1 = [((ComAowagieTextRectangle *) nil_chk(rectangle)) getLeft];
  jfloat y1 = [rectangle getBottom];
  jfloat x2 = [rectangle getRight];
  jfloat y2 = [rectangle getTop];
  
#line 915
  HarmonyJavaAwtColor *background = [rectangle getBackgroundColor];
  if (background != nil) {
    [self setColorFillWithHarmonyJavaAwtColor:background];
    [self rectangleWithFloat:x1 withFloat:y1 withFloat:x2 - x1 withFloat:y2 - y1];
    [self fill];
    [self resetRGBColorFill];
  }
  
#line 924
  if (![rectangle hasBorders]) {
    return;
  }
  
#line 931
  if ([rectangle isUseVariableBorders]) {
    ComAowagieTextPdfPdfContentByte_variableRectangleWithComAowagieTextRectangle_(self, rectangle);
  }
  else {
    
#line 936
    if ([rectangle getBorderWidth] != ComAowagieTextRectangle_UNDEFINED) {
      [self setLineWidthWithFloat:[rectangle getBorderWidth]];
    }
    
#line 941
    HarmonyJavaAwtColor *color = [rectangle getBorderColor];
    if (color != nil) {
      [self setColorStrokeWithHarmonyJavaAwtColor:color];
    }
    
#line 947
    if ([rectangle hasBorderWithInt:ComAowagieTextRectangle_BOX]) {
      [self rectangleWithFloat:x1 withFloat:y1 withFloat:x2 - x1 withFloat:y2 - y1];
    }
    else {
      
#line 952
      if ([rectangle hasBorderWithInt:ComAowagieTextRectangle_RIGHT]) {
        [self moveToWithFloat:x2 withFloat:y1];
        [self lineToWithFloat:x2 withFloat:y2];
      }
      if ([rectangle hasBorderWithInt:ComAowagieTextRectangle_LEFT]) {
        [self moveToWithFloat:x1 withFloat:y1];
        [self lineToWithFloat:x1 withFloat:y2];
      }
      if ([rectangle hasBorderWithInt:ComAowagieTextRectangle_BOTTOM]) {
        [self moveToWithFloat:x1 withFloat:y1];
        [self lineToWithFloat:x2 withFloat:y1];
      }
      if ([rectangle hasBorderWithInt:ComAowagieTextRectangle_TOP]) {
        [self moveToWithFloat:x1 withFloat:y2];
        [self lineToWithFloat:x2 withFloat:y2];
      }
    }
    
#line 970
    [self stroke];
    
#line 972
    if (color != nil) {
      [self resetRGBColorStroke];
    }
  }
}


#line 983
- (void)closePath {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"h"])) append_iWithInt:self->separator_];
}


#line 991
- (void)newPath {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"n"])) append_iWithInt:self->separator_];
}


#line 999
- (void)stroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"S"])) append_iWithInt:self->separator_];
}


#line 1007
- (void)closePathStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"s"])) append_iWithInt:self->separator_];
}


#line 1015
- (void)fill {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"f"])) append_iWithInt:self->separator_];
}


#line 1023
- (void)eoFill {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"f*"])) append_iWithInt:self->separator_];
}


#line 1033
- (void)closePathFillStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"b"])) append_iWithInt:self->separator_];
}


#line 1043
- (void)closePathEoFillStroke {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"b*"])) append_iWithInt:self->separator_];
}


#line 1053
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image {
  ComAowagieTextPdfPdfContentByte_addImageWithComAowagieTextImage_withBoolean_(self, image, false);
}


#line 1064
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                            withBoolean:(jboolean)inlineImage {
  ComAowagieTextPdfPdfContentByte_addImageWithComAowagieTextImage_withBoolean_(self, image, inlineImage);
}


#line 1087
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                              withFloat:(jfloat)a
                              withFloat:(jfloat)b
                              withFloat:(jfloat)c
                              withFloat:(jfloat)d
                              withFloat:(jfloat)e
                              withFloat:(jfloat)f {
  
#line 1088
  [self addImageWithComAowagieTextImage:image withFloat:a withFloat:b withFloat:c withFloat:d withFloat:e withFloat:f withBoolean:false];
}


#line 1105
- (void)addImageWithComAowagieTextImage:(ComAowagieTextImage *)image
                              withFloat:(jfloat)a
                              withFloat:(jfloat)b
                              withFloat:(jfloat)c
                              withFloat:(jfloat)d
                              withFloat:(jfloat)e
                              withFloat:(jfloat)f
                            withBoolean:(jboolean)inlineImage {
  
#line 1106
  @try {
    if ([((ComAowagieTextImage *) nil_chk(image)) getLayer] != nil) {
      ComAowagieTextPdfPdfContentByte_beginLayerWithComAowagieTextPdfPdfOCG_(self, [image getLayer]);
    }
    if ([image isImgTemplate]) {
      (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectImageSimpleWithComAowagieTextImage:image];
      ComAowagieTextPdfPdfTemplate *template_ = [image getTemplateData];
      jfloat w = [((ComAowagieTextPdfPdfTemplate *) nil_chk(template_)) getWidth];
      jfloat h = [template_ getHeight];
      [self addTemplateWithComAowagieTextPdfPdfTemplate:template_ withFloat:a / w withFloat:b / w withFloat:c / h withFloat:d / h withFloat:e withFloat:f];
    }
    else {
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"q "];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:a])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:b])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:c])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:d])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:e])) appendWithChar:' '];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:f])) appendWithNSString:@" cm"];
      if (inlineImage) {
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"\nBI\n"];
        ComAowagieTextPdfPdfImage *pimage = new_ComAowagieTextPdfPdfImage_initWithComAowagieTextImage_withNSString_withComAowagieTextPdfPdfIndirectReference_(image, @"", nil);
        if ([image isKindOfClass:[ComAowagieTextImgJBIG2 class]]) {
          IOSByteArray *globals = [((ComAowagieTextImgJBIG2 *) image) getGlobalBytes];
          if (globals != nil) {
            ComAowagieTextPdfPdfDictionary *decodeparms = new_ComAowagieTextPdfPdfDictionary_init();
            [decodeparms putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, JBIG2GLOBALS) withComAowagieTextPdfPdfObject:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getReferenceJBIG2GlobalsWithByteArray:globals]];
            [pimage putWithComAowagieTextPdfPdfName:JreLoadStatic(ComAowagieTextPdfPdfName, DECODEPARMS) withComAowagieTextPdfPdfObject:decodeparms];
          }
        }
        for (id __strong element in nil_chk([pimage getKeys])) {
          ComAowagieTextPdfPdfName *key = (ComAowagieTextPdfPdfName *) cast_chk(element, [ComAowagieTextPdfPdfName class]);
          ComAowagieTextPdfPdfObject *value = [pimage getWithComAowagieTextPdfPdfName:key];
          NSString *s = [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) getWithId:key];
          if (s == nil) {
            continue;
          }
          (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:s];
          jboolean check = true;
          if ([((ComAowagieTextPdfPdfName *) nil_chk(key)) isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE)] && [((ComAowagieTextPdfPdfObject *) nil_chk(value)) isArray]) {
            ComAowagieTextPdfPdfArray *ar = (ComAowagieTextPdfPdfArray *) cast_chk(value, [ComAowagieTextPdfPdfArray class]);
            if ([((ComAowagieTextPdfPdfArray *) nil_chk(ar)) size] == 4 &&
#line 1148
            [((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, INDEXED))) isEqual:[ar getAsNameWithInt:0]] &&
#line 1149
            [((ComAowagieTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:1])) isName] &&
#line 1150
            [((ComAowagieTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:2])) isNumber] &&
#line 1151
            [((ComAowagieTextPdfPdfObject *) nil_chk([ar getPdfObjectWithInt:3])) isString]) {
              
#line 1153
              check = false;
            }
          }
          
#line 1157
          if (check && [key isEqual:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE)] && ![((ComAowagieTextPdfPdfObject *) nil_chk(value)) isName]) {
            ComAowagieTextPdfPdfName *cs = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getColorspaceName];
            ComAowagieTextPdfPageResources *prs = [self getPageResources];
            (void) [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addColorWithComAowagieTextPdfPdfName:cs withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfIndirectObject *) nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addToBodyWithComAowagieTextPdfPdfObject:value])) getIndirectReference]];
            value = cs;
          }
          [((ComAowagieTextPdfPdfObject *) nil_chk(value)) toPdfWithComAowagieTextPdfPdfWriter:nil withJavaIoOutputStream:self->content_];
          (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:0x000a];
        }
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"ID\n"];
        [pimage writeContentWithJavaIoOutputStream:self->content_];
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"\nEI\nQ"])) append_iWithInt:self->separator_];
      }
      else {
        ComAowagieTextPdfPdfName *name;
        ComAowagieTextPdfPageResources *prs = [self getPageResources];
        ComAowagieTextImage *maskImage = [image getImageMask];
        if (maskImage != nil) {
          name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectImageSimpleWithComAowagieTextImage:maskImage];
          (void) [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addXObjectWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getImageReferenceWithComAowagieTextPdfPdfName:name]];
        }
        name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectImageSimpleWithComAowagieTextImage:image];
        name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addXObjectWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) getImageReferenceWithComAowagieTextPdfPdfName:name]];
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:self->separator_];
      }
    }
    if ([image hasBorders]) {
      [self saveState];
      jfloat w = [image getWidth];
      jfloat h = [image getHeight];
      [self concatCTMWithFloat:a / w withFloat:b / w withFloat:c / h withFloat:d / h withFloat:e withFloat:f];
      [self rectangleWithComAowagieTextRectangle:image];
      [self restoreState];
    }
    if ([image getLayer] != nil) {
      ComAowagieTextPdfPdfContentByte_endLayer(self);
    }
    ComAowagieTextAnnotation *annot = [image getAnnotation];
    if (annot == nil) {
      return;
    }
    IOSFloatArray *r = [IOSFloatArray newArrayWithLength:((IOSFloatArray *) nil_chk(ComAowagieTextPdfPdfContentByte_unitRect))->size_];
    for (jint k = 0; k < ComAowagieTextPdfPdfContentByte_unitRect->size_; k += 2) {
      *IOSFloatArray_GetRef(r, k) = a * IOSFloatArray_Get(ComAowagieTextPdfPdfContentByte_unitRect, k) + c * IOSFloatArray_Get(ComAowagieTextPdfPdfContentByte_unitRect, k + 1) + e;
      *IOSFloatArray_GetRef(r, k + 1) = b * IOSFloatArray_Get(ComAowagieTextPdfPdfContentByte_unitRect, k) + d * IOSFloatArray_Get(ComAowagieTextPdfPdfContentByte_unitRect, k + 1) + f;
    }
    jfloat llx = IOSFloatArray_Get(r, 0);
    jfloat lly = IOSFloatArray_Get(r, 1);
    jfloat urx = llx;
    jfloat ury = lly;
    for (jint k = 2; k < r->size_; k += 2) {
      llx = JavaLangMath_minWithFloat_withFloat_(llx, IOSFloatArray_Get(r, k));
      lly = JavaLangMath_minWithFloat_withFloat_(lly, IOSFloatArray_Get(r, k + 1));
      urx = JavaLangMath_maxWithFloat_withFloat_(urx, IOSFloatArray_Get(r, k));
      ury = JavaLangMath_maxWithFloat_withFloat_(ury, IOSFloatArray_Get(r, k + 1));
    }
    annot = new_ComAowagieTextAnnotation_initWithComAowagieTextAnnotation_(annot);
    [annot setDimensionsWithFloat:llx withFloat:lly withFloat:urx withFloat:ury];
    ComAowagieTextPdfPdfAnnotation *an = ComAowagieTextPdfInternalPdfAnnotationsImp_convertAnnotationWithComAowagieTextPdfPdfWriter_withComAowagieTextAnnotation_withComAowagieTextRectangle_(self->writer_, annot, new_ComAowagieTextRectangle_initWithFloat_withFloat_withFloat_withFloat_(llx, lly, urx, ury));
    if (an == nil) {
      return;
    }
    [self addAnnotationWithComAowagieTextPdfPdfAnnotation:an];
  }
  @catch (JavaLangException *ee) {
    @throw new_ComAowagieTextDocumentException_initWithJavaLangException_(ee);
  }
}


#line 1230
- (void)reset {
  ComAowagieTextPdfPdfContentByte_resetWithBoolean_(self, true);
}


#line 1239
- (void)resetWithBoolean:(jboolean)validateContent {
  ComAowagieTextPdfPdfContentByte_resetWithBoolean_(self, validateContent);
}


#line 1251
- (void)beginText {
  if (self->inText_) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced begin/end text operators.");
  }
  self->inText_ = true;
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->xTLM_ = 0;
  self->state_->yTLM_ = 0;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"BT"])) append_iWithInt:self->separator_];
}


#line 1264
- (void)endText {
  if (!self->inText_) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced begin/end text operators.");
  }
  self->inText_ = false;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"ET"])) append_iWithInt:self->separator_];
}


#line 1276
- (void)saveState {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"q"])) append_iWithInt:self->separator_];
  [((JavaUtilArrayList *) nil_chk(self->stateList_)) addWithId:new_ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(self->state_)];
}


#line 1285
- (void)restoreState {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"Q"])) append_iWithInt:self->separator_];
  jint idx = [((JavaUtilArrayList *) nil_chk(self->stateList_)) size] - 1;
  if (idx < 0) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced save/restore state operators.");
  }
  self->state_ = [self->stateList_ getWithInt:idx];
  (void) [self->stateList_ removeWithInt:idx];
}


#line 1300
- (void)setCharacterSpacingWithFloat:(jfloat)charSpace {
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->charSpace_ = charSpace;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:charSpace])) appendWithNSString:@" Tc"])) append_iWithInt:self->separator_];
}


#line 1310
- (void)setWordSpacingWithFloat:(jfloat)wordSpace {
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->wordSpace_ = wordSpace;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:wordSpace])) appendWithNSString:@" Tw"])) append_iWithInt:self->separator_];
}


#line 1320
- (void)setHorizontalScalingWithFloat:(jfloat)scale_ {
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->scale__ = scale_;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:scale_])) appendWithNSString:@" Tz"])) append_iWithInt:self->separator_];
}


#line 1333
- (void)setLeadingWithFloat:(jfloat)leading {
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->leading_ = leading;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:leading])) appendWithNSString:@" TL"])) append_iWithInt:self->separator_];
}


#line 1344
- (void)setFontAndSizeWithComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf
                                          withFloat:(jfloat)size {
  
#line 1345
  [self checkWriter];
  if (size < 0.0001f && size > -0.0001f) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F", @"Font size too small: ", size));
  }
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->size_ = size;
  self->state_->fontDetails_ = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleWithComAowagieTextPdfBaseFont:bf];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfFontDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_)) getFontName];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addFontWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfFontDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_)) getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithChar:' '])) appendWithFloat:size])) appendWithNSString:@" Tf"])) append_iWithInt:self->separator_];
}


#line 1362
- (void)setTextRenderingModeWithInt:(jint)rendering {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithInt:rendering])) appendWithNSString:@" Tr"])) append_iWithInt:self->separator_];
}


#line 1373
- (void)setTextRiseWithFloat:(jfloat)rise {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:rise])) appendWithNSString:@" Ts"])) append_iWithInt:self->separator_];
}


#line 1383
- (void)showText2WithNSString:(NSString *)text {
  ComAowagieTextPdfPdfContentByte_showText2WithNSString_(self, text);
}


#line 1396
- (void)showTextWithNSString:(NSString *)text {
  ComAowagieTextPdfPdfContentByte_showText2WithNSString_(self, text);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"Tj"])) append_iWithInt:self->separator_];
}


#line 1407
+ (ComAowagieTextPdfPdfTextArray *)getKernArrayWithNSString:(NSString *)text
                              withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)font {
  return ComAowagieTextPdfPdfContentByte_getKernArrayWithNSString_withComAowagieTextPdfBaseFont_(text, font);
}


#line 1437
- (void)showTextKernedWithNSString:(NSString *)text {
  ComAowagieTextPdfPdfContentByte_showTextKernedWithNSString_(self, text);
}


#line 1465
- (void)setTextMatrixWithFloat:(jfloat)a
                     withFloat:(jfloat)b
                     withFloat:(jfloat)c
                     withFloat:(jfloat)d
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y {
  
#line 1466
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->xTLM_ = x;
  self->state_->yTLM_ = y;
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:a])) appendWithChar:' '])) appendWithFloat:b])) append_iWithInt:' '])) appendWithFloat:
#line 1469
  c])) append_iWithInt:' '])) appendWithFloat:d])) append_iWithInt:' '])) appendWithFloat:
#line 1470
  x])) append_iWithInt:' '])) appendWithFloat:y])) appendWithNSString:@" Tm"])) append_iWithInt:self->separator_];
}


#line 1481
- (void)setTextMatrixWithFloat:(jfloat)x
                     withFloat:(jfloat)y {
  
#line 1482
  [self setTextMatrixWithFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:x withFloat:y];
}


#line 1491
- (void)moveTextWithFloat:(jfloat)x
                withFloat:(jfloat)y {
  
#line 1492
  JrePlusAssignFloatF(&((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->xTLM_, x);
  JrePlusAssignFloatF(&self->state_->yTLM_, y);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:x])) appendWithChar:' '])) appendWithFloat:y])) appendWithNSString:@" Td"])) append_iWithInt:self->separator_];
}


#line 1506
- (jint)size {
  return [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) size];
}


#line 1516
+ (IOSByteArray *)escapeStringWithByteArray:(IOSByteArray *)b {
  return ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(b);
}


#line 1528
+ (void)escapeStringWithByteArray:(IOSByteArray *)b
  withComAowagieTextPdfByteBuffer:(ComAowagieTextPdfByteBuffer *)content {
  ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_withComAowagieTextPdfByteBuffer_(b, content);
}


#line 1565
- (ComAowagieTextPdfPdfOutline *)getRootOutline {
  [self checkWriter];
  return [((ComAowagieTextPdfPdfDocument *) nil_chk(self->pdf_)) getRootOutline];
}


#line 1581
- (jfloat)getEffectiveStringWidthWithNSString:(NSString *)text
                                  withBoolean:(jboolean)kerned {
  return ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(self, text, kerned);
}


#line 1619
- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation {
  
#line 1620
  ComAowagieTextPdfPdfContentByte_showTextAlignedWithInt_withNSString_withFloat_withFloat_withFloat_withBoolean_(self, alignment, text, x, y, rotation, false);
}


#line 1623
- (void)showTextAlignedWithInt:(jint)alignment
                  withNSString:(NSString *)text
                     withFloat:(jfloat)x
                     withFloat:(jfloat)y
                     withFloat:(jfloat)rotation
                   withBoolean:(jboolean)kerned {
  ComAowagieTextPdfPdfContentByte_showTextAlignedWithInt_withNSString_withFloat_withFloat_withFloat_withBoolean_(self, alignment, text, x, y, rotation, kerned);
}


#line 1681
- (void)concatCTMWithFloat:(jfloat)a
                 withFloat:(jfloat)b
                 withFloat:(jfloat)c
                 withFloat:(jfloat)d
                 withFloat:(jfloat)e
                 withFloat:(jfloat)f {
  
#line 1682
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:a])) appendWithChar:' '])) appendWithFloat:b])) appendWithChar:' '])) appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:d])) appendWithChar:' '])) appendWithFloat:e])) appendWithChar:' '])) appendWithFloat:f])) appendWithNSString:@" cm"])) append_iWithInt:self->separator_];
}


#line 1710
+ (JavaUtilArrayList *)bezierArcWithFloat:(jfloat)x1
                                withFloat:(jfloat)y1
                                withFloat:(jfloat)x2
                                withFloat:(jfloat)y2
                                withFloat:(jfloat)startAng
                                withFloat:(jfloat)extent {
  return ComAowagieTextPdfPdfContentByte_bezierArcWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(x1, y1, x2, y2, startAng, extent);
}


#line 1783
- (void)arcWithFloat:(jfloat)x1
           withFloat:(jfloat)y1
           withFloat:(jfloat)x2
           withFloat:(jfloat)y2
           withFloat:(jfloat)startAng
           withFloat:(jfloat)extent {
  
#line 1784
  JavaUtilArrayList *ar = ComAowagieTextPdfPdfContentByte_bezierArcWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(x1, y1, x2, y2, startAng, extent);
  if ([((JavaUtilArrayList *) nil_chk(ar)) isEmpty]) {
    return;
  }
  IOSFloatArray *pt = [ar getWithInt:0];
  [self moveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 0) withFloat:IOSFloatArray_Get(pt, 1)];
  for (jint k = 0; k < [ar size]; ++k) {
    pt = [ar getWithInt:k];
    [self curveToWithFloat:IOSFloatArray_Get(nil_chk(pt), 2) withFloat:IOSFloatArray_Get(pt, 3) withFloat:IOSFloatArray_Get(pt, 4) withFloat:IOSFloatArray_Get(pt, 5) withFloat:IOSFloatArray_Get(pt, 6) withFloat:IOSFloatArray_Get(pt, 7)];
  }
}


#line 1809
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height
                                                     withFloat:(jfloat)xstep
                                                     withFloat:(jfloat)ystep {
  return ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_(self, width, height, xstep, ystep);
}


#line 1830
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height {
  
#line 1831
  return ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_(self, width, height, width, height);
}


#line 1846
- (ComAowagieTextPdfPdfPatternPainter *)createPatternWithFloat:(jfloat)width
                                                     withFloat:(jfloat)height
                                                     withFloat:(jfloat)xstep
                                                     withFloat:(jfloat)ystep
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  return ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_withHarmonyJavaAwtColor_(self, width, height, xstep, ystep, color);
}


#line 1864
- (ComAowagieTextPdfPdfTemplate *)createTemplateWithFloat:(jfloat)width
                                                withFloat:(jfloat)height
                             withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)forcedName {
  return ComAowagieTextPdfPdfContentByte_createTemplateWithFloat_withFloat_withComAowagieTextPdfPdfName_(self, width, height, forcedName);
}


#line 1875
- (ComAowagieTextPdfPdfAppearance *)createAppearanceWithFloat:(jfloat)width
                                                    withFloat:(jfloat)height
                                 withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)forcedName {
  return ComAowagieTextPdfPdfContentByte_createAppearanceWithFloat_withFloat_withComAowagieTextPdfPdfName_(self, width, height, forcedName);
}


#line 1897
- (void)addTemplateWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_
                                          withFloat:(jfloat)a
                                          withFloat:(jfloat)b
                                          withFloat:(jfloat)c
                                          withFloat:(jfloat)d
                                          withFloat:(jfloat)e
                                          withFloat:(jfloat)f {
  
#line 1898
  [self checkWriter];
  ComAowagieTextPdfPdfContentByte_checkNoPatternWithComAowagieTextPdfPdfTemplate_(self, template_);
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectTemplateSimpleWithComAowagieTextPdfPdfTemplate:template_ withComAowagieTextPdfPdfName:nil];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addXObjectWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfPdfTemplate *) nil_chk(template_)) getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"q "];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:a])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:b])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:d])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:e])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:f])) appendWithNSString:@" cm "];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:self->separator_];
}


#line 1913
- (void)addTemplateReferenceWithComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *)template_
                                         withComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)name
                                                            withFloat:(jfloat)a
                                                            withFloat:(jfloat)b
                                                            withFloat:(jfloat)c
                                                            withFloat:(jfloat)d
                                                            withFloat:(jfloat)e
                                                            withFloat:(jfloat)f {
  
#line 1914
  [self checkWriter];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addXObjectWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:template_];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"q "];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:a])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:b])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:c])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:d])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:e])) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:f])) appendWithNSString:@" cm "];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" Do Q"])) append_iWithInt:self->separator_];
}


#line 1934
- (void)addTemplateWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)template_
                                          withFloat:(jfloat)x
                                          withFloat:(jfloat)y {
  
#line 1935
  [self addTemplateWithComAowagieTextPdfPdfTemplate:template_ withFloat:1 withFloat:0 withFloat:0 withFloat:1 withFloat:x withFloat:y];
}


#line 1956
- (void)setCMYKColorFillWithInt:(jint)cyan
                        withInt:(jint)magenta
                        withInt:(jint)yellow
                        withInt:(jint)black {
  
#line 1957
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (cyan & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (magenta & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (yellow & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (black & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" k"])) append_iWithInt:self->separator_];
}


#line 1983
- (void)setCMYKColorStrokeWithInt:(jint)cyan
                          withInt:(jint)magenta
                          withInt:(jint)yellow
                          withInt:(jint)black {
  
#line 1984
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (cyan & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (magenta & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (yellow & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) (black & (jint) 0xFF) / (jint) 0xFF];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" K"])) append_iWithInt:self->separator_];
}


#line 2011
- (void)setRGBColorFillWithInt:(jint)red
                       withInt:(jint)green
                       withInt:(jint)blue {
  
#line 2012
  ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(self, (jfloat) (red & (jint) 0xFF) / (jint) 0xFF, (jfloat) (green & (jint) 0xFF) / (jint) 0xFF, (jfloat) (blue & (jint) 0xFF) / (jint) 0xFF);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" rg"])) append_iWithInt:self->separator_];
}


#line 2032
- (void)setRGBColorStrokeWithInt:(jint)red
                         withInt:(jint)green
                         withInt:(jint)blue {
  
#line 2033
  ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(self, (jfloat) (red & (jint) 0xFF) / (jint) 0xFF, (jfloat) (green & (jint) 0xFF) / (jint) 0xFF, (jfloat) (blue & (jint) 0xFF) / (jint) 0xFF);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" RG"])) append_iWithInt:self->separator_];
}

- (void)setColorStrokeWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(self->writer_, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, color);
  jint type = ComAowagieTextPdfExtendedColor_getTypeWithHarmonyJavaAwtColor_(color);
  switch (type) {
    case ComAowagieTextPdfExtendedColor_TYPE_GRAY:
    {
      
#line 2046
      [self setGrayStrokeWithFloat:[((ComAowagieTextPdfGrayColor *) nil_chk(((ComAowagieTextPdfGrayColor *) cast_chk(color, [ComAowagieTextPdfGrayColor class])))) getGray]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2050
      ComAowagieTextPdfCMYKColor *cmyk = (ComAowagieTextPdfCMYKColor *) cast_chk(color, [ComAowagieTextPdfCMYKColor class]);
      [self setCMYKColorStrokeFWithFloat:[((ComAowagieTextPdfCMYKColor *) nil_chk(cmyk)) getCyan] withFloat:[cmyk getMagenta] withFloat:[cmyk getYellow] withFloat:[cmyk getBlack]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_SEPARATION:
    {
      
#line 2055
      ComAowagieTextPdfSpotColor *spot = (ComAowagieTextPdfSpotColor *) cast_chk(color, [ComAowagieTextPdfSpotColor class]);
      [self setColorStrokeWithComAowagieTextPdfPdfSpotColor:[((ComAowagieTextPdfSpotColor *) nil_chk(spot)) getPdfSpotColor] withFloat:[spot getTint]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_PATTERN:
    {
      
#line 2060
      ComAowagieTextPdfPatternColor *pat = (ComAowagieTextPdfPatternColor *) cast_chk(color, [ComAowagieTextPdfPatternColor class]);
      [self setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:[((ComAowagieTextPdfPatternColor *) nil_chk(pat)) getPainter]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_SHADING:
    {
      
#line 2065
      ComAowagieTextPdfShadingColor *shading = (ComAowagieTextPdfShadingColor *) cast_chk(color, [ComAowagieTextPdfShadingColor class]);
      [self setShadingStrokeWithComAowagieTextPdfPdfShadingPattern:[((ComAowagieTextPdfShadingColor *) nil_chk(shading)) getPdfShadingPattern]];
      break;
    }
    default:
    [self setRGBColorStrokeWithInt:[((HarmonyJavaAwtColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue]];
  }
}


#line 2078
- (void)setColorFillWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(self->writer_, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, color);
  jint type = ComAowagieTextPdfExtendedColor_getTypeWithHarmonyJavaAwtColor_(color);
  switch (type) {
    case ComAowagieTextPdfExtendedColor_TYPE_GRAY:
    {
      
#line 2083
      [self setGrayFillWithFloat:[((ComAowagieTextPdfGrayColor *) nil_chk(((ComAowagieTextPdfGrayColor *) cast_chk(color, [ComAowagieTextPdfGrayColor class])))) getGray]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2087
      ComAowagieTextPdfCMYKColor *cmyk = (ComAowagieTextPdfCMYKColor *) cast_chk(color, [ComAowagieTextPdfCMYKColor class]);
      [self setCMYKColorFillFWithFloat:[((ComAowagieTextPdfCMYKColor *) nil_chk(cmyk)) getCyan] withFloat:[cmyk getMagenta] withFloat:[cmyk getYellow] withFloat:[cmyk getBlack]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_SEPARATION:
    {
      
#line 2092
      ComAowagieTextPdfSpotColor *spot = (ComAowagieTextPdfSpotColor *) cast_chk(color, [ComAowagieTextPdfSpotColor class]);
      [self setColorFillWithComAowagieTextPdfPdfSpotColor:[((ComAowagieTextPdfSpotColor *) nil_chk(spot)) getPdfSpotColor] withFloat:[spot getTint]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_PATTERN:
    {
      
#line 2097
      ComAowagieTextPdfPatternColor *pat = (ComAowagieTextPdfPatternColor *) cast_chk(color, [ComAowagieTextPdfPatternColor class]);
      [self setPatternFillWithComAowagieTextPdfPdfPatternPainter:[((ComAowagieTextPdfPatternColor *) nil_chk(pat)) getPainter]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_SHADING:
    {
      
#line 2102
      ComAowagieTextPdfShadingColor *shading = (ComAowagieTextPdfShadingColor *) cast_chk(color, [ComAowagieTextPdfShadingColor class]);
      [self setShadingFillWithComAowagieTextPdfPdfShadingPattern:[((ComAowagieTextPdfShadingColor *) nil_chk(shading)) getPdfShadingPattern]];
      break;
    }
    default:
    [self setRGBColorFillWithInt:[((HarmonyJavaAwtColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue]];
  }
}


#line 2116
- (void)setColorFillWithComAowagieTextPdfPdfSpotColor:(ComAowagieTextPdfPdfSpotColor *)sp
                                            withFloat:(jfloat)tint {
  
#line 2117
  [self checkWriter];
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_ = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleWithComAowagieTextPdfPdfSpotColor:sp];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfColorDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_)) getColorName];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addColorWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfColorDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_)) getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" cs "])) appendWithFloat:tint])) appendWithNSString:@" scn"])) append_iWithInt:self->separator_];
}


#line 2130
- (void)setColorStrokeWithComAowagieTextPdfPdfSpotColor:(ComAowagieTextPdfPdfSpotColor *)sp
                                              withFloat:(jfloat)tint {
  
#line 2131
  [self checkWriter];
  ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_ = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleWithComAowagieTextPdfPdfSpotColor:sp];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfColorDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_)) getColorName];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addColorWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[((ComAowagieTextPdfColorDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->colorDetails_)) getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" CS "])) appendWithFloat:tint])) appendWithNSString:@" SCN"])) append_iWithInt:self->separator_];
}


#line 2143
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p {
  if ([((ComAowagieTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    ComAowagieTextPdfPdfContentByte_setPatternFillWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(self, p, [p getDefaultColor]);
    return;
  }
  [self checkWriter];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:p];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[p getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, PATTERN))) getBytes]])) appendWithNSString:@" cs "])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:self->separator_];
}


#line 2159
- (void)outputColorNumbersWithHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                        withFloat:(jfloat)tint {
  ComAowagieTextPdfPdfContentByte_outputColorNumbersWithHarmonyJavaAwtColor_withFloat_(self, color, tint);
}


#line 2191
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                     withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextPdfPdfContentByte_setPatternFillWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(self, p, color);
}


#line 2204
- (void)setPatternFillWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                     withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                                   withFloat:(jfloat)tint {
  
#line 2205
  [self checkWriter];
  if (![((ComAowagieTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"An uncolored pattern was expected.");
  }
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:p];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[p getIndirectReference]];
  ComAowagieTextPdfColorDetails *csDetail = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternColorspaceWithHarmonyJavaAwtColor:color];
  ComAowagieTextPdfPdfName *cName = [prs addColorWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfColorDetails *) nil_chk(csDetail)) getColorName] withComAowagieTextPdfPdfIndirectReference:[csDetail getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(cName)) getBytes]])) appendWithNSString:@" cs"])) append_iWithInt:self->separator_];
  ComAowagieTextPdfPdfContentByte_outputColorNumbersWithHarmonyJavaAwtColor_withFloat_(self, color, tint);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:self->separator_];
}

- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color {
  ComAowagieTextPdfPdfContentByte_setPatternStrokeWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(self, p, color);
}


#line 2236
- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p
                                       withHarmonyJavaAwtColor:(HarmonyJavaAwtColor *)color
                                                     withFloat:(jfloat)tint {
  
#line 2237
  [self checkWriter];
  if (![((ComAowagieTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"An uncolored pattern was expected.");
  }
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:p];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[p getIndirectReference]];
  ComAowagieTextPdfColorDetails *csDetail = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternColorspaceWithHarmonyJavaAwtColor:color];
  ComAowagieTextPdfPdfName *cName = [prs addColorWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfColorDetails *) nil_chk(csDetail)) getColorName] withComAowagieTextPdfPdfIndirectReference:[csDetail getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(cName)) getBytes]])) appendWithNSString:@" CS"])) append_iWithInt:self->separator_];
  ComAowagieTextPdfPdfContentByte_outputColorNumbersWithHarmonyJavaAwtColor_withFloat_(self, color, tint);
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:self->separator_];
}

- (void)setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:(ComAowagieTextPdfPdfPatternPainter *)p {
  if ([((ComAowagieTextPdfPdfPatternPainter *) nil_chk(p)) isStencil]) {
    ComAowagieTextPdfPdfContentByte_setPatternStrokeWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(self, p, [p getDefaultColor]);
    return;
  }
  [self checkWriter];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:p];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[p getIndirectReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, PATTERN))) getBytes]])) appendWithNSString:@" CS "])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:self->separator_];
}


#line 2271
- (void)paintShadingWithComAowagieTextPdfPdfShading:(ComAowagieTextPdfPdfShading *)shading {
  ComAowagieTextPdfPdfContentByte_paintShadingWithComAowagieTextPdfPdfShading_(self, shading);
}


#line 2288
- (void)setShadingFillWithComAowagieTextPdfPdfShadingPattern:(ComAowagieTextPdfPdfShadingPattern *)shading {
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleShadingPatternWithComAowagieTextPdfPdfShadingPattern:shading];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfPdfShadingPattern *) nil_chk(shading)) getPatternName] withComAowagieTextPdfPdfIndirectReference:[shading getPatternReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, PATTERN))) getBytes]])) appendWithNSString:@" cs "])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" scn"])) append_iWithInt:self->separator_];
  ComAowagieTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil) {
    (void) [prs addColorWithComAowagieTextPdfPdfName:[details getColorName] withComAowagieTextPdfPdfIndirectReference:[details getIndirectReference]];
  }
}


#line 2303
- (void)setShadingStrokeWithComAowagieTextPdfPdfShadingPattern:(ComAowagieTextPdfPdfShadingPattern *)shading {
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleShadingPatternWithComAowagieTextPdfPdfShadingPattern:shading];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPatternWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfPdfShadingPattern *) nil_chk(shading)) getPatternName] withComAowagieTextPdfPdfIndirectReference:[shading getPatternReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(JreLoadStatic(ComAowagieTextPdfPdfName, PATTERN))) getBytes]])) appendWithNSString:@" CS "])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" SCN"])) append_iWithInt:self->separator_];
  ComAowagieTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil) {
    (void) [prs addColorWithComAowagieTextPdfPdfName:[details getColorName] withComAowagieTextPdfPdfIndirectReference:[details getIndirectReference]];
  }
}


#line 2317
- (void)checkWriter {
  if (self->writer_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"The writer in PdfContentByte is null.");
  }
}


#line 2327
- (void)showTextWithComAowagieTextPdfPdfTextArray:(ComAowagieTextPdfPdfTextArray *)text {
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Font and size must be set before writing any text");
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"["];
  JavaUtilArrayList *arrayList = [((ComAowagieTextPdfPdfTextArray *) nil_chk(text)) getArrayList];
  jboolean lastWasNumber = false;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(arrayList)) size]; ++k) {
    id obj = [arrayList getWithInt:k];
    if ([obj isKindOfClass:[NSString class]]) {
      ComAowagieTextPdfPdfContentByte_showText2WithNSString_(self, (NSString *) obj);
      lastWasNumber = false;
    }
    else {
      if (lastWasNumber) {
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
      }
      else {
        
#line 2344
        lastWasNumber = true;
      }
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:[((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(obj, [JavaLangFloat class])))) floatValue]];
    }
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"]TJ"])) append_iWithInt:self->separator_];
}


#line 2356
- (ComAowagieTextPdfPdfWriter *)getPdfWriter {
  return self->writer_;
}


#line 2364
- (ComAowagieTextPdfPdfDocument *)getPdfDocument {
  return self->pdf_;
}


#line 2378
- (ComAowagieTextPdfPdfContentByte *)getDuplicate {
  return new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(self->writer_);
}


#line 2394
- (void)roundRectangleWithFloat:(jfloat)x
                      withFloat:(jfloat)y
                      withFloat:(jfloat)w
                      withFloat:(jfloat)h
                      withFloat:(jfloat)r {
  
#line 2395
  if (w < 0) {
    JrePlusAssignFloatF(&x, w);
    w = -w;
  }
  if (h < 0) {
    JrePlusAssignFloatF(&y, h);
    h = -h;
  }
  if (r < 0) {
    r = -r;
  }
  jfloat b = 0.4477f;
  [self moveToWithFloat:x + r withFloat:y];
  [self lineToWithFloat:x + w - r withFloat:y];
  [self curveToWithFloat:x + w - r * b withFloat:y withFloat:x + w withFloat:y + r * b withFloat:x + w withFloat:y + r];
  [self lineToWithFloat:x + w withFloat:y + h - r];
  [self curveToWithFloat:x + w withFloat:y + h - r * b withFloat:x + w - r * b withFloat:y + h withFloat:x + w - r withFloat:y + h];
  [self lineToWithFloat:x + r withFloat:y + h];
  [self curveToWithFloat:x + r * b withFloat:y + h withFloat:x withFloat:y + h - r * b withFloat:x withFloat:y + h - r];
  [self lineToWithFloat:x withFloat:y + r];
  [self curveToWithFloat:x withFloat:y + r * b withFloat:x + r * b withFloat:y withFloat:x + r withFloat:y];
}


#line 2425
- (void)setActionWithComAowagieTextPdfPdfAction:(ComAowagieTextPdfPdfAction *)action
                                      withFloat:(jfloat)llx
                                      withFloat:(jfloat)lly
                                      withFloat:(jfloat)urx
                                      withFloat:(jfloat)ury {
  
#line 2426
  [((ComAowagieTextPdfPdfDocument *) nil_chk(self->pdf_)) setActionWithComAowagieTextPdfPdfAction:action withFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}


#line 2432
- (void)setLiteralWithNSString:(NSString *)s {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:s];
}


#line 2439
- (void)setLiteralWithChar:(jchar)c {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:c];
}


#line 2446
- (void)setLiteralWithFloat:(jfloat)n {
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:n];
}


#line 2453
- (void)checkNoPatternWithComAowagieTextPdfPdfTemplate:(ComAowagieTextPdfPdfTemplate *)t {
  ComAowagieTextPdfPdfContentByte_checkNoPatternWithComAowagieTextPdfPdfTemplate_(self, t);
}


#line 2467
- (void)drawRadioFieldWithFloat:(jfloat)llx
                      withFloat:(jfloat)lly
                      withFloat:(jfloat)urx
                      withFloat:(jfloat)ury
                    withBoolean:(jboolean)on {
  
#line 2468
  if (llx > urx) {
    
#line 2468
    jfloat x = llx;
    
#line 2468
    llx = urx;
    
#line 2468
    urx = x;
  }
  
#line 2469
  if (lly > ury) {
    
#line 2469
    jfloat y = lly;
    
#line 2469
    lly = ury;
    
#line 2469
    ury = y;
  }
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xC0, (jint) 0xC0, (jint) 0xC0)];
  [self arcWithFloat:llx + 1.0f withFloat:lly + 1.0f withFloat:urx - 1.0f withFloat:ury - 1.0f withFloat:0.0f withFloat:360.0f];
  [self stroke];
  
#line 2477
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xA0, (jint) 0xA0, (jint) 0xA0)];
  [self arcWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - 0.5f withFloat:ury - 0.5f withFloat:45 withFloat:180];
  [self stroke];
  
#line 2483
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:1];
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0x00, (jint) 0x00, (jint) 0x00)];
  [self arcWithFloat:llx + 1.5f withFloat:lly + 1.5f withFloat:urx - 1.5f withFloat:ury - 1.5f withFloat:45 withFloat:180];
  [self stroke];
  if (on) {
    
#line 2490
    [self setLineWidthWithFloat:1];
    [self setLineCapWithInt:1];
    [self setColorFillWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0x00, (jint) 0x00, (jint) 0x00)];
    [self arcWithFloat:llx + 4.0f withFloat:lly + 4.0f withFloat:urx - 4.0f withFloat:ury - 4.0f withFloat:0 withFloat:360];
    [self fill];
  }
}


#line 2505
- (void)drawTextFieldWithFloat:(jfloat)llx
                     withFloat:(jfloat)lly
                     withFloat:(jfloat)urx
                     withFloat:(jfloat)ury {
  
#line 2506
  if (llx > urx) {
    
#line 2506
    jfloat x = llx;
    
#line 2506
    llx = urx;
    
#line 2506
    urx = x;
  }
  
#line 2507
  if (lly > ury) {
    
#line 2507
    jfloat y = lly;
    
#line 2507
    lly = ury;
    
#line 2507
    ury = y;
  }
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xC0, (jint) 0xC0, (jint) 0xC0)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self rectangleWithFloat:llx withFloat:lly withFloat:urx - llx withFloat:ury - lly];
  [self stroke];
  
#line 2515
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self setColorFillWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xFF, (jint) 0xFF, (jint) 0xFF)];
  [self rectangleWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - llx - 1.0f withFloat:ury - lly - 1.0f];
  [self fill];
  
#line 2521
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xC0, (jint) 0xC0, (jint) 0xC0)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.5f];
  [self lineToWithFloat:urx - 1.5f withFloat:lly + 1.5f];
  [self lineToWithFloat:urx - 1.5f withFloat:ury - 1.0f];
  [self stroke];
  
#line 2529
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xA0, (jint) 0xA0, (jint) 0xA0)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1];
  [self lineToWithFloat:llx + 1.0f withFloat:ury - 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 2537
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0x00, (jint) 0x00, (jint) 0x00)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 2.0f withFloat:lly + 2.0f];
  [self lineToWithFloat:llx + 2.0f withFloat:ury - 2.0f];
  [self lineToWithFloat:urx - 2.0f withFloat:ury - 2.0f];
  [self stroke];
}


#line 2556
- (void)drawButtonWithFloat:(jfloat)llx
                  withFloat:(jfloat)lly
                  withFloat:(jfloat)urx
                  withFloat:(jfloat)ury
               withNSString:(NSString *)text
withComAowagieTextPdfBaseFont:(ComAowagieTextPdfBaseFont *)bf
                  withFloat:(jfloat)size {
  
#line 2557
  if (llx > urx) {
    
#line 2557
    jfloat x = llx;
    
#line 2557
    llx = urx;
    
#line 2557
    urx = x;
  }
  
#line 2558
  if (lly > ury) {
    
#line 2558
    jfloat y = lly;
    
#line 2558
    lly = ury;
    
#line 2558
    ury = y;
  }
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0x00, (jint) 0x00, (jint) 0x00)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self rectangleWithFloat:llx withFloat:lly withFloat:urx - llx withFloat:ury - lly];
  [self stroke];
  
#line 2566
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self setColorFillWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xC0, (jint) 0xC0, (jint) 0xC0)];
  [self rectangleWithFloat:llx + 0.5f withFloat:lly + 0.5f withFloat:urx - llx - 1.0f withFloat:ury - lly - 1.0f];
  [self fill];
  
#line 2572
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xFF, (jint) 0xFF, (jint) 0xFF)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:llx + 1.0f withFloat:ury - 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 2580
  [self setColorStrokeWithHarmonyJavaAwtColor:new_HarmonyJavaAwtColor_initWithInt_withInt_withInt_((jint) 0xA0, (jint) 0xA0, (jint) 0xA0)];
  [self setLineWidthWithFloat:1];
  [self setLineCapWithInt:0];
  [self moveToWithFloat:llx + 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:lly + 1.0f];
  [self lineToWithFloat:urx - 1.0f withFloat:ury - 1.0f];
  [self stroke];
  
#line 2588
  [self resetRGBColorFill];
  [self beginText];
  [self setFontAndSizeWithComAowagieTextPdfBaseFont:bf withFloat:size];
  [self showTextAlignedWithInt:ComAowagieTextPdfPdfContentByte_ALIGN_CENTER withNSString:text withFloat:llx + (urx - llx) / 2 withFloat:lly + (ury - lly - size) / 2 withFloat:0];
  [self endText];
}


#line 2595
- (ComAowagieTextPdfPageResources *)getPageResources {
  return [((ComAowagieTextPdfPdfDocument *) nil_chk(self->pdf_)) getPageResources];
}


#line 2602
- (void)setGStateWithComAowagieTextPdfPdfGState:(ComAowagieTextPdfPdfGState *)gstate {
  IOSObjectArray *obj = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleExtGStateWithComAowagieTextPdfPdfDictionary:gstate];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addExtGStateWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *) cast_chk(IOSObjectArray_Get(nil_chk(obj), 0), [ComAowagieTextPdfPdfName class]) withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(obj, 1), [ComAowagieTextPdfPdfIndirectReference class])];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" gs"])) append_iWithInt:self->separator_];
}


#line 2617
- (void)beginLayerWithComAowagieTextPdfPdfOCG:(id<ComAowagieTextPdfPdfOCG>)layer {
  ComAowagieTextPdfPdfContentByte_beginLayerWithComAowagieTextPdfPdfOCG_(self, layer);
}


#line 2641
- (void)beginLayer2WithComAowagieTextPdfPdfOCG:(id<ComAowagieTextPdfPdfOCG>)layer {
  ComAowagieTextPdfPdfContentByte_beginLayer2WithComAowagieTextPdfPdfOCG_(self, layer);
}


#line 2651
- (void)endLayer {
  ComAowagieTextPdfPdfContentByte_endLayer(self);
}


#line 2666
- (void)addAnnotationWithComAowagieTextPdfPdfAnnotation:(ComAowagieTextPdfPdfAnnotation *)annot {
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addAnnotationWithComAowagieTextPdfPdfAnnotation:annot];
}


#line 2679
- (void)beginMarkedContentSequenceWithComAowagieTextPdfPdfName:(ComAowagieTextPdfPdfName *)tag
                            withComAowagieTextPdfPdfDictionary:(ComAowagieTextPdfPdfDictionary *)property
                                                   withBoolean:(jboolean)inline_ {
  ComAowagieTextPdfPdfContentByte_beginMarkedContentSequenceWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfDictionary_withBoolean_(self, tag, property, inline_);
}


#line 2720
- (void)sanityCheck {
  ComAowagieTextPdfPdfContentByte_sanityCheck(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfByteBuffer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x0, 2, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, 35, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 36, 35, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 37, 35, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 38, 35, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 50, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfTextArray;", 0xa, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 55, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 56, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x8, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 57, 59, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfOutline;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 66, 27, -1, 67, -1, -1 },
    { NULL, "V", 0x1, 68, 27, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPatternPainter;", 0x2, 69, 21, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPatternPainter;", 0x0, 69, 10, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPatternPainter;", 0x2, 69, 70, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfTemplate;", 0x2, 71, 72, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfAppearance;", 0x2, 73, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 86, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 86, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 92, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 51, 101, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfWriter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfDocument;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfContentByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 102, 103, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 104, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 107, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 109, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 110, 111, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 112, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 113, 114, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPageResources;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 115, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 118, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 119, 118, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 120, 121, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 123, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfWriter:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getInternalBuffer);
  methods[3].selector = @selector(toPdfWithComAowagieTextPdfPdfWriter:);
  methods[4].selector = @selector(addWithComAowagieTextPdfPdfContentByte:);
  methods[5].selector = @selector(getXTLM);
  methods[6].selector = @selector(getYTLM);
  methods[7].selector = @selector(getLeading);
  methods[8].selector = @selector(getCharacterSpacing);
  methods[9].selector = @selector(getWordSpacing);
  methods[10].selector = @selector(getHorizontalScaling);
  methods[11].selector = @selector(setFlatnessWithFloat:);
  methods[12].selector = @selector(setLineCapWithInt:);
  methods[13].selector = @selector(setLineDashWithFloat:);
  methods[14].selector = @selector(setLineDashWithFloat:withFloat:);
  methods[15].selector = @selector(setLineDashWithFloat:withFloat:withFloat:);
  methods[16].selector = @selector(setLineJoinWithInt:);
  methods[17].selector = @selector(setLineWidthWithFloat:);
  methods[18].selector = @selector(setMiterLimitWithFloat:);
  methods[19].selector = @selector(clip);
  methods[20].selector = @selector(eoClip);
  methods[21].selector = @selector(setGrayFillWithFloat:);
  methods[22].selector = @selector(resetGrayFill);
  methods[23].selector = @selector(setGrayStrokeWithFloat:);
  methods[24].selector = @selector(resetGrayStroke);
  methods[25].selector = @selector(HelperRGBWithFloat:withFloat:withFloat:);
  methods[26].selector = @selector(setRGBColorFillFWithFloat:withFloat:withFloat:);
  methods[27].selector = @selector(resetRGBColorFill);
  methods[28].selector = @selector(setRGBColorStrokeFWithFloat:withFloat:withFloat:);
  methods[29].selector = @selector(resetRGBColorStroke);
  methods[30].selector = @selector(HelperCMYKWithFloat:withFloat:withFloat:withFloat:);
  methods[31].selector = @selector(setCMYKColorFillFWithFloat:withFloat:withFloat:withFloat:);
  methods[32].selector = @selector(resetCMYKColorFill);
  methods[33].selector = @selector(setCMYKColorStrokeFWithFloat:withFloat:withFloat:withFloat:);
  methods[34].selector = @selector(resetCMYKColorStroke);
  methods[35].selector = @selector(moveToWithFloat:withFloat:);
  methods[36].selector = @selector(lineToWithFloat:withFloat:);
  methods[37].selector = @selector(curveToWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[38].selector = @selector(curveToWithFloat:withFloat:withFloat:withFloat:);
  methods[39].selector = @selector(rectangleWithFloat:withFloat:withFloat:withFloat:);
  methods[40].selector = @selector(compareColorsWithHarmonyJavaAwtColor:withHarmonyJavaAwtColor:);
  methods[41].selector = @selector(variableRectangleWithComAowagieTextRectangle:);
  methods[42].selector = @selector(rectangleWithComAowagieTextRectangle:);
  methods[43].selector = @selector(closePath);
  methods[44].selector = @selector(newPath);
  methods[45].selector = @selector(stroke);
  methods[46].selector = @selector(closePathStroke);
  methods[47].selector = @selector(fill);
  methods[48].selector = @selector(eoFill);
  methods[49].selector = @selector(closePathFillStroke);
  methods[50].selector = @selector(closePathEoFillStroke);
  methods[51].selector = @selector(addImageWithComAowagieTextImage:);
  methods[52].selector = @selector(addImageWithComAowagieTextImage:withBoolean:);
  methods[53].selector = @selector(addImageWithComAowagieTextImage:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[54].selector = @selector(addImageWithComAowagieTextImage:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withBoolean:);
  methods[55].selector = @selector(reset);
  methods[56].selector = @selector(resetWithBoolean:);
  methods[57].selector = @selector(beginText);
  methods[58].selector = @selector(endText);
  methods[59].selector = @selector(saveState);
  methods[60].selector = @selector(restoreState);
  methods[61].selector = @selector(setCharacterSpacingWithFloat:);
  methods[62].selector = @selector(setWordSpacingWithFloat:);
  methods[63].selector = @selector(setHorizontalScalingWithFloat:);
  methods[64].selector = @selector(setLeadingWithFloat:);
  methods[65].selector = @selector(setFontAndSizeWithComAowagieTextPdfBaseFont:withFloat:);
  methods[66].selector = @selector(setTextRenderingModeWithInt:);
  methods[67].selector = @selector(setTextRiseWithFloat:);
  methods[68].selector = @selector(showText2WithNSString:);
  methods[69].selector = @selector(showTextWithNSString:);
  methods[70].selector = @selector(getKernArrayWithNSString:withComAowagieTextPdfBaseFont:);
  methods[71].selector = @selector(showTextKernedWithNSString:);
  methods[72].selector = @selector(setTextMatrixWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[73].selector = @selector(setTextMatrixWithFloat:withFloat:);
  methods[74].selector = @selector(moveTextWithFloat:withFloat:);
  methods[75].selector = @selector(size);
  methods[76].selector = @selector(escapeStringWithByteArray:);
  methods[77].selector = @selector(escapeStringWithByteArray:withComAowagieTextPdfByteBuffer:);
  methods[78].selector = @selector(getRootOutline);
  methods[79].selector = @selector(getEffectiveStringWidthWithNSString:withBoolean:);
  methods[80].selector = @selector(showTextAlignedWithInt:withNSString:withFloat:withFloat:withFloat:);
  methods[81].selector = @selector(showTextAlignedWithInt:withNSString:withFloat:withFloat:withFloat:withBoolean:);
  methods[82].selector = @selector(concatCTMWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[83].selector = @selector(bezierArcWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[84].selector = @selector(arcWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[85].selector = @selector(createPatternWithFloat:withFloat:withFloat:withFloat:);
  methods[86].selector = @selector(createPatternWithFloat:withFloat:);
  methods[87].selector = @selector(createPatternWithFloat:withFloat:withFloat:withFloat:withHarmonyJavaAwtColor:);
  methods[88].selector = @selector(createTemplateWithFloat:withFloat:withComAowagieTextPdfPdfName:);
  methods[89].selector = @selector(createAppearanceWithFloat:withFloat:withComAowagieTextPdfPdfName:);
  methods[90].selector = @selector(addTemplateWithComAowagieTextPdfPdfTemplate:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[91].selector = @selector(addTemplateReferenceWithComAowagieTextPdfPdfIndirectReference:withComAowagieTextPdfPdfName:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[92].selector = @selector(addTemplateWithComAowagieTextPdfPdfTemplate:withFloat:withFloat:);
  methods[93].selector = @selector(setCMYKColorFillWithInt:withInt:withInt:withInt:);
  methods[94].selector = @selector(setCMYKColorStrokeWithInt:withInt:withInt:withInt:);
  methods[95].selector = @selector(setRGBColorFillWithInt:withInt:withInt:);
  methods[96].selector = @selector(setRGBColorStrokeWithInt:withInt:withInt:);
  methods[97].selector = @selector(setColorStrokeWithHarmonyJavaAwtColor:);
  methods[98].selector = @selector(setColorFillWithHarmonyJavaAwtColor:);
  methods[99].selector = @selector(setColorFillWithComAowagieTextPdfPdfSpotColor:withFloat:);
  methods[100].selector = @selector(setColorStrokeWithComAowagieTextPdfPdfSpotColor:withFloat:);
  methods[101].selector = @selector(setPatternFillWithComAowagieTextPdfPdfPatternPainter:);
  methods[102].selector = @selector(outputColorNumbersWithHarmonyJavaAwtColor:withFloat:);
  methods[103].selector = @selector(setPatternFillWithComAowagieTextPdfPdfPatternPainter:withHarmonyJavaAwtColor:);
  methods[104].selector = @selector(setPatternFillWithComAowagieTextPdfPdfPatternPainter:withHarmonyJavaAwtColor:withFloat:);
  methods[105].selector = @selector(setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:withHarmonyJavaAwtColor:);
  methods[106].selector = @selector(setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:withHarmonyJavaAwtColor:withFloat:);
  methods[107].selector = @selector(setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:);
  methods[108].selector = @selector(paintShadingWithComAowagieTextPdfPdfShading:);
  methods[109].selector = @selector(setShadingFillWithComAowagieTextPdfPdfShadingPattern:);
  methods[110].selector = @selector(setShadingStrokeWithComAowagieTextPdfPdfShadingPattern:);
  methods[111].selector = @selector(checkWriter);
  methods[112].selector = @selector(showTextWithComAowagieTextPdfPdfTextArray:);
  methods[113].selector = @selector(getPdfWriter);
  methods[114].selector = @selector(getPdfDocument);
  methods[115].selector = @selector(getDuplicate);
  methods[116].selector = @selector(roundRectangleWithFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[117].selector = @selector(setActionWithComAowagieTextPdfPdfAction:withFloat:withFloat:withFloat:withFloat:);
  methods[118].selector = @selector(setLiteralWithNSString:);
  methods[119].selector = @selector(setLiteralWithChar:);
  methods[120].selector = @selector(setLiteralWithFloat:);
  methods[121].selector = @selector(checkNoPatternWithComAowagieTextPdfPdfTemplate:);
  methods[122].selector = @selector(drawRadioFieldWithFloat:withFloat:withFloat:withFloat:withBoolean:);
  methods[123].selector = @selector(drawTextFieldWithFloat:withFloat:withFloat:withFloat:);
  methods[124].selector = @selector(drawButtonWithFloat:withFloat:withFloat:withFloat:withNSString:withComAowagieTextPdfBaseFont:withFloat:);
  methods[125].selector = @selector(getPageResources);
  methods[126].selector = @selector(setGStateWithComAowagieTextPdfPdfGState:);
  methods[127].selector = @selector(beginLayerWithComAowagieTextPdfPdfOCG:);
  methods[128].selector = @selector(beginLayer2WithComAowagieTextPdfPdfOCG:);
  methods[129].selector = @selector(endLayer);
  methods[130].selector = @selector(addAnnotationWithComAowagieTextPdfPdfAnnotation:);
  methods[131].selector = @selector(beginMarkedContentSequenceWithComAowagieTextPdfPdfName:withComAowagieTextPdfPdfDictionary:withBoolean:);
  methods[132].selector = @selector(sanityCheck);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALIGN_CENTER", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_ALIGN_CENTER, 0x18, -1, -1, -1, -1 },
    { "ALIGN_LEFT", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_ALIGN_LEFT, 0x18, -1, -1, -1, -1 },
    { "ALIGN_RIGHT", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "LINE_CAP_BUTT", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_LINE_CAP_BUTT, 0x1a, -1, -1, -1, -1 },
    { "LINE_JOIN_MITER", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_LINE_JOIN_MITER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_RENDER_MODE_FILL", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL, 0x18, -1, -1, -1, -1 },
    { "TEXT_RENDER_MODE_STROKE", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_STROKE, 0x18, -1, -1, -1, -1 },
    { "TEXT_RENDER_MODE_FILL_STROKE", "I", .constantValue.asInt = ComAowagieTextPdfPdfContentByte_TEXT_RENDER_MODE_FILL_STROKE, 0x18, -1, -1, -1, -1 },
    { "unitRect", "[F", .constantValue.asLong = 0, 0x1a, -1, 124, -1, -1 },
    { "content_", "LComAowagieTextPdfByteBuffer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "writer_", "LComAowagieTextPdfPdfWriter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "pdf_", "LComAowagieTextPdfPdfDocument;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "state_", "LComAowagieTextPdfPdfContentByte_GraphicState;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "stateList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 125, -1 },
    { "layerDepth_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 126, -1 },
    { "separator_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mcDepth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inText_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "abrev", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xa, -1, 127, 128, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfWriter;", "toString", "toPdf", "add", "LComAowagieTextPdfPdfContentByte;", "setFlatness", "F", "setLineCap", "I", "setLineDash", "FF", "FFF", "setLineJoin", "setLineWidth", "setMiterLimit", "setGrayFill", "setGrayStroke", "HelperRGB", "setRGBColorFillF", "setRGBColorStrokeF", "HelperCMYK", "FFFF", "setCMYKColorFillF", "setCMYKColorStrokeF", "moveTo", "lineTo", "curveTo", "FFFFFF", "rectangle", "compareColors", "LHarmonyJavaAwtColor;LHarmonyJavaAwtColor;", "variableRectangle", "LComAowagieTextRectangle;", "addImage", "LComAowagieTextImage;", "LComAowagieTextDocumentException;", "LComAowagieTextImage;Z", "LComAowagieTextImage;FFFFFF", "LComAowagieTextImage;FFFFFFZ", "reset", "Z", "setCharacterSpacing", "setWordSpacing", "setHorizontalScaling", "setLeading", "setFontAndSize", "LComAowagieTextPdfBaseFont;F", "setTextRenderingMode", "setTextRise", "showText2", "LNSString;", "showText", "getKernArray", "LNSString;LComAowagieTextPdfBaseFont;", "showTextKerned", "setTextMatrix", "moveText", "escapeString", "[B", "[BLComAowagieTextPdfByteBuffer;", "getEffectiveStringWidth", "LNSString;Z", "showTextAligned", "ILNSString;FFF", "ILNSString;FFFZ", "concatCTM", "bezierArc", "(FFFFFF)Ljava/util/ArrayList<[F>;", "arc", "createPattern", "FFFFLHarmonyJavaAwtColor;", "createTemplate", "FFLComAowagieTextPdfPdfName;", "createAppearance", "addTemplate", "LComAowagieTextPdfPdfTemplate;FFFFFF", "addTemplateReference", "LComAowagieTextPdfPdfIndirectReference;LComAowagieTextPdfPdfName;FFFFFF", "LComAowagieTextPdfPdfTemplate;FF", "setCMYKColorFill", "IIII", "setCMYKColorStroke", "setRGBColorFill", "III", "setRGBColorStroke", "setColorStroke", "LHarmonyJavaAwtColor;", "setColorFill", "LComAowagieTextPdfPdfSpotColor;F", "setPatternFill", "LComAowagieTextPdfPdfPatternPainter;", "outputColorNumbers", "LHarmonyJavaAwtColor;F", "LComAowagieTextPdfPdfPatternPainter;LHarmonyJavaAwtColor;", "LComAowagieTextPdfPdfPatternPainter;LHarmonyJavaAwtColor;F", "setPatternStroke", "paintShading", "LComAowagieTextPdfPdfShading;", "setShadingFill", "LComAowagieTextPdfPdfShadingPattern;", "setShadingStroke", "LComAowagieTextPdfPdfTextArray;", "roundRectangle", "FFFFF", "setAction", "LComAowagieTextPdfPdfAction;FFFF", "setLiteral", "C", "checkNoPattern", "LComAowagieTextPdfPdfTemplate;", "drawRadioField", "FFFFZ", "drawTextField", "drawButton", "FFFFLNSString;LComAowagieTextPdfBaseFont;F", "setGState", "LComAowagieTextPdfPdfGState;", "beginLayer", "LComAowagieTextPdfPdfOCG;", "beginLayer2", "addAnnotation", "LComAowagieTextPdfPdfAnnotation;", "beginMarkedContentSequence", "LComAowagieTextPdfPdfName;LComAowagieTextPdfPdfDictionary;Z", &ComAowagieTextPdfPdfContentByte_unitRect, "Ljava/util/ArrayList<Lcom/aowagie/text/pdf/PdfContentByte$GraphicState;>;", "Ljava/util/ArrayList<Ljava/lang/Integer;>;", &ComAowagieTextPdfPdfContentByte_abrev, "Ljava/util/HashMap<Lcom/aowagie/text/pdf/PdfName;Ljava/lang/String;>;", "LComAowagieTextPdfPdfContentByte_GraphicState;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfContentByte = { "PdfContentByte", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 133, 19, -1, 129, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfContentByte;
}

+ (void)initialize {
  if (self == [ComAowagieTextPdfPdfContentByte class]) {
    ComAowagieTextPdfPdfContentByte_unitRect = [IOSFloatArray newArrayWithFloats:(jfloat[]){
#line 155
      0, 0, 0, 1, 1, 0, 1, 1 } count:8];
      ComAowagieTextPdfPdfContentByte_abrev = new_JavaUtilLinkedHashMap_init();
      {
        
#line 186
        (void) [ComAowagieTextPdfPdfContentByte_abrev putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, BITSPERCOMPONENT) withId:@"/BPC "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, COLORSPACE) withId:@"/CS "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, DECODE) withId:@"/D "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, DECODEPARMS) withId:@"/DP "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, FILTER) withId:@"/F "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, HEIGHT) withId:@"/H "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, IMAGEMASK) withId:@"/IM "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, INTENT) withId:@"/Intent "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, INTERPOLATE) withId:@"/I "];
        (void) [((JavaUtilHashMap *) nil_chk(ComAowagieTextPdfPdfContentByte_abrev)) putWithId:JreLoadStatic(ComAowagieTextPdfPdfName, WIDTH) withId:@"/W "];
      }
      J2OBJC_SET_INITIALIZED(ComAowagieTextPdfPdfContentByte)
    }
  }

@end


#line 206
void ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfWriter *wr) {
  NSObject_init(self);
  self->content_ = new_ComAowagieTextPdfByteBuffer_init();
  self->state_ = new_ComAowagieTextPdfPdfContentByte_GraphicState_init();
  self->stateList_ = new_JavaUtilArrayList_init();
  self->separator_ =
#line 178
  0x000a;
  self->mcDepth_ =
#line 180
  0;
  self->inText_ = false;
  
#line 207
  if (wr != nil) {
    self->writer_ = wr;
    self->pdf_ = [self->writer_ getPdfDocument];
  }
}


#line 206
ComAowagieTextPdfPdfContentByte *new_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfWriter *wr) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfContentByte, initWithComAowagieTextPdfPdfWriter_, wr)
}


#line 206
ComAowagieTextPdfPdfContentByte *create_ComAowagieTextPdfPdfContentByte_initWithComAowagieTextPdfPdfWriter_(ComAowagieTextPdfPdfWriter *wr) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfContentByte, initWithComAowagieTextPdfPdfWriter_, wr)
}


#line 508
void ComAowagieTextPdfPdfContentByte_HelperRGBWithFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat red, jfloat green, jfloat blue) {
  ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(self->writer_, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_RGB, nil);
  if (red < 0) {
    red = 0.0f;
  }
  else
#line 512
  if (red > 1.0f) {
    red = 1.0f;
  }
  if (green < 0) {
    green = 0.0f;
  }
  else
#line 517
  if (green > 1.0f) {
    green = 1.0f;
  }
  if (blue < 0) {
    blue = 0.0f;
  }
  else
#line 522
  if (blue > 1.0f) {
    blue = 1.0f;
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:red])) appendWithChar:' '])) appendWithFloat:green])) appendWithChar:' '])) appendWithFloat:blue];
}


#line 591
void ComAowagieTextPdfPdfContentByte_HelperCMYKWithFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat cyan, jfloat magenta, jfloat yellow, jfloat black) {
  if (cyan < 0) {
    cyan = 0.0f;
  }
  else
#line 594
  if (cyan > 1.0f) {
    cyan = 1.0f;
  }
  if (magenta < 0) {
    magenta = 0.0f;
  }
  else
#line 599
  if (magenta > 1.0f) {
    magenta = 1.0f;
  }
  if (yellow < 0) {
    yellow = 0.0f;
  }
  else
#line 604
  if (yellow > 1.0f) {
    yellow = 1.0f;
  }
  if (black < 0) {
    black = 0.0f;
  }
  else
#line 609
  if (black > 1.0f) {
    black = 1.0f;
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:cyan])) appendWithChar:' '])) appendWithFloat:magenta])) appendWithChar:' '])) appendWithFloat:yellow])) appendWithChar:' '])) appendWithFloat:black];
}


#line 743
jboolean ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, HarmonyJavaAwtColor *c1, HarmonyJavaAwtColor *c2) {
  if (c1 == nil && c2 == nil) {
    return true;
  }
  if (c1 == nil || c2 == nil) {
    return false;
  }
  if ([c1 isKindOfClass:[ComAowagieTextPdfExtendedColor class]]) {
    return [c1 isEqual:c2];
  }
  return [c2 isEqual:c1];
}


#line 762
void ComAowagieTextPdfPdfContentByte_variableRectangleWithComAowagieTextRectangle_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextRectangle *rect) {
  jfloat t = [((ComAowagieTextRectangle *) nil_chk(rect)) getTop];
  jfloat b = [rect getBottom];
  jfloat r = [rect getRight];
  jfloat l = [rect getLeft];
  jfloat wt = [rect getBorderWidthTop];
  jfloat wb = [rect getBorderWidthBottom];
  jfloat wr = [rect getBorderWidthRight];
  jfloat wl = [rect getBorderWidthLeft];
  HarmonyJavaAwtColor *ct = [rect getBorderColorTop];
  HarmonyJavaAwtColor *cb = [rect getBorderColorBottom];
  HarmonyJavaAwtColor *cr = [rect getBorderColorRight];
  HarmonyJavaAwtColor *cl = [rect getBorderColorLeft];
  [self saveState];
  [self setLineCapWithInt:ComAowagieTextPdfPdfContentByte_LINE_CAP_BUTT];
  [self setLineJoinWithInt:ComAowagieTextPdfPdfContentByte_LINE_JOIN_MITER];
  jfloat clw = 0;
  jboolean cdef = false;
  HarmonyJavaAwtColor *ccol = nil;
  jboolean cdefi = false;
  HarmonyJavaAwtColor *cfil = nil;
  
#line 784
  if (wt > 0) {
    [self setLineWidthWithFloat:clw = wt];
    cdef = true;
    if (ct == nil) {
      [self resetRGBColorStroke];
    }
    else {
      
#line 790
      [self setColorStrokeWithHarmonyJavaAwtColor:ct];
    }
    ccol = ct;
    [self moveToWithFloat:l withFloat:t - wt / 2.0f];
    [self lineToWithFloat:r withFloat:t - wt / 2.0f];
    [self stroke];
  }
  
#line 799
  if (wb > 0) {
    if (wb != clw) {
      [self setLineWidthWithFloat:clw = wb];
    }
    if (!cdef || !ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, ccol, cb)) {
      cdef = true;
      if (cb == nil) {
        [self resetRGBColorStroke];
      }
      else {
        
#line 808
        [self setColorStrokeWithHarmonyJavaAwtColor:cb];
      }
      ccol = cb;
    }
    [self moveToWithFloat:r withFloat:b + wb / 2.0f];
    [self lineToWithFloat:l withFloat:b + wb / 2.0f];
    [self stroke];
  }
  
#line 818
  if (wr > 0) {
    if (wr != clw) {
      [self setLineWidthWithFloat:clw = wr];
    }
    if (!cdef || !ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, ccol, cr)) {
      cdef = true;
      if (cr == nil) {
        [self resetRGBColorStroke];
      }
      else {
        
#line 827
        [self setColorStrokeWithHarmonyJavaAwtColor:cr];
      }
      ccol = cr;
    }
    jboolean bt = ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, ct, cr);
    jboolean bb = ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, cb, cr);
    [self moveToWithFloat:r - wr / 2.0f withFloat:bt ? t : t - wt];
    [self lineToWithFloat:r - wr / 2.0f withFloat:bb ? b : b + wb];
    [self stroke];
    if (!bt || !bb) {
      cdefi = true;
      if (cr == nil) {
        [self resetRGBColorFill];
      }
      else {
        
#line 841
        [self setColorFillWithHarmonyJavaAwtColor:cr];
      }
      cfil = cr;
      if (!bt) {
        [self moveToWithFloat:r withFloat:t];
        [self lineToWithFloat:r withFloat:t - wt];
        [self lineToWithFloat:r - wr withFloat:t - wt];
        [self fill];
      }
      if (!bb) {
        [self moveToWithFloat:r withFloat:b];
        [self lineToWithFloat:r withFloat:b + wb];
        [self lineToWithFloat:r - wr withFloat:b + wb];
        [self fill];
      }
    }
  }
  
#line 860
  if (wl > 0) {
    if (wl != clw) {
      [self setLineWidthWithFloat:wl];
    }
    if (!cdef || !ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, ccol, cl)) {
      if (cl == nil) {
        [self resetRGBColorStroke];
      }
      else {
        
#line 868
        [self setColorStrokeWithHarmonyJavaAwtColor:cl];
      }
    }
    jboolean bt = ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, ct, cl);
    jboolean bb = ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, cb, cl);
    [self moveToWithFloat:l + wl / 2.0f withFloat:bt ? t : t - wt];
    [self lineToWithFloat:l + wl / 2.0f withFloat:bb ? b : b + wb];
    [self stroke];
    if (!bt || !bb) {
      if (!cdefi || !ComAowagieTextPdfPdfContentByte_compareColorsWithHarmonyJavaAwtColor_withHarmonyJavaAwtColor_(self, cfil, cl)) {
        if (cl == nil) {
          [self resetRGBColorFill];
        }
        else {
          
#line 881
          [self setColorFillWithHarmonyJavaAwtColor:cl];
        }
      }
      if (!bt) {
        [self moveToWithFloat:l withFloat:t];
        [self lineToWithFloat:l withFloat:t - wt];
        [self lineToWithFloat:l + wl withFloat:t - wt];
        [self fill];
      }
      if (!bb) {
        [self moveToWithFloat:l withFloat:b];
        [self lineToWithFloat:l withFloat:b + wb];
        [self lineToWithFloat:l + wl withFloat:b + wb];
        [self fill];
      }
    }
  }
  [self restoreState];
}


#line 1064
void ComAowagieTextPdfPdfContentByte_addImageWithComAowagieTextImage_withBoolean_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextImage *image, jboolean inlineImage) {
  if (![((ComAowagieTextImage *) nil_chk(image)) hasAbsoluteY]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"The image must have absolute positioning.");
  }
  IOSFloatArray *matrix = [image matrix];
  *IOSFloatArray_GetRef(nil_chk(matrix), ComAowagieTextImage_CX) = [image getAbsoluteX] - IOSFloatArray_Get(matrix, ComAowagieTextImage_CX);
  *IOSFloatArray_GetRef(matrix, ComAowagieTextImage_CY) = [image getAbsoluteY] - IOSFloatArray_Get(matrix, ComAowagieTextImage_CY);
  [self addImageWithComAowagieTextImage:image withFloat:IOSFloatArray_Get(matrix, 0) withFloat:IOSFloatArray_Get(matrix, 1) withFloat:IOSFloatArray_Get(matrix, 2) withFloat:IOSFloatArray_Get(matrix, 3) withFloat:IOSFloatArray_Get(matrix, 4) withFloat:IOSFloatArray_Get(matrix, 5) withBoolean:inlineImage];
}


#line 1239
void ComAowagieTextPdfPdfContentByte_resetWithBoolean_(ComAowagieTextPdfPdfContentByte *self, jboolean validateContent) {
  [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) reset];
  if (validateContent) {
    ComAowagieTextPdfPdfContentByte_sanityCheck(self);
  }
  self->state_ = new_ComAowagieTextPdfPdfContentByte_GraphicState_init();
}


#line 1383
void ComAowagieTextPdfPdfContentByte_showText2WithNSString_(ComAowagieTextPdfPdfContentByte *self, NSString *text) {
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Font and size must be set before writing any text");
  }
  IOSByteArray *b = [self->state_->fontDetails_ convertToBytesWithNSString:text];
  ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_withComAowagieTextPdfByteBuffer_(b, self->content_);
}


#line 1407
ComAowagieTextPdfPdfTextArray *ComAowagieTextPdfPdfContentByte_getKernArrayWithNSString_withComAowagieTextPdfBaseFont_(NSString *text, ComAowagieTextPdfBaseFont *font) {
  ComAowagieTextPdfPdfContentByte_initialize();
  
#line 1408
  ComAowagieTextPdfPdfTextArray *pa = new_ComAowagieTextPdfPdfTextArray_initPackagePrivate();
  JavaLangStringBuffer *acc = new_JavaLangStringBuffer_init();
  jint len = [((NSString *) nil_chk(text)) java_length] - 1;
  IOSCharArray *c = [text java_toCharArray];
  if (len >= 0) {
    (void) [acc appendWithCharArray:c withInt:0 withInt:1];
  }
  for (jint k = 0; k < len; ++k) {
    jchar c2 = IOSCharArray_Get(nil_chk(c), k + 1);
    jint kern = [((ComAowagieTextPdfBaseFont *) nil_chk(font)) getKerningWithInt:IOSCharArray_Get(c, k) withInt:c2];
    if (kern == 0) {
      (void) [acc appendWithChar:c2];
    }
    else {
      [pa addWithNSString:[acc description]];
      [acc setLengthWithInt:0];
      (void) [acc appendWithCharArray:c withInt:k + 1 withInt:1];
      [pa addWithFloat:-kern];
    }
  }
  [pa addWithNSString:[acc description]];
  return pa;
}


#line 1437
void ComAowagieTextPdfPdfContentByte_showTextKernedWithNSString_(ComAowagieTextPdfPdfContentByte *self, NSString *text) {
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Font and size must be set before writing any text");
  }
  ComAowagieTextPdfBaseFont *bf = [self->state_->fontDetails_ getBaseFont];
  if ([((ComAowagieTextPdfBaseFont *) nil_chk(bf)) hasKernPairs]) {
    [self showTextWithComAowagieTextPdfPdfTextArray:ComAowagieTextPdfPdfContentByte_getKernArrayWithNSString_withComAowagieTextPdfBaseFont_(text, bf)];
  }
  else {
    
#line 1445
    [self showTextWithNSString:text];
  }
}


#line 1516
IOSByteArray *ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_(IOSByteArray *b) {
  ComAowagieTextPdfPdfContentByte_initialize();
  
#line 1517
  ComAowagieTextPdfByteBuffer *content = new_ComAowagieTextPdfByteBuffer_init();
  ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_withComAowagieTextPdfByteBuffer_(b, content);
  return [content toByteArray];
}


#line 1528
void ComAowagieTextPdfPdfContentByte_escapeStringWithByteArray_withComAowagieTextPdfByteBuffer_(IOSByteArray *b, ComAowagieTextPdfByteBuffer *content) {
  ComAowagieTextPdfPdfContentByte_initialize();
  
#line 1529
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(content)) append_iWithInt:'('];
  {
    IOSByteArray *a__ =
#line 1530
    b;
    jbyte const *b__ = ((IOSByteArray *) nil_chk(a__))->buffer_;
    jbyte const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jbyte c = *b__++;
      
#line 1531
      switch (c) {
        case 0x000d:
        (void) [content appendWithNSString:@"\\r"];
        break;
        case 0x000a:
        (void) [content appendWithNSString:@"\\n"];
        break;
        case 0x0009:
        (void) [content appendWithNSString:@"\\t"];
        break;
        case 0x0008:
        (void) [content appendWithNSString:@"\\b"];
        break;
        case 0x000c:
        (void) [content appendWithNSString:@"\\f"];
        break;
        case '(':
        case ')':
        case '\\':
        (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([content append_iWithInt:'\\'])) append_iWithInt:c];
        break;
        default:
        (void) [content append_iWithInt:c];
      }
    }
  }
  
#line 1556
  (void) [content appendWithNSString:@")"];
}


#line 1581
jfloat ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(ComAowagieTextPdfPdfContentByte *self, NSString *text, jboolean kerned) {
  ComAowagieTextPdfBaseFont *bf = [((ComAowagieTextPdfFontDetails *) nil_chk(((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_)) getBaseFont];
  
#line 1584
  jfloat w;
  if (kerned) {
    w = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getWidthPointKernedWithNSString:text withFloat:((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->size_];
  }
  else {
    
#line 1588
    w = [((ComAowagieTextPdfBaseFont *) nil_chk(bf)) getWidthPointWithNSString:text withFloat:((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->size_];
  }
  
#line 1591
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->charSpace_ != 0.0f && [((NSString *) nil_chk(text)) java_length] > 1) {
    JrePlusAssignFloatF(&w, ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->charSpace_ * ([((NSString *) nil_chk(text)) java_length] - 1));
  }
  
#line 1595
  jint ft = [bf getFontType];
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->wordSpace_ != 0.0f && (ft == ComAowagieTextPdfBaseFont_FONT_TYPE_T1 || ft == ComAowagieTextPdfBaseFont_FONT_TYPE_TT || ft == ComAowagieTextPdfBaseFont_FONT_TYPE_T3)) {
    for (jint i = 0; i < [((NSString *) nil_chk(text)) java_length] - 1; i++) {
      if ([text charAtWithInt:i] == ' ') {
        JrePlusAssignFloatF(&w, ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->wordSpace_);
      }
    }
  }
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->scale__ != 100.0) {
    w = w * self->state_->scale__ / 100.0f;
  }
  
#line 1608
  return w;
}


#line 1623
void ComAowagieTextPdfPdfContentByte_showTextAlignedWithInt_withNSString_withFloat_withFloat_withFloat_withBoolean_(ComAowagieTextPdfPdfContentByte *self, jint alignment, NSString *text, jfloat x, jfloat y, jfloat rotation, jboolean kerned) {
  if (((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(self->state_))->fontDetails_ == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"Font and size must be set before writing any text");
  }
  if (rotation == 0) {
    switch (alignment) {
      case ComAowagieTextPdfPdfContentByte_ALIGN_CENTER:
      JreMinusAssignFloatF(&x, ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(self, text, kerned) / 2);
      break;
      case ComAowagieTextPdfPdfContentByte_ALIGN_RIGHT:
      JreMinusAssignFloatF(&x, ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(self, text, kerned));
      break;
    }
    [self setTextMatrixWithFloat:x withFloat:y];
    if (kerned) {
      ComAowagieTextPdfPdfContentByte_showTextKernedWithNSString_(self, text);
    }
    else {
      
#line 1640
      [self showTextWithNSString:text];
    }
  }
  else {
    jdouble alpha = rotation * JavaLangMath_PI / 180.0;
    jfloat cos = (jfloat) JavaLangMath_cosWithDouble_(alpha);
    jfloat sin = (jfloat) JavaLangMath_sinWithDouble_(alpha);
    jfloat len;
    switch (alignment) {
      case ComAowagieTextPdfPdfContentByte_ALIGN_CENTER:
      len = ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(self, text, kerned) / 2;
      JreMinusAssignFloatF(&x, len * cos);
      JreMinusAssignFloatF(&y, len * sin);
      break;
      case ComAowagieTextPdfPdfContentByte_ALIGN_RIGHT:
      len = ComAowagieTextPdfPdfContentByte_getEffectiveStringWidthWithNSString_withBoolean_(self, text, kerned);
      JreMinusAssignFloatF(&x, len * cos);
      JreMinusAssignFloatF(&y, len * sin);
      break;
    }
    [self setTextMatrixWithFloat:cos withFloat:sin withFloat:-sin withFloat:cos withFloat:x withFloat:y];
    if (kerned) {
      ComAowagieTextPdfPdfContentByte_showTextKernedWithNSString_(self, text);
    }
    else {
      
#line 1664
      [self showTextWithNSString:text];
    }
    [self setTextMatrixWithFloat:0.0f withFloat:0.0f];
  }
}


#line 1710
JavaUtilArrayList *ComAowagieTextPdfPdfContentByte_bezierArcWithFloat_withFloat_withFloat_withFloat_withFloat_withFloat_(jfloat x1, jfloat y1, jfloat x2, jfloat y2, jfloat startAng, jfloat extent) {
  ComAowagieTextPdfPdfContentByte_initialize();
  
#line 1711
  jfloat tmp;
  if (x1 > x2) {
    tmp = x1;
    x1 = x2;
    x2 = tmp;
  }
  if (y2 > y1) {
    tmp = y1;
    y1 = y2;
    y2 = tmp;
  }
  
#line 1723
  jfloat fragAngle;
  jint Nfrag;
  if (JavaLangMath_absWithFloat_(extent) <= 90.0f) {
    fragAngle = extent;
    Nfrag = 1;
  }
  else {
    Nfrag = JreFpToInt(JavaLangMath_ceilWithDouble_(JavaLangMath_absWithFloat_(extent) / 90.0f));
    fragAngle = extent / Nfrag;
  }
  jfloat x_cen = (x1 + x2) / 2.0f;
  jfloat y_cen = (y1 + y2) / 2.0f;
  jfloat rx = (x2 - x1) / 2.0f;
  jfloat ry = (y2 - y1) / 2.0f;
  jfloat halfAng = (jfloat) (fragAngle * JavaLangMath_PI / 360.);
  jfloat kappa = (jfloat) JavaLangMath_absWithDouble_(4. / 3. * (1. - JavaLangMath_cosWithDouble_(halfAng)) / JavaLangMath_sinWithDouble_(halfAng));
  JavaUtilArrayList *pointList = new_JavaUtilArrayList_init();
  for (jint i = 0; i < Nfrag; ++i) {
    jfloat theta0 = (jfloat) ((startAng + i * fragAngle) * JavaLangMath_PI / 180.);
    jfloat theta1 = (jfloat) ((startAng + (i + 1) * fragAngle) * JavaLangMath_PI / 180.);
    jfloat cos0 = (jfloat) JavaLangMath_cosWithDouble_(theta0);
    jfloat cos1 = (jfloat) JavaLangMath_cosWithDouble_(theta1);
    jfloat sin0 = (jfloat) JavaLangMath_sinWithDouble_(theta0);
    jfloat sin1 = (jfloat) JavaLangMath_sinWithDouble_(theta1);
    if (fragAngle > 0.0f) {
      [pointList addWithId:[IOSFloatArray newArrayWithFloats:(jfloat[]){ x_cen + rx * cos0,
#line 1749
      y_cen - ry * sin0,
#line 1750
      x_cen + rx * (cos0 - kappa * sin0),
#line 1751
      y_cen - ry * (sin0 + kappa * cos0),
#line 1752
      x_cen + rx * (cos1 + kappa * sin1),
#line 1753
      y_cen - ry * (sin1 - kappa * cos1),
#line 1754
      x_cen + rx * cos1,
#line 1755
      y_cen - ry * sin1 } count:8]];
    }
    else {
      [pointList addWithId:[IOSFloatArray newArrayWithFloats:(jfloat[]){ x_cen + rx * cos0,
#line 1759
      y_cen - ry * sin0,
#line 1760
      x_cen + rx * (cos0 + kappa * sin0),
#line 1761
      y_cen - ry * (sin0 - kappa * cos0),
#line 1762
      x_cen + rx * (cos1 - kappa * sin1),
#line 1763
      y_cen - ry * (sin1 + kappa * cos1),
#line 1764
      x_cen + rx * cos1,
#line 1765
      y_cen - ry * sin1 } count:8]];
    }
  }
  return pointList;
}


#line 1809
ComAowagieTextPdfPdfPatternPainter *ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, jfloat xstep, jfloat ystep) {
  [self checkWriter];
  if (xstep == 0.0f || ystep == 0.0f) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"XStep or YStep can not be ZERO.");
  }
  ComAowagieTextPdfPdfPatternPainter *painter = new_ComAowagieTextPdfPdfPatternPainter_initWithComAowagieTextPdfPdfWriter_(self->writer_);
  [painter setWidthWithFloat:width];
  [painter setHeightWithFloat:height];
  [painter setXStepWithFloat:xstep];
  [painter setYStepWithFloat:ystep];
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:painter];
  return painter;
}


#line 1846
ComAowagieTextPdfPdfPatternPainter *ComAowagieTextPdfPdfContentByte_createPatternWithFloat_withFloat_withFloat_withFloat_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, jfloat xstep, jfloat ystep, HarmonyJavaAwtColor *color) {
  [self checkWriter];
  if (xstep == 0.0f || ystep == 0.0f) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"XStep or YStep can not be ZERO.");
  }
  ComAowagieTextPdfPdfPatternPainter *painter = new_ComAowagieTextPdfPdfPatternPainter_initWithComAowagieTextPdfPdfWriter_withHarmonyJavaAwtColor_(self->writer_, color);
  [painter setWidthWithFloat:width];
  [painter setHeightWithFloat:height];
  [painter setXStepWithFloat:xstep];
  [painter setYStepWithFloat:ystep];
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePatternWithComAowagieTextPdfPdfPatternPainter:painter];
  return painter;
}


#line 1864
ComAowagieTextPdfPdfTemplate *ComAowagieTextPdfPdfContentByte_createTemplateWithFloat_withFloat_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, ComAowagieTextPdfPdfName *forcedName) {
  [self checkWriter];
  ComAowagieTextPdfPdfTemplate *template_ = new_ComAowagieTextPdfPdfTemplate_initWithComAowagieTextPdfPdfWriter_(self->writer_);
  [template_ setWidthWithFloat:width];
  [template_ setHeightWithFloat:height];
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectTemplateSimpleWithComAowagieTextPdfPdfTemplate:template_ withComAowagieTextPdfPdfName:forcedName];
  return template_;
}


#line 1875
ComAowagieTextPdfPdfAppearance *ComAowagieTextPdfPdfContentByte_createAppearanceWithFloat_withFloat_withComAowagieTextPdfPdfName_(ComAowagieTextPdfPdfContentByte *self, jfloat width, jfloat height, ComAowagieTextPdfPdfName *forcedName) {
  [self checkWriter];
  ComAowagieTextPdfPdfAppearance *template_ = new_ComAowagieTextPdfPdfAppearance_initPackagePrivateWithComAowagieTextPdfPdfWriter_(self->writer_);
  [template_ setWidthWithFloat:width];
  [template_ setHeightWithFloat:height];
  (void) [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addDirectTemplateSimpleWithComAowagieTextPdfPdfTemplate:template_ withComAowagieTextPdfPdfName:forcedName];
  return template_;
}


#line 2159
void ComAowagieTextPdfPdfContentByte_outputColorNumbersWithHarmonyJavaAwtColor_withFloat_(ComAowagieTextPdfPdfContentByte *self, HarmonyJavaAwtColor *color, jfloat tint) {
  ComAowagieTextPdfInternalPdfXConformanceImp_checkPDFXConformanceWithComAowagieTextPdfPdfWriter_withInt_withId_(self->writer_, ComAowagieTextPdfInternalPdfXConformanceImp_PDFXKEY_COLOR, color);
  jint type = ComAowagieTextPdfExtendedColor_getTypeWithHarmonyJavaAwtColor_(color);
  switch (type) {
    case ComAowagieTextPdfExtendedColor_TYPE_RGB:
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) [((HarmonyJavaAwtColor *) nil_chk(color)) getRed] / (jint) 0xFF];
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) [color getGreen] / (jint) 0xFF];
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '];
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:(jfloat) [color getBlue] / (jint) 0xFF];
    break;
    case ComAowagieTextPdfExtendedColor_TYPE_GRAY:
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:[((ComAowagieTextPdfGrayColor *) nil_chk(((ComAowagieTextPdfGrayColor *) cast_chk(color, [ComAowagieTextPdfGrayColor class])))) getGray]];
    break;
    case ComAowagieTextPdfExtendedColor_TYPE_CMYK:
    {
      
#line 2174
      ComAowagieTextPdfCMYKColor *cmyk = (ComAowagieTextPdfCMYKColor *) cast_chk(color, [ComAowagieTextPdfCMYKColor class]);
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:[((ComAowagieTextPdfCMYKColor *) nil_chk(cmyk)) getCyan]])) appendWithChar:' '])) appendWithFloat:[cmyk getMagenta]];
      (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithChar:' '])) appendWithFloat:[cmyk getYellow]])) appendWithChar:' '])) appendWithFloat:[cmyk getBlack]];
      break;
    }
    case ComAowagieTextPdfExtendedColor_TYPE_SEPARATION:
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithFloat:tint];
    break;
    default:
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid color type.");
  }
}


#line 2191
void ComAowagieTextPdfPdfContentByte_setPatternFillWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfPatternPainter *p, HarmonyJavaAwtColor *color) {
  if (ComAowagieTextPdfExtendedColor_getTypeWithHarmonyJavaAwtColor_(color) == ComAowagieTextPdfExtendedColor_TYPE_SEPARATION) {
    [self setPatternFillWithComAowagieTextPdfPdfPatternPainter:p withHarmonyJavaAwtColor:color withFloat:[((ComAowagieTextPdfSpotColor *) nil_chk(((ComAowagieTextPdfSpotColor *) cast_chk(color, [ComAowagieTextPdfSpotColor class])))) getTint]];
  }
  else {
    
#line 2195
    [self setPatternFillWithComAowagieTextPdfPdfPatternPainter:p withHarmonyJavaAwtColor:color withFloat:0];
  }
}


#line 2223
void ComAowagieTextPdfPdfContentByte_setPatternStrokeWithComAowagieTextPdfPdfPatternPainter_withHarmonyJavaAwtColor_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfPatternPainter *p, HarmonyJavaAwtColor *color) {
  if (ComAowagieTextPdfExtendedColor_getTypeWithHarmonyJavaAwtColor_(color) == ComAowagieTextPdfExtendedColor_TYPE_SEPARATION) {
    [self setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:p withHarmonyJavaAwtColor:color withFloat:[((ComAowagieTextPdfSpotColor *) nil_chk(((ComAowagieTextPdfSpotColor *) cast_chk(color, [ComAowagieTextPdfSpotColor class])))) getTint]];
  }
  else {
    
#line 2227
    [self setPatternStrokeWithComAowagieTextPdfPdfPatternPainter:p withHarmonyJavaAwtColor:color withFloat:0];
  }
}


#line 2271
void ComAowagieTextPdfPdfContentByte_paintShadingWithComAowagieTextPdfPdfShading_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfShading *shading) {
  [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimpleShadingWithComAowagieTextPdfPdfShading:shading];
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  ComAowagieTextPdfPdfName *name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addShadingWithComAowagieTextPdfPdfName:[((ComAowagieTextPdfPdfShading *) nil_chk(shading)) getShadingName] withComAowagieTextPdfPdfIndirectReference:[shading getShadingReference]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" sh"])) append_iWithInt:self->separator_];
  ComAowagieTextPdfColorDetails *details = [shading getColorDetails];
  if (details != nil) {
    (void) [prs addColorWithComAowagieTextPdfPdfName:[details getColorName] withComAowagieTextPdfPdfIndirectReference:[details getIndirectReference]];
  }
}


#line 2453
void ComAowagieTextPdfPdfContentByte_checkNoPatternWithComAowagieTextPdfPdfTemplate_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfTemplate *t) {
  if ([((ComAowagieTextPdfPdfTemplate *) nil_chk(t)) getType] == ComAowagieTextPdfPdfTemplate_TYPE_PATTERN) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Invalid use of a pattern. A template was expected.");
  }
}


#line 2617
void ComAowagieTextPdfPdfContentByte_beginLayerWithComAowagieTextPdfPdfOCG_(ComAowagieTextPdfPdfContentByte *self, id<ComAowagieTextPdfPdfOCG> layer) {
  if ([layer isKindOfClass:[ComAowagieTextPdfPdfLayer class]] && [((ComAowagieTextPdfPdfLayer *) nil_chk(((ComAowagieTextPdfPdfLayer *) cast_chk(layer, [ComAowagieTextPdfPdfLayer class])))) getTitle] != nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"A title is not a layer");
  }
  if (self->layerDepth_ == nil) {
    self->layerDepth_ = new_JavaUtilArrayList_init();
  }
  if ([layer isKindOfClass:[ComAowagieTextPdfPdfLayerMembership class]]) {
    [self->layerDepth_ addWithId:new_JavaLangInteger_initWithInt_(1)];
    ComAowagieTextPdfPdfContentByte_beginLayer2WithComAowagieTextPdfPdfOCG_(self, layer);
    return;
  }
  jint n = 0;
  ComAowagieTextPdfPdfLayer *la = (ComAowagieTextPdfPdfLayer *) cast_chk(layer, [ComAowagieTextPdfPdfLayer class]);
  while (la != nil) {
    if ([la getTitle] == nil) {
      ComAowagieTextPdfPdfContentByte_beginLayer2WithComAowagieTextPdfPdfOCG_(self, la);
      ++n;
    }
    la = [la getParent];
  }
  [((JavaUtilArrayList *) nil_chk(self->layerDepth_)) addWithId:new_JavaLangInteger_initWithInt_(n)];
}

void ComAowagieTextPdfPdfContentByte_beginLayer2WithComAowagieTextPdfPdfOCG_(ComAowagieTextPdfPdfContentByte *self, id<ComAowagieTextPdfPdfOCG> layer) {
  ComAowagieTextPdfPdfName *name = (ComAowagieTextPdfPdfName *) cast_chk(IOSObjectArray_Get(nil_chk([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePropertyWithId:layer withComAowagieTextPdfPdfIndirectReference:[((id<ComAowagieTextPdfPdfOCG>) nil_chk(layer)) getRef]]), 0), [ComAowagieTextPdfPdfName class]);
  ComAowagieTextPdfPageResources *prs = [self getPageResources];
  name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPropertyWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:[layer getRef]];
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"/OC "])) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]])) appendWithNSString:@" BDC"])) append_iWithInt:self->separator_];
}


#line 2651
void ComAowagieTextPdfPdfContentByte_endLayer(ComAowagieTextPdfPdfContentByte *self) {
  jint n = 1;
  if (self->layerDepth_ != nil && ![self->layerDepth_ isEmpty]) {
    n = [((JavaLangInteger *) nil_chk([self->layerDepth_ getWithInt:[self->layerDepth_ size] - 1])) intValue];
    (void) [((JavaUtilArrayList *) nil_chk(self->layerDepth_)) removeWithInt:[self->layerDepth_ size] - 1];
  }
  else {
    
#line 2657
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced layer operators.");
  }
  while (n-- > 0) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@"EMC"])) append_iWithInt:self->separator_];
  }
}


#line 2679
void ComAowagieTextPdfPdfContentByte_beginMarkedContentSequenceWithComAowagieTextPdfPdfName_withComAowagieTextPdfPdfDictionary_withBoolean_(ComAowagieTextPdfPdfContentByte *self, ComAowagieTextPdfPdfName *tag, ComAowagieTextPdfPdfDictionary *property, jboolean inline_) {
  if (property == nil) {
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(tag)) getBytes]])) appendWithNSString:@" BMC"])) append_iWithInt:self->separator_];
    return;
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(tag)) getBytes]])) appendWithChar:' '];
  if (inline_) {
    @try {
      [property toPdfWithComAowagieTextPdfPdfWriter:self->writer_ withJavaIoOutputStream:self->content_];
    }
    @catch (JavaLangException *e) {
      @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
    }
  }
  else {
    
#line 2693
    IOSObjectArray *objs;
    if ([((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) propertyExistsWithId:property]) {
      objs = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePropertyWithId:property withComAowagieTextPdfPdfIndirectReference:nil];
    }
    else {
      
#line 2697
      objs = [((ComAowagieTextPdfPdfWriter *) nil_chk(self->writer_)) addSimplePropertyWithId:property withComAowagieTextPdfPdfIndirectReference:[self->writer_ getPdfIndirectReference]];
    }
    ComAowagieTextPdfPdfName *name = (ComAowagieTextPdfPdfName *) cast_chk(IOSObjectArray_Get(nil_chk(objs), 0), [ComAowagieTextPdfPdfName class]);
    ComAowagieTextPdfPageResources *prs = [self getPageResources];
    name = [((ComAowagieTextPdfPageResources *) nil_chk(prs)) addPropertyWithComAowagieTextPdfPdfName:name withComAowagieTextPdfPdfIndirectReference:(ComAowagieTextPdfPdfIndirectReference *) cast_chk(IOSObjectArray_Get(objs, 1), [ComAowagieTextPdfPdfIndirectReference class])];
    (void) [((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithByteArray:[((ComAowagieTextPdfPdfName *) nil_chk(name)) getBytes]];
  }
  (void) [((ComAowagieTextPdfByteBuffer *) nil_chk([((ComAowagieTextPdfByteBuffer *) nil_chk(self->content_)) appendWithNSString:@" BDC"])) append_iWithInt:self->separator_];
  ++self->mcDepth_;
}


#line 2720
void ComAowagieTextPdfPdfContentByte_sanityCheck(ComAowagieTextPdfPdfContentByte *self) {
  if (self->mcDepth_ != 0) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced marked content operators.");
  }
  if (self->inText_) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced begin/end text operators.");
  }
  if (self->layerDepth_ != nil && ![self->layerDepth_ isEmpty]) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced layer operators.");
  }
  if (![((JavaUtilArrayList *) nil_chk(self->stateList_)) isEmpty]) {
    @throw new_ComAowagieTextExceptionsIllegalPdfSyntaxException_initWithNSString_(@"Unbalanced save/restore state operators.");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfContentByte)

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfContentByte.java"


#line 80
@implementation ComAowagieTextPdfPdfContentByte_GraphicState

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 108
- (instancetype)init {
  ComAowagieTextPdfPdfContentByte_GraphicState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 111
- (instancetype)initWithComAowagieTextPdfPdfContentByte_GraphicState:(ComAowagieTextPdfPdfContentByte_GraphicState *)cp {
  ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(self, cp);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithComAowagieTextPdfPdfContentByte_GraphicState:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fontDetails_", "LComAowagieTextPdfFontDetails;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "colorDetails_", "LComAowagieTextPdfColorDetails;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "xTLM_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yTLM_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scale__", "F", .constantValue.asLong = 0, 0x2, 1, -1, -1, -1 },
    { "charSpace_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "wordSpace_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfContentByte_GraphicState;", "scale", "LComAowagieTextPdfPdfContentByte;" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfContentByte_GraphicState = { "GraphicState", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x8, 2, 9, 2, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfContentByte_GraphicState;
}

@end


#line 108
void ComAowagieTextPdfPdfContentByte_GraphicState_init(ComAowagieTextPdfPdfContentByte_GraphicState *self) {
  NSObject_init(self);
  self->xTLM_ =
#line 92
  0;
  self->yTLM_ =
#line 94
  0;
  self->leading_ =
#line 97
  0;
  self->scale__ =
#line 100
  100;
  self->charSpace_ =
#line 103
  0;
  self->wordSpace_ =
#line 106
  0;
}


#line 108
ComAowagieTextPdfPdfContentByte_GraphicState *new_ComAowagieTextPdfPdfContentByte_GraphicState_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfContentByte_GraphicState, init)
}


#line 108
ComAowagieTextPdfPdfContentByte_GraphicState *create_ComAowagieTextPdfPdfContentByte_GraphicState_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfContentByte_GraphicState, init)
}


#line 111
void ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *self, ComAowagieTextPdfPdfContentByte_GraphicState *cp) {
  NSObject_init(self);
  self->xTLM_ =
#line 92
  0;
  self->yTLM_ =
#line 94
  0;
  self->leading_ =
#line 97
  0;
  self->scale__ =
#line 100
  100;
  self->charSpace_ =
#line 103
  0;
  self->wordSpace_ =
#line 106
  0;
  
#line 112
  self->fontDetails_ = ((ComAowagieTextPdfPdfContentByte_GraphicState *) nil_chk(cp))->fontDetails_;
  self->colorDetails_ = cp->colorDetails_;
  self->size_ = cp->size_;
  self->xTLM_ = cp->xTLM_;
  self->yTLM_ = cp->yTLM_;
  self->leading_ = cp->leading_;
  self->scale__ = cp->scale__;
  self->charSpace_ = cp->charSpace_;
  self->wordSpace_ = cp->wordSpace_;
}


#line 111
ComAowagieTextPdfPdfContentByte_GraphicState *new_ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *cp) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfContentByte_GraphicState, initWithComAowagieTextPdfPdfContentByte_GraphicState_, cp)
}


#line 111
ComAowagieTextPdfPdfContentByte_GraphicState *create_ComAowagieTextPdfPdfContentByte_GraphicState_initWithComAowagieTextPdfPdfContentByte_GraphicState_(ComAowagieTextPdfPdfContentByte_GraphicState *cp) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfContentByte_GraphicState, initWithComAowagieTextPdfPdfContentByte_GraphicState_, cp)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfContentByte_GraphicState)
