//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jcajce/PKIXCRLStoreSelector.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PKIXCRLStoreSelector")
#ifdef RESTRICT_PKIXCRLStoreSelector
#define INCLUDE_ALL_PKIXCRLStoreSelector 0
#else
#define INCLUDE_ALL_PKIXCRLStoreSelector 1
#endif
#undef RESTRICT_PKIXCRLStoreSelector

#if !defined (OrgSpongycastleJcajcePKIXCRLStoreSelector_) && (INCLUDE_ALL_PKIXCRLStoreSelector || defined(INCLUDE_OrgSpongycastleJcajcePKIXCRLStoreSelector))
#define OrgSpongycastleJcajcePKIXCRLStoreSelector_

#define RESTRICT_Selector 1
#define INCLUDE_OrgSpongycastleUtilSelector 1
#include "Selector.h"

@class IOSByteArray;
@class JavaMathBigInteger;
@class JavaSecurityCertCRL;
@class JavaSecurityCertCertStore;
@class JavaSecurityCertX509Certificate;
@protocol JavaUtilCollection;

/*!
 @brief This class is a Selector implementation for X.509 certificate revocation
  lists.
 - seealso: org.spongycastle.util.Selector
 */
@interface OrgSpongycastleJcajcePKIXCRLStoreSelector : NSObject < OrgSpongycastleUtilSelector >

#pragma mark Public

- (id)java_clone;

- (JavaSecurityCertX509Certificate *)getCertificateChecking;

+ (id<JavaUtilCollection>)getCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector:(OrgSpongycastleJcajcePKIXCRLStoreSelector *)selector
                                                 withJavaSecurityCertCertStore:(JavaSecurityCertCertStore *)certStore;

/*!
 @brief Returns the issuing distribution point.Defaults to <code>null</code>,
  which is a missing issuing distribution point extension.
 <p>
  The internal byte array is cloned before it is returned. 
 <p>
  The criteria must be enable with Builder.setIssuingDistributionPointEnabled(boolean)}.
 @return Returns the issuing distribution point.
 */
- (IOSByteArray *)getIssuingDistributionPoint;

/*!
 @brief Get the maximum base CRL number.Defaults to <code>null</code>.
 @return Returns the maximum base CRL number.
 */
- (JavaMathBigInteger *)getMaxBaseCRLNumber;

/*!
 @brief If <code>true</code> only complete CRLs are returned.Defaults to 
 <code>false</code>.
 @return <code>true</code> if only complete CRLs are returned.
 */
- (jboolean)isCompleteCRLEnabled;

/*!
 @brief Returns if this selector must match CRLs with the delta CRL indicator
  extension set.Defaults to <code>false</code>.
 @return Returns <code>true</code> if only CRLs with the delta CRL
          indicator extension are selected.
 */
- (jboolean)isDeltaCRLIndicatorEnabled;

/*!
 @brief Returns if the issuing distribution point criteria should be applied.
 Defaults to <code>false</code>.
  <p>
  You may also set the issuing distribution point criteria if not a missing
  issuing distribution point should be assumed.
 @return Returns if the issuing distribution point check is enabled.
 */
- (jboolean)isIssuingDistributionPointEnabled;

- (jboolean)matchWithId:(JavaSecurityCertCRL *)obj;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajcePKIXCRLStoreSelector)

FOUNDATION_EXPORT id<JavaUtilCollection> OrgSpongycastleJcajcePKIXCRLStoreSelector_getCRLsWithOrgSpongycastleJcajcePKIXCRLStoreSelector_withJavaSecurityCertCertStore_(OrgSpongycastleJcajcePKIXCRLStoreSelector *selector, JavaSecurityCertCertStore *certStore);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajcePKIXCRLStoreSelector)

#endif

#if !defined (OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_) && (INCLUDE_ALL_PKIXCRLStoreSelector || defined(INCLUDE_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder))
#define OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_

@class IOSByteArray;
@class JavaMathBigInteger;
@class OrgSpongycastleJcajcePKIXCRLStoreSelector;
@protocol JavaSecurityCertCRLSelector;

/*!
 @brief Builder for a PKIXCRLStoreSelector.
 */
@interface OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder : NSObject

#pragma mark Public

/*!
 @brief Constructor initializing a builder with a CertSelector.
 @param crlSelector the CertSelector to copy the match details from.
 */
- (instancetype)initWithJavaSecurityCertCRLSelector:(id<JavaSecurityCertCRLSelector>)crlSelector;

/*!
 @brief Build a selector.
 @return a new PKIXCRLStoreSelector
 */
- (OrgSpongycastleJcajcePKIXCRLStoreSelector *)build;

/*!
 @brief If set to <code>true</code> only complete CRLs are returned.
 <p>
  <code>setCompleteCRLEnabled(boolean)</code> and 
 <code>setDeltaCRLIndicatorEnabled(boolean)</code> excluded each other.
 @param completeCRLEnabled <code> true </code>  if only complete CRLs
              should be returned.
 */
- (OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *)setCompleteCRLEnabledWithBoolean:(jboolean)completeCRLEnabled;

/*!
 @brief If this is set to <code>true</code> the CRL reported contains the delta
  CRL indicator CRL extension.
 <p>
  <code>setCompleteCRLEnabled(boolean)</code> and 
 <code>setDeltaCRLIndicatorEnabled(boolean)</code> excluded each other.
 @param deltaCRLIndicator <code> true </code>  if the delta CRL indicator
              extension must be in the CRL.
 */
- (OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *)setDeltaCRLIndicatorEnabledWithBoolean:(jboolean)deltaCRLIndicator;

/*!
 @brief Sets the issuing distribution point.
 <p>
  The issuing distribution point extension is a CRL extension which
  identifies the scope and the distribution point of a CRL. The scope
  contains among others information about revocation reasons contained in
  the CRL. Delta CRLs and complete CRLs must have matching issuing
  distribution points. 
 <p>
  The byte array is cloned to protect against subsequent modifications. 
 <p>
  You must also enable or disable this criteria with 
 <code>setIssuingDistributionPointEnabled(boolean)</code>.
 @param issuingDistributionPoint The issuing distribution point to set.             This is the DER encoded OCTET STRING extension value.
 - seealso: #getIssuingDistributionPoint()
 */
- (void)setIssuingDistributionPointWithByteArray:(IOSByteArray *)issuingDistributionPoint;

/*!
 @brief Enables or disables the issuing distribution point check.
 @param issuingDistributionPointEnabled <code> true </code>  to enable the
              issuing distribution point check.
 */
- (void)setIssuingDistributionPointEnabledWithBoolean:(jboolean)issuingDistributionPointEnabled;

/*!
 @brief Sets the maximum base CRL number.Setting to <code>null</code> disables
  this cheack.
 <p>
  This is only meaningful for delta CRLs. Complete CRLs must have a CRL
  number which is greater or equal than the base number of the
  corresponding CRL.
 @param maxBaseCRLNumber The maximum base CRL number to set.
 */
- (void)setMaxBaseCRLNumberWithJavaMathBigInteger:(JavaMathBigInteger *)maxBaseCRLNumber;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder)

FOUNDATION_EXPORT void OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *self, id<JavaSecurityCertCRLSelector> crlSelector);

FOUNDATION_EXPORT OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *new_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(id<JavaSecurityCertCRLSelector> crlSelector) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder *create_OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder_initWithJavaSecurityCertCRLSelector_(id<JavaSecurityCertCRLSelector> crlSelector);

J2OBJC_TYPE_LITERAL_HEADER(OrgSpongycastleJcajcePKIXCRLStoreSelector_Builder)

#endif

#pragma pop_macro("INCLUDE_ALL_PKIXCRLStoreSelector")
