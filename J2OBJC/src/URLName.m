//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/URLName.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "URLName.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringIndexOutOfBoundsException.h"
#include "java/net/InetAddress.h"
#include "java/net/UnknownHostException.h"
#include "java/util/BitSet.h"
#include "java/util/Locale.h"
#include "java/util/logging/Logger.h"

#if !__has_feature(objc_arc)
#error "URLName must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpURLName () {
 @public
  /*!
   @brief The protocol to use (ftp, http, nntp, imap, pop3 ...etc.).
   */
  NSString *protocol_;
  /*!
   @brief The username to use when connecting.
   */
  NSString *username_;
  /*!
   @brief The password to use when connecting.
   */
  NSString *password_;
  /*!
   @brief The host name to which to connect.
   */
  NSString *host_;
  /*!
   @brief The host's IP address, used in equals and hashCode.Computed on demand.
   */
  JavaNetInetAddress *hostAddress_;
  jboolean hostAddressKnown_;
  /*!
   @brief The protocol port to connect to.
   */
  jint port_;
  /*!
   @brief The specified file name on that host.
   */
  NSString *file_;
  /*!
   @brief # reference.
   */
  NSString *ref_;
  /*!
   @brief Our hash code.
   */
  jint hashCode_;
}

/*!
 @brief Method which does all of the work of parsing the string.
 @param url URL string.
 */
- (void)parseStringWithNSString:(NSString *)url;

/*!
 @brief Get the IP address of our host.Look up the name the first time and
  remember that we've done so, whether the lookup fails or not.
 @return IP address of our host.
 */
- (JavaNetInetAddress *)getHostAddress;

/*!
 @brief Return the first index of any of the characters in "any" in "s", or -1 if
  none are found.
 This should be a method on String.
 @param s Input string.
 @param any String of characters to search for.
 @return The first index of any of the characters in "any" in "s", or -1 if
           none are found.
 */
+ (jint)indexOfAnyWithNSString:(NSString *)s
                  withNSString:(NSString *)any;

+ (jint)indexOfAnyWithNSString:(NSString *)s
                  withNSString:(NSString *)any
                       withInt:(jint)start;

@end

J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, protocol_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, username_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, password_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, host_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, hostAddress_, JavaNetInetAddress *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, file_, NSString *)
J2OBJC_FIELD_SETTER(EsGobAfirmaCoreMiscHttpURLName, ref_, NSString *)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpURLName_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpURLName_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpURLName, LOGGER, JavaUtilLoggingLogger *)

/*!
 @brief A way to turn off encoding, just in case...
 */
inline jboolean EsGobAfirmaCoreMiscHttpURLName_get_doEncode(void);
inline jboolean EsGobAfirmaCoreMiscHttpURLName_set_doEncode(jboolean value);
inline jboolean *EsGobAfirmaCoreMiscHttpURLName_getRef_doEncode(void);
static jboolean EsGobAfirmaCoreMiscHttpURLName_doEncode = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(EsGobAfirmaCoreMiscHttpURLName, doEncode, jboolean)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpURLName_parseStringWithNSString_(EsGobAfirmaCoreMiscHttpURLName *self, NSString *url);

__attribute__((unused)) static JavaNetInetAddress *EsGobAfirmaCoreMiscHttpURLName_getHostAddress(EsGobAfirmaCoreMiscHttpURLName *self);

__attribute__((unused)) static jint EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_(NSString *s, NSString *any);

__attribute__((unused)) static jint EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_withInt_(NSString *s, NSString *any, jint start);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/es/gob/afirma/core/misc/http/URLName.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpURLName)

JavaUtilBitSet *EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding;


#line 69
@implementation EsGobAfirmaCoreMiscHttpURLName


#line 120
- (instancetype)initPackagePrivateWithNSString:(NSString *)url {
  EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(self, url);
  return self;
}

- (NSString *)description {
  
#line 127
  if (self->fullURL_ == nil) {
    
#line 129
    JavaLangStringBuffer *tempURL = new_JavaLangStringBuffer_init();
    if (self->protocol_ != nil) {
      (void) [tempURL appendWithNSString:self->protocol_];
      (void) [tempURL appendWithNSString:@":"];
    }
    
#line 135
    if (self->username_ != nil || self->host_ != nil) {
      
#line 137
      (void) [tempURL appendWithNSString:@"//"];
      
#line 141
      if (self->username_ != nil) {
        (void) [tempURL appendWithNSString:self->username_];
        
#line 144
        if (self->password_ != nil) {
          (void) [tempURL appendWithNSString:@":"];
          (void) [tempURL appendWithNSString:self->password_];
        }
        
#line 149
        (void) [tempURL appendWithNSString:@"@"];
      }
      
#line 153
      if (self->host_ != nil) {
        (void) [tempURL appendWithNSString:self->host_];
      }
      
#line 158
      if (self->port_ != -1) {
        (void) [tempURL appendWithNSString:@":"];
        (void) [tempURL appendWithNSString:JavaLangInteger_toStringWithInt_(self->port_)];
      }
      if (self->file_ != nil) {
        (void) [tempURL appendWithNSString:@"/"];
      }
    }
    
#line 168
    if (self->file_ != nil) {
      (void) [tempURL appendWithNSString:self->file_];
    }
    
#line 173
    if (self->ref_ != nil) {
      (void) [tempURL appendWithNSString:@"#"];
      (void) [tempURL appendWithNSString:self->ref_];
    }
    
#line 179
    self->fullURL_ = [tempURL description];
  }
  
#line 182
  return self->fullURL_;
}


#line 187
- (void)parseStringWithNSString:(NSString *)url {
  EsGobAfirmaCoreMiscHttpURLName_parseStringWithNSString_(self, url);
}


#line 283
- (jint)getPort {
  return self->port_;
}


#line 291
- (NSString *)getProtocol {
  return self->protocol_;
}


#line 299
- (NSString *)getFile {
  return self->file_;
}


#line 307
- (NSString *)getHost {
  return self->host_;
}


#line 315
- (NSString *)getUsername {
  return EsGobAfirmaCoreMiscHttpURLName_doEncode ? EsGobAfirmaCoreMiscHttpURLName_decodeWithNSString_(self->username_) : self->username_;
}


#line 323
- (NSString *)getPassword {
  return EsGobAfirmaCoreMiscHttpURLName_doEncode ? EsGobAfirmaCoreMiscHttpURLName_decodeWithNSString_(self->password_) : self->password_;
}


#line 349
- (jboolean)isEqual:(id)obj {
  
#line 351
  if (!([obj isKindOfClass:[EsGobAfirmaCoreMiscHttpURLName class]])) {
    return false;
  }
  EsGobAfirmaCoreMiscHttpURLName *u2 = (EsGobAfirmaCoreMiscHttpURLName *) cast_chk(obj, [EsGobAfirmaCoreMiscHttpURLName class]);
  
#line 357
  if (((EsGobAfirmaCoreMiscHttpURLName *) nil_chk(u2))->protocol_ == nil || ![u2->protocol_ isEqual:self->protocol_]) {
    return false;
  }
  
#line 362
  JavaNetInetAddress *a1 = EsGobAfirmaCoreMiscHttpURLName_getHostAddress(self);
  
#line 362
  JavaNetInetAddress *a2 = EsGobAfirmaCoreMiscHttpURLName_getHostAddress(u2);
  
#line 364
  if (a1 != nil && a2 != nil) {
    if (![a1 isEqual:a2]) {
      return false;
    }
  }
  else
#line 371
  if (self->host_ != nil && u2->host_ != nil) {
    if (![self->host_ java_equalsIgnoreCase:u2->host_]) {
      return false;
    }
  }
  else
#line 377
  if (!JreStringEqualsEquals(self->host_, u2->host_)) {
    return false;
  }
  
#line 383
  if (!(JreStringEqualsEquals(self->username_, u2->username_) || (self->username_ != nil &&
#line 384
  [self->username_ isEqual:u2->username_]))) {
    return false;
  }
  
#line 392
  NSString *f1 = self->file_ == nil ? @"" : self->file_;
  NSString *f2 = u2->file_ == nil ? @"" : u2->file_;
  
#line 395
  if (![f1 isEqual:f2]) {
    return false;
  }
  
#line 400
  if (self->port_ != u2->port_) {
    return false;
  }
  
#line 405
  return true;
}


#line 409
- (NSUInteger)hash {
  
#line 411
  if (self->hashCode_ != 0) {
    return self->hashCode_;
  }
  if (self->protocol_ != nil) {
    self->hashCode_ += ((jint) [self->protocol_ hash]);
  }
  JavaNetInetAddress *addr = EsGobAfirmaCoreMiscHttpURLName_getHostAddress(self);
  if (addr != nil) {
    self->hashCode_ += ((jint) [addr hash]);
  }
  else if (self->host_ != nil) {
    self->hashCode_ += ((jint) [((NSString *) nil_chk([self->host_ java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ENGLISH)])) hash]);
  }
  if (self->username_ != nil) {
    self->hashCode_ += ((jint) [self->username_ hash]);
  }
  if (self->file_ != nil) {
    self->hashCode_ += ((jint) [self->file_ hash]);
  }
  self->hashCode_ += self->port_;
  return self->hashCode_;
}


#line 437
- (JavaNetInetAddress *)getHostAddress {
  return EsGobAfirmaCoreMiscHttpURLName_getHostAddress(self);
}


#line 524
+ (NSString *)decodeWithNSString:(NSString *)s {
  return EsGobAfirmaCoreMiscHttpURLName_decodeWithNSString_(s);
}


#line 575
+ (jint)indexOfAnyWithNSString:(NSString *)s
                  withNSString:(NSString *)any {
  return EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_(s, any);
}


#line 579
+ (jint)indexOfAnyWithNSString:(NSString *)s
                  withNSString:(NSString *)any
                       withInt:(jint)start {
  return EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_withInt_(s, any, start);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetInetAddress;", 0x22, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 6, 0, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 7, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithNSString:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(parseStringWithNSString:);
  methods[3].selector = @selector(getPort);
  methods[4].selector = @selector(getProtocol);
  methods[5].selector = @selector(getFile);
  methods[6].selector = @selector(getHost);
  methods[7].selector = @selector(getUsername);
  methods[8].selector = @selector(getPassword);
  methods[9].selector = @selector(isEqual:);
  methods[10].selector = @selector(hash);
  methods[11].selector = @selector(getHostAddress);
  methods[12].selector = @selector(decodeWithNSString:);
  methods[13].selector = @selector(indexOfAnyWithNSString:withNSString:);
  methods[14].selector = @selector(indexOfAnyWithNSString:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "fullURL_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "protocol_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "username_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "password_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hostAddress_", "LJavaNetInetAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hostAddressKnown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "file_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ref_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hashCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "doEncode", "Z", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "dontNeedEncoding", "LJavaUtilBitSet;", .constantValue.asLong = 0, 0x8, -1, 12, -1, -1 },
    { "CASE_DIFF", "I", .constantValue.asInt = EsGobAfirmaCoreMiscHttpURLName_CASE_DIFF, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "parseString", "equals", "LNSObject;", "hashCode", "decode", "indexOfAny", "LNSString;LNSString;", "LNSString;LNSString;I", &EsGobAfirmaCoreMiscHttpURLName_LOGGER, &EsGobAfirmaCoreMiscHttpURLName_doEncode, &EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpURLName = { "URLName", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x10, 15, 15, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpURLName;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpURLName class]) {
    EsGobAfirmaCoreMiscHttpURLName_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 71
    @"es.gob.afirma");
    {
      
#line 108
      @try {
        EsGobAfirmaCoreMiscHttpURLName_doEncode = !JavaLangBoolean_getBooleanWithNSString_(@"mail.URLName.dontencode");
      }
      @catch (JavaLangException *ex) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_LOGGER)) warningWithNSString:JreStrcat("$@", @"No se ha podido leer la variable 'mail.URLName.dontencode': ", ex)];
      }
    }
    {
      
#line 480
      EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding = new_JavaUtilBitSet_initWithInt_(256);
      jint i;
      for (i = 'a'; i <= 'z'; i++) {
        [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:i];
      }
      for (i = 'A'; i <= 'Z'; i++) {
        [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:i];
      }
      for (i = '0'; i <= '9'; i++) {
        [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:i];
      }
      
#line 492
      [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:' '];
      [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:'-'];
      [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:'_'];
      [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:'.'];
      [((JavaUtilBitSet *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_dontNeedEncoding)) setWithInt:'*'];
    }
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpURLName)
  }
}

@end


#line 120
void EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(EsGobAfirmaCoreMiscHttpURLName *self, NSString *url) {
  NSObject_init(self);
  self->hostAddressKnown_ =
#line 90
  false;
  self->port_ =
#line 93
  -1;
  self->hashCode_ =
#line 102
  0;
  
#line 121
  EsGobAfirmaCoreMiscHttpURLName_parseStringWithNSString_(self, url);
}


#line 120
EsGobAfirmaCoreMiscHttpURLName *new_EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(NSString *url) {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpURLName, initPackagePrivateWithNSString_, url)
}


#line 120
EsGobAfirmaCoreMiscHttpURLName *create_EsGobAfirmaCoreMiscHttpURLName_initPackagePrivateWithNSString_(NSString *url) {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpURLName, initPackagePrivateWithNSString_, url)
}


#line 187
void EsGobAfirmaCoreMiscHttpURLName_parseStringWithNSString_(EsGobAfirmaCoreMiscHttpURLName *self, NSString *url) {
  
#line 190
  self->protocol_ = self->file_ = self->ref_ = self->host_ = self->username_ = self->password_ = nil;
  self->port_ = -1;
  
#line 193
  jint len = [((NSString *) nil_chk(url)) java_length];
  
#line 198
  jint protocolEnd = [url java_indexOf:':'];
  if (protocolEnd != -1) {
    self->protocol_ = [url java_substring:0 endIndex:protocolEnd];
  }
  
#line 204
  if ([url java_regionMatches:protocolEnd + 1 aString:@"//" otherOffset:0 count:2]) {
    
#line 206
    NSString *fullhost = nil;
    jint fileStart = [url java_indexOf:'/' fromIndex:protocolEnd + 3];
    if (fileStart != -1) {
      fullhost = [url java_substring:protocolEnd + 3 endIndex:fileStart];
      if (fileStart + 1 < len) {
        self->file_ = [url java_substring:fileStart + 1];
      }
      else {
        self->file_ = @"";
      }
    }
    else {
      fullhost = [url java_substring:protocolEnd + 3];
    }
    
#line 222
    jint i = [((NSString *) nil_chk(fullhost)) java_indexOf:'@'];
    if (i != -1) {
      NSString *fulluserpass = [fullhost java_substring:0 endIndex:i];
      fullhost = [fullhost java_substring:i + 1];
      
#line 228
      jint passindex = [((NSString *) nil_chk(fulluserpass)) java_indexOf:':'];
      if (passindex != -1) {
        self->username_ = [fulluserpass java_substring:0 endIndex:passindex];
        self->password_ = [fulluserpass java_substring:passindex + 1];
      }
      else {
        self->username_ = fulluserpass;
      }
    }
    
#line 239
    jint portindex;
    if ([((NSString *) nil_chk(fullhost)) java_length] > 0 && [fullhost charAtWithInt:0] == '[') {
      
#line 242
      portindex = [fullhost java_indexOf:':' fromIndex:[fullhost java_indexOf:']']];
    }
    else {
      portindex = [fullhost java_indexOf:':'];
    }
    if (portindex != -1) {
      NSString *portstring = [fullhost java_substring:portindex + 1];
      if ([((NSString *) nil_chk(portstring)) java_length] > 0) {
        @try {
          self->port_ = JavaLangInteger_parseIntWithNSString_(portstring);
        }
        @catch (JavaLangNumberFormatException *nfex) {
          [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_LOGGER)) warningWithNSString:JreStrcat("$$$@", @"El numero de puerto establecido '", portstring, @"' no es valido: ", nfex)];
          self->port_ = -1;
        }
      }
      
#line 259
      self->host_ = [fullhost java_substring:0 endIndex:portindex];
    }
    else {
      self->host_ = fullhost;
    }
  }
  else {
    if (protocolEnd + 1 < len) {
      self->file_ = [url java_substring:protocolEnd + 1];
    }
  }
  
#line 272
  jint refStart;
  if (self->file_ != nil && (refStart = [self->file_ java_indexOf:'#']) != -1) {
    self->ref_ = [self->file_ java_substring:refStart + 1];
    self->file_ = [((NSString *) nil_chk(self->file_)) java_substring:0 endIndex:refStart];
  }
}


#line 437
JavaNetInetAddress *EsGobAfirmaCoreMiscHttpURLName_getHostAddress(EsGobAfirmaCoreMiscHttpURLName *self) {
  @synchronized(self) {
    
#line 438
    if (self->hostAddressKnown_) {
      return JreRetainedLocalValue(self->hostAddress_);
    }
    if (self->host_ == nil) {
      return JreRetainedLocalValue(nil);
    }
    @try {
      self->hostAddress_ = JavaNetInetAddress_getByNameWithNSString_(self->host_);
    }
    @catch (JavaNetUnknownHostException *ex) {
      [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_LOGGER)) warningWithNSString:JreStrcat("$@", @"El host establecido no se puede resolver: ", ex)];
      self->hostAddress_ = nil;
    }
    self->hostAddressKnown_ = true;
    return JreRetainedLocalValue(self->hostAddress_);
  }
}


#line 524
NSString *EsGobAfirmaCoreMiscHttpURLName_decodeWithNSString_(NSString *s) {
  EsGobAfirmaCoreMiscHttpURLName_initialize();
  
#line 525
  if (s == nil) {
    return nil;
  }
  if (EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_(s, @"+%") == -1) {
    return s;
  }
  
#line 532
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  for (jint i = 0; i < [s java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    switch (c) {
      case '+':
      (void) [sb appendWithChar:' '];
      break;
      case '%':
      @try {
        (void) [sb appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_(
#line 542
        [s java_substring:i + 1 endIndex:i + 3], 16)];
      }
      @catch (
#line 545
      JavaLangNumberFormatException *e) {
        @throw new_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e);
      }
      i += 2;
      break;
      default:
      (void) [sb appendWithChar:c];
      break;
    }
  }
  
#line 556
  NSString *result = [sb description];
  @try {
    IOSByteArray *inputBytes = [((NSString *) nil_chk(result)) java_getBytesWithCharsetName:@"8859_1"];
    result = [NSString java_stringWithBytes:inputBytes];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpURLName_LOGGER)) warningWithNSString:JreStrcat("$@", @"El sistema no soporta la codificacion ISO 8859-1: ", e)];
  }
  
#line 565
  return result;
}


#line 575
jint EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_(NSString *s, NSString *any) {
  EsGobAfirmaCoreMiscHttpURLName_initialize();
  
#line 576
  return EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_withInt_(s, any, 0);
}


#line 579
jint EsGobAfirmaCoreMiscHttpURLName_indexOfAnyWithNSString_withNSString_withInt_(NSString *s, NSString *any, jint start) {
  EsGobAfirmaCoreMiscHttpURLName_initialize();
  
#line 580
  @try {
    jint len = [((NSString *) nil_chk(s)) java_length];
    for (jint i = start; i < len; i++) {
      if ([((NSString *) nil_chk(any)) java_indexOf:[s charAtWithInt:i]] >= 0) {
        return i;
      }
    }
    return -1;
  }
  @catch (JavaLangStringIndexOutOfBoundsException *e) {
    return -1;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpURLName)
