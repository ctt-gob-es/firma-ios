//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/LUTColorConverter.java
//

#include "ColorSpace.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LUTColorConverter.h"
#include "java/lang/Math.h"

#if !__has_feature(objc_arc)
#error "LUTColorConverter must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComLUTColorConverter ()

+ (IOSByteArray *)createLUTWithInt:(jint)bits;

@end

inline IOSByteArray *ComLUTColorConverter_get_from8lRGBtosRGB_LUT(void);
inline IOSByteArray *ComLUTColorConverter_set_from8lRGBtosRGB_LUT(IOSByteArray *value);
static IOSByteArray *ComLUTColorConverter_from8lRGBtosRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(ComLUTColorConverter, from8lRGBtosRGB_LUT, IOSByteArray *)

inline IOSByteArray *ComLUTColorConverter_get_from16lRGBtosRGB_LUT(void);
inline IOSByteArray *ComLUTColorConverter_set_from16lRGBtosRGB_LUT(IOSByteArray *value);
static IOSByteArray *ComLUTColorConverter_from16lRGBtosRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(ComLUTColorConverter, from16lRGBtosRGB_LUT, IOSByteArray *)

inline IOSByteArray *ComLUTColorConverter_get_fromsRGBto8lRGB_LUT(void);
inline IOSByteArray *ComLUTColorConverter_set_fromsRGBto8lRGB_LUT(IOSByteArray *value);
static IOSByteArray *ComLUTColorConverter_fromsRGBto8lRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(ComLUTColorConverter, fromsRGBto8lRGB_LUT, IOSByteArray *)

inline IOSShortArray *ComLUTColorConverter_get_fromsRGBto16lRGB_LUT(void);
inline IOSShortArray *ComLUTColorConverter_set_fromsRGBto16lRGB_LUT(IOSShortArray *value);
static IOSShortArray *ComLUTColorConverter_fromsRGBto16lRGB_LUT;
J2OBJC_STATIC_FIELD_OBJ(ComLUTColorConverter, fromsRGBto16lRGB_LUT, IOSShortArray *)

inline IOSObjectArray *ComLUTColorConverter_get_fromsRGBto8sRGB_LUTs(void);
inline IOSObjectArray *ComLUTColorConverter_set_fromsRGBto8sRGB_LUTs(IOSObjectArray *value);
static IOSObjectArray *ComLUTColorConverter_fromsRGBto8sRGB_LUTs;
J2OBJC_STATIC_FIELD_OBJ(ComLUTColorConverter, fromsRGBto8sRGB_LUTs, IOSObjectArray *)

__attribute__((unused)) static IOSByteArray *ComLUTColorConverter_createLUTWithInt_(jint bits);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/LUTColorConverter.java"

HarmonyJavaAwtColorColorSpace *ComLUTColorConverter_LINEAR_RGB_CS;
HarmonyJavaAwtColorColorSpace *ComLUTColorConverter_LINEAR_GRAY_CS;
HarmonyJavaAwtColorColorSpace *ComLUTColorConverter_sRGB_CS;


#line 24
@implementation ComLUTColorConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 42
- (instancetype)init {
  ComLUTColorConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 54
+ (IOSByteArray *)getFrom8lRGBtosRGB_LUT {
  return ComLUTColorConverter_getFrom8lRGBtosRGB_LUT();
}


#line 67
+ (IOSByteArray *)getFrom16lRGBtosRGB_LUT {
  return ComLUTColorConverter_getFrom16lRGBtosRGB_LUT();
}


#line 80
+ (IOSByteArray *)getFromsRGBto8lRGB_LUT {
  return ComLUTColorConverter_getFromsRGBto8lRGB_LUT();
}


#line 93
+ (IOSShortArray *)getFromsRGBto16lRGB_LUT {
  return ComLUTColorConverter_getFromsRGBto16lRGB_LUT();
}


#line 106
+ (IOSByteArray *)getsRGBLUTWithInt:(jint)bits {
  return ComLUTColorConverter_getsRGBLUTWithInt_(bits);
}


#line 119
+ (IOSByteArray *)createLUTWithInt:(jint)bits {
  return ComLUTColorConverter_createLUTWithInt_(bits);
}


#line 128
+ (jboolean)is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return ComLUTColorConverter_is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (jboolean)is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return ComLUTColorConverter_is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (jboolean)is_sRGB_CSWithHarmonyJavaAwtColorColorSpace:(HarmonyJavaAwtColorColorSpace *)cs {
  return ComLUTColorConverter_is_sRGB_CSWithHarmonyJavaAwtColorColorSpace_(cs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[S", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[B", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFrom8lRGBtosRGB_LUT);
  methods[2].selector = @selector(getFrom16lRGBtosRGB_LUT);
  methods[3].selector = @selector(getFromsRGBto8lRGB_LUT);
  methods[4].selector = @selector(getFromsRGBto16lRGB_LUT);
  methods[5].selector = @selector(getsRGBLUTWithInt:);
  methods[6].selector = @selector(createLUTWithInt:);
  methods[7].selector = @selector(is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace:);
  methods[8].selector = @selector(is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace:);
  methods[9].selector = @selector(is_sRGB_CSWithHarmonyJavaAwtColorColorSpace:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "from8lRGBtosRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "from16lRGBtosRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "fromsRGBto8lRGB_LUT", "[B", .constantValue.asLong = 0, 0xa, -1, 9, -1, -1 },
    { "fromsRGBto16lRGB_LUT", "[S", .constantValue.asLong = 0, 0xa, -1, 10, -1, -1 },
    { "fromsRGBto8sRGB_LUTs", "[[B", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "LINEAR_RGB_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 12, -1, -1 },
    { "LINEAR_GRAY_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 13, -1, -1 },
    { "sRGB_CS", "LHarmonyJavaAwtColorColorSpace;", .constantValue.asLong = 0, 0x9, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "getsRGBLUT", "I", "createLUT", "is_LINEAR_RGB_CS", "LHarmonyJavaAwtColorColorSpace;", "is_LINEAR_GRAY_CS", "is_sRGB_CS", &ComLUTColorConverter_from8lRGBtosRGB_LUT, &ComLUTColorConverter_from16lRGBtosRGB_LUT, &ComLUTColorConverter_fromsRGBto8lRGB_LUT, &ComLUTColorConverter_fromsRGBto16lRGB_LUT, &ComLUTColorConverter_fromsRGBto8sRGB_LUTs, &ComLUTColorConverter_LINEAR_RGB_CS, &ComLUTColorConverter_LINEAR_GRAY_CS, &ComLUTColorConverter_sRGB_CS };
  static const J2ObjcClassInfo _ComLUTColorConverter = { "LUTColorConverter", "com", ptrTable, methods, fields, 7, 0x1, 10, 8, -1, -1, -1, -1, -1 };
  return &_ComLUTColorConverter;
}

@end


#line 42
void ComLUTColorConverter_init(ComLUTColorConverter *self) {
  NSObject_init(self);
}


#line 42
ComLUTColorConverter *new_ComLUTColorConverter_init() {
  J2OBJC_NEW_IMPL(ComLUTColorConverter, init)
}


#line 42
ComLUTColorConverter *create_ComLUTColorConverter_init() {
  J2OBJC_CREATE_IMPL(ComLUTColorConverter, init)
}


#line 54
IOSByteArray *ComLUTColorConverter_getFrom8lRGBtosRGB_LUT() {
  ComLUTColorConverter_initialize();
  
#line 55
  if (ComLUTColorConverter_from8lRGBtosRGB_LUT == nil) {
    ComLUTColorConverter_from8lRGBtosRGB_LUT = [IOSByteArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.04045f) ? v / 12.92f : (jfloat) JavaLangMath_powWithDouble_withDouble_((v + 0.055) / 1.055, 2.4);
      *IOSByteArray_GetRef(nil_chk(ComLUTColorConverter_from8lRGBtosRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return ComLUTColorConverter_from8lRGBtosRGB_LUT;
}


#line 67
IOSByteArray *ComLUTColorConverter_getFrom16lRGBtosRGB_LUT() {
  ComLUTColorConverter_initialize();
  
#line 68
  if (ComLUTColorConverter_from16lRGBtosRGB_LUT == nil) {
    ComLUTColorConverter_from16lRGBtosRGB_LUT = [IOSByteArray newArrayWithLength:65536];
    jfloat v;
    for (jint i = 0; i < 65536; i++) {
      v = (jfloat) i / 65535;
      v = (v <= 0.04045f) ? v / 12.92f : (jfloat) JavaLangMath_powWithDouble_withDouble_((v + 0.055) / 1.055, 2.4);
      *IOSByteArray_GetRef(nil_chk(ComLUTColorConverter_from16lRGBtosRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return ComLUTColorConverter_from16lRGBtosRGB_LUT;
}


#line 80
IOSByteArray *ComLUTColorConverter_getFromsRGBto8lRGB_LUT() {
  ComLUTColorConverter_initialize();
  
#line 81
  if (ComLUTColorConverter_fromsRGBto8lRGB_LUT == nil) {
    ComLUTColorConverter_fromsRGBto8lRGB_LUT = [IOSByteArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.0031308f) ? v * 12.92f : ((jfloat) JavaLangMath_powWithDouble_withDouble_(v, 1.0 / 2.4)) * 1.055f - 0.055f;
      *IOSByteArray_GetRef(nil_chk(ComLUTColorConverter_fromsRGBto8lRGB_LUT), i) = (jbyte) JavaLangMath_roundWithFloat_(v * 255.0f);
    }
  }
  return ComLUTColorConverter_fromsRGBto8lRGB_LUT;
}


#line 93
IOSShortArray *ComLUTColorConverter_getFromsRGBto16lRGB_LUT() {
  ComLUTColorConverter_initialize();
  
#line 94
  if (ComLUTColorConverter_fromsRGBto16lRGB_LUT == nil) {
    ComLUTColorConverter_fromsRGBto16lRGB_LUT = [IOSShortArray newArrayWithLength:256];
    jfloat v;
    for (jint i = 0; i < 256; i++) {
      v = (jfloat) i / 255;
      v = (v <= 0.0031308f) ? v * 12.92f : ((jfloat) JavaLangMath_powWithDouble_withDouble_(v, 1.0 / 2.4)) * 1.055f - 0.055f;
      *IOSShortArray_GetRef(nil_chk(ComLUTColorConverter_fromsRGBto16lRGB_LUT), i) = (jshort) JavaLangMath_roundWithFloat_(v * 65535.0f);
    }
  }
  return ComLUTColorConverter_fromsRGBto16lRGB_LUT;
}


#line 106
IOSByteArray *ComLUTColorConverter_getsRGBLUTWithInt_(jint bits) {
  ComLUTColorConverter_initialize();
  
#line 107
  if (bits < 1)
#line 108
  return nil;
  jint idx = bits - 1;
  if (ComLUTColorConverter_fromsRGBto8sRGB_LUTs == nil)
#line 111
  ComLUTColorConverter_fromsRGBto8sRGB_LUTs = [IOSObjectArray newArrayWithLength:16 type:IOSClass_byteArray(1)];
  
#line 113
  if (IOSObjectArray_Get(ComLUTColorConverter_fromsRGBto8sRGB_LUTs, idx) == nil) {
    (void) IOSObjectArray_Set(ComLUTColorConverter_fromsRGBto8sRGB_LUTs, idx, ComLUTColorConverter_createLUTWithInt_(bits));
  }
  return IOSObjectArray_Get(nil_chk(ComLUTColorConverter_fromsRGBto8sRGB_LUTs), idx);
}


#line 119
IOSByteArray *ComLUTColorConverter_createLUTWithInt_(jint bits) {
  ComLUTColorConverter_initialize();
  
#line 120
  jint lutSize = (JreLShift32(1, bits));
  IOSByteArray *lut = [IOSByteArray newArrayWithLength:lutSize];
  for (jint i = 0; i < lutSize; i++) {
    *IOSByteArray_GetRef(lut, i) = (jbyte) JreFpToInt((255.0f / (lutSize - 1) + 0.5f));
  }
  return lut;
}


#line 128
jboolean ComLUTColorConverter_is_LINEAR_RGB_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  ComLUTColorConverter_initialize();
  
#line 129
  return (JreObjectEqualsEquals(cs, ComLUTColorConverter_LINEAR_RGB_CS));
}


#line 132
jboolean ComLUTColorConverter_is_LINEAR_GRAY_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  ComLUTColorConverter_initialize();
  
#line 133
  return (JreObjectEqualsEquals(cs, ComLUTColorConverter_LINEAR_GRAY_CS));
}


#line 136
jboolean ComLUTColorConverter_is_sRGB_CSWithHarmonyJavaAwtColorColorSpace_(HarmonyJavaAwtColorColorSpace *cs) {
  ComLUTColorConverter_initialize();
  
#line 137
  return (JreObjectEqualsEquals(cs, ComLUTColorConverter_sRGB_CS));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComLUTColorConverter)
