//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/DataDownloader.java
//

#include "AOUtil.h"
#include "Base64.h"
#include "DataDownloader.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LoggerUtil.h"
#include "SSLConfig.h"
#include "SSLErrorProcessor.h"
#include "SslSecurityManager.h"
#include "UrlHttpManager.h"
#include "UrlHttpManagerFactory.h"
#include "UrlHttpMethod.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/net/URI.h"
#include "java/net/URISyntaxException.h"
#include "java/net/URL.h"
#include "java/security/SecureRandom.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "java/util/zip/GZIPInputStream.h"
#include "javax/net/ssl/HostnameVerifier.h"
#include "javax/net/ssl/SSLContext.h"
#include "javax/net/ssl/SSLHandshakeException.h"
#include "javax/net/ssl/SSLSocketFactory.h"

#if !__has_feature(objc_arc)
#error "DataDownloader must be compiled with ARC (-fobjc-arc)"
#endif

@interface EsGobAfirmaCoreMiscHttpDataDownloader ()

- (instancetype)init;

+ (IOSByteArray *)gunzipBytesWithByteArray:(IOSByteArray *)compressedData;

@end

inline jint EsGobAfirmaCoreMiscHttpDataDownloader_get_GUNZIP_BUFFER_SIZE(void);
#define EsGobAfirmaCoreMiscHttpDataDownloader_GUNZIP_BUFFER_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(EsGobAfirmaCoreMiscHttpDataDownloader, GUNZIP_BUFFER_SIZE, jint)

inline JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpDataDownloader_get_LOGGER(void);
static JavaUtilLoggingLogger *EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(EsGobAfirmaCoreMiscHttpDataDownloader, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static void EsGobAfirmaCoreMiscHttpDataDownloader_init(EsGobAfirmaCoreMiscHttpDataDownloader *self);

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpDataDownloader *new_EsGobAfirmaCoreMiscHttpDataDownloader_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static EsGobAfirmaCoreMiscHttpDataDownloader *create_EsGobAfirmaCoreMiscHttpDataDownloader_init(void);

__attribute__((unused)) static IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_gunzipBytesWithByteArray_(IOSByteArray *compressedData);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/es/gob/afirma/core/misc/http/DataDownloader.java"

J2OBJC_INITIALIZED_DEFN(EsGobAfirmaCoreMiscHttpDataDownloader)


#line 34
@implementation EsGobAfirmaCoreMiscHttpDataDownloader

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 40
- (instancetype)init {
  EsGobAfirmaCoreMiscHttpDataDownloader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 57
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds
                               withBoolean:(jboolean)gzipped
                               withBoolean:(jboolean)ignoreSSLSecurity {
  return EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_withBoolean_(ds, gzipped, ignoreSSLSecurity);
}


#line 153
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds
                               withBoolean:(jboolean)gzipped {
  return EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_(ds, gzipped);
}


#line 166
+ (IOSByteArray *)downloadDataWithNSString:(NSString *)ds {
  return EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_(ds);
}

+ (IOSByteArray *)gunzipBytesWithByteArray:(IOSByteArray *)compressedData {
  return EsGobAfirmaCoreMiscHttpDataDownloader_gunzipBytesWithByteArray_(compressedData);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "[B", 0xa, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(downloadDataWithNSString:withBoolean:withBoolean:);
  methods[2].selector = @selector(downloadDataWithNSString:withBoolean:);
  methods[3].selector = @selector(downloadDataWithNSString:);
  methods[4].selector = @selector(gunzipBytesWithByteArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GUNZIP_BUFFER_SIZE", "I", .constantValue.asInt = EsGobAfirmaCoreMiscHttpDataDownloader_GUNZIP_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "downloadData", "LNSString;ZZ", "LJavaIoIOException;", "LNSString;Z", "LNSString;", "gunzipBytes", "[B", &EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER };
  static const J2ObjcClassInfo _EsGobAfirmaCoreMiscHttpDataDownloader = { "DataDownloader", "es.gob.afirma.core.misc.http", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, -1, -1 };
  return &_EsGobAfirmaCoreMiscHttpDataDownloader;
}

+ (void)initialize {
  if (self == [EsGobAfirmaCoreMiscHttpDataDownloader class]) {
    EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER = JavaUtilLoggingLogger_getLoggerWithNSString_(
#line 38
    @"es.gob.afirma");
    J2OBJC_SET_INITIALIZED(EsGobAfirmaCoreMiscHttpDataDownloader)
  }
}

@end


#line 40
void EsGobAfirmaCoreMiscHttpDataDownloader_init(EsGobAfirmaCoreMiscHttpDataDownloader *self) {
  NSObject_init(self);
}


#line 40
EsGobAfirmaCoreMiscHttpDataDownloader *new_EsGobAfirmaCoreMiscHttpDataDownloader_init() {
  J2OBJC_NEW_IMPL(EsGobAfirmaCoreMiscHttpDataDownloader, init)
}


#line 40
EsGobAfirmaCoreMiscHttpDataDownloader *create_EsGobAfirmaCoreMiscHttpDataDownloader_init() {
  J2OBJC_CREATE_IMPL(EsGobAfirmaCoreMiscHttpDataDownloader, init)
}


#line 57
IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_withBoolean_(NSString *ds, jboolean gzipped, jboolean ignoreSSLSecurity) {
  EsGobAfirmaCoreMiscHttpDataDownloader_initialize();
  if (ds == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"La fuente de datos no puede ser nula");
  }
  
#line 64
  if (gzipped && EsGobAfirmaCoreMiscBase64_isBase64WithByteArray_([ds java_getBytes])) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER)) infoWithNSString:
#line 66
    @"Se ha indicado que los datos de entrada estan comrpimidos con GZIP"];
    
#line 68
    return EsGobAfirmaCoreMiscHttpDataDownloader_gunzipBytesWithByteArray_(EsGobAfirmaCoreMiscBase64_decodeWithNSString_([((NSString *) nil_chk([ds java_replace:@"_" withSequence:@"/"])) java_replace:@"-" withSequence:@"+"]));
  }
  
#line 71
  NSString *dataSource = [ds java_trim];
  
#line 74
  if ([((NSString *) nil_chk(dataSource)) java_hasPrefix:@"http://"] || [dataSource java_hasPrefix:@"https://"]) {
    
#line 76
    EsGobAfirmaCoreMiscHttpSSLConfig *sslConfig = nil;
    if (ignoreSSLSecurity) {
      sslConfig = new_EsGobAfirmaCoreMiscHttpSSLConfig_init();
      [sslConfig setHostnameVerifierWithJavaxNetSslHostnameVerifier:JreLoadStatic(EsGobAfirmaCoreMiscHttpSslSecurityManager, DUMMY_HOSTNAME_VERIFIER)];
      @try {
        JavaxNetSslSSLContext *sslContext = JavaxNetSslSSLContext_getInstanceWithNSString_(@"SSL");
        [((JavaxNetSslSSLContext *) nil_chk(sslContext)) init__WithJavaxNetSslKeyManagerArray:nil withJavaxNetSslTrustManagerArray:JreLoadStatic(EsGobAfirmaCoreMiscHttpSslSecurityManager, DUMMY_TRUST_MANAGER) withJavaSecuritySecureRandom:new_JavaSecuritySecureRandom_init()];
        [sslConfig setSSLSocketFactoryWithJavaxNetSslSSLSocketFactory:[sslContext getSocketFactory]];
      }
      @catch (JavaLangException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:@"No se ha podido configurar la conexion para que ignore los problemas de confianza SSL" withJavaLangThrowable:e];
      }
    }
    
#line 90
    EsGobAfirmaCoreMiscHttpSSLErrorProcessor *processor = new_EsGobAfirmaCoreMiscHttpSSLErrorProcessor_init();
    @try {
      return [((id<EsGobAfirmaCoreMiscHttpUrlHttpManager>) nil_chk(EsGobAfirmaCoreMiscHttpUrlHttpManagerFactory_getInstalledManager())) readUrlWithNSString:dataSource withEsGobAfirmaCoreMiscHttpUrlHttpMethod:JreLoadEnum(EsGobAfirmaCoreMiscHttpUrlHttpMethod, GET) withEsGobAfirmaCoreMiscHttpHttpErrorProcessor:processor withEsGobAfirmaCoreMiscHttpSSLConfig:sslConfig];
    }
    @catch (
#line 93
    JavaxNetSslSSLHandshakeException *e) {
      if ([processor isCancelled]) {
        [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER)) infoWithNSString:JreStrcat("$$", @"El usuario no permite la importacion del certificado SSL de confianza para el acceso a ", EsGobAfirmaCoreMiscLoggerUtil_getTrimStrWithNSString_(
#line 96
        dataSource))];
      }
      @throw e;
    }
  }
  
#line 102
  if ([dataSource java_hasPrefix:@"ftp://"]) {
    JavaIoInputStream *ftpStream =
#line 104
    [new_JavaNetURL_initWithNSString_(dataSource) openStream];
    JavaLangThrowable *__primaryException1 = nil;
    
#line 103
    @try {
      
#line 106
      return EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(ftpStream);
    }
    @catch (JavaLangThrowable *e) {
      __primaryException1 = e;
      @throw e;
    }
    @finally {
      if (ftpStream != nil) {
        if (__primaryException1 != nil) {
          @try {
            [ftpStream close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException1 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [ftpStream close];
        }
      }
    }
  }
  
#line 110
  if ([dataSource java_hasPrefix:@"file:/"]) {
    @try {
      JavaIoInputStream *is = EsGobAfirmaCoreMiscAOUtil_loadFileWithJavaNetURI_(new_JavaNetURI_initWithNSString_(dataSource));
      JavaLangThrowable *__primaryException2 = nil;
      @try {
        JavaIoInputStream *bis = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(
#line 113
        is);
        JavaLangThrowable *__primaryException1 = nil;
        @try {
          
#line 115
          return EsGobAfirmaCoreMiscAOUtil_getDataFromInputStreamWithJavaIoInputStream_(bis);
        }
        @catch (JavaLangThrowable *e) {
          __primaryException1 = e;
          @throw e;
        }
        @finally {
          if (bis != nil) {
            if (__primaryException1 != nil) {
              @try {
                [bis close];
              }
              @catch (JavaLangThrowable *e) {
                [__primaryException1 addSuppressedWithJavaLangThrowable:e];
              }
            }
            else {
              [bis close];
            }
          }
        }
      }
      @catch (JavaLangThrowable *e) {
        __primaryException2 = e;
        @throw e;
      }
      @finally {
        if (is != nil) {
          if (__primaryException2 != nil) {
            @try {
              [is close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException2 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [is close];
          }
        }
      }
    }
    @catch (
#line 117
    JavaNetURISyntaxException *e) {
      @throw new_JavaIoIOException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$@", @"Error leyendo el fichero (",
#line 119
      dataSource, @"): ", e), e);
    }
  }
  
#line 127
  if (EsGobAfirmaCoreMiscBase64_isBase64WithByteArray_([dataSource java_getBytes])) {
    [((JavaUtilLoggingLogger *) nil_chk(EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER)) infoWithNSString:@"El contenido a obtener es Base64"];
    @try {
      return EsGobAfirmaCoreMiscBase64_decodeWithNSString_([((NSString *) nil_chk([dataSource java_replace:@"_" withSequence:@"/"])) java_replace:@"-" withSequence:@"+"]);
    }
    @catch (JavaLangException *e) {
      [EsGobAfirmaCoreMiscHttpDataDownloader_LOGGER warningWithNSString:JreStrcat("$@", @"Los datos introducidos no se pueden tratar como Base64: ",
#line 134
      e)];
    }
  }
  
#line 139
  return [dataSource java_getBytes];
}


#line 153
IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_(NSString *ds, jboolean gzipped) {
  EsGobAfirmaCoreMiscHttpDataDownloader_initialize();
  
#line 154
  return EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_withBoolean_(ds, gzipped, false);
}


#line 166
IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_(NSString *ds) {
  EsGobAfirmaCoreMiscHttpDataDownloader_initialize();
  
#line 167
  return EsGobAfirmaCoreMiscHttpDataDownloader_downloadDataWithNSString_withBoolean_withBoolean_(ds, false, false);
}


#line 170
IOSByteArray *EsGobAfirmaCoreMiscHttpDataDownloader_gunzipBytesWithByteArray_(IOSByteArray *compressedData) {
  EsGobAfirmaCoreMiscHttpDataDownloader_initialize();
  JavaIoByteArrayInputStream *bis = new_JavaIoByteArrayInputStream_initWithByteArray_(compressedData);
  JavaLangThrowable *__primaryException3 = nil;
  
#line 171
  @try {
    JavaIoByteArrayOutputStream *bos = new_JavaIoByteArrayOutputStream_init();
    JavaLangThrowable *__primaryException2 = nil;
    @try {
      JavaUtilZipGZIPInputStream *gzipIS = new_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_(
#line 174
      bis);
      JavaLangThrowable *__primaryException1 = nil;
      @try {
        
#line 176
        IOSByteArray *buffer = [IOSByteArray newArrayWithLength:EsGobAfirmaCoreMiscHttpDataDownloader_GUNZIP_BUFFER_SIZE];
        jint len;
        while ((len = [gzipIS readWithByteArray:buffer]) != -1) {
          [bos writeWithByteArray:buffer withInt:0 withInt:len];
        }
        return [bos toByteArray];
      }
      @catch (JavaLangThrowable *e) {
        __primaryException1 = e;
        @throw e;
      }
      @finally {
        if (gzipIS != nil) {
          if (__primaryException1 != nil) {
            @try {
              [gzipIS close];
            }
            @catch (JavaLangThrowable *e) {
              [__primaryException1 addSuppressedWithJavaLangThrowable:e];
            }
          }
          else {
            [gzipIS close];
          }
        }
      }
    }
    @catch (JavaLangThrowable *e) {
      __primaryException2 = e;
      @throw e;
    }
    @finally {
      if (bos != nil) {
        if (__primaryException2 != nil) {
          @try {
            [bos close];
          }
          @catch (JavaLangThrowable *e) {
            [__primaryException2 addSuppressedWithJavaLangThrowable:e];
          }
        }
        else {
          [bos close];
        }
      }
    }
  }
  @catch (JavaLangThrowable *e) {
    __primaryException3 = e;
    @throw e;
  }
  @finally {
    if (bis != nil) {
      if (__primaryException3 != nil) {
        @try {
          [bis close];
        }
        @catch (JavaLangThrowable *e) {
          [__primaryException3 addSuppressedWithJavaLangThrowable:e];
        }
      }
      else {
        [bis close];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EsGobAfirmaCoreMiscHttpDataDownloader)
