//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/ColumnText.java
//

#include "BidiLine.h"
#include "Chunk.h"
#include "Color.h"
#include "ColumnText.h"
#include "DocumentException.h"
#include "DrawInterface.h"
#include "Element.h"
#include "ExceptionConverter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Image.h"
#include "J2ObjC_source.h"
#include "List.h"
#include "ListItem.h"
#include "Paragraph.h"
#include "PdfChunk.h"
#include "PdfContentByte.h"
#include "PdfDocument.h"
#include "PdfFont.h"
#include "PdfLine.h"
#include "PdfPCell.h"
#include "PdfPRow.h"
#include "PdfPTable.h"
#include "PdfWriter.h"
#include "Phrase.h"
#include "SimpleTable.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Stack.h"

#if !__has_feature(objc_arc)
#error "ColumnText must be compiled with ARC (-fobjc-arc)"
#endif

@interface ComAowagieTextPdfColumnText () {
 @public
  jint runDirection_;
  /*!
   @brief Upper bound of the column.
   */
  jfloat maxY_;
  /*!
   @brief Lower bound of the column.
   */
  jfloat minY_;
  jfloat leftX_;
  jfloat rightX_;
  /*!
   @brief The column alignment.Default is left alignment.
   */
  jint alignment_;
  /*!
   @brief The left column bound.
   */
  JavaUtilArrayList *leftWall_;
  /*!
   @brief The right column bound.
   */
  JavaUtilArrayList *rightWall_;
  /*!
   @brief The chunks that form the text.
   */
  ComAowagieTextPdfBidiLine *bidiLine_;
  /*!
   @brief The current y line location.Text will be written at this line minus the leading.
   */
  jfloat yLine_;
  /*!
   @brief The leading for the current line.
   */
  jfloat currentLeading_;
  /*!
   @brief The fixed text leading.
   */
  jfloat fixedLeading_;
  /*!
   @brief The text leading that is multiplied by the biggest font size in the line.
   */
  jfloat multipliedLeading_;
  /*!
   @brief The <CODE>PdfContent</CODE> where the text will be written to.
   */
  ComAowagieTextPdfPdfContentByte *canvas_;
  IOSObjectArray *canvases_;
  /*!
   @brief The line status when trying to fit a line to a column.
   */
  jint lineStatus_;
  /*!
   @brief The first paragraph line indent.
   */
  jfloat indent_;
  /*!
   @brief The following paragraph lines indent.
   */
  jfloat followingIndent_;
  /*!
   @brief The right paragraph lines indent.
   */
  jfloat rightIndent_;
  /*!
   @brief The extra space between paragraphs.
   */
  jfloat extraParagraphSpace_;
  /*!
   @brief The width of the line when the column is defined as a simple rectangle.
   */
  jfloat rectangularWidth_;
  jboolean rectangularMode_;
  /*!
   @brief Holds value of property spaceCharRatio.
   */
  jfloat spaceCharRatio_;
  jboolean lastWasNewline_;
  /*!
   @brief Holds value of property linesWritten.
   */
  jint linesWritten_;
  jfloat firstLineY_;
  jboolean firstLineYDone_;
  /*!
   @brief Holds value of property arabicOptions.
   */
  jint arabicOptions_;
  jfloat descender_;
  jboolean composite_;
  ComAowagieTextPdfColumnText *compositeColumn_;
  jint listIdx_;
  jboolean splittedRow_;
  ComAowagieTextPhrase *waitPhrase_;
  /*!
   @brief if true, first line height is adjusted so that the max ascender touches the top
   */
  jboolean useAscender_;
  /*!
   @brief Holds value of property filledWidth.
   */
  jfloat filledWidth_;
  jboolean adjustFirstLine_;
}

/*!
 @brief Makes this instance an independent copy of <CODE>org</CODE>.
 @param org the original  <CODE> ColumnText </CODE>
 @return itself
 */
- (ComAowagieTextPdfColumnText *)setACopyWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org;

- (void)setSimpleVarsWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org;

- (void)addWaitingPhrase;

/*!
 @brief Converts a sequence of lines representing one of the column bounds into
  an internal format.
 <p>
  Each array element will contain a <CODE>float[4]</CODE> representing
  the line x = ax + b.
 @param cLine the column array
 @return the converted array
 */
- (JavaUtilArrayList *)convertColumnWithFloatArray:(IOSFloatArray *)cLine;

/*!
 @brief Finds the intersection between the <CODE>yLine</CODE> and the column.It will
  set the <CODE>lineStatus</CODE> appropriately.
 @param wall the column to intersect
 @return the x coordinate of the intersection
 */
- (jfloat)findLimitsPointWithJavaUtilArrayList:(JavaUtilArrayList *)wall;

/*!
 @brief Finds the intersection between the <CODE>yLine</CODE> and the two
  column bounds.It will set the <CODE>lineStatus</CODE> appropriately.
 @return a <CODE>float[2]</CODE>with the x coordinates of the intersection
 */
- (IOSFloatArray *)findLimitsOneLine;

/*!
 @brief Finds the intersection between the <CODE>yLine</CODE>,
  the <CODE>yLine-leading</CODE>and the two column bounds.
 It will set the <CODE>lineStatus</CODE> appropriately.
 @return a <CODE>float[4]</CODE>with the x coordinates of the intersection
 */
- (IOSFloatArray *)findLimitsTwoLines;

- (jint)goCompositeWithBoolean:(jboolean)simulate;

/*!
 @brief Replaces the <CODE>filledWidth</CODE> if greater than the existing one.
 @param w the new  <CODE> filledWidth </CODE>  if greater than the existing one
 */
- (void)updateFilledWidthWithFloat:(jfloat)w;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, leftWall_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, rightWall_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, bidiLine_, ComAowagieTextPdfBidiLine *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, canvas_, ComAowagieTextPdfPdfContentByte *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, canvases_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, compositeColumn_, ComAowagieTextPdfColumnText *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfColumnText, waitPhrase_, ComAowagieTextPhrase *)

/*!
 @brief the space char ratio
 */
inline jfloat ComAowagieTextPdfColumnText_get_GLOBAL_SPACE_CHAR_RATIO(void);
#define ComAowagieTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO 0.0f
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, GLOBAL_SPACE_CHAR_RATIO, jfloat)

/*!
 @brief The column is valid.
 */
inline jint ComAowagieTextPdfColumnText_get_LINE_STATUS_OK(void);
#define ComAowagieTextPdfColumnText_LINE_STATUS_OK 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, LINE_STATUS_OK, jint)

/*!
 @brief The line is out the column limits.
 */
inline jint ComAowagieTextPdfColumnText_get_LINE_STATUS_OFFLIMITS(void);
#define ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS 1
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, LINE_STATUS_OFFLIMITS, jint)

/*!
 @brief The line cannot fit this column position.
 */
inline jint ComAowagieTextPdfColumnText_get_LINE_STATUS_NOLINE(void);
#define ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE 2
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfColumnText, LINE_STATUS_NOLINE, jint)

__attribute__((unused)) static ComAowagieTextPdfColumnText *ComAowagieTextPdfColumnText_setACopyWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfColumnText *org);

__attribute__((unused)) static void ComAowagieTextPdfColumnText_setSimpleVarsWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfColumnText *org);

__attribute__((unused)) static void ComAowagieTextPdfColumnText_addWaitingPhrase(ComAowagieTextPdfColumnText *self);

__attribute__((unused)) static JavaUtilArrayList *ComAowagieTextPdfColumnText_convertColumnWithFloatArray_(ComAowagieTextPdfColumnText *self, IOSFloatArray *cLine);

__attribute__((unused)) static jfloat ComAowagieTextPdfColumnText_findLimitsPointWithJavaUtilArrayList_(ComAowagieTextPdfColumnText *self, JavaUtilArrayList *wall);

__attribute__((unused)) static IOSFloatArray *ComAowagieTextPdfColumnText_findLimitsOneLine(ComAowagieTextPdfColumnText *self);

__attribute__((unused)) static IOSFloatArray *ComAowagieTextPdfColumnText_findLimitsTwoLines(ComAowagieTextPdfColumnText *self);

__attribute__((unused)) static jint ComAowagieTextPdfColumnText_goCompositeWithBoolean_(ComAowagieTextPdfColumnText *self, jboolean simulate);

__attribute__((unused)) static void ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(ComAowagieTextPdfColumnText *self, jfloat w);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/aowagie/text/pdf/ColumnText.java"


#line 92
@implementation ComAowagieTextPdfColumnText


#line 231
- (instancetype)initWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas {
  ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(self, canvas);
  return self;
}


#line 241
+ (ComAowagieTextPdfColumnText *)duplicateWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org {
  return ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_(org);
}


#line 253
- (ComAowagieTextPdfColumnText *)setACopyWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org {
  return ComAowagieTextPdfColumnText_setACopyWithComAowagieTextPdfColumnText_(self, org);
}


#line 261
- (void)setSimpleVarsWithComAowagieTextPdfColumnText:(ComAowagieTextPdfColumnText *)org {
  ComAowagieTextPdfColumnText_setSimpleVarsWithComAowagieTextPdfColumnText_(self, org);
}


#line 315
- (void)addWaitingPhrase {
  ComAowagieTextPdfColumnText_addWaitingPhrase(self);
}


#line 331
- (void)addTextWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  if (phrase == nil || self->composite_) {
    return;
  }
  ComAowagieTextPdfColumnText_addWaitingPhrase(self);
  if (self->bidiLine_ == nil) {
    self->waitPhrase_ = phrase;
    return;
  }
  for (id<JavaUtilIterator> j = [((JavaUtilArrayList *) nil_chk([phrase getChunks])) iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
    [((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) addChunkWithComAowagieTextPdfPdfChunk:new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_((ComAowagieTextChunk *) cast_chk([j next], [ComAowagieTextChunk class]), nil)];
  }
}


#line 351
- (void)setTextWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  self->bidiLine_ = nil;
  self->composite_ = false;
  self->compositeColumn_ = nil;
  self->compositeElements_ = nil;
  self->listIdx_ = 0;
  self->splittedRow_ = false;
  self->waitPhrase_ = phrase;
}


#line 372
- (void)addElementWithComAowagieTextElement:(id<ComAowagieTextElement>)element {
  if (element == nil) {
    return;
  }
  if ([element isKindOfClass:[ComAowagieTextImage class]]) {
    ComAowagieTextImage *img = (ComAowagieTextImage *) element;
    ComAowagieTextPdfPdfPTable *t = new_ComAowagieTextPdfPdfPTable_initWithInt_(1);
    jfloat w = [img getWidthPercentage];
    if (w == 0) {
      [t setTotalWidthWithFloat:[img getScaledWidth]];
      [t setLockedWidthWithBoolean:true];
    }
    else {
      
#line 384
      [t setWidthPercentageWithFloat:w];
    }
    [t setSpacingAfterWithFloat:[img getSpacingAfter]];
    [t setSpacingBeforeWithFloat:[img getSpacingBefore]];
    switch ([img getAlignment]) {
      case ComAowagieTextImage_LEFT:
      [t setHorizontalAlignmentWithInt:ComAowagieTextElement_ALIGN_LEFT];
      break;
      case ComAowagieTextImage_RIGHT:
      [t setHorizontalAlignmentWithInt:ComAowagieTextElement_ALIGN_RIGHT];
      break;
      default:
      [t setHorizontalAlignmentWithInt:ComAowagieTextElement_ALIGN_CENTER];
      break;
    }
    ComAowagieTextPdfPdfPCell *c = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextImage_withBoolean_(img, true);
    [c setPaddingWithFloat:0];
    [c setBorderWithInt:[img getBorder]];
    [c setBorderColorWithHarmonyJavaAwtColor:[img getBorderColor]];
    [c setBorderWidthWithFloat:[img getBorderWidth]];
    [c setBackgroundColorWithHarmonyJavaAwtColor:[img getBackgroundColor]];
    [t addCellWithComAowagieTextPdfPdfPCell:c];
    element = t;
  }
  if ([element type] == ComAowagieTextElement_CHUNK) {
    element = new_ComAowagieTextParagraph_initWithComAowagieTextChunk_((ComAowagieTextChunk *) cast_chk(element, [ComAowagieTextChunk class]));
  }
  else if ([element type] == ComAowagieTextElement_PHRASE) {
    element = new_ComAowagieTextParagraph_initWithComAowagieTextPhrase_((ComAowagieTextPhrase *) cast_chk(element, [ComAowagieTextPhrase class]));
  }
  if ([element isKindOfClass:[ComAowagieTextSimpleTable class]]) {
    @try {
      element = [((ComAowagieTextSimpleTable *) element) createPdfPTable];
    }
    @catch (
#line 417
    ComAowagieTextDocumentException *e) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Element not allowed.");
    }
  }
  else if ([element type] != ComAowagieTextElement_PARAGRAPH && [element type] != ComAowagieTextElement_LIST && [element type] != ComAowagieTextElement_PTABLE && [element type] != ComAowagieTextElement_YMARK) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Element not allowed.");
  }
  if (!self->composite_) {
    self->composite_ = true;
    self->compositeElements_ = new_JavaUtilLinkedList_init();
    self->bidiLine_ = nil;
    self->waitPhrase_ = nil;
  }
  [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) addWithId:element];
}


#line 443
- (JavaUtilArrayList *)convertColumnWithFloatArray:(IOSFloatArray *)cLine {
  return ComAowagieTextPdfColumnText_convertColumnWithFloatArray_(self, cLine);
}


#line 481
- (jfloat)findLimitsPointWithJavaUtilArrayList:(JavaUtilArrayList *)wall {
  return ComAowagieTextPdfColumnText_findLimitsPointWithJavaUtilArrayList_(self, wall);
}


#line 504
- (IOSFloatArray *)findLimitsOneLine {
  return ComAowagieTextPdfColumnText_findLimitsOneLine(self);
}


#line 523
- (IOSFloatArray *)findLimitsTwoLines {
  return ComAowagieTextPdfColumnText_findLimitsTwoLines(self);
}


#line 566
- (void)setSimpleColumnWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                      withFloat:(jfloat)llx
                                      withFloat:(jfloat)lly
                                      withFloat:(jfloat)urx
                                      withFloat:(jfloat)ury
                                      withFloat:(jfloat)leading
                                        withInt:(jint)alignment {
  
#line 567
  [self addTextWithComAowagieTextPhrase:phrase];
  [self setSimpleColumnWithFloat:llx withFloat:lly withFloat:urx withFloat:ury withFloat:leading withInt:alignment];
}


#line 581
- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury
                       withFloat:(jfloat)leading
                         withInt:(jint)alignment {
  
#line 582
  [self setLeadingWithFloat:leading];
  self->alignment_ = alignment;
  [self setSimpleColumnWithFloat:llx withFloat:lly withFloat:urx withFloat:ury];
}

- (void)setSimpleColumnWithFloat:(jfloat)llx
                       withFloat:(jfloat)lly
                       withFloat:(jfloat)urx
                       withFloat:(jfloat)ury {
  
#line 595
  self->leftX_ = JavaLangMath_minWithFloat_withFloat_(llx, urx);
  self->maxY_ = JavaLangMath_maxWithFloat_withFloat_(lly, ury);
  self->minY_ = JavaLangMath_minWithFloat_withFloat_(lly, ury);
  self->rightX_ = JavaLangMath_maxWithFloat_withFloat_(llx, urx);
  self->yLine_ = self->maxY_;
  self->rectangularWidth_ = self->rightX_ - self->leftX_;
  if (self->rectangularWidth_ < 0) {
    self->rectangularWidth_ = 0;
  }
  self->rectangularMode_ = true;
}

- (void)setLeadingWithFloat:(jfloat)leading {
  self->fixedLeading_ = leading;
  self->multipliedLeading_ = 0;
}


#line 625
- (void)setLeadingWithFloat:(jfloat)fixedLeading
                  withFloat:(jfloat)multipliedLeading {
  
#line 626
  self->fixedLeading_ = fixedLeading;
  self->multipliedLeading_ = multipliedLeading;
}


#line 635
- (jfloat)getLeading {
  return self->fixedLeading_;
}


#line 644
- (jfloat)getMultipliedLeading {
  return self->multipliedLeading_;
}


#line 653
- (void)setYLineWithFloat:(jfloat)yLine {
  self->yLine_ = yLine;
}


#line 662
- (jfloat)getYLine {
  return self->yLine_;
}


#line 671
- (void)setAlignmentWithInt:(jint)alignment {
  self->alignment_ = alignment;
}


#line 680
- (jint)getAlignment {
  return self->alignment_;
}


#line 689
- (void)setIndentWithFloat:(jfloat)indent {
  self->indent_ = indent;
  self->lastWasNewline_ = true;
}


#line 699
- (jfloat)getIndent {
  return self->indent_;
}


#line 708
- (void)setFollowingIndentWithFloat:(jfloat)indent {
  self->followingIndent_ = indent;
  self->lastWasNewline_ = true;
}


#line 718
- (jfloat)getFollowingIndent {
  return self->followingIndent_;
}


#line 727
- (void)setRightIndentWithFloat:(jfloat)indent {
  self->rightIndent_ = indent;
  self->lastWasNewline_ = true;
}


#line 737
- (jfloat)getRightIndent {
  return self->rightIndent_;
}


#line 748
- (jint)go {
  return [self goWithBoolean:false];
}


#line 759
- (jint)goWithBoolean:(jboolean)simulate {
  if (self->composite_) {
    return ComAowagieTextPdfColumnText_goCompositeWithBoolean_(self, simulate);
  }
  ComAowagieTextPdfColumnText_addWaitingPhrase(self);
  if (self->bidiLine_ == nil) {
    return ComAowagieTextPdfColumnText_NO_MORE_TEXT;
  }
  self->descender_ = 0;
  self->linesWritten_ = 0;
  jboolean dirty = false;
  jfloat ratio = self->spaceCharRatio_;
  IOSObjectArray *currentValues = [IOSObjectArray newArrayWithLength:2 type:NSObject_class_()];
  ComAowagieTextPdfPdfFont *currentFont = nil;
  JavaLangFloat *lastBaseFactor = new_JavaLangFloat_initWithFloat_(0);
  (void) IOSObjectArray_Set(currentValues, 1, lastBaseFactor);
  ComAowagieTextPdfPdfDocument *pdf = nil;
  ComAowagieTextPdfPdfContentByte *graphics = nil;
  ComAowagieTextPdfPdfContentByte *text = nil;
  self->firstLineY_ = JavaLangFloat_NaN;
  jint localRunDirection = ComAowagieTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI;
  if (self->runDirection_ != ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT) {
    localRunDirection = self->runDirection_;
  }
  if (self->canvas_ != nil) {
    graphics = self->canvas_;
    pdf = [self->canvas_ getPdfDocument];
    text = [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->canvas_)) getDuplicate];
  }
  else if (!simulate) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"ColumnText.go with simulate==false and text==null.");
  }
  if (!simulate) {
    if (ratio == ComAowagieTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO) {
      ratio = [((ComAowagieTextPdfPdfWriter *) nil_chk([((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) getPdfWriter])) getSpaceCharRatio];
    }
    else
#line 794
    if (ratio < 0.001f) {
      ratio = 0.001f;
    }
  }
  jfloat firstIndent = 0;
  ComAowagieTextPdfPdfLine *line;
  jfloat x1;
  jint status = 0;
  while (true) {
    firstIndent = self->lastWasNewline_ ? self->indent_ : self->followingIndent_;
    if (self->rectangularMode_) {
      if (self->rectangularWidth_ <= firstIndent + self->rightIndent_) {
        status = ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        if ([((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) isEmpty]) {
          status |= ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        }
        break;
      }
      if ([((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) isEmpty]) {
        status = ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        break;
      }
      line = [((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) processLineWithFloat:self->leftX_ withFloat:self->rectangularWidth_ - firstIndent - self->rightIndent_ withInt:self->alignment_ withInt:localRunDirection withInt:self->arabicOptions_];
      if (line == nil) {
        status = ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        break;
      }
      IOSFloatArray *maxSize = [line getMaxSize];
      if ([self isUseAscender] && JavaLangFloat_isNaNWithFloat_(self->firstLineY_)) {
        self->currentLeading_ = [line getAscender];
      }
      else {
        
#line 825
        self->currentLeading_ = JavaLangMath_maxWithFloat_withFloat_(self->fixedLeading_ + IOSFloatArray_Get(nil_chk(maxSize), 0) * self->multipliedLeading_, IOSFloatArray_Get(maxSize, 1));
      }
      if (self->yLine_ > self->maxY_ || self->yLine_ - self->currentLeading_ < self->minY_) {
        status = ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        [((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) restore];
        break;
      }
      JreMinusAssignFloatF(&self->yLine_, self->currentLeading_);
      if (!simulate && !dirty) {
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) beginText];
        dirty = true;
      }
      if (JavaLangFloat_isNaNWithFloat_(self->firstLineY_)) {
        self->firstLineY_ = self->yLine_;
      }
      ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(self, self->rectangularWidth_ - [line widthLeft]);
      x1 = self->leftX_;
    }
    else {
      jfloat yTemp = self->yLine_;
      IOSFloatArray *xx = ComAowagieTextPdfColumnText_findLimitsTwoLines(self);
      if (xx == nil) {
        status = ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        if ([((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) isEmpty]) {
          status |= ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        }
        self->yLine_ = yTemp;
        break;
      }
      if ([((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) isEmpty]) {
        status = ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        self->yLine_ = yTemp;
        break;
      }
      x1 = JavaLangMath_maxWithFloat_withFloat_(IOSFloatArray_Get(xx, 0), IOSFloatArray_Get(xx, 2));
      jfloat x2 = JavaLangMath_minWithFloat_withFloat_(IOSFloatArray_Get(xx, 1), IOSFloatArray_Get(xx, 3));
      if (x2 - x1 <= firstIndent + self->rightIndent_) {
        continue;
      }
      if (!simulate && !dirty) {
        [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) beginText];
        dirty = true;
      }
      line = [((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) processLineWithFloat:x1 withFloat:x2 - x1 - firstIndent - self->rightIndent_ withInt:self->alignment_ withInt:localRunDirection withInt:self->arabicOptions_];
      if (line == nil) {
        status = ComAowagieTextPdfColumnText_NO_MORE_TEXT;
        self->yLine_ = yTemp;
        break;
      }
    }
    if (!simulate) {
      (void) IOSObjectArray_Set(currentValues, 0, currentFont);
      [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) setTextMatrixWithFloat:x1 + ([line isRTL] ? self->rightIndent_ : firstIndent) + [line indentLeft] withFloat:self->yLine_];
      [((ComAowagieTextPdfPdfDocument *) nil_chk(pdf)) writeLineToContentWithComAowagieTextPdfPdfLine:line withComAowagieTextPdfPdfContentByte:text withComAowagieTextPdfPdfContentByte:graphics withNSObjectArray:currentValues withFloat:ratio];
      currentFont = (ComAowagieTextPdfPdfFont *) cast_chk(IOSObjectArray_Get(currentValues, 0), [ComAowagieTextPdfPdfFont class]);
    }
    self->lastWasNewline_ = [line isNewlineSplit];
    JreMinusAssignFloatF(&self->yLine_, [line isNewlineSplit] ? self->extraParagraphSpace_ : 0);
    ++self->linesWritten_;
    self->descender_ = [line getDescender];
  }
  if (dirty) {
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(text)) endText];
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(self->canvas_)) addWithComAowagieTextPdfPdfContentByte:text];
  }
  return status;
}


#line 898
- (jfloat)getExtraParagraphSpace {
  return self->extraParagraphSpace_;
}


#line 907
- (void)setExtraParagraphSpaceWithFloat:(jfloat)extraParagraphSpace {
  self->extraParagraphSpace_ = extraParagraphSpace;
}


#line 918
- (jfloat)getSpaceCharRatio {
  return self->spaceCharRatio_;
}


#line 932
- (void)setSpaceCharRatioWithFloat:(jfloat)spaceCharRatio {
  self->spaceCharRatio_ = spaceCharRatio;
}


#line 941
- (void)setRunDirectionWithInt:(jint)runDirection {
  if (runDirection < ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT || runDirection > ComAowagieTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Invalid run direction: ", runDirection));
  }
  self->runDirection_ = runDirection;
}


#line 953
- (jint)getRunDirection {
  return self->runDirection_;
}


#line 962
- (jint)getLinesWritten {
  return self->linesWritten_;
}


#line 971
- (jint)getArabicOptions {
  return self->arabicOptions_;
}


#line 981
- (void)setArabicOptionsWithInt:(jint)arabicOptions {
  self->arabicOptions_ = arabicOptions;
}


#line 990
- (jfloat)getDescender {
  return self->descender_;
}


#line 1003
+ (jfloat)getWidthWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                   withInt:(jint)runDirection
                                   withInt:(jint)arabicOptions {
  return ComAowagieTextPdfColumnText_getWidthWithComAowagieTextPhrase_withInt_withInt_(phrase, runDirection, arabicOptions);
}


#line 1029
+ (void)showTextAlignedWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas
                                                   withInt:(jint)alignment
                                  withComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                                 withFloat:(jfloat)x
                                                 withFloat:(jfloat)y
                                                 withFloat:(jfloat)rotation
                                                   withInt:(jint)runDirection
                                                   withInt:(jint)arabicOptions {
  ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(canvas, alignment, phrase, x, y, rotation, runDirection, arabicOptions);
}


#line 1096
+ (void)showTextAlignedWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas
                                                   withInt:(jint)alignment
                                  withComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase
                                                 withFloat:(jfloat)x
                                                 withFloat:(jfloat)y
                                                 withFloat:(jfloat)rotation {
  ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_(canvas, alignment, phrase, x, y, rotation);
}


#line 1100
- (jint)goCompositeWithBoolean:(jboolean)simulate {
  return ComAowagieTextPdfColumnText_goCompositeWithBoolean_(self, simulate);
}


#line 1493
- (ComAowagieTextPdfPdfContentByte *)getCanvas {
  return self->canvas_;
}


#line 1503
- (void)setCanvasWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas {
  self->canvas_ = canvas;
  self->canvases_ = nil;
  if (self->compositeColumn_ != nil) {
    [self->compositeColumn_ setCanvasWithComAowagieTextPdfPdfContentByte:canvas];
  }
}


#line 1516
- (void)setCanvasesWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  self->canvases_ = canvases;
  self->canvas_ = IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_TEXTCANVAS);
  if (self->compositeColumn_ != nil) {
    [self->compositeColumn_ setCanvasesWithComAowagieTextPdfPdfContentByteArray:canvases];
  }
}


#line 1529
- (IOSObjectArray *)getCanvases {
  return self->canvases_;
}


#line 1539
- (jboolean)zeroHeightElement {
  return self->composite_ && ![((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) isEmpty] && [((id<ComAowagieTextElement>) nil_chk(((id<ComAowagieTextElement>) cast_check([((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) getFirst], ComAowagieTextElement_class_())))) type] == ComAowagieTextElement_YMARK;
}


#line 1548
- (jboolean)isUseAscender {
  return self->useAscender_;
}


#line 1557
- (void)setUseAscenderWithBoolean:(jboolean)useAscender {
  self->useAscender_ = useAscender;
}


#line 1568
- (jfloat)getFilledWidth {
  return self->filledWidth_;
}


#line 1578
- (void)setFilledWidthWithFloat:(jfloat)filledWidth {
  self->filledWidth_ = filledWidth;
}


#line 1587
- (void)updateFilledWidthWithFloat:(jfloat)w {
  ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(self, w);
}


#line 1599
- (jboolean)isAdjustFirstLine {
  return self->adjustFirstLine_;
}


#line 1613
- (void)setAdjustFirstLineWithBoolean:(jboolean)adjustFirstLine {
  self->adjustFirstLine_ = adjustFirstLine;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfColumnText;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfColumnText;", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "[F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 20, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 27, -1, -1, -1 },
    { NULL, "I", 0x1, 28, 29, 27, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 23, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 23, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x8, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 36, 38, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 39, 29, 27, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfContentByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "[LComAowagieTextPdfPdfContentByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 29, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithComAowagieTextPdfPdfContentByte:);
  methods[1].selector = @selector(duplicateWithComAowagieTextPdfColumnText:);
  methods[2].selector = @selector(setACopyWithComAowagieTextPdfColumnText:);
  methods[3].selector = @selector(setSimpleVarsWithComAowagieTextPdfColumnText:);
  methods[4].selector = @selector(addWaitingPhrase);
  methods[5].selector = @selector(addTextWithComAowagieTextPhrase:);
  methods[6].selector = @selector(setTextWithComAowagieTextPhrase:);
  methods[7].selector = @selector(addElementWithComAowagieTextElement:);
  methods[8].selector = @selector(convertColumnWithFloatArray:);
  methods[9].selector = @selector(findLimitsPointWithJavaUtilArrayList:);
  methods[10].selector = @selector(findLimitsOneLine);
  methods[11].selector = @selector(findLimitsTwoLines);
  methods[12].selector = @selector(setSimpleColumnWithComAowagieTextPhrase:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:);
  methods[13].selector = @selector(setSimpleColumnWithFloat:withFloat:withFloat:withFloat:withFloat:withInt:);
  methods[14].selector = @selector(setSimpleColumnWithFloat:withFloat:withFloat:withFloat:);
  methods[15].selector = @selector(setLeadingWithFloat:);
  methods[16].selector = @selector(setLeadingWithFloat:withFloat:);
  methods[17].selector = @selector(getLeading);
  methods[18].selector = @selector(getMultipliedLeading);
  methods[19].selector = @selector(setYLineWithFloat:);
  methods[20].selector = @selector(getYLine);
  methods[21].selector = @selector(setAlignmentWithInt:);
  methods[22].selector = @selector(getAlignment);
  methods[23].selector = @selector(setIndentWithFloat:);
  methods[24].selector = @selector(getIndent);
  methods[25].selector = @selector(setFollowingIndentWithFloat:);
  methods[26].selector = @selector(getFollowingIndent);
  methods[27].selector = @selector(setRightIndentWithFloat:);
  methods[28].selector = @selector(getRightIndent);
  methods[29].selector = @selector(go);
  methods[30].selector = @selector(goWithBoolean:);
  methods[31].selector = @selector(getExtraParagraphSpace);
  methods[32].selector = @selector(setExtraParagraphSpaceWithFloat:);
  methods[33].selector = @selector(getSpaceCharRatio);
  methods[34].selector = @selector(setSpaceCharRatioWithFloat:);
  methods[35].selector = @selector(setRunDirectionWithInt:);
  methods[36].selector = @selector(getRunDirection);
  methods[37].selector = @selector(getLinesWritten);
  methods[38].selector = @selector(getArabicOptions);
  methods[39].selector = @selector(setArabicOptionsWithInt:);
  methods[40].selector = @selector(getDescender);
  methods[41].selector = @selector(getWidthWithComAowagieTextPhrase:withInt:withInt:);
  methods[42].selector = @selector(showTextAlignedWithComAowagieTextPdfPdfContentByte:withInt:withComAowagieTextPhrase:withFloat:withFloat:withFloat:withInt:withInt:);
  methods[43].selector = @selector(showTextAlignedWithComAowagieTextPdfPdfContentByte:withInt:withComAowagieTextPhrase:withFloat:withFloat:withFloat:);
  methods[44].selector = @selector(goCompositeWithBoolean:);
  methods[45].selector = @selector(getCanvas);
  methods[46].selector = @selector(setCanvasWithComAowagieTextPdfPdfContentByte:);
  methods[47].selector = @selector(setCanvasesWithComAowagieTextPdfPdfContentByteArray:);
  methods[48].selector = @selector(getCanvases);
  methods[49].selector = @selector(zeroHeightElement);
  methods[50].selector = @selector(isUseAscender);
  methods[51].selector = @selector(setUseAscenderWithBoolean:);
  methods[52].selector = @selector(getFilledWidth);
  methods[53].selector = @selector(setFilledWidthWithFloat:);
  methods[54].selector = @selector(updateFilledWidthWithFloat:);
  methods[55].selector = @selector(isAdjustFirstLine);
  methods[56].selector = @selector(setAdjustFirstLineWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "runDirection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "GLOBAL_SPACE_CHAR_RATIO", "F", .constantValue.asFloat = ComAowagieTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO, 0x1a, -1, -1, -1, -1 },
    { "NO_MORE_TEXT", "I", .constantValue.asInt = ComAowagieTextPdfColumnText_NO_MORE_TEXT, 0x19, -1, -1, -1, -1 },
    { "NO_MORE_COLUMN", "I", .constantValue.asInt = ComAowagieTextPdfColumnText_NO_MORE_COLUMN, 0x18, -1, -1, -1, -1 },
    { "LINE_STATUS_OK", "I", .constantValue.asInt = ComAowagieTextPdfColumnText_LINE_STATUS_OK, 0x1a, -1, -1, -1, -1 },
    { "LINE_STATUS_OFFLIMITS", "I", .constantValue.asInt = ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS, 0x1a, -1, -1, -1, -1 },
    { "LINE_STATUS_NOLINE", "I", .constantValue.asInt = ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE, 0x1a, -1, -1, -1, -1 },
    { "maxY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leftX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rightX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leftWall_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rightWall_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bidiLine_", "LComAowagieTextPdfBidiLine;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yLine_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentLeading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fixedLeading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "multipliedLeading_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LComAowagieTextPdfPdfContentByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvases_", "[LComAowagieTextPdfPdfContentByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lineStatus_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "indent_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "followingIndent_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rightIndent_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraParagraphSpace_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rectangularWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rectangularMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spaceCharRatio_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastWasNewline_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "linesWritten_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstLineY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "firstLineYDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arabicOptions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "descender_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "composite_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compositeColumn_", "LComAowagieTextPdfColumnText;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "compositeElements_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "listIdx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "splittedRow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "waitPhrase_", "LComAowagieTextPhrase;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useAscender_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filledWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "adjustFirstLine_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LComAowagieTextPdfPdfContentByte;", "duplicate", "LComAowagieTextPdfColumnText;", "setACopy", "setSimpleVars", "addText", "LComAowagieTextPhrase;", "setText", "addElement", "LComAowagieTextElement;", "convertColumn", "[F", "findLimitsPoint", "LJavaUtilArrayList;", "setSimpleColumn", "LComAowagieTextPhrase;FFFFFI", "FFFFFI", "FFFF", "setLeading", "F", "FF", "setYLine", "setAlignment", "I", "setIndent", "setFollowingIndent", "setRightIndent", "LComAowagieTextDocumentException;", "go", "Z", "setExtraParagraphSpace", "setSpaceCharRatio", "setRunDirection", "setArabicOptions", "getWidth", "LComAowagieTextPhrase;II", "showTextAligned", "LComAowagieTextPdfPdfContentByte;ILComAowagieTextPhrase;FFFII", "LComAowagieTextPdfPdfContentByte;ILComAowagieTextPhrase;FFF", "goComposite", "setCanvas", "setCanvases", "[LComAowagieTextPdfPdfContentByte;", "setUseAscender", "setFilledWidth", "updateFilledWidth", "setAdjustFirstLine" };
  static const J2ObjcClassInfo _ComAowagieTextPdfColumnText = { "ColumnText", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 57, 44, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfColumnText;
}

@end


#line 231
void ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfPdfContentByte *canvas) {
  NSObject_init(self);
  self->runDirection_ =
#line 108
  ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
  self->alignment_ =
#line 141
  ComAowagieTextElement_ALIGN_LEFT;
  self->currentLeading_ =
#line 157
  16;
  self->fixedLeading_ =
#line 160
  16;
  self->multipliedLeading_ =
#line 163
  0;
  self->indent_ =
#line 174
  0;
  self->followingIndent_ =
#line 177
  0;
  self->rightIndent_ =
#line 180
  0;
  self->extraParagraphSpace_ =
#line 183
  0;
  self->rectangularWidth_ =
#line 186
  -1;
  self->rectangularMode_ =
#line 188
  false;
  self->spaceCharRatio_ = ComAowagieTextPdfColumnText_GLOBAL_SPACE_CHAR_RATIO;
  self->lastWasNewline_ =
#line 192
  true;
  self->firstLineYDone_ =
#line 198
  false;
  self->arabicOptions_ =
#line 201
  0;
  self->composite_ =
#line 205
  false;
  self->listIdx_ =
#line 211
  0;
  self->useAscender_ =
#line 218
  false;
  self->adjustFirstLine_ =
#line 223
  true;
  
#line 232
  self->canvas_ = canvas;
}


#line 231
ComAowagieTextPdfColumnText *new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfColumnText, initWithComAowagieTextPdfPdfContentByte_, canvas)
}


#line 231
ComAowagieTextPdfColumnText *create_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfColumnText, initWithComAowagieTextPdfPdfContentByte_, canvas)
}


#line 241
ComAowagieTextPdfColumnText *ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *org) {
  ComAowagieTextPdfColumnText_initialize();
  
#line 242
  ComAowagieTextPdfColumnText *ct = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(nil);
  (void) ComAowagieTextPdfColumnText_setACopyWithComAowagieTextPdfColumnText_(ct, org);
  return ct;
}


#line 253
ComAowagieTextPdfColumnText *ComAowagieTextPdfColumnText_setACopyWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfColumnText *org) {
  ComAowagieTextPdfColumnText_setSimpleVarsWithComAowagieTextPdfColumnText_(self, org);
  if (((ComAowagieTextPdfColumnText *) nil_chk(org))->bidiLine_ != nil) {
    self->bidiLine_ = new_ComAowagieTextPdfBidiLine_initPackagePrivateWithComAowagieTextPdfBidiLine_(org->bidiLine_);
  }
  return self;
}

void ComAowagieTextPdfColumnText_setSimpleVarsWithComAowagieTextPdfColumnText_(ComAowagieTextPdfColumnText *self, ComAowagieTextPdfColumnText *org) {
  self->maxY_ = ((ComAowagieTextPdfColumnText *) nil_chk(org))->maxY_;
  self->minY_ = org->minY_;
  self->alignment_ = org->alignment_;
  self->leftWall_ = nil;
  if (org->leftWall_ != nil) {
    self->leftWall_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(org->leftWall_);
  }
  self->rightWall_ = nil;
  if (org->rightWall_ != nil) {
    self->rightWall_ = new_JavaUtilArrayList_initWithJavaUtilCollection_(org->rightWall_);
  }
  self->yLine_ = org->yLine_;
  self->currentLeading_ = org->currentLeading_;
  self->fixedLeading_ = org->fixedLeading_;
  self->multipliedLeading_ = org->multipliedLeading_;
  self->canvas_ = org->canvas_;
  self->canvases_ = org->canvases_;
  self->lineStatus_ = org->lineStatus_;
  self->indent_ = org->indent_;
  self->followingIndent_ = org->followingIndent_;
  self->rightIndent_ = org->rightIndent_;
  self->extraParagraphSpace_ = org->extraParagraphSpace_;
  self->rectangularWidth_ = org->rectangularWidth_;
  self->rectangularMode_ = org->rectangularMode_;
  self->spaceCharRatio_ = org->spaceCharRatio_;
  self->lastWasNewline_ = org->lastWasNewline_;
  self->linesWritten_ = org->linesWritten_;
  self->arabicOptions_ = org->arabicOptions_;
  self->runDirection_ = org->runDirection_;
  self->descender_ = org->descender_;
  self->composite_ = org->composite_;
  self->splittedRow_ = org->splittedRow_;
  if (org->composite_) {
    self->compositeElements_ = new_JavaUtilLinkedList_initWithJavaUtilCollection_(org->compositeElements_);
    if (self->splittedRow_) {
      ComAowagieTextPdfPdfPTable *table = (ComAowagieTextPdfPdfPTable *) cast_chk([self->compositeElements_ getFirst], [ComAowagieTextPdfPdfPTable class]);
      (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) setWithInt:0 withId:new_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(table)];
    }
    if (org->compositeColumn_ != nil) {
      self->compositeColumn_ = ComAowagieTextPdfColumnText_duplicateWithComAowagieTextPdfColumnText_(org->compositeColumn_);
    }
  }
  self->listIdx_ = org->listIdx_;
  self->firstLineY_ = org->firstLineY_;
  self->leftX_ = org->leftX_;
  self->rightX_ = org->rightX_;
  self->firstLineYDone_ = org->firstLineYDone_;
  self->waitPhrase_ = org->waitPhrase_;
  self->useAscender_ = org->useAscender_;
  self->filledWidth_ = org->filledWidth_;
  self->adjustFirstLine_ = org->adjustFirstLine_;
}

void ComAowagieTextPdfColumnText_addWaitingPhrase(ComAowagieTextPdfColumnText *self) {
  if (self->bidiLine_ == nil && self->waitPhrase_ != nil) {
    self->bidiLine_ = new_ComAowagieTextPdfBidiLine_initPackagePrivate();
    for (id<JavaUtilIterator> j = [((JavaUtilArrayList *) nil_chk([((ComAowagieTextPhrase *) nil_chk(self->waitPhrase_)) getChunks])) iterator]; [((id<JavaUtilIterator>) nil_chk(j)) hasNext]; ) {
      [((ComAowagieTextPdfBidiLine *) nil_chk(self->bidiLine_)) addChunkWithComAowagieTextPdfPdfChunk:new_ComAowagieTextPdfPdfChunk_initWithComAowagieTextChunk_withComAowagieTextPdfPdfAction_((ComAowagieTextChunk *) cast_chk([j next], [ComAowagieTextChunk class]), nil)];
    }
    self->waitPhrase_ = nil;
  }
}


#line 443
JavaUtilArrayList *ComAowagieTextPdfColumnText_convertColumnWithFloatArray_(ComAowagieTextPdfColumnText *self, IOSFloatArray *cLine) {
  if (((IOSFloatArray *) nil_chk(cLine))->size_ < 4) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"No valid column line found.");
  }
  JavaUtilArrayList *cc = new_JavaUtilArrayList_init();
  for (jint k = 0; k < cLine->size_ - 2; k += 2) {
    jfloat x1 = IOSFloatArray_Get(cLine, k);
    jfloat y1 = IOSFloatArray_Get(cLine, k + 1);
    jfloat x2 = IOSFloatArray_Get(cLine, k + 2);
    jfloat y2 = IOSFloatArray_Get(cLine, k + 3);
    if (y1 == y2) {
      continue;
    }
    
#line 457
    jfloat a = (x1 - x2) / (y1 - y2);
    jfloat b = x1 - a * y1;
    IOSFloatArray *r = [IOSFloatArray newArrayWithLength:4];
    *IOSFloatArray_GetRef(r, 0) = JavaLangMath_minWithFloat_withFloat_(y1, y2);
    *IOSFloatArray_GetRef(r, 1) = JavaLangMath_maxWithFloat_withFloat_(y1, y2);
    *IOSFloatArray_GetRef(r, 2) = a;
    *IOSFloatArray_GetRef(r, 3) = b;
    [cc addWithId:r];
    self->maxY_ = JavaLangMath_maxWithFloat_withFloat_(self->maxY_, IOSFloatArray_Get(r, 1));
    self->minY_ = JavaLangMath_minWithFloat_withFloat_(self->minY_, IOSFloatArray_Get(r, 0));
  }
  if ([cc isEmpty]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"No valid column line found.");
  }
  return cc;
}


#line 481
jfloat ComAowagieTextPdfColumnText_findLimitsPointWithJavaUtilArrayList_(ComAowagieTextPdfColumnText *self, JavaUtilArrayList *wall) {
  self->lineStatus_ = ComAowagieTextPdfColumnText_LINE_STATUS_OK;
  if (self->yLine_ < self->minY_ || self->yLine_ > self->maxY_) {
    self->lineStatus_ = ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS;
    return 0;
  }
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(wall)) size]; ++k) {
    IOSFloatArray *r = (IOSFloatArray *) cast_chk([wall getWithInt:k], [IOSFloatArray class]);
    if (self->yLine_ < IOSFloatArray_Get(nil_chk(r), 0) || self->yLine_ > IOSFloatArray_Get(r, 1)) {
      continue;
    }
    return IOSFloatArray_Get(r, 2) * self->yLine_ + IOSFloatArray_Get(r, 3);
  }
  self->lineStatus_ = ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE;
  return 0;
}


#line 504
IOSFloatArray *ComAowagieTextPdfColumnText_findLimitsOneLine(ComAowagieTextPdfColumnText *self) {
  jfloat x1 = ComAowagieTextPdfColumnText_findLimitsPointWithJavaUtilArrayList_(self, self->leftWall_);
  if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS || self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE) {
    return nil;
  }
  jfloat x2 = ComAowagieTextPdfColumnText_findLimitsPointWithJavaUtilArrayList_(self, self->rightWall_);
  if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE) {
    return nil;
  }
  return [IOSFloatArray newArrayWithFloats:(jfloat[]){ x1, x2 } count:2];
}


#line 523
IOSFloatArray *ComAowagieTextPdfColumnText_findLimitsTwoLines(ComAowagieTextPdfColumnText *self) {
  jboolean repeat = false;
  for (; ; ) {
    if (repeat && self->currentLeading_ == 0) {
      return nil;
    }
    repeat = true;
    IOSFloatArray *x1 = ComAowagieTextPdfColumnText_findLimitsOneLine(self);
    if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS) {
      return nil;
    }
    JreMinusAssignFloatF(&self->yLine_, self->currentLeading_);
    if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE) {
      continue;
    }
    IOSFloatArray *x2 = ComAowagieTextPdfColumnText_findLimitsOneLine(self);
    if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_OFFLIMITS) {
      return nil;
    }
    if (self->lineStatus_ == ComAowagieTextPdfColumnText_LINE_STATUS_NOLINE) {
      JreMinusAssignFloatF(&self->yLine_, self->currentLeading_);
      continue;
    }
    if (IOSFloatArray_Get(nil_chk(x1), 0) >= IOSFloatArray_Get(nil_chk(x2), 1) || IOSFloatArray_Get(x2, 0) >= IOSFloatArray_Get(x1, 1)) {
      continue;
    }
    return [IOSFloatArray newArrayWithFloats:(jfloat[]){ IOSFloatArray_Get(x1, 0), IOSFloatArray_Get(x1, 1), IOSFloatArray_Get(x2, 0), IOSFloatArray_Get(x2, 1) } count:4];
  }
}


#line 1003
jfloat ComAowagieTextPdfColumnText_getWidthWithComAowagieTextPhrase_withInt_withInt_(ComAowagieTextPhrase *phrase, jint runDirection, jint arabicOptions) {
  ComAowagieTextPdfColumnText_initialize();
  
#line 1004
  ComAowagieTextPdfColumnText *ct = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(nil);
  [ct addTextWithComAowagieTextPhrase:phrase];
  ComAowagieTextPdfColumnText_addWaitingPhrase(ct);
  ComAowagieTextPdfPdfLine *line = [((ComAowagieTextPdfBidiLine *) nil_chk(ct->bidiLine_)) processLineWithFloat:0 withFloat:20000 withInt:ComAowagieTextElement_ALIGN_LEFT withInt:runDirection withInt:arabicOptions];
  if (line == nil) {
    return 0;
  }
  else {
    
#line 1011
    return 20000 - [line widthLeft];
  }
}


#line 1029
void ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(ComAowagieTextPdfPdfContentByte *canvas, jint alignment, ComAowagieTextPhrase *phrase, jfloat x, jfloat y, jfloat rotation, jint runDirection, jint arabicOptions) {
  ComAowagieTextPdfColumnText_initialize();
  
#line 1030
  if (alignment != ComAowagieTextElement_ALIGN_LEFT && alignment != ComAowagieTextElement_ALIGN_CENTER &&
#line 1031
  alignment != ComAowagieTextElement_ALIGN_RIGHT) {
    alignment = ComAowagieTextElement_ALIGN_LEFT;
  }
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(canvas)) saveState];
  ComAowagieTextPdfColumnText *ct = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(canvas);
  jfloat lly = -1;
  jfloat ury = 2;
  jfloat llx;
  jfloat urx;
  switch (alignment) {
    case ComAowagieTextElement_ALIGN_LEFT:
    llx = 0;
    urx = 20000;
    break;
    case ComAowagieTextElement_ALIGN_RIGHT:
    llx = -20000;
    urx = 0;
    break;
    default:
    llx = -20000;
    urx = 20000;
    break;
  }
  if (rotation == 0) {
    JrePlusAssignFloatF(&llx, x);
    JrePlusAssignFloatF(&lly, y);
    JrePlusAssignFloatF(&urx, x);
    JrePlusAssignFloatF(&ury, y);
  }
  else {
    jdouble alpha = rotation * JavaLangMath_PI / 180.0;
    jfloat cos = (jfloat) JavaLangMath_cosWithDouble_(alpha);
    jfloat sin = (jfloat) JavaLangMath_sinWithDouble_(alpha);
    [canvas concatCTMWithFloat:cos withFloat:sin withFloat:-sin withFloat:cos withFloat:x withFloat:y];
  }
  [ct setSimpleColumnWithComAowagieTextPhrase:phrase withFloat:llx withFloat:lly withFloat:urx withFloat:ury withFloat:2 withInt:alignment];
  if (runDirection == ComAowagieTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    if (alignment == ComAowagieTextElement_ALIGN_LEFT) {
      alignment = ComAowagieTextElement_ALIGN_RIGHT;
    }
    else
#line 1070
    if (alignment == ComAowagieTextElement_ALIGN_RIGHT) {
      alignment = ComAowagieTextElement_ALIGN_LEFT;
    }
  }
  [ct setAlignmentWithInt:alignment];
  [ct setArabicOptionsWithInt:arabicOptions];
  [ct setRunDirectionWithInt:runDirection];
  @try {
    [ct go];
  }
  @catch (ComAowagieTextDocumentException *e) {
    @throw new_ComAowagieTextExceptionConverter_initWithJavaLangException_(e);
  }
  [canvas restoreState];
}


#line 1096
void ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_(ComAowagieTextPdfPdfContentByte *canvas, jint alignment, ComAowagieTextPhrase *phrase, jfloat x, jfloat y, jfloat rotation) {
  ComAowagieTextPdfColumnText_initialize();
  
#line 1097
  ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_withInt_withInt_(canvas, alignment, phrase, x, y, rotation, ComAowagieTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI, 0);
}


#line 1100
jint ComAowagieTextPdfColumnText_goCompositeWithBoolean_(ComAowagieTextPdfColumnText *self, jboolean simulate) {
  if (!self->rectangularMode_) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Irregular columns are not supported in composite mode.");
  }
  self->linesWritten_ = 0;
  self->descender_ = 0;
  jboolean firstPass = self->adjustFirstLine_;
  
#line 1109
  while (true) {
    {
      
#line 1110
      if ([((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) isEmpty]) {
        return ComAowagieTextPdfColumnText_NO_MORE_TEXT;
      }
      id<ComAowagieTextElement> element = (id<ComAowagieTextElement>) cast_check([((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) getFirst], ComAowagieTextElement_class_());
      if ([((id<ComAowagieTextElement>) nil_chk(element)) type] == ComAowagieTextElement_PARAGRAPH) {
        ComAowagieTextParagraph *para = (ComAowagieTextParagraph *) cast_chk(element, [ComAowagieTextParagraph class]);
        jint status = 0;
        for (jint keep = 0; keep < 2; ++keep) {
          jfloat lastY = self->yLine_;
          jboolean createHere = false;
          if (self->compositeColumn_ == nil) {
            self->compositeColumn_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(self->canvas_);
            [self->compositeColumn_ setUseAscenderWithBoolean:firstPass ? self->useAscender_ : false];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setAlignmentWithInt:[para getAlignment]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setIndentWithFloat:[para getIndentationLeft] + [para getFirstLineIndent]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setExtraParagraphSpaceWithFloat:[para getExtraParagraphSpace]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setFollowingIndentWithFloat:[para getIndentationLeft]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setRightIndentWithFloat:[para getIndentationRight]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setLeadingWithFloat:[para getLeading] withFloat:[para getMultipliedLeading]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setRunDirectionWithInt:self->runDirection_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setArabicOptionsWithInt:self->arabicOptions_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setSpaceCharRatioWithFloat:self->spaceCharRatio_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) addTextWithComAowagieTextPhrase:para];
            if (!firstPass) {
              JreMinusAssignFloatF(&self->yLine_, [para getSpacingBefore]);
            }
            createHere = true;
          }
          ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->leftX_ = self->leftX_;
          self->compositeColumn_->rightX_ = self->rightX_;
          self->compositeColumn_->yLine_ = self->yLine_;
          self->compositeColumn_->rectangularWidth_ = self->rectangularWidth_;
          self->compositeColumn_->rectangularMode_ = self->rectangularMode_;
          self->compositeColumn_->minY_ = self->minY_;
          self->compositeColumn_->maxY_ = self->maxY_;
          jboolean keepCandidate = [para getKeepTogether] && createHere && !firstPass;
          status = [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) goWithBoolean:simulate || (keepCandidate && keep == 0)];
          ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(self, ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->filledWidth_);
          if ((status & ComAowagieTextPdfColumnText_NO_MORE_TEXT) == 0 && keepCandidate) {
            self->compositeColumn_ = nil;
            self->yLine_ = lastY;
            return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
          }
          if (simulate || !keepCandidate) {
            break;
          }
          if (keep == 0) {
            self->compositeColumn_ = nil;
            self->yLine_ = lastY;
          }
        }
        firstPass = false;
        self->yLine_ = ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->yLine_;
        self->linesWritten_ += self->compositeColumn_->linesWritten_;
        self->descender_ = self->compositeColumn_->descender_;
        if ((status & ComAowagieTextPdfColumnText_NO_MORE_TEXT) != 0) {
          self->compositeColumn_ = nil;
          (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
          JreMinusAssignFloatF(&self->yLine_, [para getSpacingAfter]);
        }
        if ((status & ComAowagieTextPdfColumnText_NO_MORE_COLUMN) != 0) {
          return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        }
      }
      else if ([element type] == ComAowagieTextElement_LIST) {
        ComAowagieTextList *list = (ComAowagieTextList *) cast_chk(element, [ComAowagieTextList class]);
        JavaUtilArrayList *items = [list getItems];
        ComAowagieTextListItem *item = nil;
        jfloat listIndentation = [list getIndentationLeft];
        jint count = 0;
        JavaUtilStack *stack = new_JavaUtilStack_init();
        for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(items)) size]; ++k) {
          id obj = [items getWithInt:k];
          if ([obj isKindOfClass:[ComAowagieTextListItem class]]) {
            if (count == self->listIdx_) {
              item = (ComAowagieTextListItem *) obj;
              break;
            }
            else {
              
#line 1188
              ++count;
            }
          }
          else if ([obj isKindOfClass:[ComAowagieTextList class]]) {
            (void) [stack pushWithId:[IOSObjectArray newArrayWithObjects:(id[]){ list, create_JavaLangInteger_initWithInt_(k), create_JavaLangFloat_initWithFloat_(listIndentation) } count:3 type:NSObject_class_()]];
            list = (ComAowagieTextList *) obj;
            items = [((ComAowagieTextList *) nil_chk(list)) getItems];
            JrePlusAssignFloatF(&listIndentation, [list getIndentationLeft]);
            k = -1;
            continue;
          }
          if (k == [items size] - 1) {
            if (![stack isEmpty]) {
              IOSObjectArray *objs = (IOSObjectArray *) cast_check([stack pop], IOSClass_arrayType(NSObject_class_(), 1));
              list = (ComAowagieTextList *) cast_chk(IOSObjectArray_Get(nil_chk(objs), 0), [ComAowagieTextList class]);
              items = [((ComAowagieTextList *) nil_chk(list)) getItems];
              k = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(objs, 1), [JavaLangInteger class])))) intValue];
              listIndentation = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(objs, 2), [JavaLangFloat class])))) floatValue];
            }
          }
        }
        jint status = 0;
        for (jint keep = 0; keep < 2; ++keep) {
          jfloat lastY = self->yLine_;
          jboolean createHere = false;
          if (self->compositeColumn_ == nil) {
            if (item == nil) {
              self->listIdx_ = 0;
              (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
              goto continue_main_loop;
            }
            self->compositeColumn_ = new_ComAowagieTextPdfColumnText_initWithComAowagieTextPdfPdfContentByte_(self->canvas_);
            [self->compositeColumn_ setUseAscenderWithBoolean:firstPass ? self->useAscender_ : false];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setAlignmentWithInt:[item getAlignment]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setIndentWithFloat:[item getIndentationLeft] + listIndentation + [item getFirstLineIndent]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setExtraParagraphSpaceWithFloat:[item getExtraParagraphSpace]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setFollowingIndentWithFloat:[self->compositeColumn_ getIndent]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setRightIndentWithFloat:[item getIndentationRight] + [list getIndentationRight]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setLeadingWithFloat:[item getLeading] withFloat:[item getMultipliedLeading]];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setRunDirectionWithInt:self->runDirection_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setArabicOptionsWithInt:self->arabicOptions_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) setSpaceCharRatioWithFloat:self->spaceCharRatio_];
            [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) addTextWithComAowagieTextPhrase:item];
            if (!firstPass) {
              JreMinusAssignFloatF(&self->yLine_, [item getSpacingBefore]);
            }
            createHere = true;
          }
          ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->leftX_ = self->leftX_;
          self->compositeColumn_->rightX_ = self->rightX_;
          self->compositeColumn_->yLine_ = self->yLine_;
          self->compositeColumn_->rectangularWidth_ = self->rectangularWidth_;
          self->compositeColumn_->rectangularMode_ = self->rectangularMode_;
          self->compositeColumn_->minY_ = self->minY_;
          self->compositeColumn_->maxY_ = self->maxY_;
          jboolean keepCandidate = [((ComAowagieTextListItem *) nil_chk(item)) getKeepTogether] && createHere && !firstPass;
          status = [((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_)) goWithBoolean:simulate || (keepCandidate && keep == 0)];
          ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(self, ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->filledWidth_);
          if ((status & ComAowagieTextPdfColumnText_NO_MORE_TEXT) == 0 && keepCandidate) {
            self->compositeColumn_ = nil;
            self->yLine_ = lastY;
            return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
          }
          if (simulate || !keepCandidate) {
            break;
          }
          if (keep == 0) {
            self->compositeColumn_ = nil;
            self->yLine_ = lastY;
          }
        }
        firstPass = false;
        self->yLine_ = ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->yLine_;
        self->linesWritten_ += self->compositeColumn_->linesWritten_;
        self->descender_ = self->compositeColumn_->descender_;
        if (!JavaLangFloat_isNaNWithFloat_(self->compositeColumn_->firstLineY_) && !((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->firstLineYDone_) {
          if (!simulate) {
            ComAowagieTextPdfColumnText_showTextAlignedWithComAowagieTextPdfPdfContentByte_withInt_withComAowagieTextPhrase_withFloat_withFloat_withFloat_(self->canvas_, ComAowagieTextElement_ALIGN_LEFT, new_ComAowagieTextPhrase_initWithComAowagieTextChunk_([((ComAowagieTextListItem *) nil_chk(item)) getListSymbol]), ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->leftX_ + listIndentation, self->compositeColumn_->firstLineY_, 0);
          }
          ((ComAowagieTextPdfColumnText *) nil_chk(self->compositeColumn_))->firstLineYDone_ = true;
        }
        if ((status & ComAowagieTextPdfColumnText_NO_MORE_TEXT) != 0) {
          self->compositeColumn_ = nil;
          ++self->listIdx_;
          JreMinusAssignFloatF(&self->yLine_, [((ComAowagieTextListItem *) nil_chk(item)) getSpacingAfter]);
        }
        if ((status & ComAowagieTextPdfColumnText_NO_MORE_COLUMN) != 0) {
          return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        }
      }
      else if ([element type] == ComAowagieTextElement_PTABLE) {
        
#line 1280
        if (self->yLine_ < self->minY_ || self->yLine_ > self->maxY_) {
          return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        }
        
#line 1285
        ComAowagieTextPdfPdfPTable *table = (ComAowagieTextPdfPdfPTable *) cast_chk(element, [ComAowagieTextPdfPdfPTable class]);
        
#line 1287
        if ([table size] <= [table getHeaderRows]) {
          (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
          continue;
        }
        
#line 1293
        jfloat yTemp = self->yLine_;
        if (!firstPass && self->listIdx_ == 0) {
          JreMinusAssignFloatF(&yTemp, [table spacingBefore]);
        }
        jfloat yLineWrite = yTemp;
        
#line 1300
        if (yTemp < self->minY_ || yTemp > self->maxY_) {
          return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        }
        
#line 1305
        self->currentLeading_ = 0;
        jfloat x1 = self->leftX_;
        jfloat tableWidth;
        if ([table isLockedWidth]) {
          tableWidth = [table getTotalWidth];
          ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(self, tableWidth);
        }
        else {
          tableWidth = self->rectangularWidth_ * [table getWidthPercentage] / 100.0f;
          [table setTotalWidthWithFloat:tableWidth];
        }
        
#line 1318
        jint headerRows = [table getHeaderRows];
        jint footerRows = [table getFooterRows];
        if (footerRows > headerRows) {
          footerRows = headerRows;
        }
        jint realHeaderRows = headerRows - footerRows;
        jfloat headerHeight = [table getHeaderHeight];
        jfloat footerHeight = [table getFooterHeight];
        
#line 1328
        jboolean skipHeader = !firstPass && [table isSkipFirstHeader] && self->listIdx_ <= headerRows;
        if (!skipHeader) {
          JreMinusAssignFloatF(&yTemp, headerHeight);
          if (yTemp < self->minY_ || yTemp > self->maxY_) {
            if (firstPass) {
              (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
              continue;
            }
            return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
          }
        }
        
#line 1341
        jint k;
        if (self->listIdx_ < headerRows) {
          self->listIdx_ = headerRows;
        }
        if (![table isComplete]) {
          JreMinusAssignFloatF(&yTemp, footerHeight);
        }
        for (k = self->listIdx_; k < [table size]; ++k) {
          jfloat rowHeight = [table getRowHeightWithInt:k];
          if (yTemp - rowHeight < self->minY_) {
            break;
          }
          JreMinusAssignFloatF(&yTemp, rowHeight);
        }
        if (![table isComplete]) {
          JrePlusAssignFloatF(&yTemp, footerHeight);
        }
        
#line 1359
        if (k < [table size]) {
          if ([table isSplitRows] && (![table isSplitLate] || (k == self->listIdx_ && firstPass))) {
            if (!self->splittedRow_) {
              self->splittedRow_ = true;
              table = new_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(table);
              (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) setWithInt:0 withId:table];
              JavaUtilArrayList *rows = [table getRows];
              for (jint i = headerRows; i < self->listIdx_; ++i) {
                (void) [((JavaUtilArrayList *) nil_chk(rows)) setWithInt:i withId:nil];
              }
            }
            jfloat h = yTemp - self->minY_;
            ComAowagieTextPdfPdfPRow *newRow = [((ComAowagieTextPdfPdfPRow *) nil_chk([table getRowWithInt:k])) splitRowWithComAowagieTextPdfPdfPTable:table withInt:k withFloat:h];
            if (newRow == nil) {
              if (k == self->listIdx_) {
                return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
              }
            }
            else {
              yTemp = self->minY_;
              [((JavaUtilArrayList *) nil_chk([table getRows])) addWithInt:++k withId:newRow];
            }
          }
          else if (![table isSplitRows] && k == self->listIdx_ && firstPass) {
            (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
            self->splittedRow_ = false;
            continue;
          }
          else if (k == self->listIdx_ && !firstPass && (![table isSplitRows] || [table isSplitLate]) && ([table getFooterRows] == 0 || [table isComplete])) {
            return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
          }
        }
        
#line 1392
        firstPass = false;
        
#line 1394
        if (!simulate) {
          
#line 1396
          switch ([table getHorizontalAlignment]) {
            case ComAowagieTextElement_ALIGN_LEFT:
            break;
            case ComAowagieTextElement_ALIGN_RIGHT:
            JrePlusAssignFloatF(&x1, self->rectangularWidth_ - tableWidth);
            break;
            default:
            JrePlusAssignFloatF(&x1, (self->rectangularWidth_ - tableWidth) / 2.0f);
          }
          
#line 1406
          ComAowagieTextPdfPdfPTable *nt = ComAowagieTextPdfPdfPTable_shallowCopyWithComAowagieTextPdfPdfPTable_(table);
          JavaUtilArrayList *sub = [((ComAowagieTextPdfPdfPTable *) nil_chk(nt)) getRows];
          
#line 1410
          if (!skipHeader) {
            for (jint j = 0; j < realHeaderRows; ++j) {
              ComAowagieTextPdfPdfPRow *headerRow = [table getRowWithInt:j];
              [((JavaUtilArrayList *) nil_chk(sub)) addWithId:headerRow];
            }
          }
          else {
            
#line 1416
            [nt setHeaderRowsWithInt:footerRows];
          }
          
#line 1419
          [((JavaUtilArrayList *) nil_chk(sub)) addAllWithJavaUtilCollection:[table getRowsWithInt:self->listIdx_ withInt:k]];
          
#line 1422
          jboolean showFooter = ![table isSkipLastFooter];
          if (k < [table size]) {
            [nt setCompleteWithBoolean:true];
            showFooter = true;
          }
          
#line 1428
          for (jint j = 0; j < footerRows && [nt isComplete] && showFooter; ++j) {
            [sub addWithId:[table getRowWithInt:j + realHeaderRows]];
          }
          
#line 1433
          jfloat rowHeight = 0;
          ComAowagieTextPdfPdfPRow *last = (ComAowagieTextPdfPdfPRow *) cast_chk([sub getWithInt:[sub size] - 1 - footerRows], [ComAowagieTextPdfPdfPRow class]);
          if ([table isExtendLastRow]) {
            rowHeight = [((ComAowagieTextPdfPdfPRow *) nil_chk(last)) getMaxHeights];
            [last setMaxHeightsWithFloat:yTemp - self->minY_ + rowHeight];
            yTemp = self->minY_;
          }
          
#line 1442
          if (self->canvases_ != nil) {
            [nt writeSelectedRowsWithInt:0 withInt:-1 withFloat:x1 withFloat:yLineWrite withComAowagieTextPdfPdfContentByteArray:self->canvases_];
          }
          else {
            
#line 1445
            [nt writeSelectedRowsWithInt:0 withInt:-1 withFloat:x1 withFloat:yLineWrite withComAowagieTextPdfPdfContentByte:self->canvas_];
          }
          if ([table isExtendLastRow]) {
            [((ComAowagieTextPdfPdfPRow *) nil_chk(last)) setMaxHeightsWithFloat:rowHeight];
          }
        }
        else if ([table isExtendLastRow] && self->minY_ > ComAowagieTextPdfPdfPRow_BOTTOM_LIMIT) {
          yTemp = self->minY_;
        }
        self->yLine_ = yTemp;
        if (!(skipHeader || [table isComplete])) {
          JrePlusAssignFloatF(&self->yLine_, footerHeight);
        }
        if (k >= [table size]) {
          JreMinusAssignFloatF(&self->yLine_, [table spacingAfter]);
          (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
          self->splittedRow_ = false;
          self->listIdx_ = 0;
        }
        else {
          if (self->splittedRow_) {
            JavaUtilArrayList *rows = [table getRows];
            for (jint i = self->listIdx_; i < k; ++i) {
              (void) [((JavaUtilArrayList *) nil_chk(rows)) setWithInt:i withId:nil];
            }
          }
          self->listIdx_ = k;
          return ComAowagieTextPdfColumnText_NO_MORE_COLUMN;
        }
      }
      else if ([element type] == ComAowagieTextElement_YMARK) {
        if (!simulate) {
          id<ComAowagieTextPdfDrawDrawInterface> zh = (id<ComAowagieTextPdfDrawDrawInterface>) cast_check(element, ComAowagieTextPdfDrawDrawInterface_class_());
          [zh drawWithComAowagieTextPdfPdfContentByte:self->canvas_ withFloat:self->leftX_ withFloat:self->minY_ withFloat:self->rightX_ withFloat:self->maxY_ withFloat:self->yLine_];
        }
        (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
      }
      else {
        
#line 1482
        (void) [((JavaUtilLinkedList *) nil_chk(self->compositeElements_)) removeFirst];
      }
    }
    continue_main_loop: ;
  }
}


#line 1587
void ComAowagieTextPdfColumnText_updateFilledWidthWithFloat_(ComAowagieTextPdfColumnText *self, jfloat w) {
  if (w > self->filledWidth_) {
    self->filledWidth_ = w;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfColumnText)
