//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfPTable.java
//

#include "DocumentException.h"
#include "Element.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PdfContentByte.h"
#include "PdfPCell.h"
#include "PdfPRow.h"
#include "PdfPTable.h"
#include "PdfPTableEvent.h"
#include "PdfPTableEventForwarder.h"
#include "PdfWriter.h"
#include "Phrase.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

#if !__has_feature(objc_arc)
#error "PdfPTable must be compiled with ARC (-fobjc-arc)"
#endif

#pragma clang diagnostic ignored "-Wprotocol"

@interface ComAowagieTextPdfPdfPTable () {
 @public
  JavaUtilArrayList *rows_;
  jfloat totalHeight_;
  IOSObjectArray *currentRow_;
  jint currentRowIdx_;
  ComAowagieTextPdfPdfPCell *defaultCell_;
  jfloat totalWidth_;
  IOSFloatArray *relativeWidths_;
  IOSFloatArray *absoluteWidths_;
  id<ComAowagieTextPdfPdfPTableEvent> tableEvent_;
  /*!
   @brief Holds value of property headerRows.
   */
  jint headerRows_;
  /*!
   @brief Holds value of property widthPercentage.
   */
  jfloat widthPercentage_;
  /*!
   @brief Holds value of property horizontalAlignment.
   */
  jint horizontalAlignment_;
  /*!
   @brief Holds value of property skipFirstHeader.
   */
  jboolean skipFirstHeader_;
  /*!
   @brief Holds value of property skipLastFooter.
   @since 2.1.6
   */
  jboolean skipLastFooter_;
  jboolean isColspan_;
  jint runDirection_;
  /*!
   @brief Holds value of property lockedWidth.
   */
  jboolean lockedWidth_;
  /*!
   @brief Holds value of property splitRows.
   */
  jboolean splitRows_;
  /*!
   @brief The spacing before the table.
   */
  jfloat spacingBefore_;
  /*!
   @brief The spacing after the table.
   */
  jfloat spacingAfter_;
  /*!
   @brief Holds value of property extendLastRow.
   */
  jboolean extendLastRow_;
  /*!
   @brief Holds value of property headersInEvent.
   */
  jboolean headersInEvent_;
  /*!
   @brief Holds value of property splitLate.
   */
  jboolean splitLate_;
  /*!
   @brief Defines if the table should be kept
  on one page if possible
   */
  jboolean keepTogether_;
  /*!
   @brief Indicates if the PdfPTable is complete once added to the document.
   @since iText 2.0.8
   */
  jboolean complete_;
  /*!
   @brief Holds value of property footerRows.
   */
  jint footerRows_;
  /*!
   @brief Keeps track of the completeness of the current row.
   @since 2.1.6
   */
  jboolean rowCompleted_;
}

/*!
 @brief Copies the format of the sourceTable without copying the content.
 @param sourceTable Table
 @since 2.1.6 private is now protected
 */
- (void)copyFormatWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)sourceTable OBJC_METHOD_FAMILY_NONE;

/*!
 @since 2.1.6 private is now protected
 */
- (void)calculateWidths;

/*!
 @brief Calculates the heights of the table.
 @param firsttime if true, the heights of the rows will be recalculated.  This takes time; normally the heights of the rows are already calcultated,
   so in most cases, it's save to use false as parameter.
 @return the total height of the table. Note that it will be 0 if you didn't
  specify the width of the table with setTotalWidth().
 @since 2.1.5	added a parameter and a return type to an existing method,
  and made it public
 */
- (jfloat)calculateHeightsWithBoolean:(jboolean)firsttime;

/*!
 @brief When updating the row index, cells with rowspan should be taken into account.
 This is what happens in this method.
 @since 2.1.6
 */
- (void)skipColsWithRowspanAbove;

/*!
 @brief Adds a cell element.
 @param phrase the  <CODE> Phrase </CODE>  to be added to the cell
 */
- (void)addCellWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase;

/*!
 @brief Writes the selected rows and columns to the document.
 This method does not clip the columns; this is only important
  if there are columns with colspan at boundaries. 
 <CODE>canvases</CODE> is obtained from <CODE>beginWritingRows()</CODE>.
  The table event is only fired for complete rows.
 @param colStart the first column to be written, zero index
 @param colEnd the last column to be written + 1. If it is -1 all the  columns to the end are written
 @param rowStart the first row to be written, zero index
 @param rowEnd the last row to be written + 1. If it is -1 all the  rows to the end are written
 @param xPos the x write coordinate
 @param yPos the y write coordinate
 @param canvases an array of 4  <CODE> PdfContentByte </CODE>  obtained from
    <CODE> beginWritingRows() </CODE>
 @return the y coordinate position of the bottom of the last row
 - seealso: #beginWritingRows(com.aowagie.text.pdf.PdfContentByte)
 */
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

/*!
 @brief Writes the selected rows and columns to the document.
 This method clips the columns; this is only important
  if there are columns with colspan at boundaries.
  The table event is only fired for complete rows.
 @param colStart the first column to be written, zero index
 @param colEnd the last column to be written + 1. If it is -1 all the  columns to the end are written
 @param rowStart the first row to be written, zero index
 @param rowEnd the last row to be written + 1. If it is -1 all the  rows to the end are written
 @param xPos the x write coordinate
 @param yPos the y write coordinate
 @param canvas the  <CODE> PdfContentByte </CODE>  where the rows will
   be written to
 @return the y coordinate position of the bottom of the last row
 */
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas;

/*!
 @brief Gets and initializes the 4 layers where the table is written to.The text or graphics are added to
  one of the 4 <CODE>PdfContentByte</CODE> returned with the following order: 
 <ul>
  <li><CODE>PdfPtable.BASECANVAS</CODE> - the original <CODE>PdfContentByte</CODE>.
 Anything placed here
  will be under the table. 
 <li><CODE>PdfPtable.BACKGROUNDCANVAS</CODE> - the layer where the background goes to. 
 <li><CODE>PdfPtable.LINECANVAS</CODE> - the layer where the lines go to. 
 <li><CODE>PdfPtable.TEXTCANVAS</CODE> - the layer where the text go to. Anything placed here
  will be over the table. 
 </ul>
  The layers are placed in sequence on top of each other.
 @param canvas the  <CODE> PdfContentByte </CODE>  where the rows will
   be written to
 @return an array of 4 <CODE>PdfContentByte</CODE>
 - seealso: #writeSelectedRows(int, int, float, float, PdfContentByte[])
 */
+ (IOSObjectArray *)beginWritingRowsWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas;

/*!
 @brief Finishes writing the table.
 @param canvases the array returned by  <CODE> beginWritingRows() </CODE>
 */
+ (void)endWritingRowsWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases;

/*!
 @brief Gets the height of a particular row.
 @param idx the row index (starts at 0)
 @param firsttime is this the first time the row heigh is calculated?
 @return the height of a particular row
 @since 3.0.0
 */
- (jfloat)getRowHeightWithInt:(jint)idx
                  withBoolean:(jboolean)firsttime;

/*!
 @brief Gets the maximum height of a cell in a particular row (will only be different
  from getRowHeight is one of the cells in the row has a rowspan &lt; 1).
 @param rowIndex the row index
 @param cellIndex the cell index
 @return the height of a particular row including rowspan
 @since 2.1.6
 */
- (jfloat)getRowspanHeightWithInt:(jint)rowIndex
                          withInt:(jint)cellIndex;

/*!
 @brief Deletes a row from the table.
 @param rowNumber the row to be deleted
 @return <CODE>true</CODE> if the row was deleted
 */
- (jboolean)deleteRowWithInt:(jint)rowNumber;

/*!
 @brief Removes all of the rows except headers
 */
- (void)deleteBodyRows;

/*!
 @brief Calculates the extra height needed in a row because of rowspans.
 @param start the index of the start row (the one to adjust)
 @param end the index of the end row on the page
 @return Row
 @since 2.1.6
 */
- (ComAowagieTextPdfPdfPRow *)adjustCellsInRowWithInt:(jint)start
                                              withInt:(jint)end;

- (IOSObjectArray *)getEventWidthsWithFloat:(jfloat)xPos
                                    withInt:(jint)firstRow
                                    withInt:(jint)lastRow
                                withBoolean:(jboolean)includeHeaders;

@end

J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, rows_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, currentRow_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, defaultCell_, ComAowagieTextPdfPdfPCell *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, relativeWidths_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, absoluteWidths_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ComAowagieTextPdfPdfPTable, tableEvent_, id<ComAowagieTextPdfPdfPTableEvent>)

/*!
 @brief The index of the original <CODE>PdfcontentByte</CODE>.
 */
inline jint ComAowagieTextPdfPdfPTable_get_BASECANVAS(void);
#define ComAowagieTextPdfPdfPTable_BASECANVAS 0
J2OBJC_STATIC_FIELD_CONSTANT(ComAowagieTextPdfPdfPTable, BASECANVAS, jint)

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_copyFormatWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPdfPdfPTable *sourceTable);

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_calculateWidths(ComAowagieTextPdfPdfPTable *self);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPTable_calculateHeightsWithBoolean_(ComAowagieTextPdfPdfPTable *self, jboolean firsttime);

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_skipColsWithRowspanAbove(ComAowagieTextPdfPdfPTable *self);

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_addCellWithComAowagieTextPhrase_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPhrase *phrase);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPTable *self, jint colStart, jint colEnd, jint rowStart, jint rowEnd, jfloat xPos, jfloat yPos, IOSObjectArray *canvases);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfPTable *self, jint colStart, jint colEnd, jint rowStart, jint rowEnd, jfloat xPos, jfloat yPos, ComAowagieTextPdfPdfContentByte *canvas);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfPdfPTable_beginWritingRowsWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas);

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_endWritingRowsWithComAowagieTextPdfPdfContentByteArray_(IOSObjectArray *canvases);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPTable_getRowHeightWithInt_withBoolean_(ComAowagieTextPdfPdfPTable *self, jint idx, jboolean firsttime);

__attribute__((unused)) static jfloat ComAowagieTextPdfPdfPTable_getRowspanHeightWithInt_withInt_(ComAowagieTextPdfPdfPTable *self, jint rowIndex, jint cellIndex);

__attribute__((unused)) static jboolean ComAowagieTextPdfPdfPTable_deleteRowWithInt_(ComAowagieTextPdfPdfPTable *self, jint rowNumber);

__attribute__((unused)) static void ComAowagieTextPdfPdfPTable_deleteBodyRows(ComAowagieTextPdfPdfPTable *self);

__attribute__((unused)) static ComAowagieTextPdfPdfPRow *ComAowagieTextPdfPdfPTable_adjustCellsInRowWithInt_withInt_(ComAowagieTextPdfPdfPTable *self, jint start, jint end);

__attribute__((unused)) static IOSObjectArray *ComAowagieTextPdfPdfPTable_getEventWidthsWithFloat_withInt_withInt_withBoolean_(ComAowagieTextPdfPdfPTable *self, jfloat xPos, jint firstRow, jint lastRow, jboolean includeHeaders);

#line 1 "/Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/pdf/PdfPTable.java"


#line 71
@implementation ComAowagieTextPdfPdfPTable

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 191
- (instancetype)init {
  ComAowagieTextPdfPdfPTable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 199
- (instancetype)initWithFloatArray:(IOSFloatArray *)relativeWidths {
  ComAowagieTextPdfPdfPTable_initWithFloatArray_(self, relativeWidths);
  return self;
}


#line 219
- (instancetype)initWithInt:(jint)numColumns {
  ComAowagieTextPdfPdfPTable_initWithInt_(self, numColumns);
  return self;
}


#line 238
- (instancetype)initWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table {
  ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(self, table);
  return self;
}


#line 261
+ (ComAowagieTextPdfPdfPTable *)shallowCopyWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)table {
  return ComAowagieTextPdfPdfPTable_shallowCopyWithComAowagieTextPdfPdfPTable_(table);
}


#line 273
- (void)copyFormatWithComAowagieTextPdfPdfPTable:(ComAowagieTextPdfPdfPTable *)sourceTable {
  ComAowagieTextPdfPdfPTable_copyFormatWithComAowagieTextPdfPdfPTable_(self, sourceTable);
}


#line 310
- (void)setWidthsWithFloatArray:(IOSFloatArray *)relativeWidths {
  if (((IOSFloatArray *) nil_chk(relativeWidths))->size_ != [self getNumberOfColumns]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Wrong number of columns.");
  }
  self->relativeWidths_ = [IOSFloatArray newArrayWithLength:relativeWidths->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(relativeWidths, 0, self->relativeWidths_, 0, relativeWidths->size_);
  self->absoluteWidths_ = [IOSFloatArray newArrayWithLength:relativeWidths->size_];
  self->totalHeight_ = 0;
  ComAowagieTextPdfPdfPTable_calculateWidths(self);
  ComAowagieTextPdfPdfPTable_calculateHeightsWithBoolean_(self, true);
}


#line 329
- (void)setWidthsWithIntArray:(IOSIntArray *)relativeWidths {
  IOSFloatArray *tb = [IOSFloatArray newArrayWithLength:((IOSIntArray *) nil_chk(relativeWidths))->size_];
  for (jint k = 0; k < relativeWidths->size_; ++k) {
    *IOSFloatArray_GetRef(tb, k) = IOSIntArray_Get(relativeWidths, k);
  }
  [self setWidthsWithFloatArray:tb];
}


#line 340
- (void)calculateWidths {
  ComAowagieTextPdfPdfPTable_calculateWidths(self);
}


#line 359
- (void)setTotalWidthWithFloat:(jfloat)totalWidth {
  if (self->totalWidth_ == totalWidth) {
    return;
  }
  self->totalWidth_ = totalWidth;
  self->totalHeight_ = 0;
  ComAowagieTextPdfPdfPTable_calculateWidths(self);
  ComAowagieTextPdfPdfPTable_calculateHeightsWithBoolean_(self, true);
}


#line 376
- (void)setTotalWidthWithFloatArray:(IOSFloatArray *)columnWidth {
  if (((IOSFloatArray *) nil_chk(columnWidth))->size_ != [self getNumberOfColumns]) {
    @throw new_ComAowagieTextDocumentException_initWithNSString_(@"Wrong number of columns.");
  }
  self->totalWidth_ = 0;
  {
    IOSFloatArray *a__ =
#line 381
    columnWidth;
    jfloat const *b__ = a__->buffer_;
    jfloat const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jfloat element = *b__++;
      
#line 382
      JrePlusAssignFloatF(&self->totalWidth_, element);
    }
  }
  
#line 384
  [self setWidthsWithFloatArray:columnWidth];
}


#line 394
- (jfloat)getTotalWidth {
  return self->totalWidth_;
}


#line 409
- (jfloat)calculateHeightsWithBoolean:(jboolean)firsttime {
  return ComAowagieTextPdfPdfPTable_calculateHeightsWithBoolean_(self, firsttime);
}


#line 429
- (ComAowagieTextPdfPdfPCell *)getDefaultCell {
  return self->defaultCell_;
}


#line 438
- (void)addCellWithComAowagieTextPdfPdfPCell:(ComAowagieTextPdfPdfPCell *)cell {
  self->rowCompleted_ = false;
  ComAowagieTextPdfPdfPCell *ncell = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(cell);
  
#line 442
  jint colspan = [ncell getColspan];
  colspan = JavaLangMath_maxWithInt_withInt_(colspan, 1);
  colspan = JavaLangMath_minWithInt_withInt_(colspan, ((IOSObjectArray *) nil_chk(self->currentRow_))->size_ - self->currentRowIdx_);
  [ncell setColspanWithInt:colspan];
  
#line 447
  if (colspan != 1) {
    self->isColspan_ = true;
  }
  jint rdir = [ncell getRunDirection];
  if (rdir == ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT) {
    [ncell setRunDirectionWithInt:self->runDirection_];
  }
  
#line 455
  ComAowagieTextPdfPdfPTable_skipColsWithRowspanAbove(self);
  
#line 457
  jboolean cellAdded = false;
  if (self->currentRowIdx_ < ((IOSObjectArray *) nil_chk(self->currentRow_))->size_) {
    (void) IOSObjectArray_Set(self->currentRow_, self->currentRowIdx_, ncell);
    self->currentRowIdx_ += colspan;
    cellAdded = true;
  }
  
#line 464
  ComAowagieTextPdfPdfPTable_skipColsWithRowspanAbove(self);
  
#line 466
  if (self->currentRowIdx_ >= ((IOSObjectArray *) nil_chk(self->currentRow_))->size_) {
    jint numCols = [self getNumberOfColumns];
    if (self->runDirection_ == ComAowagieTextPdfPdfWriter_RUN_DIRECTION_RTL) {
      IOSObjectArray *rtlRow = [IOSObjectArray newArrayWithLength:numCols type:ComAowagieTextPdfPdfPCell_class_()];
      jint rev = ((IOSObjectArray *) nil_chk(self->currentRow_))->size_;
      for (jint k = 0; k < ((IOSObjectArray *) nil_chk(self->currentRow_))->size_; ++k) {
        ComAowagieTextPdfPdfPCell *rcell = IOSObjectArray_Get(self->currentRow_, k);
        jint cspan = [((ComAowagieTextPdfPdfPCell *) nil_chk(rcell)) getColspan];
        rev -= cspan;
        (void) IOSObjectArray_Set(rtlRow, rev, rcell);
        k += cspan - 1;
      }
      self->currentRow_ = rtlRow;
    }
    ComAowagieTextPdfPdfPRow *row = new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPCellArray_(self->currentRow_);
    if (self->totalWidth_ > 0) {
      [row setWidthsWithFloatArray:self->absoluteWidths_];
      JrePlusAssignFloatF(&self->totalHeight_, [row getMaxHeights]);
    }
    [((JavaUtilArrayList *) nil_chk(self->rows_)) addWithId:row];
    self->currentRow_ = [IOSObjectArray newArrayWithLength:numCols type:ComAowagieTextPdfPdfPCell_class_()];
    self->currentRowIdx_ = 0;
    self->rowCompleted_ = true;
  }
  
#line 491
  if (!cellAdded) {
    (void) IOSObjectArray_Set(self->currentRow_, self->currentRowIdx_, ncell);
    self->currentRowIdx_ += colspan;
  }
}


#line 502
- (void)skipColsWithRowspanAbove {
  ComAowagieTextPdfPdfPTable_skipColsWithRowspanAbove(self);
}


#line 519
- (jboolean)rowSpanAboveWithInt:(jint)currRow
                        withInt:(jint)currCol {
  if (currCol >= [self getNumberOfColumns] ||
#line 522
  currCol < 0 ||
#line 523
  currRow == 0) {
    return false;
  }
  
#line 527
  jint row = currRow - 1;
  ComAowagieTextPdfPdfPRow *aboveRow = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:row], [ComAowagieTextPdfPdfPRow class]);
  if (aboveRow == nil) {
    return false;
  }
  ComAowagieTextPdfPdfPCell *aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), currCol);
  while (aboveCell == nil && row > 0) {
    aboveRow = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:--row], [ComAowagieTextPdfPdfPRow class]);
    if (aboveRow == nil) {
      return false;
    }
    aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), currCol);
  }
  
#line 541
  jint distance = currRow - row;
  
#line 543
  if (aboveCell == nil) {
    jint col = currCol - 1;
    aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), col);
    while (aboveCell == nil && row > 0) {
      aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), --col);
    }
    return aboveCell != nil && [aboveCell getRowspan] > distance;
  }
  
#line 552
  if ([aboveCell getRowspan] == 1 && distance > 1) {
    jint col = currCol - 1;
    aboveRow = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:row + 1], [ComAowagieTextPdfPdfPRow class]);
    distance--;
    aboveCell = IOSObjectArray_Get(nil_chk([((ComAowagieTextPdfPdfPRow *) nil_chk(aboveRow)) getCells]), col);
    while (aboveCell == nil && col > 0) {
      aboveCell = IOSObjectArray_Get(nil_chk([aboveRow getCells]), --col);
    }
  }
  
#line 562
  return aboveCell != nil && [aboveCell getRowspan] > distance;
}


#line 577
- (void)addCellWithComAowagieTextPhrase:(ComAowagieTextPhrase *)phrase {
  ComAowagieTextPdfPdfPTable_addCellWithComAowagieTextPhrase_(self, phrase);
}


#line 597
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  
#line 598
  return ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByteArray_(self, 0, -1, rowStart, rowEnd, xPos, yPos, canvases);
}


#line 621
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  return ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByteArray_(self, colStart, colEnd, rowStart, rowEnd, xPos, yPos, canvases);
}


#line 689
- (jfloat)writeSelectedRowsWithInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas {
  
#line 690
  return ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByte_(self, 0, -1, rowStart, rowEnd, xPos, yPos, canvas);
}


#line 711
- (jfloat)writeSelectedRowsWithInt:(jint)colStart
                           withInt:(jint)colEnd
                           withInt:(jint)rowStart
                           withInt:(jint)rowEnd
                         withFloat:(jfloat)xPos
                         withFloat:(jfloat)yPos
withComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas {
  return ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByte_(self, colStart, colEnd, rowStart, rowEnd, xPos, yPos, canvas);
}


#line 769
+ (IOSObjectArray *)beginWritingRowsWithComAowagieTextPdfPdfContentByte:(ComAowagieTextPdfPdfContentByte *)canvas {
  return ComAowagieTextPdfPdfPTable_beginWritingRowsWithComAowagieTextPdfPdfContentByte_(canvas);
}


#line 783
+ (void)endWritingRowsWithComAowagieTextPdfPdfContentByteArray:(IOSObjectArray *)canvases {
  ComAowagieTextPdfPdfPTable_endWritingRowsWithComAowagieTextPdfPdfContentByteArray_(canvases);
}


#line 801
- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(self->rows_)) size];
}


#line 810
- (jfloat)getTotalHeight {
  return self->totalHeight_;
}


#line 820
- (jfloat)getRowHeightWithInt:(jint)idx {
  return ComAowagieTextPdfPdfPTable_getRowHeightWithInt_withBoolean_(self, idx, false);
}


#line 831
- (jfloat)getRowHeightWithInt:(jint)idx
                  withBoolean:(jboolean)firsttime {
  return ComAowagieTextPdfPdfPTable_getRowHeightWithInt_withBoolean_(self, idx, firsttime);
}


#line 880
- (jfloat)getRowspanHeightWithInt:(jint)rowIndex
                          withInt:(jint)cellIndex {
  return ComAowagieTextPdfPdfPTable_getRowspanHeightWithInt_withInt_(self, rowIndex, cellIndex);
}


#line 905
- (jfloat)getHeaderHeight {
  jfloat total = 0;
  jint size = JavaLangMath_minWithInt_withInt_([((JavaUtilArrayList *) nil_chk(self->rows_)) size], self->headerRows_);
  for (jint k = 0; k < size; ++k) {
    ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
    if (row != nil) {
      JrePlusAssignFloatF(&total, [row getMaxHeights]);
    }
  }
  return total;
}


#line 924
- (jfloat)getFooterHeight {
  jfloat total = 0;
  jint start = JavaLangMath_maxWithInt_withInt_(0, self->headerRows_ - self->footerRows_);
  jint size = JavaLangMath_minWithInt_withInt_([((JavaUtilArrayList *) nil_chk(self->rows_)) size], self->headerRows_);
  for (jint k = start; k < size; ++k) {
    ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
    if (row != nil) {
      JrePlusAssignFloatF(&total, [row getMaxHeights]);
    }
  }
  return total;
}


#line 943
- (jboolean)deleteRowWithInt:(jint)rowNumber {
  return ComAowagieTextPdfPdfPTable_deleteRowWithInt_(self, rowNumber);
}


#line 968
- (void)deleteBodyRows {
  ComAowagieTextPdfPdfPTable_deleteBodyRows(self);
}


#line 986
- (jint)getNumberOfColumns {
  return ((IOSFloatArray *) nil_chk(self->relativeWidths_))->size_;
}


#line 995
- (jint)getHeaderRows {
  return self->headerRows_;
}


#line 1006
- (void)setHeaderRowsWithInt:(jint)headerRows {
  if (headerRows < 0) {
    headerRows = 0;
  }
  self->headerRows_ = headerRows;
}


#line 1018
- (JavaUtilArrayList *)getChunks {
  
#line 1020
  return new_JavaUtilArrayList_init();
}


#line 1028
- (jint)type {
  
#line 1030
  return ComAowagieTextElement_PTABLE;
}


#line 1037
- (jboolean)isContent {
  
#line 1039
  return true;
}


#line 1046
- (jboolean)isNestable {
  
#line 1048
  return true;
}


#line 1058
- (jfloat)getWidthPercentage {
  return self->widthPercentage_;
}


#line 1067
- (void)setWidthPercentageWithFloat:(jfloat)widthPercentage {
  self->widthPercentage_ = widthPercentage;
}


#line 1076
- (jint)getHorizontalAlignment {
  return self->horizontalAlignment_;
}


#line 1087
- (void)setHorizontalAlignmentWithInt:(jint)horizontalAlignment {
  self->horizontalAlignment_ = horizontalAlignment;
}


#line 1098
- (ComAowagieTextPdfPdfPRow *)getRowWithInt:(jint)idx {
  return (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:idx], [ComAowagieTextPdfPdfPRow class]);
}


#line 1107
- (JavaUtilArrayList *)getRows {
  return self->rows_;
}


#line 1118
- (JavaUtilArrayList *)getRowsWithInt:(jint)start
                              withInt:(jint)end {
  
#line 1119
  JavaUtilArrayList *list = new_JavaUtilArrayList_init();
  if (start < 0 || end > [self size]) {
    return list;
  }
  ComAowagieTextPdfPdfPRow *firstRow = ComAowagieTextPdfPdfPTable_adjustCellsInRowWithInt_withInt_(self, start, end);
  jint colIndex = 0;
  ComAowagieTextPdfPdfPCell *cell;
  while (colIndex < [self getNumberOfColumns]) {
    jint rowIndex = start;
    while ([self rowSpanAboveWithInt:rowIndex-- withInt:colIndex]) {
      ComAowagieTextPdfPdfPRow *row = [self getRowWithInt:rowIndex];
      if (row != nil) {
        ComAowagieTextPdfPdfPCell *replaceCell = IOSObjectArray_Get(nil_chk([row getCells]), colIndex);
        if (replaceCell != nil) {
          (void) IOSObjectArray_SetAndConsume(nil_chk([((ComAowagieTextPdfPdfPRow *) nil_chk(firstRow)) getCells]), colIndex, new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(replaceCell));
          jfloat extra = 0;
          jint stop = JavaLangMath_minWithInt_withInt_(rowIndex + [replaceCell getRowspan], end);
          for (jint j = start + 1; j < stop; j++) {
            JrePlusAssignFloatF(&extra, [self getRowHeightWithInt:j]);
          }
          [firstRow setExtraHeightWithInt:colIndex withFloat:extra];
          jfloat diff = ComAowagieTextPdfPdfPTable_getRowspanHeightWithInt_withInt_(self, rowIndex, colIndex) -
#line 1141
          [self getRowHeightWithInt:start] - extra;
          [((ComAowagieTextPdfPdfPCell *) nil_chk(IOSObjectArray_Get(nil_chk([firstRow getCells]), colIndex))) consumeHeightWithFloat:diff];
        }
      }
    }
    cell = IOSObjectArray_Get(nil_chk([((ComAowagieTextPdfPdfPRow *) nil_chk(firstRow)) getCells]), colIndex);
    if (cell == nil) {
      colIndex++;
    }
    else {
      
#line 1150
      colIndex += [cell getColspan];
    }
  }
  [list addWithId:firstRow];
  for (jint i = start + 1; i < end; i++) {
    [list addWithId:ComAowagieTextPdfPdfPTable_adjustCellsInRowWithInt_withInt_(self, i, end)];
  }
  return list;
}

- (ComAowagieTextPdfPdfPRow *)adjustCellsInRowWithInt:(jint)start
                                              withInt:(jint)end {
  return ComAowagieTextPdfPdfPTable_adjustCellsInRowWithInt_withInt_(self, start, end);
}


#line 1190
- (void)setTableEventWithComAowagieTextPdfPdfPTableEvent:(id<ComAowagieTextPdfPdfPTableEvent>)event {
  if (event == nil) {
    self->tableEvent_ = nil;
  }
  else
#line 1193
  if (self->tableEvent_ == nil) {
    self->tableEvent_ = event;
  }
  else
#line 1195
  if ([self->tableEvent_ isKindOfClass:[ComAowagieTextPdfEventsPdfPTableEventForwarder class]]) {
    [((ComAowagieTextPdfEventsPdfPTableEventForwarder *) self->tableEvent_) addTableEventWithComAowagieTextPdfPdfPTableEvent:event];
  }
  else {
    
#line 1198
    ComAowagieTextPdfEventsPdfPTableEventForwarder *forward = new_ComAowagieTextPdfEventsPdfPTableEventForwarder_init();
    [forward addTableEventWithComAowagieTextPdfPdfPTableEvent:self->tableEvent_];
    [forward addTableEventWithComAowagieTextPdfPdfPTableEvent:event];
    self->tableEvent_ = forward;
  }
}


#line 1210
- (id<ComAowagieTextPdfPdfPTableEvent>)getTableEvent {
  return self->tableEvent_;
}


#line 1219
- (IOSFloatArray *)getAbsoluteWidths {
  return self->absoluteWidths_;
}

- (IOSObjectArray *)getEventWidthsWithFloat:(jfloat)xPos
                                    withInt:(jint)firstRow
                                    withInt:(jint)lastRow
                                withBoolean:(jboolean)includeHeaders {
  return ComAowagieTextPdfPdfPTable_getEventWidthsWithFloat_withInt_withInt_withBoolean_(self, xPos, firstRow, lastRow, includeHeaders);
}


#line 1271
- (jboolean)isSkipFirstHeader {
  return self->skipFirstHeader_;
}


#line 1283
- (jboolean)isSkipLastFooter {
  return self->skipLastFooter_;
}


#line 1293
- (void)setSkipFirstHeaderWithBoolean:(jboolean)skipFirstHeader {
  self->skipFirstHeader_ = skipFirstHeader;
}


#line 1304
- (void)setSkipLastFooterWithBoolean:(jboolean)skipLastFooter {
  self->skipLastFooter_ = skipLastFooter;
}


#line 1315
- (void)setRunDirectionWithInt:(jint)runDirection {
  switch (runDirection) {
    case ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT:
    case ComAowagieTextPdfPdfWriter_RUN_DIRECTION_NO_BIDI:
    case ComAowagieTextPdfPdfWriter_RUN_DIRECTION_LTR:
    case ComAowagieTextPdfPdfWriter_RUN_DIRECTION_RTL:
    self->runDirection_ = runDirection;
    break;
    default:
    @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$I", @"Invalid run direction: ", runDirection));
  }
}


#line 1335
- (jint)getRunDirection {
  return self->runDirection_;
}


#line 1344
- (jboolean)isLockedWidth {
  return self->lockedWidth_;
}


#line 1353
- (void)setLockedWidthWithBoolean:(jboolean)lockedWidth {
  self->lockedWidth_ = lockedWidth;
}


#line 1362
- (jboolean)isSplitRows {
  return self->splitRows_;
}


#line 1373
- (void)setSplitRowsWithBoolean:(jboolean)splitRows {
  self->splitRows_ = splitRows;
}


#line 1382
- (void)setSpacingBeforeWithFloat:(jfloat)spacing {
  self->spacingBefore_ = spacing;
}


#line 1391
- (void)setSpacingAfterWithFloat:(jfloat)spacing {
  self->spacingAfter_ = spacing;
}


#line 1400
- (jfloat)spacingBefore {
  return self->spacingBefore_;
}


#line 1409
- (jfloat)spacingAfter {
  return self->spacingAfter_;
}


#line 1418
- (jboolean)isExtendLastRow {
  return self->extendLastRow_;
}


#line 1428
- (void)setExtendLastRowWithBoolean:(jboolean)extendLastRow {
  self->extendLastRow_ = extendLastRow;
}


#line 1437
- (jboolean)isHeadersInEvent {
  return self->headersInEvent_;
}


#line 1446
- (void)setHeadersInEventWithBoolean:(jboolean)headersInEvent {
  self->headersInEvent_ = headersInEvent;
}


#line 1455
- (jboolean)isSplitLate {
  return self->splitLate_;
}


#line 1466
- (void)setSplitLateWithBoolean:(jboolean)splitLate {
  self->splitLate_ = splitLate;
}


#line 1477
- (void)setKeepTogetherWithBoolean:(jboolean)keepTogether {
  self->keepTogether_ = keepTogether;
}


#line 1487
- (jboolean)getKeepTogether {
  return self->keepTogether_;
}


#line 1496
- (jint)getFooterRows {
  return self->footerRows_;
}


#line 1513
- (void)setFooterRowsWithInt:(jint)footerRows {
  if (footerRows < 0) {
    footerRows = 0;
  }
  self->footerRows_ = footerRows;
}


#line 1526
- (void)flushContent {
  
#line 1528
  ComAowagieTextPdfPdfPTable_deleteBodyRows(self);
  [self setSkipFirstHeaderWithBoolean:true];
}


#line 1536
- (jboolean)isComplete {
  
#line 1538
  return self->complete_;
}


#line 1545
- (void)setCompleteWithBoolean:(jboolean)complete {
  
#line 1547
  self->complete_ = complete;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 2, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPTable;", 0x8, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, 6, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, 6, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPCell;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 16, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 17, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 17, 20, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 17, 21, -1, -1, -1, -1 },
    { NULL, "[LComAowagieTextPdfPdfContentByte;", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 26, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 28, 15, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPRow;", 0x0, 33, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x0, 34, 15, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPRow;", 0x2, 35, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "LComAowagieTextPdfPdfPTableEvent;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[F", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 9, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloatArray:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(initWithComAowagieTextPdfPdfPTable:);
  methods[4].selector = @selector(shallowCopyWithComAowagieTextPdfPdfPTable:);
  methods[5].selector = @selector(copyFormatWithComAowagieTextPdfPdfPTable:);
  methods[6].selector = @selector(setWidthsWithFloatArray:);
  methods[7].selector = @selector(setWidthsWithIntArray:);
  methods[8].selector = @selector(calculateWidths);
  methods[9].selector = @selector(setTotalWidthWithFloat:);
  methods[10].selector = @selector(setTotalWidthWithFloatArray:);
  methods[11].selector = @selector(getTotalWidth);
  methods[12].selector = @selector(calculateHeightsWithBoolean:);
  methods[13].selector = @selector(getDefaultCell);
  methods[14].selector = @selector(addCellWithComAowagieTextPdfPdfPCell:);
  methods[15].selector = @selector(skipColsWithRowspanAbove);
  methods[16].selector = @selector(rowSpanAboveWithInt:withInt:);
  methods[17].selector = @selector(addCellWithComAowagieTextPhrase:);
  methods[18].selector = @selector(writeSelectedRowsWithInt:withInt:withFloat:withFloat:withComAowagieTextPdfPdfContentByteArray:);
  methods[19].selector = @selector(writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComAowagieTextPdfPdfContentByteArray:);
  methods[20].selector = @selector(writeSelectedRowsWithInt:withInt:withFloat:withFloat:withComAowagieTextPdfPdfContentByte:);
  methods[21].selector = @selector(writeSelectedRowsWithInt:withInt:withInt:withInt:withFloat:withFloat:withComAowagieTextPdfPdfContentByte:);
  methods[22].selector = @selector(beginWritingRowsWithComAowagieTextPdfPdfContentByte:);
  methods[23].selector = @selector(endWritingRowsWithComAowagieTextPdfPdfContentByteArray:);
  methods[24].selector = @selector(size);
  methods[25].selector = @selector(getTotalHeight);
  methods[26].selector = @selector(getRowHeightWithInt:);
  methods[27].selector = @selector(getRowHeightWithInt:withBoolean:);
  methods[28].selector = @selector(getRowspanHeightWithInt:withInt:);
  methods[29].selector = @selector(getHeaderHeight);
  methods[30].selector = @selector(getFooterHeight);
  methods[31].selector = @selector(deleteRowWithInt:);
  methods[32].selector = @selector(deleteBodyRows);
  methods[33].selector = @selector(getNumberOfColumns);
  methods[34].selector = @selector(getHeaderRows);
  methods[35].selector = @selector(setHeaderRowsWithInt:);
  methods[36].selector = @selector(getChunks);
  methods[37].selector = @selector(type);
  methods[38].selector = @selector(isContent);
  methods[39].selector = @selector(isNestable);
  methods[40].selector = @selector(getWidthPercentage);
  methods[41].selector = @selector(setWidthPercentageWithFloat:);
  methods[42].selector = @selector(getHorizontalAlignment);
  methods[43].selector = @selector(setHorizontalAlignmentWithInt:);
  methods[44].selector = @selector(getRowWithInt:);
  methods[45].selector = @selector(getRows);
  methods[46].selector = @selector(getRowsWithInt:withInt:);
  methods[47].selector = @selector(adjustCellsInRowWithInt:withInt:);
  methods[48].selector = @selector(setTableEventWithComAowagieTextPdfPdfPTableEvent:);
  methods[49].selector = @selector(getTableEvent);
  methods[50].selector = @selector(getAbsoluteWidths);
  methods[51].selector = @selector(getEventWidthsWithFloat:withInt:withInt:withBoolean:);
  methods[52].selector = @selector(isSkipFirstHeader);
  methods[53].selector = @selector(isSkipLastFooter);
  methods[54].selector = @selector(setSkipFirstHeaderWithBoolean:);
  methods[55].selector = @selector(setSkipLastFooterWithBoolean:);
  methods[56].selector = @selector(setRunDirectionWithInt:);
  methods[57].selector = @selector(getRunDirection);
  methods[58].selector = @selector(isLockedWidth);
  methods[59].selector = @selector(setLockedWidthWithBoolean:);
  methods[60].selector = @selector(isSplitRows);
  methods[61].selector = @selector(setSplitRowsWithBoolean:);
  methods[62].selector = @selector(setSpacingBeforeWithFloat:);
  methods[63].selector = @selector(setSpacingAfterWithFloat:);
  methods[64].selector = @selector(spacingBefore);
  methods[65].selector = @selector(spacingAfter);
  methods[66].selector = @selector(isExtendLastRow);
  methods[67].selector = @selector(setExtendLastRowWithBoolean:);
  methods[68].selector = @selector(isHeadersInEvent);
  methods[69].selector = @selector(setHeadersInEventWithBoolean:);
  methods[70].selector = @selector(isSplitLate);
  methods[71].selector = @selector(setSplitLateWithBoolean:);
  methods[72].selector = @selector(setKeepTogetherWithBoolean:);
  methods[73].selector = @selector(getKeepTogether);
  methods[74].selector = @selector(getFooterRows);
  methods[75].selector = @selector(setFooterRowsWithInt:);
  methods[76].selector = @selector(flushContent);
  methods[77].selector = @selector(isComplete);
  methods[78].selector = @selector(setCompleteWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASECANVAS", "I", .constantValue.asInt = ComAowagieTextPdfPdfPTable_BASECANVAS, 0x1a, -1, -1, -1, -1 },
    { "BACKGROUNDCANVAS", "I", .constantValue.asInt = ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS, 0x19, -1, -1, -1, -1 },
    { "LINECANVAS", "I", .constantValue.asInt = ComAowagieTextPdfPdfPTable_LINECANVAS, 0x19, -1, -1, -1, -1 },
    { "TEXTCANVAS", "I", .constantValue.asInt = ComAowagieTextPdfPdfPTable_TEXTCANVAS, 0x18, -1, -1, -1, -1 },
    { "rows_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentRow_", "[LComAowagieTextPdfPdfPCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentRowIdx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultCell_", "LComAowagieTextPdfPdfPCell;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "totalWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relativeWidths_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "absoluteWidths_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tableEvent_", "LComAowagieTextPdfPdfPTableEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headerRows_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widthPercentage_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalAlignment_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipFirstHeader_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "skipLastFooter_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isColspan_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "runDirection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lockedWidth_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "splitRows_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacingBefore_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spacingAfter_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extendLastRow_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headersInEvent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "splitLate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keepTogether_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "complete_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footerRows_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rowCompleted_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[F", "I", "LComAowagieTextPdfPdfPTable;", "shallowCopy", "copyFormat", "setWidths", "LComAowagieTextDocumentException;", "[I", "setTotalWidth", "F", "calculateHeights", "Z", "addCell", "LComAowagieTextPdfPdfPCell;", "rowSpanAbove", "II", "LComAowagieTextPhrase;", "writeSelectedRows", "IIFF[LComAowagieTextPdfPdfContentByte;", "IIIIFF[LComAowagieTextPdfPdfContentByte;", "IIFFLComAowagieTextPdfPdfContentByte;", "IIIIFFLComAowagieTextPdfPdfContentByte;", "beginWritingRows", "LComAowagieTextPdfPdfContentByte;", "endWritingRows", "[LComAowagieTextPdfPdfContentByte;", "getRowHeight", "IZ", "getRowspanHeight", "deleteRow", "setHeaderRows", "setWidthPercentage", "setHorizontalAlignment", "getRow", "getRows", "adjustCellsInRow", "setTableEvent", "LComAowagieTextPdfPdfPTableEvent;", "getEventWidths", "FIIZ", "setSkipFirstHeader", "setSkipLastFooter", "setRunDirection", "setLockedWidth", "setSplitRows", "setSpacingBefore", "setSpacingAfter", "setExtendLastRow", "setHeadersInEvent", "setSplitLate", "setKeepTogether", "setFooterRows", "setComplete" };
  static const J2ObjcClassInfo _ComAowagieTextPdfPdfPTable = { "PdfPTable", "com.aowagie.text.pdf", ptrTable, methods, fields, 7, 0x1, 79, 31, -1, -1, -1, -1, -1 };
  return &_ComAowagieTextPdfPdfPTable;
}

@end


#line 191
void ComAowagieTextPdfPdfPTable_init(ComAowagieTextPdfPdfPTable *self) {
  NSObject_init(self);
  self->rows_ = new_JavaUtilArrayList_init();
  self->totalHeight_ =
#line 94
  0;
  self->currentRowIdx_ =
#line 96
  0;
  self->defaultCell_ = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(nil);
  self->totalWidth_ = 0;
  self->widthPercentage_ =
#line 111
  80;
  self->horizontalAlignment_ =
#line 116
  ComAowagieTextElement_ALIGN_CENTER;
  self->skipFirstHeader_ =
#line 121
  false;
  self->skipLastFooter_ =
#line 126
  false;
  self->isColspan_ =
#line 128
  false;
  self->runDirection_ =
#line 130
  ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
  self->lockedWidth_ =
#line 135
  false;
  self->splitRows_ =
#line 140
  true;
  self->splitLate_ =
#line 165
  true;
  self->complete_ =
#line 178
  true;
  self->rowCompleted_ =
#line 189
  true;
}


#line 191
ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_init() {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPTable, init)
}


#line 191
ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_init() {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPTable, init)
}


#line 199
void ComAowagieTextPdfPdfPTable_initWithFloatArray_(ComAowagieTextPdfPdfPTable *self, IOSFloatArray *relativeWidths) {
  NSObject_init(self);
  self->rows_ = new_JavaUtilArrayList_init();
  self->totalHeight_ =
#line 94
  0;
  self->currentRowIdx_ =
#line 96
  0;
  self->defaultCell_ = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(nil);
  self->totalWidth_ = 0;
  self->widthPercentage_ =
#line 111
  80;
  self->horizontalAlignment_ =
#line 116
  ComAowagieTextElement_ALIGN_CENTER;
  self->skipFirstHeader_ =
#line 121
  false;
  self->skipLastFooter_ =
#line 126
  false;
  self->isColspan_ =
#line 128
  false;
  self->runDirection_ =
#line 130
  ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
  self->lockedWidth_ =
#line 135
  false;
  self->splitRows_ =
#line 140
  true;
  self->splitLate_ =
#line 165
  true;
  self->complete_ =
#line 178
  true;
  self->rowCompleted_ =
#line 189
  true;
  
#line 200
  if (relativeWidths == nil) {
    @throw new_JavaLangNullPointerException_initWithNSString_(@"The widths array in PdfPTable constructor can not be null.");
  }
  if (relativeWidths->size_ == 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The widths array in PdfPTable constructor can not have zero length.");
  }
  self->relativeWidths_ = [IOSFloatArray newArrayWithLength:relativeWidths->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(relativeWidths, 0, self->relativeWidths_, 0, relativeWidths->size_);
  self->absoluteWidths_ = [IOSFloatArray newArrayWithLength:relativeWidths->size_];
  ComAowagieTextPdfPdfPTable_calculateWidths(self);
  self->currentRow_ = [IOSObjectArray newArrayWithLength:((IOSFloatArray *) nil_chk(self->absoluteWidths_))->size_ type:ComAowagieTextPdfPdfPCell_class_()];
  self->keepTogether_ = false;
}


#line 199
ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithFloatArray_(IOSFloatArray *relativeWidths) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPTable, initWithFloatArray_, relativeWidths)
}


#line 199
ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithFloatArray_(IOSFloatArray *relativeWidths) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPTable, initWithFloatArray_, relativeWidths)
}


#line 219
void ComAowagieTextPdfPdfPTable_initWithInt_(ComAowagieTextPdfPdfPTable *self, jint numColumns) {
  NSObject_init(self);
  self->rows_ = new_JavaUtilArrayList_init();
  self->totalHeight_ =
#line 94
  0;
  self->currentRowIdx_ =
#line 96
  0;
  self->defaultCell_ = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(nil);
  self->totalWidth_ = 0;
  self->widthPercentage_ =
#line 111
  80;
  self->horizontalAlignment_ =
#line 116
  ComAowagieTextElement_ALIGN_CENTER;
  self->skipFirstHeader_ =
#line 121
  false;
  self->skipLastFooter_ =
#line 126
  false;
  self->isColspan_ =
#line 128
  false;
  self->runDirection_ =
#line 130
  ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
  self->lockedWidth_ =
#line 135
  false;
  self->splitRows_ =
#line 140
  true;
  self->splitLate_ =
#line 165
  true;
  self->complete_ =
#line 178
  true;
  self->rowCompleted_ =
#line 189
  true;
  
#line 220
  if (numColumns <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"The number of columns in PdfPTable constructor must be greater than zero.");
  }
  self->relativeWidths_ = [IOSFloatArray newArrayWithLength:numColumns];
  for (jint k = 0; k < numColumns; ++k) {
    *IOSFloatArray_GetRef(self->relativeWidths_, k) = 1;
  }
  self->absoluteWidths_ = [IOSFloatArray newArrayWithLength:self->relativeWidths_->size_];
  ComAowagieTextPdfPdfPTable_calculateWidths(self);
  self->currentRow_ = [IOSObjectArray newArrayWithLength:((IOSFloatArray *) nil_chk(self->absoluteWidths_))->size_ type:ComAowagieTextPdfPdfPCell_class_()];
  self->keepTogether_ = false;
}


#line 219
ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithInt_(jint numColumns) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPTable, initWithInt_, numColumns)
}


#line 219
ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithInt_(jint numColumns) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPTable, initWithInt_, numColumns)
}


#line 238
void ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPdfPdfPTable *table) {
  NSObject_init(self);
  self->rows_ = new_JavaUtilArrayList_init();
  self->totalHeight_ =
#line 94
  0;
  self->currentRowIdx_ =
#line 96
  0;
  self->defaultCell_ = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPhrase_(nil);
  self->totalWidth_ = 0;
  self->widthPercentage_ =
#line 111
  80;
  self->horizontalAlignment_ =
#line 116
  ComAowagieTextElement_ALIGN_CENTER;
  self->skipFirstHeader_ =
#line 121
  false;
  self->skipLastFooter_ =
#line 126
  false;
  self->isColspan_ =
#line 128
  false;
  self->runDirection_ =
#line 130
  ComAowagieTextPdfPdfWriter_RUN_DIRECTION_DEFAULT;
  self->lockedWidth_ =
#line 135
  false;
  self->splitRows_ =
#line 140
  true;
  self->splitLate_ =
#line 165
  true;
  self->complete_ =
#line 178
  true;
  self->rowCompleted_ =
#line 189
  true;
  
#line 239
  ComAowagieTextPdfPdfPTable_copyFormatWithComAowagieTextPdfPdfPTable_(self, table);
  for (jint k = 0; k < ((IOSObjectArray *) nil_chk(self->currentRow_))->size_; ++k) {
    if (IOSObjectArray_Get(((ComAowagieTextPdfPdfPTable *) nil_chk(table))->currentRow_, k) == nil) {
      break;
    }
    (void) IOSObjectArray_SetAndConsume(self->currentRow_, k, new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(IOSObjectArray_Get(table->currentRow_, k)));
  }
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(((ComAowagieTextPdfPdfPTable *) nil_chk(table))->rows_)) size]; ++k) {
    ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(table->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
    if (row != nil) {
      row = new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_(row);
    }
    [((JavaUtilArrayList *) nil_chk(self->rows_)) addWithId:row];
  }
}


#line 238
ComAowagieTextPdfPdfPTable *new_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) {
  J2OBJC_NEW_IMPL(ComAowagieTextPdfPdfPTable, initWithComAowagieTextPdfPdfPTable_, table)
}


#line 238
ComAowagieTextPdfPdfPTable *create_ComAowagieTextPdfPdfPTable_initWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) {
  J2OBJC_CREATE_IMPL(ComAowagieTextPdfPdfPTable, initWithComAowagieTextPdfPdfPTable_, table)
}


#line 261
ComAowagieTextPdfPdfPTable *ComAowagieTextPdfPdfPTable_shallowCopyWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *table) {
  ComAowagieTextPdfPdfPTable_initialize();
  
#line 262
  ComAowagieTextPdfPdfPTable *nt = new_ComAowagieTextPdfPdfPTable_init();
  ComAowagieTextPdfPdfPTable_copyFormatWithComAowagieTextPdfPdfPTable_(nt, table);
  return nt;
}


#line 273
void ComAowagieTextPdfPdfPTable_copyFormatWithComAowagieTextPdfPdfPTable_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPdfPdfPTable *sourceTable) {
  self->relativeWidths_ = [IOSFloatArray newArrayWithLength:[((ComAowagieTextPdfPdfPTable *) nil_chk(sourceTable)) getNumberOfColumns]];
  self->absoluteWidths_ = [IOSFloatArray newArrayWithLength:[sourceTable getNumberOfColumns]];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sourceTable->relativeWidths_, 0, self->relativeWidths_, 0, [self getNumberOfColumns]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(sourceTable->absoluteWidths_, 0, self->absoluteWidths_, 0, [self getNumberOfColumns]);
  self->totalWidth_ = sourceTable->totalWidth_;
  self->totalHeight_ = sourceTable->totalHeight_;
  self->currentRowIdx_ = 0;
  self->tableEvent_ = sourceTable->tableEvent_;
  self->runDirection_ = sourceTable->runDirection_;
  self->defaultCell_ = new_ComAowagieTextPdfPdfPCell_initWithComAowagieTextPdfPdfPCell_(sourceTable->defaultCell_);
  self->currentRow_ = [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(sourceTable->currentRow_))->size_ type:ComAowagieTextPdfPdfPCell_class_()];
  self->isColspan_ = sourceTable->isColspan_;
  self->splitRows_ = sourceTable->splitRows_;
  self->spacingAfter_ = sourceTable->spacingAfter_;
  self->spacingBefore_ = sourceTable->spacingBefore_;
  self->headerRows_ = sourceTable->headerRows_;
  self->footerRows_ = sourceTable->footerRows_;
  self->lockedWidth_ = sourceTable->lockedWidth_;
  self->extendLastRow_ = sourceTable->extendLastRow_;
  self->headersInEvent_ = sourceTable->headersInEvent_;
  self->widthPercentage_ = sourceTable->widthPercentage_;
  self->splitLate_ = sourceTable->splitLate_;
  self->skipFirstHeader_ = sourceTable->skipFirstHeader_;
  self->skipLastFooter_ = sourceTable->skipLastFooter_;
  self->horizontalAlignment_ = sourceTable->horizontalAlignment_;
  self->keepTogether_ = sourceTable->keepTogether_;
  self->complete_ = sourceTable->complete_;
}


#line 340
void ComAowagieTextPdfPdfPTable_calculateWidths(ComAowagieTextPdfPdfPTable *self) {
  if (self->totalWidth_ <= 0) {
    return;
  }
  jfloat total = 0;
  jint numCols = [self getNumberOfColumns];
  for (jint k = 0; k < numCols; ++k) {
    JrePlusAssignFloatF(&total, IOSFloatArray_Get(nil_chk(self->relativeWidths_), k));
  }
  for (jint k = 0; k < numCols; ++k) {
    *IOSFloatArray_GetRef(nil_chk(self->absoluteWidths_), k) = self->totalWidth_ * IOSFloatArray_Get(nil_chk(self->relativeWidths_), k) / total;
  }
}


#line 409
jfloat ComAowagieTextPdfPdfPTable_calculateHeightsWithBoolean_(ComAowagieTextPdfPdfPTable *self, jboolean firsttime) {
  if (self->totalWidth_ <= 0) {
    return 0;
  }
  self->totalHeight_ = 0;
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(self->rows_)) size]; ++k) {
    JrePlusAssignFloatF(&self->totalHeight_, ComAowagieTextPdfPdfPTable_getRowHeightWithInt_withBoolean_(self, k, firsttime));
  }
  return self->totalHeight_;
}


#line 502
void ComAowagieTextPdfPdfPTable_skipColsWithRowspanAbove(ComAowagieTextPdfPdfPTable *self) {
  jint direction = 1;
  if (self->runDirection_ == ComAowagieTextPdfPdfWriter_RUN_DIRECTION_RTL) {
    direction = -1;
  }
  while ([self rowSpanAboveWithInt:[((JavaUtilArrayList *) nil_chk(self->rows_)) size] withInt:self->currentRowIdx_]) {
    self->currentRowIdx_ += direction;
  }
}


#line 577
void ComAowagieTextPdfPdfPTable_addCellWithComAowagieTextPhrase_(ComAowagieTextPdfPdfPTable *self, ComAowagieTextPhrase *phrase) {
  [((ComAowagieTextPdfPdfPCell *) nil_chk(self->defaultCell_)) setPhraseWithComAowagieTextPhrase:phrase];
  [self addCellWithComAowagieTextPdfPdfPCell:self->defaultCell_];
  [((ComAowagieTextPdfPdfPCell *) nil_chk(self->defaultCell_)) setPhraseWithComAowagieTextPhrase:nil];
}


#line 621
jfloat ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByteArray_(ComAowagieTextPdfPdfPTable *self, jint colStart, jint colEnd, jint rowStart, jint rowEnd, jfloat xPos, jfloat yPos, IOSObjectArray *canvases) {
  if (self->totalWidth_ <= 0) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"The table width must be greater than zero.");
  }
  
#line 626
  jint totalRows = [((JavaUtilArrayList *) nil_chk(self->rows_)) size];
  if (rowStart < 0) {
    rowStart = 0;
  }
  if (rowEnd < 0) {
    rowEnd = totalRows;
  }
  else {
    
#line 633
    rowEnd = JavaLangMath_minWithInt_withInt_(rowEnd, totalRows);
  }
  if (rowStart >= rowEnd) {
    return yPos;
  }
  
#line 639
  jint totalCols = [self getNumberOfColumns];
  if (colStart < 0) {
    colStart = 0;
  }
  else {
    
#line 643
    colStart = JavaLangMath_minWithInt_withInt_(colStart, totalCols);
  }
  if (colEnd < 0) {
    colEnd = totalCols;
  }
  else {
    
#line 648
    colEnd = JavaLangMath_minWithInt_withInt_(colEnd, totalCols);
  }
  
#line 651
  jfloat yPosStart = yPos;
  for (jint k = rowStart; k < rowEnd; ++k) {
    ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
    if (row != nil) {
      [row writeCellsWithInt:colStart withInt:colEnd withFloat:xPos withFloat:yPos withComAowagieTextPdfPdfContentByteArray:canvases];
      JreMinusAssignFloatF(&yPos, [row getMaxHeights]);
    }
  }
  
#line 660
  if (self->tableEvent_ != nil && colStart == 0 && colEnd == totalCols) {
    IOSFloatArray *heights = [IOSFloatArray newArrayWithLength:rowEnd - rowStart + 1];
    *IOSFloatArray_GetRef(heights, 0) = yPosStart;
    for (jint k = rowStart; k < rowEnd; ++k) {
      ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
      jfloat hr = 0;
      if (row != nil) {
        hr = [row getMaxHeights];
      }
      *IOSFloatArray_GetRef(heights, k - rowStart + 1) = IOSFloatArray_Get(heights, k - rowStart) - hr;
    }
    [((id<ComAowagieTextPdfPdfPTableEvent>) nil_chk(self->tableEvent_)) tableLayoutWithComAowagieTextPdfPdfPTable:self withFloatArray2:ComAowagieTextPdfPdfPTable_getEventWidthsWithFloat_withInt_withInt_withBoolean_(self, xPos, rowStart, rowEnd, self->headersInEvent_) withFloatArray:heights withInt:self->headersInEvent_ ? self->headerRows_ : 0 withInt:rowStart withComAowagieTextPdfPdfContentByteArray:canvases];
  }
  
#line 674
  return yPos;
}


#line 711
jfloat ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfPTable *self, jint colStart, jint colEnd, jint rowStart, jint rowEnd, jfloat xPos, jfloat yPos, ComAowagieTextPdfPdfContentByte *canvas) {
  jint totalCols = [self getNumberOfColumns];
  if (colStart < 0) {
    colStart = 0;
  }
  else {
    
#line 716
    colStart = JavaLangMath_minWithInt_withInt_(colStart, totalCols);
  }
  
#line 719
  if (colEnd < 0) {
    colEnd = totalCols;
  }
  else {
    
#line 722
    colEnd = JavaLangMath_minWithInt_withInt_(colEnd, totalCols);
  }
  
#line 725
  jboolean clip = colStart != 0 || colEnd != totalCols;
  
#line 727
  if (clip) {
    jfloat w = 0;
    for (jint k = colStart; k < colEnd; ++k) {
      JrePlusAssignFloatF(&w, IOSFloatArray_Get(nil_chk(self->absoluteWidths_), k));
    }
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(canvas)) saveState];
    jfloat lx = colStart == 0 ? 10000 : 0;
    jfloat rx = colEnd == totalCols ? 10000 : 0;
    [canvas rectangleWithFloat:xPos - lx withFloat:-10000 withFloat:w + lx + rx withFloat:ComAowagieTextPdfPdfPRow_RIGHT_LIMIT];
    [canvas clip];
    [canvas newPath];
  }
  
#line 740
  IOSObjectArray *canvases = ComAowagieTextPdfPdfPTable_beginWritingRowsWithComAowagieTextPdfPdfContentByte_(canvas);
  jfloat y = ComAowagieTextPdfPdfPTable_writeSelectedRowsWithInt_withInt_withInt_withInt_withFloat_withFloat_withComAowagieTextPdfPdfContentByteArray_(self, colStart, colEnd, rowStart, rowEnd, xPos, yPos, canvases);
  ComAowagieTextPdfPdfPTable_endWritingRowsWithComAowagieTextPdfPdfContentByteArray_(canvases);
  
#line 744
  if (clip) {
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(canvas)) restoreState];
  }
  
#line 748
  return y;
}


#line 769
IOSObjectArray *ComAowagieTextPdfPdfPTable_beginWritingRowsWithComAowagieTextPdfPdfContentByte_(ComAowagieTextPdfPdfContentByte *canvas) {
  ComAowagieTextPdfPdfPTable_initialize();
  
#line 770
  return [IOSObjectArray newArrayWithObjects:(id[]){
#line 771
    canvas,
#line 772
    [((ComAowagieTextPdfPdfContentByte *) nil_chk(canvas)) getDuplicate],
#line 773
    [canvas getDuplicate],
#line 774
    [canvas getDuplicate] } count:4 type:ComAowagieTextPdfPdfContentByte_class_()];
  }


#line 783
void ComAowagieTextPdfPdfPTable_endWritingRowsWithComAowagieTextPdfPdfContentByteArray_(IOSObjectArray *canvases) {
  ComAowagieTextPdfPdfPTable_initialize();
  
#line 784
  ComAowagieTextPdfPdfContentByte *canvas = IOSObjectArray_Get(nil_chk(canvases), ComAowagieTextPdfPdfPTable_BASECANVAS);
  [((ComAowagieTextPdfPdfContentByte *) nil_chk(canvas)) saveState];
  [canvas addWithComAowagieTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComAowagieTextPdfPdfPTable_BACKGROUNDCANVAS)];
  [canvas restoreState];
  [canvas saveState];
  [canvas setLineCapWithInt:2];
  [canvas resetRGBColorStroke];
  [canvas addWithComAowagieTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComAowagieTextPdfPdfPTable_LINECANVAS)];
  [canvas restoreState];
  [canvas addWithComAowagieTextPdfPdfContentByte:IOSObjectArray_Get(canvases, ComAowagieTextPdfPdfPTable_TEXTCANVAS)];
}


#line 831
jfloat ComAowagieTextPdfPdfPTable_getRowHeightWithInt_withBoolean_(ComAowagieTextPdfPdfPTable *self, jint idx, jboolean firsttime) {
  if (self->totalWidth_ <= 0 || idx < 0 || idx >= [((JavaUtilArrayList *) nil_chk(self->rows_)) size]) {
    return 0;
  }
  ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:idx], [ComAowagieTextPdfPdfPRow class]);
  if (row == nil) {
    return 0;
  }
  if (firsttime) {
    [row setWidthsWithFloatArray:self->absoluteWidths_];
  }
  jfloat height = [row getMaxHeights];
  ComAowagieTextPdfPdfPCell *cell;
  ComAowagieTextPdfPdfPRow *tmprow;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(self->relativeWidths_))->size_; i++) {
    if (![self rowSpanAboveWithInt:idx withInt:i]) {
      continue;
    }
    jint rs = 1;
    while ([self rowSpanAboveWithInt:idx - rs withInt:i]) {
      rs++;
    }
    tmprow = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:idx - rs], [ComAowagieTextPdfPdfPRow class]);
    cell = IOSObjectArray_Get(nil_chk([((ComAowagieTextPdfPdfPRow *) nil_chk(tmprow)) getCells]), i);
    jfloat tmp = 0;
    if ([((ComAowagieTextPdfPdfPCell *) nil_chk(cell)) getRowspan] == rs + 1) {
      tmp = [cell getMaxHeight];
      while (rs > 0) {
        JreMinusAssignFloatF(&tmp, [self getRowHeightWithInt:idx - rs]);
        rs--;
      }
    }
    if (tmp > height) {
      height = tmp;
    }
  }
  [row setMaxHeightsWithFloat:height];
  return height;
}


#line 880
jfloat ComAowagieTextPdfPdfPTable_getRowspanHeightWithInt_withInt_(ComAowagieTextPdfPdfPTable *self, jint rowIndex, jint cellIndex) {
  if (self->totalWidth_ <= 0 || rowIndex < 0 || rowIndex >= [((JavaUtilArrayList *) nil_chk(self->rows_)) size]) {
    return 0;
  }
  ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:rowIndex], [ComAowagieTextPdfPdfPRow class]);
  if (row == nil || cellIndex >= ((IOSObjectArray *) nil_chk([row getCells]))->size_) {
    return 0;
  }
  ComAowagieTextPdfPdfPCell *cell = IOSObjectArray_Get(nil_chk([row getCells]), cellIndex);
  if (cell == nil) {
    return 0;
  }
  jfloat rowspanHeight = 0;
  for (jint j = 0; j < [cell getRowspan]; j++) {
    JrePlusAssignFloatF(&rowspanHeight, [self getRowHeightWithInt:rowIndex + j]);
  }
  return rowspanHeight;
}


#line 943
jboolean ComAowagieTextPdfPdfPTable_deleteRowWithInt_(ComAowagieTextPdfPdfPTable *self, jint rowNumber) {
  if (rowNumber < 0 || rowNumber >= [((JavaUtilArrayList *) nil_chk(self->rows_)) size]) {
    return false;
  }
  if (self->totalWidth_ > 0) {
    ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:rowNumber], [ComAowagieTextPdfPdfPRow class]);
    if (row != nil) {
      JreMinusAssignFloatF(&self->totalHeight_, [row getMaxHeights]);
    }
  }
  (void) [((JavaUtilArrayList *) nil_chk(self->rows_)) removeWithInt:rowNumber];
  if (rowNumber < self->headerRows_) {
    --self->headerRows_;
    if (rowNumber >= self->headerRows_ - self->footerRows_) {
      --self->footerRows_;
    }
  }
  return true;
}


#line 968
void ComAowagieTextPdfPdfPTable_deleteBodyRows(ComAowagieTextPdfPdfPTable *self) {
  JavaUtilArrayList *rows2 = new_JavaUtilArrayList_init();
  for (jint k = 0; k < self->headerRows_; ++k) {
    [rows2 addWithId:[((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k]];
  }
  self->rows_ = rows2;
  self->totalHeight_ = 0;
  if (self->totalWidth_ > 0) {
    self->totalHeight_ = [self getHeaderHeight];
  }
}


#line 1167
ComAowagieTextPdfPdfPRow *ComAowagieTextPdfPdfPTable_adjustCellsInRowWithInt_withInt_(ComAowagieTextPdfPdfPTable *self, jint start, jint end) {
  ComAowagieTextPdfPdfPRow *row = new_ComAowagieTextPdfPdfPRow_initPackagePrivateWithComAowagieTextPdfPdfPRow_([self getRowWithInt:start]);
  [row initExtraHeights];
  ComAowagieTextPdfPdfPCell *cell;
  IOSObjectArray *cells = [row getCells];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cells))->size_; i++) {
    cell = IOSObjectArray_Get(cells, i);
    if (cell == nil || [cell getRowspan] == 1) {
      continue;
    }
    jint stop = JavaLangMath_minWithInt_withInt_(end, start + [cell getRowspan]);
    jfloat extra = 0;
    for (jint k = start + 1; k < stop; k++) {
      JrePlusAssignFloatF(&extra, [self getRowHeightWithInt:k]);
    }
    [row setExtraHeightWithInt:i withFloat:extra];
  }
  return row;
}


#line 1223
IOSObjectArray *ComAowagieTextPdfPdfPTable_getEventWidthsWithFloat_withInt_withInt_withBoolean_(ComAowagieTextPdfPdfPTable *self, jfloat xPos, jint firstRow, jint lastRow, jboolean includeHeaders) {
  if (includeHeaders) {
    firstRow = JavaLangMath_maxWithInt_withInt_(firstRow, self->headerRows_);
    lastRow = JavaLangMath_maxWithInt_withInt_(lastRow, self->headerRows_);
  }
  IOSObjectArray *widths = [IOSObjectArray newArrayWithLength:(includeHeaders ? self->headerRows_ : 0) + lastRow - firstRow type:IOSClass_floatArray(1)];
  if (self->isColspan_) {
    jint n = 0;
    if (includeHeaders) {
      for (jint k = 0; k < self->headerRows_; ++k) {
        ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:k], [ComAowagieTextPdfPdfPRow class]);
        if (row == nil) {
          ++n;
        }
        else {
          
#line 1237
          (void) IOSObjectArray_Set(widths, n++, [row getEventWidthWithFloat:xPos]);
        }
      }
    }
    for (; firstRow < lastRow; ++firstRow) {
      ComAowagieTextPdfPdfPRow *row = (ComAowagieTextPdfPdfPRow *) cast_chk([((JavaUtilArrayList *) nil_chk(self->rows_)) getWithInt:firstRow], [ComAowagieTextPdfPdfPRow class]);
      if (row == nil) {
        ++n;
      }
      else {
        
#line 1246
        (void) IOSObjectArray_Set(widths, n++, [row getEventWidthWithFloat:xPos]);
      }
    }
  }
  else {
    jint numCols = [self getNumberOfColumns];
    IOSFloatArray *width = [IOSFloatArray newArrayWithLength:numCols + 1];
    *IOSFloatArray_GetRef(width, 0) = xPos;
    for (jint k = 0; k < numCols; ++k) {
      *IOSFloatArray_GetRef(width, k + 1) = IOSFloatArray_Get(width, k) + IOSFloatArray_Get(nil_chk(self->absoluteWidths_), k);
    }
    for (jint k = 0; k < widths->size_; ++k) {
      (void) IOSObjectArray_Set(widths, k, width);
    }
  }
  return widths;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAowagieTextPdfPdfPTable)
