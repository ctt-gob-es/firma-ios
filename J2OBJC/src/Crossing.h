//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/com/Crossing.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Crossing")
#ifdef RESTRICT_Crossing
#define INCLUDE_ALL_Crossing 0
#else
#define INCLUDE_ALL_Crossing 1
#endif
#undef RESTRICT_Crossing

#if !defined (ComCrossing_) && (INCLUDE_ALL_Crossing || defined(INCLUDE_ComCrossing))
#define ComCrossing_

@class IOSDoubleArray;
@protocol HarmonyJavaAwtGeomPathIterator;
@protocol HarmonyJavaAwtShape;

@interface ComCrossing : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Returns how many times ray from point (x,y) cross cubic curve
 @param x1 position for x1
 @param y1 position for y1
 @param cx1 position for cx1
 @param cy1 position for cy1
 @param cx2 position for cx2
 @param cy2 position for cy2
 @param x2 position for x2
 @param y2 position for y2
 @param x position for x
 @param y position for y
 @return the int with cross
 */
+ (jint)crossCubicWithDouble:(jdouble)x1
                  withDouble:(jdouble)y1
                  withDouble:(jdouble)cx1
                  withDouble:(jdouble)cy1
                  withDouble:(jdouble)cx2
                  withDouble:(jdouble)cy2
                  withDouble:(jdouble)x2
                  withDouble:(jdouble)y2
                  withDouble:(jdouble)x
                  withDouble:(jdouble)y;

/*!
 @brief Returns how many times ray from point (x,y) cross line.
 @param x1 position of x1
 @param y1 position of y1
 @param x2 position of x2
 @param y2 position of y2
 @param x position of x
 @param y position of y
 @return Returns how many times ray from point
 */
+ (jint)crossLineWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)x
                 withDouble:(jdouble)y;

/*!
 @brief Returns how many times ray from point (x,y) cross path
 @param p path of iterator
 @param x position of x
 @param y position of y
 @return int of cross
 */
+ (jint)crossPathWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)p
                                         withDouble:(jdouble)x
                                         withDouble:(jdouble)y;

/*!
 @brief Returns how many times ray from point (x,y) cross quard curve
 @param x1 position for x1
 @param y1 position for y1
 @param cx position for cx
 @param cy position for cy
 @param x2 position for x2
 @param y2 position for y2
 @param x position for x
 @param y position for y
 @return the int with cross
 */
+ (jint)crossQuadWithDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)cx
                 withDouble:(jdouble)cy
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)x
                 withDouble:(jdouble)y;

/*!
 @brief Returns how many times ray from point (x,y) cross shape
 @param s shape to cross
 @param x position of x
 @param y position of y
 @return int of cross
 */
+ (jint)crossShapeWithHarmonyJavaAwtShape:(id<HarmonyJavaAwtShape>)s
                               withDouble:(jdouble)x
                               withDouble:(jdouble)y;

/*!
 @brief Returns how many times rectangle stripe cross cubic curve or the are
  intersect
 @param x1 position for x1
 @param y1 position for y1
 @param cx1 position for cx1
 @param cy1 position for cy1
 @param cx2 position for cx2
 @param cy2 position for cy2
 @param x2 position for x2
 @param y2 position for y2
 @param rx1 position for rx1
 @param ry1 position for ry1
 @param rx2 position for rx2
 @param ry2 position for ry2
 @return int with intersect
 */
+ (jint)intersectCubicWithDouble:(jdouble)x1
                      withDouble:(jdouble)y1
                      withDouble:(jdouble)cx1
                      withDouble:(jdouble)cy1
                      withDouble:(jdouble)cx2
                      withDouble:(jdouble)cy2
                      withDouble:(jdouble)x2
                      withDouble:(jdouble)y2
                      withDouble:(jdouble)rx1
                      withDouble:(jdouble)ry1
                      withDouble:(jdouble)rx2
                      withDouble:(jdouble)ry2;

/*!
 @brief Returns how many times rectangle stripe cross line or the are intersect
 @param x1 position for x1
 @param y1 position for y1
 @param x2 position for x2
 @param y2 position for y2
 @param rx1 position for rx1
 @param ry1 position for ry1
 @param rx2 position for rx2
 @param ry2 position for ry2
 @return int with intersect
 */
+ (jint)intersectLineWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2
                     withDouble:(jdouble)rx1
                     withDouble:(jdouble)ry1
                     withDouble:(jdouble)rx2
                     withDouble:(jdouble)ry2;

/*!
 @brief Returns how many times rectangle stripe cross path or the are intersect
 @param p path to intersect
 @param x position for x
 @param y position for y
 @param w position for w
 @param h position for h
 @return int with intersect
 */
+ (jint)intersectPathWithHarmonyJavaAwtGeomPathIterator:(id<HarmonyJavaAwtGeomPathIterator>)p
                                             withDouble:(jdouble)x
                                             withDouble:(jdouble)y
                                             withDouble:(jdouble)w
                                             withDouble:(jdouble)h;

/*!
 @brief Returns how many times rectangle stripe cross quad curve or the are
  intersect
 @param x1 position for x1
 @param y1 position for y1
 @param cx position for cx
 @param cy position for cy
 @param x2 position for x2
 @param y2 position for y2
 @param rx1 position for rx1
 @param ry1 position for ry1
 @param rx2 position for rx2
 @param ry2 position for ry2
 @return int with intersect
 */
+ (jint)intersectQuadWithDouble:(jdouble)x1
                     withDouble:(jdouble)y1
                     withDouble:(jdouble)cx
                     withDouble:(jdouble)cy
                     withDouble:(jdouble)x2
                     withDouble:(jdouble)y2
                     withDouble:(jdouble)rx1
                     withDouble:(jdouble)ry1
                     withDouble:(jdouble)rx2
                     withDouble:(jdouble)ry2;

/*!
 @brief Returns how many times rectangle stripe cross shape or the are intersect
 @param s shape to intersect
 @param x position for x
 @param y position for y
 @param w position for w
 @param h position for h
 @return int with intersect
 */
+ (jint)intersectShapeWithHarmonyJavaAwtShape:(id<HarmonyJavaAwtShape>)s
                                   withDouble:(jdouble)x
                                   withDouble:(jdouble)y
                                   withDouble:(jdouble)w
                                   withDouble:(jdouble)h;

/*!
 @brief Returns true if cross count correspond inside location for even-odd path
  rule
 @param cross cross count
 @return return true if cross is not zero
 */
+ (jboolean)isInsideEvenOddWithInt:(jint)cross;

/*!
 @brief Returns true if cross count correspond inside location for non zero path
  rule
 @param cross cross count
 @return return true if cross is not zero
 */
+ (jboolean)isInsideNonZeroWithInt:(jint)cross;

/*!
 @brief Returns true if value enough small
 @param val value to set
 @return return true if val is in the range
 */
+ (jboolean)isZeroWithDouble:(jdouble)val;

/*!
 @brief Solves cubic equation
 @param eqn - the coefficients of the equation
 @param res - the roots of the equation
 @return a number of roots
 */
+ (jint)solveCubicWithDoubleArray:(IOSDoubleArray *)eqn
                  withDoubleArray:(IOSDoubleArray *)res;

/*!
 @brief Solves quadratic equation
 @param eqn - the coefficients of the equation
 @param res - the roots of the equation
 @return a number of roots
 */
+ (jint)solveQuadWithDoubleArray:(IOSDoubleArray *)eqn
                 withDoubleArray:(IOSDoubleArray *)res;

#pragma mark Package-Private

/*!
 @brief Returns are bounds intersect or not intersect rectangle
 @param bound bound to intersect
 @param bc index to intersect
 @param py1 position of py1
 @param py2 position of py2
 @return int with intersect
 */
+ (jint)crossBoundWithDoubleArray:(IOSDoubleArray *)bound
                          withInt:(jint)bc
                       withDouble:(jdouble)py1
                       withDouble:(jdouble)py2;

/*!
 @brief Excludes double roots.Roots are double if they lies enough close with
  each other.
 @param res - the roots
 @param rc - the roots count
 @return new roots count
 */
+ (jint)fixRootsWithDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc;

/*!
 @brief Sort bound array
 @param bound array
 @param index to sort
 */
+ (void)sortBoundWithDoubleArray:(IOSDoubleArray *)bound
                         withInt:(jint)bc;

@end

J2OBJC_EMPTY_STATIC_INIT(ComCrossing)

/*!
 @brief Allowable tolerance for bounds comparison
 */
inline jdouble ComCrossing_get_DELTA(void);
#define ComCrossing_DELTA 1.0E-5
J2OBJC_STATIC_FIELD_CONSTANT(ComCrossing, DELTA, jdouble)

/*!
 @brief If roots have distance less then <code>ROOT_DELTA</code> they are double
 */
inline jdouble ComCrossing_get_ROOT_DELTA(void);
#define ComCrossing_ROOT_DELTA 1.0E-10
J2OBJC_STATIC_FIELD_CONSTANT(ComCrossing, ROOT_DELTA, jdouble)

/*!
 @brief Rectangle cross segment
 */
inline jint ComCrossing_get_CROSSING(void);
#define ComCrossing_CROSSING 255
J2OBJC_STATIC_FIELD_CONSTANT(ComCrossing, CROSSING, jint)

/*!
 @brief Unknown crossing result
 */
inline jint ComCrossing_get_UNKNOWN(void);
#define ComCrossing_UNKNOWN 254
J2OBJC_STATIC_FIELD_CONSTANT(ComCrossing, UNKNOWN, jint)

FOUNDATION_EXPORT void ComCrossing_init(ComCrossing *self);

FOUNDATION_EXPORT ComCrossing *new_ComCrossing_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComCrossing *create_ComCrossing_init(void);

FOUNDATION_EXPORT jint ComCrossing_solveQuadWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res);

FOUNDATION_EXPORT jint ComCrossing_solveCubicWithDoubleArray_withDoubleArray_(IOSDoubleArray *eqn, IOSDoubleArray *res);

FOUNDATION_EXPORT jint ComCrossing_fixRootsWithDoubleArray_withInt_(IOSDoubleArray *res, jint rc);

FOUNDATION_EXPORT jint ComCrossing_crossLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble x, jdouble y);

FOUNDATION_EXPORT jint ComCrossing_crossQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2, jdouble x, jdouble y);

FOUNDATION_EXPORT jint ComCrossing_crossCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2, jdouble x, jdouble y);

FOUNDATION_EXPORT jint ComCrossing_crossPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_(id<HarmonyJavaAwtGeomPathIterator> p, jdouble x, jdouble y);

FOUNDATION_EXPORT jint ComCrossing_crossShapeWithHarmonyJavaAwtShape_withDouble_withDouble_(id<HarmonyJavaAwtShape> s, jdouble x, jdouble y);

FOUNDATION_EXPORT jboolean ComCrossing_isZeroWithDouble_(jdouble val);

FOUNDATION_EXPORT void ComCrossing_sortBoundWithDoubleArray_withInt_(IOSDoubleArray *bound, jint bc);

FOUNDATION_EXPORT jint ComCrossing_crossBoundWithDoubleArray_withInt_withDouble_withDouble_(IOSDoubleArray *bound, jint bc, jdouble py1, jdouble py2);

FOUNDATION_EXPORT jint ComCrossing_intersectLineWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2);

FOUNDATION_EXPORT jint ComCrossing_intersectQuadWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2);

FOUNDATION_EXPORT jint ComCrossing_intersectCubicWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2, jdouble rx1, jdouble ry1, jdouble rx2, jdouble ry2);

FOUNDATION_EXPORT jint ComCrossing_intersectPathWithHarmonyJavaAwtGeomPathIterator_withDouble_withDouble_withDouble_withDouble_(id<HarmonyJavaAwtGeomPathIterator> p, jdouble x, jdouble y, jdouble w, jdouble h);

FOUNDATION_EXPORT jint ComCrossing_intersectShapeWithHarmonyJavaAwtShape_withDouble_withDouble_withDouble_withDouble_(id<HarmonyJavaAwtShape> s, jdouble x, jdouble y, jdouble w, jdouble h);

FOUNDATION_EXPORT jboolean ComCrossing_isInsideNonZeroWithInt_(jint cross);

FOUNDATION_EXPORT jboolean ComCrossing_isInsideEvenOddWithInt_(jint cross);

J2OBJC_TYPE_LITERAL_HEADER(ComCrossing)

#endif

#if !defined (ComCrossing_QuadCurve_) && (INCLUDE_ALL_Crossing || defined(INCLUDE_ComCrossing_QuadCurve))
#define ComCrossing_QuadCurve_

@class IOSDoubleArray;

/*!
 @brief QuadCurve class provides basic functionality to find curve crossing and
  calculating bounds
 */
@interface ComCrossing_QuadCurve : NSObject {
 @public
  jdouble ax_;
  jdouble ay_;
  jdouble bx_;
  jdouble by_;
  jdouble Ax_;
  jdouble Ay_;
  jdouble Bx_;
  jdouble By_;
}

#pragma mark Public

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)cx
                    withDouble:(jdouble)cy
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2;

#pragma mark Package-Private

- (jint)addBoundWithDoubleArray:(IOSDoubleArray *)bound
                        withInt:(jint)bc
                withDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc
                     withDouble:(jdouble)minX
                     withDouble:(jdouble)maxX
                    withBoolean:(jboolean)changeId
                        withInt:(jint)id_;

- (jint)crossWithDoubleArray:(IOSDoubleArray *)res
                     withInt:(jint)rc
                  withDouble:(jdouble)py1
                  withDouble:(jdouble)py2;

- (jint)solveExtremWithDoubleArray:(IOSDoubleArray *)res;

- (jint)solvePointWithDoubleArray:(IOSDoubleArray *)res
                       withDouble:(jdouble)px;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComCrossing_QuadCurve)

FOUNDATION_EXPORT void ComCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(ComCrossing_QuadCurve *self, jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2);

FOUNDATION_EXPORT ComCrossing_QuadCurve *new_ComCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComCrossing_QuadCurve *create_ComCrossing_QuadCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx, jdouble cy, jdouble x2, jdouble y2);

J2OBJC_TYPE_LITERAL_HEADER(ComCrossing_QuadCurve)

#endif

#if !defined (ComCrossing_CubicCurve_) && (INCLUDE_ALL_Crossing || defined(INCLUDE_ComCrossing_CubicCurve))
#define ComCrossing_CubicCurve_

@class IOSDoubleArray;

/*!
 @brief CubicCurve class provides basic functionality to find curve crossing and
  calculating bounds
 */
@interface ComCrossing_CubicCurve : NSObject {
 @public
  jdouble ax_;
  jdouble ay_;
  jdouble bx_;
  jdouble by_;
  jdouble cx_;
  jdouble cy_;
  jdouble Ax_;
  jdouble Ay_;
  jdouble Bx_;
  jdouble By_;
  jdouble Cx_;
  jdouble Cy_;
  jdouble Ax3_;
  jdouble Bx2_;
}

#pragma mark Public

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)cx1
                    withDouble:(jdouble)cy1
                    withDouble:(jdouble)cx2
                    withDouble:(jdouble)cy2
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2;

#pragma mark Package-Private

- (jint)addBoundWithDoubleArray:(IOSDoubleArray *)bound
                        withInt:(jint)bc
                withDoubleArray:(IOSDoubleArray *)res
                        withInt:(jint)rc
                     withDouble:(jdouble)minX
                     withDouble:(jdouble)maxX
                    withBoolean:(jboolean)changeId
                        withInt:(jint)id_;

- (jint)crossWithDoubleArray:(IOSDoubleArray *)res
                     withInt:(jint)rc
                  withDouble:(jdouble)py1
                  withDouble:(jdouble)py2;

- (jint)solveExtremXWithDoubleArray:(IOSDoubleArray *)res;

- (jint)solveExtremYWithDoubleArray:(IOSDoubleArray *)res;

- (jint)solvePointWithDoubleArray:(IOSDoubleArray *)res
                       withDouble:(jdouble)px;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ComCrossing_CubicCurve)

FOUNDATION_EXPORT void ComCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(ComCrossing_CubicCurve *self, jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2);

FOUNDATION_EXPORT ComCrossing_CubicCurve *new_ComCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ComCrossing_CubicCurve *create_ComCrossing_CubicCurve_initWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble cx1, jdouble cy1, jdouble cx2, jdouble cy2, jdouble x2, jdouble y2);

J2OBJC_TYPE_LITERAL_HEADER(ComCrossing_CubicCurve)

#endif

#pragma pop_macro("INCLUDE_ALL_Crossing")
