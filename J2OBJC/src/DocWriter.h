//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Downloads/pades-ios-mini/src/main/java/com/aowagie/text/DocWriter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_DocWriter")
#ifdef RESTRICT_DocWriter
#define INCLUDE_ALL_DocWriter 0
#else
#define INCLUDE_ALL_DocWriter 1
#endif
#undef RESTRICT_DocWriter

#if !defined (ComAowagieTextDocWriter_) && (INCLUDE_ALL_DocWriter || defined(INCLUDE_ComAowagieTextDocWriter))
#define ComAowagieTextDocWriter_

#define RESTRICT_DocListener 1
#define INCLUDE_ComAowagieTextDocListener 1
#include "DocListener.h"

@class ComAowagieTextDocument;
@class ComAowagieTextHeaderFooter;
@class ComAowagieTextPdfOutputStreamCounter;
@class ComAowagieTextRectangle;
@class IOSByteArray;
@class JavaIoOutputStream;
@protocol ComAowagieTextElement;

/*!
 @brief An abstract <CODE>Writer</CODE> class for documents.
 <P>
  <CODE>DocWriter</CODE> is the abstract class of several writers such
  as <CODE>PdfWriter</CODE> and <CODE>HtmlWriter</CODE>.
  A <CODE>DocWriter</CODE> can be added as a <CODE>DocListener</CODE>
  to a certain <CODE>Document</CODE> by getting an instance (see method 
 <CODE>getInstance()</CODE> in the specific writer-classes).
  Every <CODE>Element</CODE> added to the original <CODE>Document</CODE>
  will be written to the <CODE>OutputStream</CODE> of the listening 
 <CODE>DocWriter</CODE>.
 - seealso: Document
 - seealso: DocListener
 */
@interface ComAowagieTextDocWriter : NSObject < ComAowagieTextDocListener > {
 @public
  /*!
   @brief The outputstream of this writer.
   */
  ComAowagieTextPdfOutputStreamCounter *os_;
  /*!
   @brief Is the writer open for writing?
   */
  jboolean open_;
}

#pragma mark Public

/*!
 @brief Signals that an <CODE>Element</CODE> was added to the <CODE>Document</CODE>.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class.
 @param element A high level object to add
 @return <CODE>false</CODE>
 @throw DocumentExceptionwhen a document isn't open yet, or has been closed
 */
- (jboolean)addWithComAowagieTextElement:(id<ComAowagieTextElement>)element;

/*!
 @brief Signals that the <CODE>Document</CODE> was closed and that no other 
 <CODE>Elements</CODE> will be added.
 */
- (void)close;

/*!
 @brief Converts a <CODE>String</CODE> into a <CODE>Byte</CODE> array
  according to the ISO-8859-1 codepage.
 @param text the text to be converted
 @return the conversion result
 */
+ (IOSByteArray *)getISOBytesWithNSString:(NSString *)text;

/*!
 @brief Checks if the stream is to be closed on document close
 @return true if the stream is closed on document close
 */
- (jboolean)isCloseStream;

/*!
 @brief Checks if writing is paused.
 @return <CODE>true</CODE> if writing temporarily has to be paused, <CODE>false</CODE> otherwise.
 */
- (jboolean)isPaused;

/*!
 @brief Signals that an new page has to be started.
 <P>
  This does nothing. Has to be overridden if needed.
 @return <CODE>true</CODE> if the page was added, <CODE>false</CODE> if not.
 */
- (jboolean)newPage OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Signals that the <CODE>Document</CODE> was opened.
 */
- (void)open;

/*!
 @brief Resets the footer of this document.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  footers.
 */
- (void)resetFooter;

/*!
 @brief Resets the header of this document.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  headers.
 */
- (void)resetHeader;

/*!
 @brief Sets the page number to 0.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  pagenumbers.
 */
- (void)resetPageCount;

/*!
 @brief Sets the close state of the stream after document close
 @param closeStream true if the stream is closed on document close
 */
- (void)setCloseStreamWithBoolean:(jboolean)closeStream;

/*!
 @brief Changes the footer of this document.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  footers.
 @param footer the new footer
 */
- (void)setFooterWithComAowagieTextHeaderFooter:(ComAowagieTextHeaderFooter *)footer;

/*!
 @brief Changes the header of this document.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  headers.
 @param header the new header
 */
- (void)setHeaderWithComAowagieTextHeaderFooter:(ComAowagieTextHeaderFooter *)header;

/*!
 - seealso: com.aowagie.text.DocListener#setMarginMirroring(boolean)
 */
- (jboolean)setMarginMirroringWithBoolean:(jboolean)MarginMirroring;

/*!
 - seealso: com.aowagie.text.DocListener#setMarginMirroring(boolean)
 @since 2.1.6
 */
- (jboolean)setMarginMirroringTopBottomWithBoolean:(jboolean)MarginMirroring;

/*!
 @brief Sets the margins.
 <P>
  This does nothing. Has to be overridden if needed.
 @param marginLeft the margin on the left
 @param marginRight the margin on the right
 @param marginTop the margin on the top
 @param marginBottom the margin on the bottom
 @return <CODE>false</CODE>
 */
- (jboolean)setMarginsWithFloat:(jfloat)marginLeft
                      withFloat:(jfloat)marginRight
                      withFloat:(jfloat)marginTop
                      withFloat:(jfloat)marginBottom;

/*!
 @brief Sets the page number.
 <P>
  This method should be overridden in the specific <CODE>DocWriter</CODE> classes
  derived from this abstract class if they actually support the use of
  pagenumbers.
 @param pageN the new page number
 */
- (void)setPageCountWithInt:(jint)pageN;

/*!
 @brief Sets the pagesize.
 @param pageSize the new pagesize
 @return a <CODE>boolean</CODE>
 */
- (jboolean)setPageSizeWithComAowagieTextRectangle:(ComAowagieTextRectangle *)pageSize;

#pragma mark Protected

- (instancetype)init;

/*!
 @brief Constructs a <CODE>DocWriter</CODE>.
 @param document The  <CODE> Document </CODE>  that has to be written
 @param os The  <CODE> OutputStream </CODE>  the writer has to write to.
 */
- (instancetype)initWithComAowagieTextDocument:(ComAowagieTextDocument *)document
                        withJavaIoOutputStream:(JavaIoOutputStream *)os;

@end

J2OBJC_EMPTY_STATIC_INIT(ComAowagieTextDocWriter)

J2OBJC_FIELD_SETTER(ComAowagieTextDocWriter, os_, ComAowagieTextPdfOutputStreamCounter *)

FOUNDATION_EXPORT void ComAowagieTextDocWriter_init(ComAowagieTextDocWriter *self);

FOUNDATION_EXPORT void ComAowagieTextDocWriter_initWithComAowagieTextDocument_withJavaIoOutputStream_(ComAowagieTextDocWriter *self, ComAowagieTextDocument *document, JavaIoOutputStream *os);

FOUNDATION_EXPORT IOSByteArray *ComAowagieTextDocWriter_getISOBytesWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(ComAowagieTextDocWriter)

#endif

#pragma pop_macro("INCLUDE_ALL_DocWriter")
