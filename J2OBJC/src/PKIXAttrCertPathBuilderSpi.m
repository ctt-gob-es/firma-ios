//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXAttrCertPathBuilderSpi.java
//

#include "ASN1ObjectIdentifier.h"
#include "AnnotatedException.h"
#include "BCAttributeCertificateIssuer.h"
#include "BouncyCastleProvider.h"
#include "CertPathValidatorUtilities.h"
#include "ExtCertPathBuilderException.h"
#include "ExtendedPKIXBuilderParameters.h"
#include "ExtendedPKIXParameters.h"
#include "Extension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PKIXAttrCertPathBuilderSpi.h"
#include "PKIXCertStoreSelector.h"
#include "PKIXExtendedBuilderParameters.h"
#include "PKIXExtendedParameters.h"
#include "Selector.h"
#include "Store.h"
#include "StoreException.h"
#include "X509AttributeCertStoreSelector.h"
#include "X509AttributeCertificate.h"
#include "X509CertStoreSelector.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/security/InvalidAlgorithmParameterException.h"
#include "java/security/Principal.h"
#include "java/security/PublicKey.h"
#include "java/security/cert/CertPath.h"
#include "java/security/cert/CertPathBuilderException.h"
#include "java/security/cert/CertPathBuilderResult.h"
#include "java/security/cert/CertPathBuilderSpi.h"
#include "java/security/cert/CertPathParameters.h"
#include "java/security/cert/CertPathValidator.h"
#include "java/security/cert/CertPathValidatorResult.h"
#include "java/security/cert/CertificateFactory.h"
#include "java/security/cert/CertificateParsingException.h"
#include "java/security/cert/PKIXBuilderParameters.h"
#include "java/security/cert/PKIXCertPathBuilderResult.h"
#include "java/security/cert/PKIXCertPathValidatorResult.h"
#include "java/security/cert/PolicyNode.h"
#include "java/security/cert/TrustAnchor.h"
#include "java/security/cert/X509Certificate.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/security/auth/x500/X500Principal.h"

#if !__has_feature(objc_arc)
#error "PKIXAttrCertPathBuilderSpi must be compiled with ARC (-fobjc-arc)"
#endif

@interface OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi () {
 @public
  JavaLangException *certPathException_;
}

- (id<JavaSecurityCertCertPathBuilderResult>)buildWithOrgSpongycastleX509X509AttributeCertificate:(id<OrgSpongycastleX509X509AttributeCertificate>)attrCert
                                                              withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                                           withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:(OrgSpongycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                                 withJavaUtilList:(id<JavaUtilList>)tbvPath;

@end

J2OBJC_FIELD_SETTER(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi, certPathException_, JavaLangException *)

__attribute__((unused)) static id<JavaSecurityCertCertPathBuilderResult> OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithOrgSpongycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi *self, id<OrgSpongycastleX509X509AttributeCertificate> attrCert, JavaSecurityCertX509Certificate *tbvCert, OrgSpongycastleJcajcePKIXExtendedBuilderParameters *pkixParams, id<JavaUtilList> tbvPath);

#line 1 "/Users/desarrolloabamobile/Documents/JAVA/pades-ios/src/main/java/org/spongycastle/jce/provider/PKIXAttrCertPathBuilderSpi.java"


#line 47
@implementation OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 47
- (instancetype)init {
  OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 57
- (id<JavaSecurityCertCertPathBuilderResult>)engineBuildWithJavaSecurityCertCertPathParameters:(id<JavaSecurityCertCertPathParameters>)params {
  
#line 60
  if (!([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) &&
#line 61
  !([params isKindOfClass:[OrgSpongycastleX509ExtendedPKIXBuilderParameters class]]) &&
#line 62
  !([params isKindOfClass:[OrgSpongycastleJcajcePKIXExtendedBuilderParameters class]])) {
    
#line 64
    @throw new_JavaSecurityInvalidAlgorithmParameterException_initWithNSString_(JreStrcat("$$$$C", @"Parameters must be an instance of ",
#line 66
    [JavaSecurityCertPKIXBuilderParameters_class_() getName], @" or ",
#line 67
    [OrgSpongycastleJcajcePKIXExtendedBuilderParameters_class_() getName], '.'));
  }
  
#line 71
  id<JavaUtilList> targetStores = new_JavaUtilArrayList_init();
  
#line 73
  OrgSpongycastleJcajcePKIXExtendedBuilderParameters *paramsPKIX;
  if ([params isKindOfClass:[JavaSecurityCertPKIXBuilderParameters class]]) {
    
#line 76
    OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder *paramsPKIXBldr = new_OrgSpongycastleJcajcePKIXExtendedBuilderParameters_Builder_initWithJavaSecurityCertPKIXBuilderParameters_((JavaSecurityCertPKIXBuilderParameters *) params);
    
#line 78
    if ([params isKindOfClass:[OrgSpongycastleX509ExtendedPKIXParameters class]]) {
      
#line 80
      OrgSpongycastleX509ExtendedPKIXBuilderParameters *extPKIX = (OrgSpongycastleX509ExtendedPKIXBuilderParameters *) cast_chk(params, [OrgSpongycastleX509ExtendedPKIXBuilderParameters class]);
      
#line 82
      (void) [paramsPKIXBldr addExcludedCertsWithJavaUtilSet:[((OrgSpongycastleX509ExtendedPKIXBuilderParameters *) nil_chk(extPKIX)) getExcludedCerts]];
      (void) [paramsPKIXBldr setMaxPathLengthWithInt:[extPKIX getMaxPathLength]];
      targetStores = [extPKIX getStores];
    }
    
#line 87
    paramsPKIX = [paramsPKIXBldr build];
  }
  else {
    
#line 91
    paramsPKIX = (OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) cast_chk(params, [OrgSpongycastleJcajcePKIXExtendedBuilderParameters class]);
  }
  
#line 94
  id<JavaUtilCollection> targets;
  id<JavaUtilIterator> targetIter;
  id<JavaUtilList> certPathList = new_JavaUtilArrayList_init();
  id<OrgSpongycastleX509X509AttributeCertificate> cert;
  
#line 101
  id<OrgSpongycastleUtilSelector> certSelect = [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(paramsPKIX)) getBaseParameters])) getTargetConstraints];
  if (!([certSelect isKindOfClass:[OrgSpongycastleX509X509AttributeCertStoreSelector class]])) {
    
#line 104
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(JreStrcat("$$$$$", @"TargetConstraints must be an instance of ",
#line 106
    [OrgSpongycastleX509X509AttributeCertStoreSelector_class_() getName], @" for ",
#line 107
    [[self java_getClass] getName], @" class."));
  }
  
#line 111
  @try {
    
#line 113
    targets = OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithOrgSpongycastleX509X509AttributeCertStoreSelector_withJavaUtilList_((OrgSpongycastleX509X509AttributeCertStoreSelector *) cast_chk(certSelect, [OrgSpongycastleX509X509AttributeCertStoreSelector class]), targetStores);
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 117
    @throw new_OrgSpongycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(@"Error finding target attribute certificate.", e);
  }
  
#line 120
  if ([((id<JavaUtilCollection>) nil_chk(targets)) isEmpty]) {
    
#line 122
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(
#line 123
    @"No attribute certificate found matching targetContraints.");
  }
  
#line 126
  id<JavaSecurityCertCertPathBuilderResult> result = nil;
  
#line 129
  targetIter = [targets iterator];
  while ([((id<JavaUtilIterator>) nil_chk(targetIter)) hasNext] && result == nil) {
    
#line 132
    cert = (id<OrgSpongycastleX509X509AttributeCertificate>) cast_check([targetIter next], OrgSpongycastleX509X509AttributeCertificate_class_());
    
#line 134
    OrgSpongycastleX509X509CertStoreSelector *selector = new_OrgSpongycastleX509X509CertStoreSelector_init();
    IOSObjectArray *principals = [((OrgSpongycastleX509BCAttributeCertificateIssuer *) nil_chk([((id<OrgSpongycastleX509X509AttributeCertificate>) nil_chk(cert)) getIssuer])) getPrincipals];
    id<JavaUtilSet> issuers = new_JavaUtilHashSet_init();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(principals))->size_; i++) {
      
#line 139
      @try {
        
#line 141
        if ([IOSObjectArray_Get(principals, i) isKindOfClass:[JavaxSecurityAuthX500X500Principal class]]) {
          
#line 143
          [selector setSubjectWithByteArray:[((JavaxSecurityAuthX500X500Principal *) nil_chk(((JavaxSecurityAuthX500X500Principal *) cast_chk(IOSObjectArray_Get(principals, i), [JavaxSecurityAuthX500X500Principal class])))) getEncoded]];
        }
        OrgSpongycastleJcajcePKIXCertStoreSelector *certStoreSelector = [new_OrgSpongycastleJcajcePKIXCertStoreSelector_Builder_initWithJavaSecurityCertCertSelector_(selector) build];
        [issuers addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certStoreSelector, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertStores])];
        [issuers addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findCertificatesWithOrgSpongycastleJcajcePKIXCertStoreSelector_withJavaUtilList_(certStoreSelector, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([paramsPKIX getBaseParameters])) getCertificateStores])];
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 151
        @throw new_OrgSpongycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(
#line 152
        @"Public key certificate for attribute certificate cannot be searched.",
#line 153
        e);
      }
      @catch (JavaIoIOException *e) {
        
#line 157
        @throw new_OrgSpongycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(
#line 158
        @"cannot encode X500Principal.",
#line 159
        e);
      }
    }
    if ([issuers isEmpty]) {
      
#line 164
      @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(
#line 165
      @"Public key certificate for attribute certificate cannot be found.");
    }
    id<JavaUtilIterator> it = [issuers iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && result == nil) {
      
#line 170
      result = OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithOrgSpongycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, cert, (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]), paramsPKIX, certPathList);
    }
  }
  
#line 174
  if (result == nil && certPathException_ != nil) {
    
#line 176
    @throw new_OrgSpongycastleJceExceptionExtCertPathBuilderException_initWithNSString_withJavaLangThrowable_(
#line 177
    @"Possible certificate chain could not be validated.",
#line 178
    certPathException_);
  }
  
#line 181
  if (result == nil && certPathException_ == nil) {
    
#line 183
    @throw new_JavaSecurityCertCertPathBuilderException_initWithNSString_(
#line 184
    @"Unable to find certificate chain.");
  }
  
#line 187
  return result;
}


#line 192
- (id<JavaSecurityCertCertPathBuilderResult>)buildWithOrgSpongycastleX509X509AttributeCertificate:(id<OrgSpongycastleX509X509AttributeCertificate>)attrCert
                                                              withJavaSecurityCertX509Certificate:(JavaSecurityCertX509Certificate *)tbvCert
                                           withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:(OrgSpongycastleJcajcePKIXExtendedBuilderParameters *)pkixParams
                                                                                 withJavaUtilList:(id<JavaUtilList>)tbvPath {
  return OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithOrgSpongycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, attrCert, tbvCert, pkixParams, tbvPath);
}


#line 334
+ (id<JavaUtilCollection>)findCertificatesWithOrgSpongycastleX509X509AttributeCertStoreSelector:(OrgSpongycastleX509X509AttributeCertStoreSelector *)certSelect
                                                                               withJavaUtilList:(id<JavaUtilList>)certStores {
  return OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithOrgSpongycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(certSelect, certStores);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaSecurityCertCertPathBuilderResult;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0xc, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(engineBuildWithJavaSecurityCertCertPathParameters:);
  methods[2].selector = @selector(buildWithOrgSpongycastleX509X509AttributeCertificate:withJavaSecurityCertX509Certificate:withOrgSpongycastleJcajcePKIXExtendedBuilderParameters:withJavaUtilList:);
  methods[3].selector = @selector(findCertificatesWithOrgSpongycastleX509X509AttributeCertStoreSelector:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "certPathException_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "engineBuild", "LJavaSecurityCertCertPathParameters;", "LJavaSecurityCertCertPathBuilderException;LJavaSecurityInvalidAlgorithmParameterException;", "build", "LOrgSpongycastleX509X509AttributeCertificate;LJavaSecurityCertX509Certificate;LOrgSpongycastleJcajcePKIXExtendedBuilderParameters;LJavaUtilList;", "findCertificates", "LOrgSpongycastleX509X509AttributeCertStoreSelector;LJavaUtilList;", "LOrgSpongycastleJceProviderAnnotatedException;" };
  static const J2ObjcClassInfo _OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi = { "PKIXAttrCertPathBuilderSpi", "org.spongycastle.jce.provider", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi;
}

@end


#line 47
void OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_init(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi *self) {
  JavaSecurityCertCertPathBuilderSpi_init(self);
}


#line 47
OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi *new_OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_init() {
  J2OBJC_NEW_IMPL(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi, init)
}


#line 47
OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi *create_OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_init() {
  J2OBJC_CREATE_IMPL(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi, init)
}


#line 192
id<JavaSecurityCertCertPathBuilderResult> OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithOrgSpongycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi *self, id<OrgSpongycastleX509X509AttributeCertificate> attrCert, JavaSecurityCertX509Certificate *tbvCert, OrgSpongycastleJcajcePKIXExtendedBuilderParameters *pkixParams, id<JavaUtilList> tbvPath) {
  
#line 199
  if ([((id<JavaUtilList>) nil_chk(tbvPath)) containsWithId:tbvCert]) {
    
#line 201
    return nil;
  }
  
#line 205
  if ([((id<JavaUtilSet>) nil_chk([((OrgSpongycastleJcajcePKIXExtendedBuilderParameters *) nil_chk(pkixParams)) getExcludedCerts])) containsWithId:tbvCert]) {
    
#line 207
    return nil;
  }
  
#line 210
  if ([pkixParams getMaxPathLength] != -1) {
    
#line 212
    if ([tbvPath size] - 1 > [pkixParams getMaxPathLength]) {
      
#line 214
      return nil;
    }
  }
  
#line 218
  [tbvPath addWithId:tbvCert];
  
#line 220
  JavaSecurityCertCertificateFactory *cFact;
  JavaSecurityCertCertPathValidator *validator;
  id<JavaSecurityCertCertPathBuilderResult> builderResult = nil;
  
#line 224
  @try {
    
#line 226
    cFact = JavaSecurityCertCertificateFactory_getInstanceWithNSString_withNSString_(@"X.509", OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
    validator = JavaSecurityCertCertPathValidator_getInstanceWithNSString_withNSString_(@"RFC3281", OrgSpongycastleJceProviderBouncyCastleProvider_PROVIDER_NAME);
  }
  @catch (JavaLangException *e) {
    
#line 232
    @throw new_JavaLangRuntimeException_initWithNSString_(
#line 233
    @"Exception creating support classes.");
  }
  
#line 236
  @try {
    
#line 239
    if (OrgSpongycastleJceProviderCertPathValidatorUtilities_isIssuerTrustAnchorWithJavaSecurityCertX509Certificate_withJavaUtilSet_withNSString_(tbvCert, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getTrustAnchors],
#line 240
    [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getSigProvider])) {
      
#line 242
      JavaSecurityCertCertPath *certPath;
      JavaSecurityCertPKIXCertPathValidatorResult *result;
      @try {
        
#line 246
        certPath = [((JavaSecurityCertCertificateFactory *) nil_chk(cFact)) generateCertPathWithJavaUtilList:tbvPath];
      }
      @catch (JavaLangException *e) {
        
#line 250
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 251
        @"Certification path could not be constructed from certificate list.",
#line 252
        e);
      }
      
#line 255
      @try {
        
#line 257
        result = (JavaSecurityCertPKIXCertPathValidatorResult *) cast_chk([((JavaSecurityCertCertPathValidator *) nil_chk(validator)) validateWithJavaSecurityCertCertPath:
#line 258
        certPath withJavaSecurityCertCertPathParameters:pkixParams], [JavaSecurityCertPKIXCertPathValidatorResult class]);
      }
      @catch (JavaLangException *e) {
        
#line 262
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 263
        @"Certification path could not be validated.",
#line 264
        e);
      }
      
#line 267
      return new_JavaSecurityCertPKIXCertPathBuilderResult_initWithJavaSecurityCertCertPath_withJavaSecurityCertTrustAnchor_withJavaSecurityCertPolicyNode_withJavaSecurityPublicKey_(certPath, [((JavaSecurityCertPKIXCertPathValidatorResult *) nil_chk(result)) getTrustAnchor],
#line 268
      [result getPolicyTree], [result getPublicKey]);
    }
    else {
      
#line 274
      id<JavaUtilList> stores = new_JavaUtilArrayList_init();
      
#line 276
      [stores addAllWithJavaUtilCollection:[((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertificateStores]];
      
#line 278
      @try {
        
#line 280
        [stores addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_getAdditionalStoresFromAltNamesWithByteArray_withJavaUtilMap_([((JavaSecurityCertX509Certificate *) nil_chk(tbvCert)) getExtensionValueWithNSString:[((OrgSpongycastleAsn1ASN1ObjectIdentifier *) nil_chk(JreLoadStatic(OrgSpongycastleAsn1X509Extension, issuerAlternativeName))) getId]], [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getNamedCertificateStoreMap])];
      }
      @catch (JavaSecurityCertCertificateParsingException *e) {
        
#line 284
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 285
        @"No additional X.509 stores can be added from certificate locations.",
#line 286
        e);
      }
      id<JavaUtilCollection> issuers = new_JavaUtilHashSet_init();
      
#line 291
      @try {
        
#line 293
        [issuers addAllWithJavaUtilCollection:OrgSpongycastleJceProviderCertPathValidatorUtilities_findIssuerCertsWithJavaSecurityCertX509Certificate_withJavaUtilList_withJavaUtilList_(tbvCert, [((OrgSpongycastleJcajcePKIXExtendedParameters *) nil_chk([pkixParams getBaseParameters])) getCertStores], stores)];
      }
      @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
        
#line 297
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 298
        @"Cannot find issuer certificate for certificate in certification path.",
#line 299
        e);
      }
      if ([issuers isEmpty]) {
        
#line 303
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_(
#line 304
        @"No issuer certificate for certificate in certification path found.");
      }
      id<JavaUtilIterator> it = [issuers iterator];
      
#line 308
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && builderResult == nil) {
        
#line 310
        JavaSecurityCertX509Certificate *issuer = (JavaSecurityCertX509Certificate *) cast_chk([it next], [JavaSecurityCertX509Certificate class]);
        
#line 313
        if ([((JavaxSecurityAuthX500X500Principal *) nil_chk([((JavaSecurityCertX509Certificate *) nil_chk(issuer)) getIssuerX500Principal])) isEqual:
#line 314
        [issuer getSubjectX500Principal]]) {
          
#line 316
          continue;
        }
        builderResult = OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_buildWithOrgSpongycastleX509X509AttributeCertificate_withJavaSecurityCertX509Certificate_withOrgSpongycastleJcajcePKIXExtendedBuilderParameters_withJavaUtilList_(self, attrCert, issuer, pkixParams, tbvPath);
      }
    }
  }
  @catch (OrgSpongycastleJceProviderAnnotatedException *e) {
    
#line 324
    self->certPathException_ = new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 325
    @"No valid certification path could be build.", e);
  }
  if (builderResult == nil) {
    
#line 329
    [tbvPath removeWithId:tbvCert];
  }
  return builderResult;
}


#line 334
id<JavaUtilCollection> OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_findCertificatesWithOrgSpongycastleX509X509AttributeCertStoreSelector_withJavaUtilList_(OrgSpongycastleX509X509AttributeCertStoreSelector *certSelect, id<JavaUtilList> certStores) {
  OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi_initialize();
  
#line 338
  id<JavaUtilSet> certs = new_JavaUtilHashSet_init();
  id<JavaUtilIterator> iter = [((id<JavaUtilList>) nil_chk(certStores)) iterator];
  
#line 341
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    
#line 343
    id obj = [iter next];
    
#line 345
    if ([OrgSpongycastleUtilStore_class_() isInstance:obj]) {
      
#line 347
      id<OrgSpongycastleUtilStore> certStore = (id<OrgSpongycastleUtilStore>) cast_check(obj, OrgSpongycastleUtilStore_class_());
      @try {
        
#line 350
        [certs addAllWithJavaUtilCollection:[((id<OrgSpongycastleUtilStore>) nil_chk(certStore)) getMatchesWithOrgSpongycastleUtilSelector:certSelect]];
      }
      @catch (OrgSpongycastleUtilStoreException *e) {
        
#line 354
        @throw new_OrgSpongycastleJceProviderAnnotatedException_initWithNSString_withJavaLangThrowable_(
#line 355
        @"Problem while picking certificates from X.509 store.", e);
      }
    }
  }
  return certs;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgSpongycastleJceProviderPKIXAttrCertPathBuilderSpi)
